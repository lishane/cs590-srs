Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertexFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.Allocation: void resize(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Allocation.java
Inconsistency (Non-Annotation):<android.hardware.radio.RadioTuner.Callback: void onError(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\hardware\radio\RadioTuner.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int getProvisionedValue(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: String getProvisionedStringValue(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedValue(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConfig.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConfig.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: CullMode getCullMode()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramRaster.Builder: ProgramRaster create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramRaster.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean shouldVibrate(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int getVibrateSetting(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: void setVibrateSetting(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isBluetoothA2dpOn()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: boolean isWiredHeadsetOn()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AudioManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiEnterpriseConfig.java
Inconsistency (Non-Annotation):<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\opengl\GLES30.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getInputBuffers()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaCodec.java
Inconsistency (Non-Annotation):<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaCodec.java
Inconsistency (Non-Annotation):<androidx.slice.builders.ListBuilder.InputRangeBuilder: InputRangeBuilder setThumb(Icon)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\ListBuilder.java
Inconsistency (Non-Annotation):<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\ListBuilder.java
Inconsistency (Non-Annotation):<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\ListBuilder.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: void cancelWps(WpsCallback)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiManager.java
Inconsistency (Non-Annotation):<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\drawable\DrawableContainer.java
Inconsistency (Non-Annotation):<com.android.server.notification.NotificationRecord: int getUserId()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\notification\NotificationRecord.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getHeight()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: int getWidth()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void pause()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void resume()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindRootScript(Script)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RenderScriptGL.java
Inconsistency (Non-Annotation):<android.net.NetworkInfo: String getReason()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkInfo.java
Inconsistency (Non-Annotation):<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\slice\Slice.java
Inconsistency (Non-Annotation):<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telecom\Connection.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: void clearAccounts()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telecom\TelecomManager.java
Inconsistency (Non-Annotation):<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telecom\TelecomManager.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\service\persistentdata\PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\service\persistentdata\PersistentDataBlockManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void setEnhanced4gLteModeSetting(Context,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isVtEnabledByPlatform(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isVtEnabledByUser(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void setVtSetting(Context,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isWfcEnabledByUser(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void setWfcSetting(Context,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: int getWfcMode(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: int getWfcMode()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void setWfcMode(Context,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: int getWfcMode(Context,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void setWfcMode(Context,int,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void updateImsServiceConfig(Context,int,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void addRegistrationListener(int,ImsConnectionStateListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void addRegistrationListener(ImsConnectionStateListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<com.android.ims.ImsManager: void factoryReset(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsManager.java
Inconsistency (Non-Annotation):<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\view\textclassifier\TextClassification.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: String getName()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: int getIndexEntryCount()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\FileA3D.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: int getCodecCount()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaCodecList.java
Inconsistency (Non-Annotation):<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaCodecList.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getVertexAllocationCount()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getVertexAllocation(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: int getPrimitiveCount()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh: Primitive getPrimitive(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Type)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.Builder: Mesh create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.AllocationBuilder: Mesh create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Mesh.java
Inconsistency (Non-Annotation):<android.app.StatsManager: boolean addConfiguration(long,byte[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.app.StatsManager: boolean removeConfiguration(long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,PendingIntent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.app.StatsManager: boolean setDataFetchOperation(long,PendingIntent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.app.StatsManager: byte[] getData(long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.app.StatsManager: byte[] getMetadata()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\StatsManager.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\accessibilityservice\AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\accessibilityservice\AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\accessibilityservice\AccessibilityServiceInfo.java
Inconsistency (Non-Annotation):<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\locksettings\recoverablekeystore\RecoverableKeyStoreManager.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void pause()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void resume()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void destroyRenderScriptGL()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSTextureView.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: TelephonyManager getDefault()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telephony\TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telephony\TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telephony\TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telephony\TelephonyManager.java
Inconsistency (Non-Annotation):<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\telephony\TelephonyManager.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragment.Builder: ProgramFragment create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragment.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaRecorder.java
Inconsistency (Non-Annotation):<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaRecorder.java
Inconsistency (Non-Annotation):<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\Plugin.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int save(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(RectF,Paint,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\Canvas.java
Inconsistency (Non-Annotation):<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\Canvas.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Font.java
Inconsistency (Non-Annotation):<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Font.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\drawable\AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\drawable\AnimatedImageDrawable.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void pause()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void resume()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\RSSurfaceView.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void startUpdate(View)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.internal.widget.PagerAdapter: void finishUpdate(View)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\PagerAdapter.java
Inconsistency (Non-Annotation):<com.android.systemui.plugins.Plugin: int getVersion()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\systemui\plugins\Plugin.java
Inconsistency (Non-Annotation):<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\drawable\Drawable.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\ConnectivityManager.java
Inconsistency (Non-Annotation):<android.net.ConnectivityManager: void reportInetCondition(int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\ConnectivityManager.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: IActivityManager getDefault()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: boolean isSystemReady()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ActivityManagerNative.java
Inconsistency (Non-Annotation):<android.drm.DrmSupportInfo: String getDescriprition()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\drm\DrmSupportInfo.java
Inconsistency (Non-Annotation):<android.renderscript.Element: Element MATRIX4X4(RenderScript)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\Element.java
Inconsistency (Non-Annotation):<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\KeyguardManager.java
Inconsistency (Non-Annotation):<androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat: boolean isHeading()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\view\accessibility\AccessibilityNodeInfoCompat.java
Inconsistency (Non-Annotation):<android.media.MediaPlayer: void setAudioStreamType(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaPlayer.java
Inconsistency (Non-Annotation):<android.support.v4.media.session.PlaybackStateCompat.Builder: Builder setErrorMessage(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\support\v4\media\session\PlaybackStateCompat.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ScriptGroup: void execute()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ScriptGroup.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramFragmentFixedFunction.java
Inconsistency (Non-Annotation):<android.app.Notification.Builder: Builder addPerson(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
Inconsistency (Non-Annotation):<android.app.Notification.MessagingStyle.Message: CharSequence getSender()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
Inconsistency (Non-Annotation):<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\AsyncPlayer.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConnectionStateListener: void onImsResumed()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConnectionStateListener.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConnectionStateListener: void onImsSuspended()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConnectionStateListener.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConnectionStateListener: void onFeatureCapabilityChanged(int,int[],int[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConnectionStateListener.java
Inconsistency (Non-Annotation):<com.android.ims.ImsConnectionStateListener: void onVoiceMessageCountChanged(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsConnectionStateListener.java
Inconsistency (Non-Annotation):<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\view\accessibility\AccessibilityNodeInfo.java
Inconsistency (Non-Annotation):<android.media.MediaDrm: void releaseAllSecureStops()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\media\MediaDrm.java
Inconsistency (Non-Annotation):<androidx.leanback.widget.picker.Picker: CharSequence getSeparator()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\leanback\widget\picker\Picker.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: int getInputCount()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex: Element getInput(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertex.java
Inconsistency (Non-Annotation):<android.renderscript.ProgramVertex.Builder: ProgramVertex create()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\renderscript\ProgramVertex.java
Inconsistency (Non-Annotation):<com.android.ims.ImsUt: void queryCallBarring(int,Message)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsUt.java
Inconsistency (Non-Annotation):<com.android.ims.ImsUt: void updateCallBarring(int,int,Message,String[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ims\ImsUt.java
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>
/**
 * Convert a dialing number to BCD byte array
 *
 * @param number dialing number string. If the dialing number starts with '+', set to
 * international TOA
 *
 * @return BCD byte array
 *
 * @deprecated use {@link #numberToCalledPartyBCD(String, int)} instead. Calling this method
 * is equivalent to calling {@link #numberToCalledPartyBCD(String, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(String)>    ---->    #numberToCalledPartyBCD(String, int)
<androidx.viewpager.widget.PagerAdapter: Object instantiateItem(View,int)>
/**
 * Create the page for the given position.  The adapter is responsible
 * for adding the view to the container given here, although it only
 * must ensure this is done by the time it returns from
 * {@link #finishUpdate(ViewGroup)}.
 *
 * @param container The containing View in which the page will be shown.
 * @param position The page position to be instantiated.
 * @return Returns an Object representing the new page.  This does not
 * need to be a View, but can be some other container of the page.
 *
 * @deprecated Use {@link #instantiateItem(ViewGroup, int)}
 */
====>[PUBLIC]<androidx.viewpager.widget.PagerAdapter: Object instantiateItem(View,int)>    ---->    #instantiateItem(ViewGroup, int)
<java.util.jar.Pack200.Packer: void removePropertyChangeListener(PropertyChangeListener)>
/**
 * Remove a listener for PropertyChange events, added by
 * the {@link #addPropertyChangeListener}.
 *
 * <p> The default implementation of this method does nothing and has
 * no side-effects.</p>
 *
 * <p><b>WARNING:</b> This method is omitted from the interface
 * declaration in all subset Profiles of Java SE that do not include
 * the {@code java.beans} package. </p>
 *
 * @see #addPropertyChangeListener
 * @param listener  The PropertyChange listener to be removed.
 * @deprecated The dependency on {@code PropertyChangeListener} creates
 * a significant impediment to future modularization of the
 * Java platform. This method will be removed in a future
 * release.
 */
====>[PUBLIC]<java.util.jar.Pack200.Packer: void removePropertyChangeListener(PropertyChangeListener)>    ---->
<android.net.Proxy: String getDefaultHost()>
/**
 * Return the default proxy host specified by the carrier.
 * @return String containing the host name or null if there is no proxy for
 * this carrier.
 * @deprecated Use standard java vm proxy values to find the host, port and
 * exclusion list.  This call ignores the exclusion list and no
 * longer reports only mobile-data apn-based proxy values.
 */
====>[PUBLIC]<android.net.Proxy: String getDefaultHost()>    ---->
<android.app.admin.DevicePolicyManager: String getDeviceInitializerApp()>
/**
 * @hide
 * @deprecated Do not use
 * @removed
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: String getDeviceInitializerApp()>    ---->
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set primitive type to the builder object
 *
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Primitive)>    ---->
<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>
/**
 * Adds a cache entry to the HTTP cache for the specicifed URL. Also closes
 * the cache entry's output stream.
 *
 * @param url the URL for which the cache entry should be added
 * @param cacheResult the cache entry to add
 * @deprecated Access to the HTTP cache will be removed in a future release.
 */
====>[PUBLIC]<android.webkit.CacheManager: void saveCacheFile(String,CacheResult)>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>

====>[PUBLIC]<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>    ---->
<com.android.settingslib.core.instrumentation.LogWriter: void action(Context,int,int)>
/**
 * Logs an user action.
 * @deprecated use {@link #action(int, int, Pair[])}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.LogWriter: void action(Context,int,int)>    ---->    #action(int, int, Pair[])
<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void setRenderScriptGL(RenderScriptGL)>    ---->
<android.telecom.RemoteConference: void setAudioState(AudioState)>
/**
 * Request to change the conference's audio routing to the specified state. The specified state
 * can include audio routing (Bluetooth, Speaker, etc) and muting state.
 *
 * @see android.telecom.AudioState
 * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.RemoteConference: void setAudioState(AudioState)>    ---->    #setCallAudioState(CallAudioState)
<android.os.storage.StorageManager: long benchmark(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.storage.StorageManager: long benchmark(String)>    ---->
Inconsistency (Non-Documentation):<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkPolicyManager.java
<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>
/**
 * Check if given UID can have a {@link #setUidPolicy(int, int)} defined,
 * usually to protect critical system services.
 */
====>[PUBLIC]<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(Context,int)>    ---->
<android.telecom.StatusHints: Drawable getIcon(Context)>
/**
 * @return An icon displayed in the in-call UI.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: Drawable getIcon(Context)>    ---->
<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>
/**
 * Sub channel ID. E.g 1 for HD radio HD1
 * @return the program sub channel
 * @deprecated Use {@link getSelector()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: int getSubChannel()>    ---->    getSelector()
<android.app.Activity: boolean enterPictureInPictureMode(PictureInPictureArgs)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Activity: boolean enterPictureInPictureMode(PictureInPictureArgs)>    ---->
<com.android.ims.ImsManager: boolean isVtEnabledByPlatform(Context)>
/**
 * Returns a platform configuration for VT which may override the user setting.
 *
 * Note: VT presumes that VoLTE is enabled (these are configuration settings
 * which must be done correctly).
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isVtEnabledByPlatform()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isVtEnabledByPlatform(Context)>    ---->    #isVtEnabledByPlatform()
<androidx.recyclerview.widget.RecyclerView.LayoutManager: void setAutoMeasureEnabled(boolean)>
/**
 * Defines whether the measuring pass of layout should use the AutoMeasure mechanism of
 * {@link RecyclerView} or if it should be done by the LayoutManager's implementation of
 * {@link LayoutManager#onMeasure(Recycler, State, int, int)}.
 *
 * @param enabled <code>True</code> if layout measurement should be done by the
 * RecyclerView, <code>false</code> if it should be done by this
 * LayoutManager.
 *
 * @see #isAutoMeasureEnabled()
 *
 * @deprecated Implementors of LayoutManager should define whether or not it uses
 * AutoMeasure by overriding {@link #isAutoMeasureEnabled()}.
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.LayoutManager: void setAutoMeasureEnabled(boolean)>    ---->    #isAutoMeasureEnabled()
<android.security.keystore.recovery.RecoveryController: byte[] generateAndStoreKey(String,byte[])>
/**
 * Deprecated.
 * Generates a AES256/GCM/NoPADDING key called {@code alias} and loads it into the recoverable
 * key store. Returns the raw material of the key.
 *
 * @param alias The key alias.
 * @param account The account associated with the key
 * @throws InternalRecoveryServiceException if an unexpected error occurred in the recovery
 * service.
 * @throws LockScreenRequiredException if the user has not set a lock screen. This is required
 * to generate recoverable keys, as the snapshots are encrypted using a key derived from the
 * lock screen.
 * @deprecated Use {@link #generateKey(String)}
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: byte[] generateAndStoreKey(String,byte[])>    ---->    #generateKey(String)
<androidx.core.widget.ScrollerCompat: ScrollerCompat create(Context)>
/**
 * @deprecated Use {@link OverScroller} constructor directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: ScrollerCompat create(Context)>    ---->    OverScroller
<java.util.Date: String toLocaleString()>
/**
 * Creates a string representation of this <tt>Date</tt> object in an
 * implementation-dependent form. The intent is that the form should
 * be familiar to the user of the Java application, wherever it may
 * happen to be running. The intent is comparable to that of the
 * "<code>%c</code>" format supported by the <code>strftime()</code>
 * function of ISO&nbsp;C.
 *
 * @return  a string representation of this date, using the locale
 * conventions.
 * @see     java.text.DateFormat
 * @see     java.util.Date#toString()
 * @see     java.util.Date#toGMTString()
 * @deprecated As of JDK version 1.1,
 * replaced by <code>DateFormat.format(Date date)</code>.
 */
====>[PUBLIC]<java.util.Date: String toLocaleString()>    ---->
<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>
/**
 * End a child object. Pass in the token from the correspoinding startRepeatedObject call.
 *
 * @deprecated Use #end() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void endRepeatedObject(long)>    ---->    #end()
<android.widget.ImageView: void setAlpha(int)>
/**
 * Sets the alpha value that should be applied to the image.
 *
 * @param alpha the alpha value that should be applied to the image
 *
 * @deprecated use #setImageAlpha(int) instead
 */
====>[PUBLIC]<android.widget.ImageView: void setAlpha(int)>    ---->    #setImageAlpha(int)
<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>
/**
 * Synthesizes the given text to a file using the specified parameters.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param text The text that should be synthesized. No longer than
 * {@link #getMaxSpeechInputLength()} characters.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 * @param filename Absolute file filename to write the generated audio data to.It should be
 * something like "/sdcard/myappsounds/mysound.wav".
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the synthesizeToFile operation.
 * @deprecated As of API level 21, replaced by
 * {@link #synthesizeToFile(CharSequence, Bundle, File, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int synthesizeToFile(String,HashMap<String, String>,String)>    ---->    #synthesizeToFile(CharSequence, Bundle, File, String)
<android.app.Activity: void setProgress(int)>
/**
 * Sets the progress for the progress bars in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param progress The progress for the progress bar. Valid ranges are from
 * 0 to 10000 (both inclusive). If 10000 is given, the progress
 * bar will be completely filled and will fade out.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgress(int)>    ---->
<java.lang.SecurityManager: boolean inClassLoader()>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: boolean inClassLoader()>    ---->    #checkPermission
<android.os.StatFs: int getBlockCount()>
/**
 * @deprecated Use {@link #getBlockCountLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getBlockCount()>    ---->    #getBlockCountLong()
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedUInt64(long,long)>    ---->    #write
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set type to the builder
 *
 * @param p index set primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetType(Primitive)>    ---->
<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>
/**
 * Write a single proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeInt64(long,long)>    ---->    #write
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
 * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
 * (only one per field) if specified.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale, boolean, boolean)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>    ---->    #DigitsKeyListener(Locale, boolean, boolean)
<android.os.Environment: File getUserConfigDirectory(int)>
/**
 * Returns the config directory for a user. This is for use by system
 * services to store files relating to the user which should be readable by
 * any app running as that user.
 *
 * @deprecated This directory is valid and still exists, but callers should
 * <em>strongly</em> consider switching to
 * {@link #getDataMiscCeDirectory(int)} which is protected with
 * user credentials or {@link #getDataMiscDeDirectory(int)}
 * which supports fast user wipe.
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File getUserConfigDirectory(int)>    ---->    #getDataMiscCeDirectory(int)
<android.text.style.ImageSpan: void <init>(Bitmap)>
/**
 * @deprecated Use {@link #ImageSpan(Context, Bitmap)} instead.
 */
====>[PUBLIC]<android.text.style.ImageSpan: void <init>(Bitmap)>    ---->    #ImageSpan(Context, Bitmap)
<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.net.NetworkPolicyManager: Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy)>    ---->
<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>
/**
 * Simulate touching a specific location and dragging to a new location.
 *
 * @param test The test case that is being run
 * @param fromX X coordinate of the initial touch, in screen coordinates
 * @param toX Xcoordinate of the drag destination, in screen coordinates
 * @param fromY X coordinate of the initial touch, in screen coordinates
 * @param toY Y coordinate of the drag destination, in screen coordinates
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void drag(ActivityInstrumentationTestCase,float,float,float,float,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.view.View: void setDrawingCacheBackgroundColor(int)>
/**
 * Setting a solid background color for the drawing cache's bitmaps will improve
 * performance and memory usage. Note, though that this should only be used if this
 * view will always be drawn on top of a solid color.
 *
 * @param color The background color to use for the drawing cache's bitmap
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #buildDrawingCache()
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheBackgroundColor(int)>    ---->    #setLayerType(int, Paint)
<android.telephony.gsm.SmsMessage: String getEmailBody()>
/**
 * @return if isEmail() is true, body of the email sent through the gateway.
 * null otherwise
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getEmailBody()>    ---->
<java.sql.Date: void setMinutes(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #getMinutes
 */
====>[PUBLIC]<java.sql.Date: void setMinutes(int)>    ---->    #getMinutes
<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>
/**
 * Retrieve the set of input buffers.  Call this after start()
 * returns. After calling this method, any ByteBuffers
 * previously returned by an earlier call to this method MUST no
 * longer be used.
 *
 * @deprecated Use the new {@link #getInputBuffer} method instead
 * each time an input buffer is dequeued.
 *
 * <b>Note:</b> As of API 21, dequeued input buffers are
 * automatically {@link java.nio.Buffer#clear cleared}.
 *
 * <em>Do not use this method if using an input surface.</em>
 *
 * @throws IllegalStateException if not in the Executing state,
 * or codec is configured in asynchronous mode.
 * @throws MediaCodec.CodecException upon codec error.
 */
====>[PUBLIC]<android.media.MediaCodec: ByteBuffer[] getInputBuffers()>    ---->    #getInputBuffer
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
/**
 * Determine if there is at least one fingerprint enrolled.
 *
 * @return true if at least one fingerprint is enrolled, false otherwise
 * @deprecated See {@link BiometricPrompt} and
 * {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>    ---->    BiometricPrompt
<android.app.usage.StorageStatsManager: long getTotalBytes(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getTotalBytes(String)>    ---->
<androidx.lifecycle.ViewModelProviders.DefaultFactory: void <init>(Application)>
/**
 * Creates a {@code AndroidViewModelFactory}
 *
 * @param application an application to pass in {@link AndroidViewModel}
 * @deprecated Use {@link ViewModelProvider.AndroidViewModelFactory} or
 * {@link ViewModelProvider.AndroidViewModelFactory#getInstance(Application)}.
 */
====>[PUBLIC]<androidx.lifecycle.ViewModelProviders.DefaultFactory: void <init>(Application)>    ---->    ViewModelProvider.AndroidViewModelFactory
Inconsistency (Non-Documentation):<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkStats.java
<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>

====>[PUBLIC]<android.net.NetworkStats: NetworkStats combineValues(String,int,int,long,long,long,long,long)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getScrollY()>
/**
 * Gets the scroll offset of the source top edge in pixels.
 *
 * @return The scroll.
 *
 * @deprecated Use {@link AccessibilityRecord#getScrollY()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getScrollY()>    ---->    AccessibilityRecord#getScrollY()
<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>
/**
 * Given an URL, returns the PluginData which contains the
 * surrogate response for the request, or {@code null} if the handler is
 * not interested.
 *
 * @param url URL string.
 * @param headers The headers associated with the request.
 * @return The PluginData containing the surrogate response.
 *
 * @hide
 * @deprecated Do not use, this interface is deprecated.
 */
====>[HIDDEN]<android.webkit.UrlInterceptHandler: PluginData getPluginData(String,Map<String, String>)>    ---->
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>
/**
 * {@inheritDoc}
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(PreferenceScreen,Preference)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>
/**
 * Get the label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @return the label to confirm the action should be executed
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getConfirmLabel()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>
/**
 * Set a label to display to cancel the action.
 * This is usually an imperative verb, like "Cancel".
 *
 * @param label the label to display to cancel the action
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>    ---->
<com.android.internal.telephony.uicc.UiccCard: void iccTransmitApduLogicalChannel(int,int,int,int,int,int,String,Message)>
/**
 * Exposes {@link CommandsInterface#iccTransmitApduLogicalChannel}
 * @deprecated Please use {@link
 * UiccProfile#iccTransmitApduLogicalChannel(int, int, int, int, int, int, String, Message)}
 * instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void iccTransmitApduLogicalChannel(int,int,int,int,int,int,String,Message)>    ---->    UiccProfile#iccTransmitApduLogicalChannel(int, int, int, int, int, int, String, Message)
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isPassword()>
/**
 * Gets if the source is a password field.
 *
 * @return True if the view is a password field, false otherwise.
 *
 * @deprecated Use {@link AccessibilityRecord#isPassword()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isPassword()>    ---->    AccessibilityRecord#isPassword()
<android.os.Debug: int getGlobalGcInvocationCount()>
/**
 * Returns the number of non-concurrent GC invocations between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalGcInvocationCount()>    ---->
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>
/**
 * Removes an account from the AccountManager.  Does nothing if the account
 * does not exist.  Does not delete the account from the server.
 * The authenticator may have its own policies preventing account
 * deletion, in which case the account will not be deleted.
 *
 * <p>This method requires the caller to have a signature match with the
 * authenticator that manages the specified account.
 *
 * <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,
 * MANAGE_ACCOUNTS permission is needed for those platforms. See docs for
 * this function in API level 22.
 *
 * @param account The {@link Account} to remove
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Boolean,
 * true if the account has been successfully removed
 * @deprecated use
 * {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
====>[PUBLIC]<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>    ---->    #removeAccount(Account, Activity, AccountManagerCallback, Handler)
<android.content.Context: File getSharedPrefsFile(String)>
/**
 * @hide
 * @deprecated use {@link #getSharedPreferencesPath(String)}
 */
====>[HIDDEN]<android.content.Context: File getSharedPrefsFile(String)>    ---->    #getSharedPreferencesPath(String)
<com.android.vcard.VCardParser: void parse(InputStream,VCardInterpreter)>
/**
 * @deprecated use {@link #addInterpreter(VCardInterpreter)} and
 * {@link #parse(InputStream)}
 */
====>[PUBLIC]<com.android.vcard.VCardParser: void parse(InputStream,VCardInterpreter)>    ---->    #addInterpreter(VCardInterpreter)
<com.android.ims.ImsManager: void setEnhanced4gLteModeSetting(Context,boolean)>
/**
 * Change persistent Enhanced 4G LTE Mode setting.
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #setEnhanced4gLteModeSetting(boolean)}
 * instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void setEnhanced4gLteModeSetting(Context,boolean)>    ---->    #setEnhanced4gLteModeSetting(boolean)
<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>
/**
 * Create an empty drawable, setting initial target density based on
 * the display metrics of the resources.
 *
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(Resources)>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<androidx.leanback.app.SearchFragment: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>
/**
 * Sets this callback to have the fragment pass speech recognition requests
 * to the activity rather than using a SpeechRecognizer object.
 * @deprecated Launching voice recognition activity is no longer supported. App should declare
 * android.permission.RECORD_AUDIO in AndroidManifest file.
 */
====>[PUBLIC]<androidx.leanback.app.SearchFragment: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>    ---->
<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>
/**
 * Start playing the sound.  It will actually start playing at some
 * point in the future.  There are no guarantees about latency here.
 * Calling this before another audio file is done playing will stop
 * that one and start the new one.
 *
 * @param context Your application's context.
 * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
 * @param looping Whether the audio should loop forever.
 * (see {@link MediaPlayer#setLooping(boolean)})
 * @param stream the AudioStream to use.
 * (see {@link MediaPlayer#setAudioStreamType(int)})
 * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead.
 */
====>[PUBLIC]<com.android.systemui.media.NotificationPlayer: void play(Context,Uri,boolean,int)>    ---->    #play(Context, Uri, boolean, AudioAttributes)
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>
/**
 * Make a layout for the transformed text (password transformation being the primary example of
 * a transformation) that will be updated as the base text is changed. If ellipsize is non-null,
 * the Layout will ellipsize the text down to ellipsizedWidth.
 *
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,int,int,int,TruncateAt,int)>    ---->    Builder
<android.telephony.TelephonyManager: void call(String,String)>
/**
 * @deprecated Use  {@link android.telecom.TelecomManager#placeCall(Uri address,
 * Bundle extras)} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void call(String,String)>    ---->    android.telecom.TelecomManager#placeCall(Uri address,  Bundle extras)
<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: void <init>(RenderScript)>    ---->
<android.widget.TextView: void setTextAppearance(Context,int)>
/**
 * Sets the text color, size, style, hint color, and highlight color
 * from the specified TextAppearance resource.
 *
 * @deprecated Use {@link #setTextAppearance(int)} instead.
 */
====>[PUBLIC]<android.widget.TextView: void setTextAppearance(Context,int)>    ---->    #setTextAppearance(int)
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkStatsHistory.java
<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>

====>[PUBLIC]<android.net.NetworkStatsHistory.DataStreamUtils: long[] readFullLongArray(DataInputStream)>    ---->
<android.renderscript.Mesh: Allocation getVertexAllocation(int)>
/**
 * @deprecated in API 16
 * @param slot index in the list of allocations to return
 * @return vertex data allocation at the given index
 */
====>[PUBLIC]<android.renderscript.Mesh: Allocation getVertexAllocation(int)>    ---->
<com.android.setupwizardlib.SetupWizardLayout: void hideProgressBar()>
/**
 * @deprecated Use {@link #setProgressBarShown(boolean)}
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardLayout: void hideProgressBar()>    ---->    #setProgressBarShown(boolean)
<android.content.ClipboardManager: CharSequence getText()>
/**
 * @deprecated Use {@link #getPrimaryClip()} instead.  This retrieves
 * the primary clip and tries to coerce it to a string.
 */
====>[PUBLIC]<android.content.ClipboardManager: CharSequence getText()>    ---->    #getPrimaryClip()
<android.webkit.Plugin: void <init>(String,String,String,String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void <init>(String,String,String,String)>    ---->
<android.app.Fragment: void onAttach(Activity)>
/**
 * @deprecated Use {@link #onAttach(Context)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onAttach(Activity)>    ---->    #onAttach(Context)
<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>
/**
 * Sets the confirmation code.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setConfirmationCode(String)>    ---->
<androidx.fragment.app.FragmentController: List<Fragment> retainNonConfig()>
/**
 * Returns a list of Fragments that have opted to retain their instance across
 * configuration changes.
 *
 * @deprecated use {@link #retainNestedNonConfig()} to also track retained
 * nested child fragments
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: List<Fragment> retainNonConfig()>    ---->    #retainNestedNonConfig()
<android.content.Intent: IBinder getIBinderExtra(String)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 *
 * @return the value of an item previously added with putExtra(),
 * or null if no IBinder value was found.
 *
 * @see #putExtra(String, IBinder)
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: IBinder getIBinderExtra(String)>    ---->
<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>    ---->
<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>
/**
 * Create a new Resources object on top of an existing set of assets in an
 * AssetManager.
 *
 * @deprecated Resources should not be constructed by apps.
 * See {@link android.content.Context#createConfigurationContext(Configuration)}.
 *
 * @param assets Previously created AssetManager.
 * @param metrics Current display metrics to consider when
 * selecting/computing resource values.
 * @param config Desired device configuration to consider when
 * selecting/computing resource values (optional).
 */
====>[PUBLIC]<android.content.res.Resources: void <init>(AssetManager,DisplayMetrics,Configuration)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>
/**
 * Write a list of packed proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSFixed32(long,int[])>    ---->    #write
<androidx.legacy.app.FragmentStatePagerAdapter: void setPrimaryItem(ViewGroup,int,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void setPrimaryItem(ViewGroup,int,Object)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED.
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: Slice bindSlice(Intent,List<SliceSpec>)>    ---->
<android.app.FragmentController: List<Fragment> retainNonConfig()>
/**
 * Returns a list of Fragments that have opted to retain their instance across
 * configuration changes.
 *
 * @deprecated use {@link #retainNestedNonConfig()} to also track retained
 * nested child fragments
 */
====>[PUBLIC]<android.app.FragmentController: List<Fragment> retainNonConfig()>    ---->    #retainNestedNonConfig()
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>
/**
 * Tell the client that the quota has been exceeded for the Web SQL Database
 * API for a particular origin and request a new quota. The client must
 * respond by invoking the
 * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}
 * method of the supplied {@link WebStorage.QuotaUpdater} instance. The
 * minimum value that can be set for the new quota is the current quota. The
 * default implementation responds with the current quota, so the quota will
 * not be increased.
 * @param url The URL of the page that triggered the notification
 * @param databaseIdentifier The identifier of the database where the quota
 * was exceeded.
 * @param quota The quota for the origin, in bytes
 * @param estimatedDatabaseSize The estimated size of the offending
 * database, in bytes
 * @param totalQuota The total quota for all origins, in bytes
 * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which
 * must be used to inform the WebView of the new quota.
 * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota
 * Management API.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onExceededDatabaseQuota(String,String,long,long,long,QuotaUpdater)>    ---->
<androidx.core.widget.ScrollerCompat: int getFinalY()>
/**
 * @return The final Y position for the scroll in progress, if known.
 *
 * @deprecated Use {@link OverScroller#getFinalY()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: int getFinalY()>    ---->    OverScroller#getFinalY()
<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>
/**
 * Store the newly updated configuration.
 *
 * @deprecated See {@link android.content.Context#createConfigurationContext(Configuration)}.
 */
====>[PUBLIC]<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics)>    ---->    android.content.Context#createConfigurationContext(Configuration)
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUseDoubleTree(boolean)>    ---->
<android.app.admin.DevicePolicyManager: ComponentName getDeviceInitializerComponent()>
/**
 * @hide
 * @deprecated Do not use
 * @removed
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: ComponentName getDeviceInitializerComponent()>    ---->
<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>
/**
 * @deprecated - Do not use
 */
====>[PUBLIC]<android.provider.Settings.System: void setShowGTalkServiceStatus(ContentResolver,boolean)>    ---->
<android.app.Service: void setForeground(boolean)>
/**
 * @deprecated This is a now a no-op, use
 * {@link #startForeground(int, Notification)} instead.  This method
 * has been turned into a no-op rather than simply being deprecated
 * because analysis of numerous poorly behaving devices has shown that
 * increasingly often the trouble is being caused in part by applications
 * that are abusing it.  Thus, given a choice between introducing
 * problems in existing applications using this API (by allowing them to
 * be killed when they would like to avoid it), vs allowing the performance
 * of the entire system to be decreased, this method was deemed less
 * important.
 *
 * @hide
 */
====>[HIDDEN]<android.app.Service: void setForeground(boolean)>    ---->    #startForeground(int, Notification)
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>
/**
 * Set a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @param hintAvoidBackgroundClipping {@code true} to avoid clipping if possible.
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>    ---->
<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>
/**
 * Set the {@link UiccAccessRule}s dictating access to this subscription.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setAccessRules(List<UiccAccessRule>)>    ---->
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>    ---->    Builder
<android.app.Activity: void onMultiWindowModeChanged(boolean)>
/**
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and
 * visa-versa.
 *
 * @see android.R.attr#resizeableActivity
 *
 * @param isInMultiWindowMode True if the activity is in multi-window mode.
 *
 * @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Activity: void onMultiWindowModeChanged(boolean)>    ---->    #onMultiWindowModeChanged(boolean, Configuration)
<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
/**
 * Get protocol identifier.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>    ---->
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory: void removeBucketsBefore(long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkStatsHistory.java
<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>
/**
 * Remove buckets older than requested cutoff.
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>    ---->
<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 * Bind an os surface
 *
 * @param w
 * @param h
 * @param sur
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void setSurfaceTexture(SurfaceTexture,int,int)>    ---->
<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>
/**
 * get information about the nano app instance
 *
 * NOTE: The returned NanoAppInstanceInfo does _not_ contain correct
 * information for several fields, specifically:
 * - getName()
 * - getPublisher()
 * - getNeededExecMemBytes()
 * - getNeededReadMemBytes()
 * - getNeededWriteMemBytes()
 *
 * For example, say you call loadNanoApp() with a NanoApp that has
 * getName() returning "My Name".  Later, if you call getNanoAppInstanceInfo
 * for that nanoapp, the returned NanoAppInstanceInfo's getName()
 * method will claim "Preloaded app, unknown", even though you would
 * have expected "My Name".  For now, as the user, you'll need to
 * separately track the above fields if they are of interest to you.
 *
 * TODO(b/30943489): Have the returned NanoAppInstanceInfo contain the
 * correct information.
 *
 * @param nanoAppHandle handle of the nanoapp instance
 * @return NanoAppInstanceInfo the NanoAppInstanceInfo of the nanoapp, or null if the nanoapp
 * does not exist
 *
 * @see NanoAppInstanceInfo
 *
 * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub
 * for loaded nanoapps.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: NanoAppInstanceInfo getNanoAppInstanceInfo(int)>    ---->    #queryNanoApps(ContextHubInfo)
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
/**
 * @return Minimum velocity to initiate a fling, as measured in dips per second.
 *
 * @deprecated Use {@link #getScaledMinimumFlingVelocity()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMinimumFlingVelocity()>    ---->    #getScaledMinimumFlingVelocity()
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getScrollX()>
/**
 * Gets the scroll offset of the source left edge in pixels.
 *
 * @return The scroll.
 *
 * @deprecated Use {@link AccessibilityRecord#getScrollX()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getScrollX()>    ---->    AccessibilityRecord#getScrollX()
<androidx.core.os.BuildCompat: boolean isAtLeastOMR1()>
/**
 * Checks if the device is running on a pre-release version of Android O MR1 or newer.
 * <p>
 * @return {@code true} if O MR1 APIs are available for use, {@code false} otherwise
 * @deprecated Android O MR1 is a finalized release and this method is no longer necessary. It
 * will be removed in a future release of the Support Library. Instead, use
 * {@code Build.SDK_INT >= Build.VERSION_CODES.O_MR1}.
 */
====>[PUBLIC]<androidx.core.os.BuildCompat: boolean isAtLeastOMR1()>    ---->
<android.location.Location: void removeAltitude()>
/**
 * Remove the altitude from this location.
 *
 * <p>Following this call {@link #hasAltitude} will return false,
 * and {@link #getAltitude} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeAltitude()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>
/**
 * Get the label to display while the wearable is preparing to automatically execute
 * the action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @return the label to display while the action is being prepared to execute
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getInProgressLabel()>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>
/**
 * Write a single repeated proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSInt32(long,int)>    ---->    #write
<java.util.Date: long parse(String)>
/**
 * Attempts to interpret the string <tt>s</tt> as a representation
 * of a date and time. If the attempt is successful, the time
 * indicated is returned represented as the distance, measured in
 * milliseconds, of that time from the epoch (00:00:00 GMT on
 * January 1, 1970). If the attempt fails, an
 * <tt>IllegalArgumentException</tt> is thrown.
 * <p>
 * It accepts many syntaxes; in particular, it recognizes the IETF
 * standard date syntax: "Sat, 12 Aug 1995 13:30:00 GMT". It also
 * understands the continental U.S. time-zone abbreviations, but for
 * general use, a time-zone offset should be used: "Sat, 12 Aug 1995
 * 13:30:00 GMT+0430" (4 hours, 30 minutes west of the Greenwich
 * meridian). If no time zone is specified, the local time zone is
 * assumed. GMT and UTC are considered equivalent.
 * <p>
 * The string <tt>s</tt> is processed from left to right, looking for
 * data of interest. Any material in <tt>s</tt> that is within the
 * ASCII parenthesis characters <tt>(</tt> and <tt>)</tt> is ignored.
 * Parentheses may be nested. Otherwise, the only characters permitted
 * within <tt>s</tt> are these ASCII characters:
 * <blockquote><pre>
 * abcdefghijklmnopqrstuvwxyz
 * ABCDEFGHIJKLMNOPQRSTUVWXYZ
 * 0123456789,+-:/</pre></blockquote>
 * and whitespace characters.<p>
 * A consecutive sequence of decimal digits is treated as a decimal
 * number:<ul>
 * <li>If a number is preceded by <tt>+</tt> or <tt>-</tt> and a year
 * has already been recognized, then the number is a time-zone
 * offset. If the number is less than 24, it is an offset measured
 * in hours. Otherwise, it is regarded as an offset in minutes,
 * expressed in 24-hour time format without punctuation. A
 * preceding <tt>-</tt> means a westward offset. Time zone offsets
 * are always relative to UTC (Greenwich). Thus, for example,
 * <tt>-5</tt> occurring in the string would mean "five hours west
 * of Greenwich" and <tt>+0430</tt> would mean "four hours and
 * thirty minutes east of Greenwich." It is permitted for the
 * string to specify <tt>GMT</tt>, <tt>UT</tt>, or <tt>UTC</tt>
 * redundantly-for example, <tt>GMT-5</tt> or <tt>utc+0430</tt>.
 * <li>The number is regarded as a year number if one of the
 * following conditions is true:
 * <ul>
 * <li>The number is equal to or greater than 70 and followed by a
 * space, comma, slash, or end of string
 * <li>The number is less than 70, and both a month and a day of
 * the month have already been recognized</li>
 * </ul>
 * If the recognized year number is less than 100, it is
 * interpreted as an abbreviated year relative to a century of
 * which dates are within 80 years before and 19 years after
 * the time when the Date class is initialized.
 * After adjusting the year number, 1900 is subtracted from
 * it. For example, if the current year is 1999 then years in
 * the range 19 to 99 are assumed to mean 1919 to 1999, while
 * years from 0 to 18 are assumed to mean 2000 to 2018.  Note
 * that this is slightly different from the interpretation of
 * years less than 100 that is used in {@link java.text.SimpleDateFormat}.
 * <li>If the number is followed by a colon, it is regarded as an hour,
 * unless an hour has already been recognized, in which case it is
 * regarded as a minute.
 * <li>If the number is followed by a slash, it is regarded as a month
 * (it is decreased by 1 to produce a number in the range <tt>0</tt>
 * to <tt>11</tt>), unless a month has already been recognized, in
 * which case it is regarded as a day of the month.
 * <li>If the number is followed by whitespace, a comma, a hyphen, or
 * end of string, then if an hour has been recognized but not a
 * minute, it is regarded as a minute; otherwise, if a minute has
 * been recognized but not a second, it is regarded as a second;
 * otherwise, it is regarded as a day of the month. </ul><p>
 * A consecutive sequence of letters is regarded as a word and treated
 * as follows:<ul>
 * <li>A word that matches <tt>AM</tt>, ignoring case, is ignored (but
 * the parse fails if an hour has not been recognized or is less
 * than <tt>1</tt> or greater than <tt>12</tt>).
 * <li>A word that matches <tt>PM</tt>, ignoring case, adds <tt>12</tt>
 * to the hour (but the parse fails if an hour has not been
 * recognized or is less than <tt>1</tt> or greater than <tt>12</tt>).
 * <li>Any word that matches any prefix of <tt>SUNDAY, MONDAY, TUESDAY,
 * WEDNESDAY, THURSDAY, FRIDAY</tt>, or <tt>SATURDAY</tt>, ignoring
 * case, is ignored. For example, <tt>sat, Friday, TUE</tt>, and
 * <tt>Thurs</tt> are ignored.
 * <li>Otherwise, any word that matches any prefix of <tt>JANUARY,
 * FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER,
 * OCTOBER, NOVEMBER</tt>, or <tt>DECEMBER</tt>, ignoring case, and
 * considering them in the order given here, is recognized as
 * specifying a month and is converted to a number (<tt>0</tt> to
 * <tt>11</tt>). For example, <tt>aug, Sept, april</tt>, and
 * <tt>NOV</tt> are recognized as months. So is <tt>Ma</tt>, which
 * is recognized as <tt>MARCH</tt>, not <tt>MAY</tt>.
 * <li>Any word that matches <tt>GMT, UT</tt>, or <tt>UTC</tt>, ignoring
 * case, is treated as referring to UTC.
 * <li>Any word that matches <tt>EST, CST, MST</tt>, or <tt>PST</tt>,
 * ignoring case, is recognized as referring to the time zone in
 * North America that is five, six, seven, or eight hours west of
 * Greenwich, respectively. Any word that matches <tt>EDT, CDT,
 * MDT</tt>, or <tt>PDT</tt>, ignoring case, is recognized as
 * referring to the same time zone, respectively, during daylight
 * saving time.</ul><p>
 * Once the entire string s has been scanned, it is converted to a time
 * result in one of two ways. If a time zone or time-zone offset has been
 * recognized, then the year, month, day of month, hour, minute, and
 * second are interpreted in UTC and then the time-zone offset is
 * applied. Otherwise, the year, month, day of month, hour, minute, and
 * second are interpreted in the local time zone.
 *
 * @param   s   a string to be parsed as a date.
 * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT
 * represented by the string argument.
 * @see     java.text.DateFormat
 * @deprecated As of JDK version 1.1,
 * replaced by <code>DateFormat.parse(String s)</code>.
 */
====>[PUBLIC]<java.util.Date: long parse(String)>    ---->
<androidx.legacy.app.FragmentPagerAdapter: void restoreState(Parcelable,ClassLoader)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void restoreState(Parcelable,ClassLoader)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.content.res.AssetManager: int addAssetPath(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addAssetPath(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>
/**
 * Sets the value of the setting for background data usage.
 *
 * @param allowBackgroundData Whether an application should use data while
 * it is in the background.
 *
 * @attr ref android.Manifest.permission#CHANGE_BACKGROUND_DATA_SETTING
 * @see #getBackgroundDataSetting()
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>    ---->
<android.location.GnssMeasurement: void setCarrierPhase(double)>
/**
 * Sets the RF phase detected by the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierPhase(double)>    ---->    #setAccumulatedDeltaRangeMeters(double)
<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getClassName()>
/**
 * Gets the class name of the source.
 *
 * @return The class name.
 *
 * @deprecated Use {@link AccessibilityRecord#getClassName()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getClassName()>    ---->    AccessibilityRecord#getClassName()
<androidx.leanback.widget.BaseGridView: int getHorizontalMargin()>
/**
 * Returns the spacing in pixels between two child items horizontally.
 * @deprecated Use {@link #getHorizontalSpacing()}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseGridView: int getHorizontalMargin()>    ---->    #getHorizontalSpacing()
<androidx.viewpager.widget.PagerAdapter: void destroyItem(View,int,Object)>
/**
 * Remove a page for the given position.  The adapter is responsible
 * for removing the view from its container, although it only must ensure
 * this is done by the time it returns from {@link #finishUpdate(View)}.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position to be removed.
 * @param object The same object that was returned by
 * {@link #instantiateItem(View, int)}.
 *
 * @deprecated Use {@link #destroyItem(ViewGroup, int, Object)}
 */
====>[PUBLIC]<androidx.viewpager.widget.PagerAdapter: void destroyItem(View,int,Object)>    ---->    #destroyItem(ViewGroup, int, Object)
<android.webkit.WebSettings: boolean enableSmoothTransition()>
/**
 * Gets whether the WebView enables smooth transition while panning or
 * zooming.
 *
 * @see #setEnableSmoothTransition
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean enableSmoothTransition()>    ---->
<java.lang.Character: boolean isSpace(char)>
/**
 * Determines if the specified character is ISO-LATIN-1 white space.
 * This method returns {@code true} for the following five
 * characters only:
 * <table summary="truechars">
 * <tr><td>{@code '\t'}</td>            <td>{@code U+0009}</td>
 * <td>{@code HORIZONTAL TABULATION}</td></tr>
 * <tr><td>{@code '\n'}</td>            <td>{@code U+000A}</td>
 * <td>{@code NEW LINE}</td></tr>
 * <tr><td>{@code '\f'}</td>            <td>{@code U+000C}</td>
 * <td>{@code FORM FEED}</td></tr>
 * <tr><td>{@code '\r'}</td>            <td>{@code U+000D}</td>
 * <td>{@code CARRIAGE RETURN}</td></tr>
 * <tr><td>{@code ' '}</td>             <td>{@code U+0020}</td>
 * <td>{@code SPACE}</td></tr>
 * </table>
 *
 * @param      ch   the character to be tested.
 * @return     {@code true} if the character is ISO-LATIN-1 white
 * space; {@code false} otherwise.
 * @see        Character#isSpaceChar(char)
 * @see        Character#isWhitespace(char)
 * @deprecated Replaced by isWhitespace(char).
 */
====>[PUBLIC]<java.lang.Character: boolean isSpace(char)>    ---->
<com.android.support.mediarouter.media.MediaRouteDescriptor: boolean isConnecting()>
/**
 * Gets whether the route is connecting.
 * @deprecated Use {@link #getConnectionState} instead
 */
====>[PUBLIC]<com.android.support.mediarouter.media.MediaRouteDescriptor: boolean isConnecting()>    ---->    #getConnectionState
<android.net.ConnectivityManager: void setNetworkPreference(int)>
/**
 * Specifies the preferred network type.  When the device has more
 * than one type available the preferred network type will be used.
 *
 * @param preference the network type to prefer over all others.  It is
 * unspecified what happens to the old preferred network in the
 * overall ordering.
 * @deprecated Functionality has been removed as it no longer makes sense,
 * with many more than two networks - we'd need an array to express
 * preference.  Instead we use dynamic network properties of
 * the networks to describe their precedence.
 */
====>[PUBLIC]<android.net.ConnectivityManager: void setNetworkPreference(int)>    ---->
<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser(Context)>
/**
 * Returns the user configuration of Enhanced 4G LTE Mode setting.
 *
 * @deprecated Doesn't support MSIM devices. Use
 * {@link #isEnhanced4gLteModeSettingEnabledByUser()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser(Context)>    ---->    #isEnhanced4gLteModeSettingEnabledByUser()
<androidx.core.content.SharedPreferencesCompat.EditorCompat: void apply(Editor)>
/**
 * @deprecated This compatibility method is no longer required. Use
 * {@link SharedPreferences.Editor#apply()} directly.
 */
====>[PUBLIC]<androidx.core.content.SharedPreferencesCompat.EditorCompat: void apply(Editor)>    ---->    SharedPreferences.Editor#apply()
<android.security.keystore.recovery.RecoveryController: KeyChainSnapshot getRecoveryData()>
/**
 * @deprecated Use {@link #getKeyChainSnapshot()}
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: KeyChainSnapshot getRecoveryData()>    ---->    #getKeyChainSnapshot()
<android.telephony.gsm.SmsMessage: boolean isReplace()>
/**
 * See TS 23.040 9.2.3.9 returns true if this is a "replace short message" SMS
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isReplace()>    ---->
<java.util.Properties: void save(OutputStream,String)>
/**
 * Calls the {@code store(OutputStream out, String comments)} method
 * and suppresses IOExceptions that were thrown.
 *
 * @deprecated This method does not throw an IOException if an I/O error
 * occurs while saving the property list.  The preferred way to save a
 * properties list is via the {@code store(OutputStream out,
 * String comments)} method or the
 * {@code storeToXML(OutputStream os, String comment)} method.
 *
 * @param   out      an output stream.
 * @param   comments   a description of the property list.
 * @exception  ClassCastException  if this {@code Properties} object
 * contains any keys or values that are not
 * {@code Strings}.
 */
====>[PUBLIC]<java.util.Properties: void save(OutputStream,String)>    ---->
<android.view.textclassifier.TextClassification: Intent getIntent()>
/**
 * Returns an intent that may be fired to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled and will always return null when this
 * object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: Intent getIntent()>    ---->    #getActions()
<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>
/**
 * Called to inform the adapter of which item is currently considered to
 * be the "primary", that is the one show to the user as the current page.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position that is now the primary.
 * @param object The same object that was returned by
 * {@link #instantiateItem(android.view.View, int)}.
 *
 * @deprecated Use {@link #setPrimaryItem(android.view.ViewGroup, int, Object)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>    ---->    #setPrimaryItem(android.view.ViewGroup, int, Object)
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(IconCompat,boolean)>
/**
 * Sets the title item to be the provided icon. There can only be one title item, this
 * will replace any other title items that may have been set.
 * <p>
 * Use this method to specify content that will appear in the template once it's been
 * loaded.
 * </p>
 * @param isLoading indicates whether the app is doing work to load the added content in the
 * background or not.
 *
 * @deprecated TO BE REMOVED; use ListBuilder{@link #setTitleItem(Icon, int, boolean)}.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(IconCompat,boolean)>    ---->    #setTitleItem(Icon, int, boolean)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getGravity()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getGravity()>
/**
 * Get the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getGravity()>    ---->
<java.util.Date: int getMinutes()>
/**
 * Returns the number of minutes past the hour represented by this date,
 * as interpreted in the local time zone.
 * The value returned is between <code>0</code> and <code>59</code>.
 *
 * @return  the number of minutes past the hour represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.MINUTE)</code>.
 */
====>[PUBLIC]<java.util.Date: int getMinutes()>    ---->
<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>
/**
 * Registers the remote control client for providing information to display on the remote
 * controls.
 * @param rcClient The remote control client from which remote controls will receive
 * information to display.
 * @see RemoteControlClient
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerRemoteControlClient(RemoteControlClient)>    ---->    MediaSession
<android.security.keystore.recovery.RecoverySession: byte[] start(byte[],byte[],byte[],List<KeyChainProtectionParams>)>
/**
 * @deprecated Use {@link #start(String, CertPath, byte[], byte[], List)} instead.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoverySession: byte[] start(byte[],byte[],byte[],List<KeyChainProtectionParams>)>    ---->    #start(String, CertPath, byte[], byte[], List)
<android.graphics.drawable.BitmapDrawable: void <init>()>
/**
 * Create an empty drawable, not dealing with density.
 * @deprecated Use {@link #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)}
 * instead to specify a bitmap to draw with and ensure the correct density is set.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>()>    ---->    #BitmapDrawable(android.content.res.Resources, android.graphics.Bitmap)
<androidx.viewpager.widget.ViewPager: void setOnPageChangeListener(OnPageChangeListener)>
/**
 * Set a listener that will be invoked whenever the page changes or is incrementally
 * scrolled. See {@link OnPageChangeListener}.
 *
 * @param listener Listener to set
 *
 * @deprecated Use {@link #addOnPageChangeListener(OnPageChangeListener)}
 * and {@link #removeOnPageChangeListener(OnPageChangeListener)} instead.
 */
====>[PUBLIC]<androidx.viewpager.widget.ViewPager: void setOnPageChangeListener(OnPageChangeListener)>    ---->    #addOnPageChangeListener(OnPageChangeListener)
<androidx.core.view.accessibility.AccessibilityManagerCompat: List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(AccessibilityManager)>
/**
 * Returns the {@link AccessibilityServiceInfo}s of the installed accessibility services.
 *
 * @param manager The accessibility manager.
 * @return An unmodifiable list with {@link AccessibilityServiceInfo}s.
 *
 * @deprecated Use {@link AccessibilityManager#getInstalledAccessibilityServiceList()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat: List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(AccessibilityManager)>    ---->    AccessibilityManager#getInstalledAccessibilityServiceList()
<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_BACK(RenderScript)>    ---->
<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>
/**
 * <p>Version of {@link #removeStickyBroadcast(Intent)} that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * <p>You must hold the {@link android.Manifest.permission#BROADCAST_STICKY}
 * permission in order to use this API.  If you do not hold that
 * permission, {@link SecurityException} will be thrown.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent that was previously broadcast.
 * @param user UserHandle to remove the sticky broadcast from.
 *
 * @see #sendStickyBroadcastAsUser
 */
====>[PUBLIC]<android.content.Context: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->    #sendStickyBroadcastAsUser
<android.telecom.Connection: AudioState getAudioState()>
/**
 * @return The audio state of the connection, describing how its audio is currently
 * being routed by the system. This is {@code null} if this Connection
 * does not directly know about its audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection: AudioState getAudioState()>    ---->    #getCallAudioState()
<com.android.ims.ImsManager: int getWfcMode(Context)>
/**
 * Returns the user configuration of WFC preference setting.
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #getWfcMode(boolean roaming)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: int getWfcMode(Context)>    ---->    #getWfcMode(boolean roaming)
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>
/**
 * Set a label to display while the wearable is preparing to automatically execute the
 * action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @param label the label to display while the action is being prepared to execute
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>    ---->
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
/**
 * Indicates whether this ViewGroup will always try to draw its children using their
 * drawing cache. By default this property is enabled.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer have their caching behavior disabled by parents.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>    ---->
<androidx.exifinterface.media.ExifInterface: boolean getLatLong(float[])>
/**
 * Stores the latitude and longitude value in a float array. The first element is the latitude,
 * and the second element is the longitude. Returns false if the Exif tags are not available.
 *
 * @deprecated Use {@link #getLatLong()} instead.
 */
====>[PUBLIC]<androidx.exifinterface.media.ExifInterface: boolean getLatLong(float[])>    ---->    #getLatLong()
<androidx.core.view.ScaleGestureDetectorCompat: void setQuickScaleEnabled(Object,boolean)>
/**
 * Sets whether the associated {@link ScaleGestureDetector.OnScaleGestureListener} should
 * receive onScale callbacks when the user performs a doubleTap followed by a swipe. Note that
 * this is enabled by default if the app targets API 19 and newer.
 *
 * @param enabled true to enable quick scaling, false to disable
 *
 * @deprecated Use {@link #setQuickScaleEnabled(ScaleGestureDetector, boolean)} that takes
 * {@link ScaleGestureDetector} instead of {@link Object}.
 */
====>[PUBLIC]<androidx.core.view.ScaleGestureDetectorCompat: void setQuickScaleEnabled(Object,boolean)>    ---->    #setQuickScaleEnabled(ScaleGestureDetector, boolean)
<com.android.setupwizardlib.template.ListMixin: void setDividerInset(int)>
/**
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.template.ListMixin: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>
/**
 * Constructor.
 * @deprecated use {@link InputMethodSubtypeBuilder} instead.
 * "isAsciiCapable" is "false" in this constructor.
 * @param nameId Resource ID of the subtype name string. The string resource may have exactly
 * one %s in it. If there is, the %s part will be replaced with the locale's display name by
 * the formatter. Please refer to {@link #getDisplayName} for details.
 * @param iconId Resource ID of the subtype icon drawable.
 * @param locale The locale supported by the subtype
 * @param mode The mode supported by the subtype
 * @param extraValue The extra value of the subtype. This string is free-form, but the API
 * supplies tools to deal with a key-value comma-separated list; see
 * {@link #containsExtraValueKey} and {@link #getExtraValueOf}.
 * @param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
 * subtype will not be shown in the list of enabled IMEs for choosing the current IME in
 * the Settings even when this subtype is enabled. Please note that this subtype will still
 * be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
 * to this subtype while an IME is shown. The framework will never switch the current IME to
 * this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
 * The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
 * auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
 * @param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
 * if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
 * parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
 * Having an "automatic" subtype is an example use of this flag.
 * @param id The unique ID for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
 * other attributes are different. If the ID is unspecified or 0,
 * Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype, isAsciiCapable}) will be used instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean,int)>    ---->    InputMethodSubtypeBuilder
<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>
/**
 * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)>    ---->    #dispatchMultiWindowModeChanged(boolean, Configuration)
<android.media.MediaPlayer: void setAudioStreamType(int)>
/**
 * Sets the audio stream type for this MediaPlayer. See {@link AudioManager}
 * for a list of stream types. Must call this method before prepare() or
 * prepareAsync() in order for the target stream type to become effective
 * thereafter.
 *
 * @param streamtype the audio stream type
 * @deprecated use {@link #setAudioAttributes(AudioAttributes)}
 * @see android.media.AudioManager
 */
====>[PUBLIC]<android.media.MediaPlayer: void setAudioStreamType(int)>    ---->    android.media.AudioManager
<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>
/**
 * Set the sound to play, along with specific {@link AudioAttributes audio attributes} to
 * use during playback.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 * @see Notification#sound
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri,AudioAttributes)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>
/**
 * @deprecated in API 16
 * Adds a float3 vertex to the mesh
 *
 * @param x position x
 * @param y position y
 * @param z position z
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float,float)>    ---->
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumWidth()
 * WallpaperManager.getDesiredMinimumWidth()} instead.
 */
====>[PUBLIC]<android.content.Context: int getWallpaperDesiredMinimumWidth()>    ---->    android.app.WallpaperManager#getDesiredMinimumWidth()  WallpaperManager.getDesiredMinimumWidth()
<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_NONE(RenderScript)>    ---->
<android.content.ContentResolver: SyncInfo getCurrentSync()>
/**
 * If a sync is active returns the information about it, otherwise returns null.
 * <p>
 * This method requires the caller to hold the permission
 * {@link android.Manifest.permission#READ_SYNC_STATS}.
 * <p>
 * @return the SyncInfo for the currently active sync or null if one is not active.
 * @deprecated
 * Since multiple concurrent syncs are now supported you should use
 * {@link #getCurrentSyncs()} to get the accurate list of current syncs.
 * This method returns the first item from the list of current syncs
 * or null if there are none.
 */
====>[PUBLIC]<android.content.ContentResolver: SyncInfo getCurrentSync()>    ---->    #getCurrentSyncs()
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
/**
 * Initialize the object from rssi and cid.
 *
 * NeighboringCellInfo is one time shot for the neighboring cells based on
 * the radio network type at that moment. Its constructor needs radio network
 * type.
 *
 * @deprecated by {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void <init>(int,int)>    ---->    #NeighboringCellInfo(int, String, int)
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>
/**
 * Initializes recovery session given the X509-encoded public key of the recovery service.
 *
 * @param sessionId A unique ID to identify the recovery session.
 * @param verifierPublicKey X509-encoded public key.
 * @param vaultParams Additional params associated with vault.
 * @param vaultChallenge Challenge issued by vault service.
 * @param secrets Lock-screen hashes. For now only a single secret is supported.
 * @return Encrypted bytes of recovery claim. This can then be issued to the vault service.
 * @deprecated Use {@link #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,
 * byte[], byte[], List)} instead.
 *
 * @hide
 */
====>[HIDDEN]<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(String,byte[],byte[],byte[],List<KeyChainProtectionParams>)>    ---->    #startRecoverySessionWithCertPath(String, String, RecoveryCertPath,  byte[], byte[], List)
<android.webkit.CacheManager: boolean endCacheTransaction()>
/**
 * Ends the innermost cache transaction and returns whether this was the
 * only running transaction.
 *
 * @return {@code true} if this was the only running transaction
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean endCacheTransaction()>    ---->
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(Context,int,boolean)>
/**
 * @deprecated use {@link #action(int, boolean, Pair[])}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.EventLogWriter: void action(Context,int,boolean)>    ---->    #action(int, boolean, Pair[])
<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>
/**
 * Last activity to report accessibility events.
 * @deprecated The results returned should be considered unreliable
 * @return String name of activity
 */
====>[PUBLIC]<com.android.uiautomator.core.QueryController: String getCurrentActivityName()>    ---->
Inconsistency (Non-Documentation):<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\javax\microedition\khronos\egl\EGL10.java
<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>

====>[PUBLIC]<javax.microedition.khronos.egl.EGL10: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,Object,int[])>    ---->
<android.view.ViewDebug: void startRecyclerTracing(String,View)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void startRecyclerTracing(String,View)>    ---->
<java.lang.Thread: void resume()>
/**
 * Resumes a suspended thread.
 * <p>
 * First, the <code>checkAccess</code> method of this thread is called
 * with no arguments. This may result in throwing a
 * <code>SecurityException</code> (in the current thread).
 * <p>
 * If the thread is alive but suspended, it is resumed and is
 * permitted to make progress in its execution.
 *
 * @exception  SecurityException  if the current thread cannot modify this
 * thread.
 * @see        #checkAccess
 * @see        #suspend()
 * @deprecated This method exists solely for use with {@link #suspend},
 * which has been deprecated because it is deadlock-prone.
 * For more information, see
 * <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
 * are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
 */
====>[PUBLIC]<java.lang.Thread: void resume()>    ---->    #suspend
<android.telephony.gsm.SmsMessage: String getServiceCenterAddress()>
/**
 * Returns the address of the SMS service center that relayed this message
 * or null if there is none.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getServiceCenterAddress()>    ---->
<android.renderscript.ProgramVertex: int getInputCount()>
/**
 * @deprecated in API 16
 * @return number of input attribute elements
 */
====>[PUBLIC]<android.renderscript.ProgramVertex: int getInputCount()>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintScreenTimeout(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintScreenTimeout(int)>
/**
 * Set a hint that the screen should remain on for at least this duration when
 * this notification is displayed on the screen.
 * @param timeout The requested screen timeout in milliseconds. Can also be either
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintScreenTimeout(int)>    ---->
<android.text.method.DigitsKeyListener: void <init>()>
/**
 * Allocates a DigitsKeyListener that accepts the ASCII digits 0 through 9.
 *
 * @deprecated Use {@link #DigitsKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: void <init>()>    ---->    #DigitsKeyListener(Locale)
<android.telephony.TelephonyManager: boolean isTtyModeSupported()>
/**
 * @deprecated Use {@link TelecomManager#isTtySupported()} instead
 * Whether the phone supports TTY mode.
 *
 * @return {@code true} if the device supports TTY mode, and {@code false} otherwise.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: boolean isTtyModeSupported()>    ---->    TelecomManager#isTtySupported()
<androidx.fragment.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>
/**
 * Restores the saved state for all Fragments. The given Fragment list are Fragment
 * instances retained across configuration changes.
 *
 * @see #retainNonConfig()
 *
 * @deprecated use {@link #restoreAllState(Parcelable, FragmentManagerNonConfig)}
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>    ---->    #restoreAllState(Parcelable, FragmentManagerNonConfig)
<android.media.tv.TvInputInfo: Intent createSettingsIntent()>
/**
 * Returns an intent to start the settings activity for this TV input.
 *
 * @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated.
 * Use setup activity instead to provide settings.
 */
====>[PUBLIC]<android.media.tv.TvInputInfo: Intent createSettingsIntent()>    ---->    #createSetupIntent()
<android.app.Notification.Builder: Builder setPriority(int)>
/**
 * Set the priority of this notification.
 *
 * @see Notification#priority
 * @deprecated use {@link NotificationChannel#setImportance(int)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setPriority(int)>    ---->    NotificationChannel#setImportance(int)
<androidx.fragment.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>
/**
 * Called when a fragment is being created as part of a view layout
 * inflation, typically from setting the content view of an activity.
 *
 * @deprecated See {@link #onInflate(Context, AttributeSet, Bundle)}.
 */
====>[PUBLIC]<androidx.fragment.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>    ---->    #onInflate(Context, AttributeSet, Bundle)
<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>
/**
 * @deprecated replaced by
 * {@link #revokeRuntimePermissionAsUser(String, String, UserHandle)}.
 * @hide
 */
====>[HIDDEN]<android.app.UiAutomation: boolean revokeRuntimePermission(String,String,UserHandle)>    ---->    #revokeRuntimePermissionAsUser(String, String, UserHandle)
<android.os.StatFs: int getAvailableBlocks()>
/**
 * @deprecated Use {@link #getAvailableBlocksLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getAvailableBlocks()>    ---->    #getAvailableBlocksLong()
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
/**
 * Unimplemented.
 * @deprecated This method is deprecated and must not be used.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteProgram: int getUniqueId()>    ---->
<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>
/**
 * @hide
 * Sets the value of a specific restriction on a specific user.
 * Requires the MANAGE_USERS permission.
 * @param key the key of the restriction
 * @param value the value for the restriction
 * @param userHandle the user whose restriction is to be changed.
 * @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(
 * android.content.ComponentName, String)} or
 * {@link android.app.admin.DevicePolicyManager#clearUserRestriction(
 * android.content.ComponentName, String)} instead.
 */
====>[HIDDEN]<android.os.UserManager: void setUserRestriction(String,boolean,UserHandle)>    ---->    android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)
<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: String getSetting(ContentResolver,String,String)>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>
/**
 * @deprecated
 * Creates a builder for fixed function fragment program
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: void <init>(RenderScript)>    ---->
<androidx.legacy.app.FragmentPagerAdapter: void setPrimaryItem(ViewGroup,int,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void setPrimaryItem(ViewGroup,int,Object)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>
/**
 * Called when the device has started waking up.
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedWakingUp()>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.provider.Contacts.People: void <init>()>
/**
 * no public constructor since this is a utility class
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void <init>()>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramFragmentFixedFunction from the current state
 * of the builder
 *
 * @return  ProgramFragmentFixedFunction
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: ProgramFragmentFixedFunction create()>    ---->
<androidx.core.widget.ScrollerCompat: void notifyHorizontalEdgeReached(int,int,int)>
/**
 * Notify the scroller that we've reached a horizontal boundary.
 * Normally the information to handle this will already be known
 * when the animation is started, such as in a call to one of the
 * fling functions. However there are cases where this cannot be known
 * in advance. This function will transition the current motion and
 * animate from startX to finalX as appropriate.
 *
 * @param startX Starting/current X position
 * @param finalX Desired final X position
 * @param overX Magnitude of overscroll allowed. This should be the maximum
 * desired distance from finalX. Absolute value - must be positive.
 *
 * @deprecated Use {@link OverScroller#notifyHorizontalEdgeReached(int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void notifyHorizontalEdgeReached(int,int,int)>    ---->    OverScroller#notifyHorizontalEdgeReached(int, int, int)
<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromResource(RenderScript,Resources,int,float)>    ---->
<android.renderscript.Mesh: Primitive getPrimitive(int)>
/**
 * @deprecated in API 16
 * @param slot locaiton within the list of index set primitives
 * @return index set primitive type
 */
====>[PUBLIC]<android.renderscript.Mesh: Primitive getPrimitive(int)>    ---->
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
/**
 * Create an emboss maskfilter
 *
 * @deprecated This subclass is not supported and should not be instantiated.
 *
 * @param direction  array of 3 scalars [x, y, z] specifying the direction of the light source
 * @param ambient    0...1 amount of ambient light
 * @param specular   coefficient for specular highlights (e.g. 8)
 * @param blurRadius amount to blur before applying lighting (e.g. 3)
 * @return           the emboss maskfilter
 */
====>[PUBLIC]<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTextResId(int)>    ---->
<androidx.core.view.LayoutInflaterCompat: LayoutInflaterFactory getFactory(LayoutInflater)>
/**
 * Return the current {@link LayoutInflaterFactory} (or null). This is
 * called on each element name. If the factory returns a View, add that
 * to the hierarchy. If it returns null, proceed to call onCreateView(name).
 *
 * @return The {@link LayoutInflaterFactory} associated with the
 * {@link LayoutInflater}. Will be {@code null} if the inflater does not
 * have a {@link LayoutInflaterFactory} but a raw {@link LayoutInflater.Factory}.
 * @see LayoutInflater#getFactory()
 *
 * @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} to set and
 * {@link LayoutInflater#getFactory2()} to get the factory.
 */
====>[PUBLIC]<androidx.core.view.LayoutInflaterCompat: LayoutInflaterFactory getFactory(LayoutInflater)>    ---->    #setFactory2(LayoutInflater, LayoutInflater.Factory2)
<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Settings: void setSetting(ContentResolver,String,String,String)>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\accounts\AccountManager.java
<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>
/**
 * Deprecated in favor of {@link #newChooseAccountIntent(Account, List, String[], String,
 * String, String[], Bundle)}.
 *
 * Returns an intent to an {@link Activity} that prompts the user to choose from a list of
 * accounts.
 * The caller will then typically start the activity by calling
 * <code>startActivityForResult(intent, ...);</code>.
 * <p>
 * On success the activity returns a Bundle with the account name and type specified using
 * keys {@link #KEY_ACCOUNT_NAME} and {@link #KEY_ACCOUNT_TYPE}.
 * Chosen account is marked as {@link #VISIBILITY_USER_MANAGED_VISIBLE} to the caller
 * (see {@link #setAccountVisibility}) and will be returned to it in consequent
 * {@link #getAccountsByType}) calls.
 * <p>
 * The most common case is to call this with one account type, e.g.:
 * <p>
 * <pre>  newChooseAccountIntent(null, null, new String[]{"com.google"}, false, null,
 * null, null, null);</pre>
 * @param selectedAccount if specified, indicates that the {@link Account} is the currently
 * selected one, according to the caller's definition of selected.
 * @param allowableAccounts an optional {@link List} of accounts that are allowed to be
 * shown. If not specified then this field will not limit the displayed accounts.
 * @param allowableAccountTypes an optional string array of account types. These are used
 * both to filter the shown accounts and to filter the list of account types that are shown
 * when adding an account. If not specified then this field will not limit the displayed
 * account types when adding an account.
 * @param alwaysPromptForAccount boolean that is ignored.
 * @param descriptionOverrideText if non-null this string is used as the description in the
 * accounts chooser screen rather than the default
 * @param addAccountAuthTokenType this string is passed as the {@link #addAccount}
 * authTokenType parameter
 * @param addAccountRequiredFeatures this string array is passed as the {@link #addAccount}
 * requiredFeatures parameter
 * @param addAccountOptions This {@link Bundle} is passed as the {@link #addAccount} options
 * parameter
 * @return an {@link Intent} that can be used to launch the ChooseAccount activity flow.
 */
====>[PUBLIC]<android.accounts.AccountManager: Intent newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)>    ---->
<androidx.leanback.widget.PlaybackControlsRow: int getBufferedProgress()>
/**
 * Returns the buffered progress for the playback controls row.
 * @throws ArithmeticException If buffered progress in milliseconds overflows int.
 * @deprecated Use {@link #getBufferedPosition()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: int getBufferedProgress()>    ---->    #getBufferedPosition()
<java.util.Date: void setYear(int)>
/**
 * Sets the year of this <tt>Date</tt> object to be the specified
 * value plus 1900. This <code>Date</code> object is modified so
 * that it represents a point in time within the specified year,
 * with the month, date, hour, minute, and second the same as
 * before, as interpreted in the local time zone. (Of course, if
 * the date was February 29, for example, and the year is set to a
 * non-leap year, then the new date will be treated as if it were
 * on March 1.)
 *
 * @param   year    the year value.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.YEAR, year + 1900)</code>.
 */
====>[PUBLIC]<java.util.Date: void setYear(int)>    ---->
<android.location.LocationManager: void removeGpsStatusListener(Listener)>
/**
 * Removes a GPS status listener.
 *
 * @param listener GPS status listener object to remove
 * @deprecated use {@link #unregisterGnssStatusCallback(GnssStatus.Callback)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: void removeGpsStatusListener(Listener)>    ---->    #unregisterGnssStatusCallback(GnssStatus.Callback)
Inconsistency (Non-Documentation):<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\pm\PackageInstallerService.java
<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>

====>[PUBLIC]<com.android.server.pm.PackageInstallerService: String allocateExternalStageCidLegacy()>    ---->
<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>
/**
 * Set the photo for this person. data may be null
 * @param cr the ContentResolver to use
 * @param person the Uri of the person whose photo is to be updated
 * @param data the byte[] that represents the photo
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: void setPhotoData(ContentResolver,Uri,byte[])>    ---->    android.provider.ContactsContract
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getAccount()>
/**
 * @deprecated AOSP does not associate keys with accounts. This may be done by system app.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.WrappedApplicationKey: byte[] getAccount()>    ---->
<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: void pinSlice(Uri,List<SliceSpec>)>    ---->
<android.app.ActionBar: int getSelectedNavigationIndex()>
/**
 * Get the position of the selected navigation item in list or tabbed navigation modes.
 *
 * @return Position of the selected item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getSelectedNavigationIndex()>    ---->
<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>
/**
 * Simulate touching the center of a view and dragging to the bottom of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean equals(Object)>
/**
 * @deprecated Use {@link AccessibilityRecord} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean equals(Object)>    ---->    AccessibilityRecord
<android.view.View: int getDrawingCacheQuality()>
/**
 * Returns the quality of the drawing cache.
 *
 * @return One of {@link #DRAWING_CACHE_QUALITY_AUTO},
 * {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}
 *
 * @see #setDrawingCacheQuality(int)
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 *
 * @attr ref android.R.styleable#View_drawingCacheQuality
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: int getDrawingCacheQuality()>    ---->    #setLayerType(int, Paint)
<com.android.systemui.plugins.Plugin: int getVersion()>
/**
 * @deprecated
 * @see Requires
 */
====>[PUBLIC]<com.android.systemui.plugins.Plugin: int getVersion()>    ---->    Requires
<android.net.TrafficStats: long getUidTcpRxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpRxBytes(int)>    ---->    #getUidRxBytes(int)
<android.provider.Settings.Secure: boolean isLocationProviderEnabledForUser(ContentResolver,String,int)>
/**
 * Helper method for determining if a location provider is enabled.
 * @param cr the content resolver to use
 * @param provider the location provider to query
 * @param userId the userId to query
 * @return true if the provider is enabled
 *
 * @deprecated use {@link LocationManager#isProviderEnabled(String)}
 * @hide
 */
====>[HIDDEN]<android.provider.Settings.Secure: boolean isLocationProviderEnabledForUser(ContentResolver,String,int)>    ---->    LocationManager#isProviderEnabled(String)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getContentIconGravity()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getContentIconGravity()>
/**
 * Get the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #getContentIcon
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getContentIconGravity()>    ---->
Inconsistency (Non-Documentation):<android.webkit.WebSettings: boolean getSaveFormData()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\WebSettings.java
<android.webkit.WebSettings: boolean getSaveFormData()>
/**
 * Gets whether the WebView saves form data.
 *
 * @return whether the WebView saves form data
 * @see #setSaveFormData
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getSaveFormData()>    ---->
<android.app.ActionBar: void addTab(Tab,int,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be insterted at
 * <code>position</code>.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,int,boolean)>    ---->
<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>
/**
 * Notify the host application that the current page would
 * like to show a custom View in a particular orientation.
 * @param view is the View object to be shown.
 * @param requestedOrientation An orientation constant as used in
 * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.
 * @param callback is the callback to be invoked if and when the view
 * is dismissed.
 * @deprecated This method supports the obsolete plugin mechanism,
 * and will not be invoked in future
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onShowCustomView(View,int,CustomViewCallback)>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIconGravity(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIconGravity(int)>
/**
 * Set the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #setContentIcon
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIconGravity(int)>    ---->
<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>
/**
 * @deprecated Use {@link #abortReliableWrite()}
 */
====>[PUBLIC]<android.bluetooth.BluetoothGatt: void abortReliableWrite(BluetoothDevice)>    ---->    #abortReliableWrite()
<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(Signature,String)>
/**
 * Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatus}.
 * @deprecated Please use
 * {@link UiccProfile#getCarrierPrivilegeStatus(Signature, String)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(Signature,String)>    ---->    UiccProfile#getCarrierPrivilegeStatus(Signature, String)
<android.preference.PreferenceActivity: PreferenceScreen getPreferenceScreen()>
/**
 * Gets the root of the preference hierarchy that this activity is showing.
 *
 * @return The {@link PreferenceScreen} that is the root of the preference
 * hierarchy.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: PreferenceScreen getPreferenceScreen()>    ---->
<android.content.pm.ShortcutInfo: CharSequence getText()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: CharSequence getText()>    ---->
<java.sql.Time: int getDate()>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a date component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #setDate
 */
====>[PUBLIC]<java.sql.Time: int getDate()>    ---->
<androidx.navigation.NavOptions: boolean shouldLaunchDocument()>
/**
 * Whether this navigation action should launch the destination in a new document.
 * <p>
 * This functions similarly to how {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}
 * works with activites.
 * @deprecated As per the {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}
 * documentation, it is recommended to use {@link android.R.attr#documentLaunchMode} on an
 * Activity you wish to launch as a new document.
 */
====>[PUBLIC]<androidx.navigation.NavOptions: boolean shouldLaunchDocument()>    ---->    android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()>
/**
 * Query if a USB Mass Storage (UMS) is enabled on the device.
 * @return true if UMS host is enabled.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()>    ---->
Inconsistency (Non-Documentation):<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\os\Environment.java
<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)>

====>[PUBLIC]<android.os.Environment.UserEnvironment: File getExternalStoragePublicDirectory(String)>    ---->
<java.lang.SecurityManager: int classDepth(String)>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: int classDepth(String)>    ---->    #checkPermission
<androidx.legacy.app.FragmentStatePagerAdapter: void restoreState(Parcelable,ClassLoader)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void restoreState(Parcelable,ClassLoader)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<com.android.ims.ImsConfig: int getProvisionedValue(int)>
/**
 * @deprecated see {@link #getConfigInt(int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int getProvisionedValue(int)>    ---->    #getConfigInt(int)
<android.text.StaticLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Camera getCamera()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\CameraAgent.java
<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Camera getCamera()>
/**
 * Returns the underlying {@link android.hardware.Camera} object used
 * by this proxy. This method should only be used when handing the
 * camera device over to {@link android.media.MediaRecorder} for
 * recording.
 */
====>[PUBLIC]<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Camera getCamera()>    ---->
<com.android.internal.telephony.uicc.UiccCard: PinState getUniversalPinState()>
/**
 * @deprecated Please use {@link UiccProfile#getUniversalPinState()} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: PinState getUniversalPinState()>    ---->    UiccProfile#getUniversalPinState()
<android.graphics.Canvas: boolean clipRect(float,float,float,float,Op)>
/**
 * Modify the current clip with the specified rectangle, which is
 * expressed in local coordinates.
 *
 * @param left   The left side of the rectangle to intersect with the
 * current clip
 * @param top    The top of the rectangle to intersect with the current
 * clip
 * @param right  The right side of the rectangle to intersect with the
 * current clip
 * @param bottom The bottom of the rectangle to intersect with the current
 * clip
 * @param op     How the clip is modified
 * @return       true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(float,float,float,float)} and
 * {@link #clipOutRect(float,float,float,float)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(float,float,float,float,Op)>    ---->    Region.Op#INTERSECT
<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>
/**
 * WPS operation completed successfully
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onSucceeded()>    ---->
<androidx.fragment.app.Fragment: void onAttach(Activity)>
/**
 * Called when a fragment is first attached to its activity.
 * {@link #onCreate(Bundle)} will be called after this.
 *
 * @deprecated See {@link #onAttach(Context)}.
 */
====>[PUBLIC]<androidx.fragment.app.Fragment: void onAttach(Activity)>    ---->    #onAttach(Context)
<android.webkit.URLUtil: boolean isCookielessProxyUrl(String)>
/**
 * @return {@code true} if the url is a proxy url to allow cookieless network
 * requests from a file url.
 * @deprecated Cookieless proxy is no longer supported.
 */
====>[PUBLIC]<android.webkit.URLUtil: boolean isCookielessProxyUrl(String)>    ---->
<android.service.carrier.CarrierMessagingService: void onSendTextSms(String,int,String,ResultCallback<SendSmsResult>)>
/**
 * Override this method to intercept text SMSs sent from the device.
 * @deprecated Override {@link #onSendTextSms} below instead.
 *
 * @param text the text to send
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param callback result callback. Call with a {@link SendSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendTextSms(String,int,String,ResultCallback<SendSmsResult>)>    ---->    #onSendTextSms
<android.content.res.Resources: int getColor(int)>
/**
 * Returns a color integer associated with a particular resource ID. If the
 * resource holds a complex {@link ColorStateList}, then the default color
 * from the set is returned.
 *
 * @param id The desired resource identifier, as generated by the aapt
 * tool. This integer encodes the package, type, and resource
 * entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 *
 * @return A single color value in the form 0xAARRGGBB.
 * @deprecated Use {@link #getColor(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: int getColor(int)>    ---->    #getColor(int, Theme)
<android.app.PictureInPictureArgs: void setActions(List<RemoteAction>)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setActions(List<RemoteAction>)>    ---->
<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: Object getInfo()>
/**
 * @return The wrapped {@link android.view.accessibility.AccessibilityNodeInfo}.
 *
 * @deprecated Use {@link #unwrap()} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: Object getInfo()>    ---->    #unwrap()
<android.telephony.gsm.SmsMessage: String getPseudoSubject()>
/**
 * Unofficial convention of a subject line enclosed in parens empty string
 * if not present
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getPseudoSubject()>    ---->
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,String)>
/**
 * Tells the underlying networking system that the caller is finished
 * using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature that is no longer needed
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner
 * {@link #unregisterNetworkCallback(NetworkCallback)} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,String)>    ---->    #unregisterNetworkCallback(NetworkCallback)
<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>
/**
 * Writes a byte enabling or disabling the ability to "OEM unlock" the device.
 *
 * @deprecated use {@link OemLockManager#setOemUnlockAllowedByUser(boolean)} instead.
 */
====>[PUBLIC]<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>    ---->    OemLockManager#setOemUnlockAllowedByUser(boolean)
<android.os.SystemClock: Clock uptimeMillisClock()>
/**
 * @removed
 */
====>[HIDDEN]<android.os.SystemClock: Clock uptimeMillisClock()>    ---->
<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)>
/**
 * @see #setCallDataUsage(long)
 *
 * @param dataUsage The updated data usage (in byes).
 * @deprecated - Use {@link #setCallDataUsage(long)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection.VideoProvider: void changeCallDataUsage(long)>    ---->    #setCallDataUsage(long)
<androidx.legacy.app.FragmentStatePagerAdapter: void <init>(FragmentManager)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void <init>(FragmentManager)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.renderscript.RSTextureView: void <init>(Context,AttributeSet)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void <init>(Context,AttributeSet)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,TruncateAt,int,int)>
/**
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,TextDirectionHeuristic,float,float,boolean,TruncateAt,int,int)>    ---->    Builder
<androidx.palette.graphics.Palette.Builder: Builder resizeBitmapSize(int)>
/**
 * Set the resize value when using a {@link android.graphics.Bitmap} as the source.
 * If the bitmap's largest dimension is greater than the value specified, then the bitmap
 * will be resized so that its largest dimension matches {@code maxDimension}. If the
 * bitmap is smaller or equal, the original is used as-is.
 *
 * @deprecated Using {@link #resizeBitmapArea(int)} is preferred since it can handle
 * abnormal aspect ratios more gracefully.
 *
 * @param maxDimension the number of pixels that the max dimension should be scaled down to,
 * or any value <= 0 to disable resizing.
 */
====>[PUBLIC]<androidx.palette.graphics.Palette.Builder: Builder resizeBitmapSize(int)>    ---->    #resizeBitmapArea(int)
<android.test.TouchUtils: int dragViewToY(ActivityInstrumentationTestCase,View,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location. Only moves vertically.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toY Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewToY(ActivityInstrumentationTestCase,View,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.telephony.gsm.SmsMessage: int getIndexOnIcc()>
/**
 * Returns the record index of the message on the ICC (1-based index).
 * @return the record index of the message on the ICC, or -1 if this
 * SmsMessage was not created from a ICC SMS EF record.
 * @deprecated Use android.telephony.SmsMessage.
 * @hide
 */
====>[HIDDEN]<android.telephony.gsm.SmsMessage: int getIndexOnIcc()>    ---->
<android.nfc.NfcAdapter: NfcAdapter getDefaultAdapter()>
/**
 * Legacy NfcAdapter getter, always use {@link #getDefaultAdapter(Context)} instead.<p>
 * This method was deprecated at API level 10 (Gingerbread MR1) because a context is required
 * for many NFC API methods. Those methods will fail when called on an NfcAdapter
 * object created from this method.<p>
 * @deprecated use {@link #getDefaultAdapter(Context)}
 * @hide
 */
====>[HIDDEN]<android.nfc.NfcAdapter: NfcAdapter getDefaultAdapter()>    ---->    #getDefaultAdapter(Context)
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
/**
 * Gets whether light touches are enabled.
 * @see #setLightTouchEnabled
 * @deprecated This setting is obsolete.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getLightTouchEnabled()>    ---->
<android.os.Debug: int getGlobalExternalFreedCount()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalFreedCount()>    ---->
<androidx.legacy.app.FragmentStatePagerAdapter: boolean isViewFromObject(View,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: boolean isViewFromObject(View,Object)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.util.proto.ProtoOutputStream: void writeRepeatedDouble(long,double)>
/**
 * Write a single repeated proto "double" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedDouble(long,double)>    ---->    #write
<androidx.leanback.widget.DetailsOverviewRow: void addAction(Action)>
/**
 * Adds an Action to the overview. It will throw ClassCastException if the current actions
 * adapter is not an instance of {@link ArrayObjectAdapter}. Must be called on the UI thread.
 *
 * @param action The Action to add.
 * @deprecated Use {@link #setActionsAdapter(ObjectAdapter)} and {@link #getActionsAdapter()}
 */
====>[PUBLIC]<androidx.leanback.widget.DetailsOverviewRow: void addAction(Action)>    ---->    #setActionsAdapter(ObjectAdapter)
<java.util.logging.Logger: void logrb(Level,String,String,String,String,Throwable)>
/**
 * Log a message, specifying source class, method, and resource bundle name,
 * with associated Throwable information.
 * <p>
 * If the logger is currently enabled for the given message
 * level then the given arguments are stored in a LogRecord
 * which is forwarded to all registered output handlers.
 * <p>
 * The msg string is localized using the named resource bundle.  If the
 * resource bundle name is null, or an empty String or invalid
 * then the msg string is not localized.
 * <p>
 * Note that the thrown argument is stored in the LogRecord thrown
 * property, rather than the LogRecord parameters property.  Thus it is
 * processed specially by output Formatters and is not treated
 * as a formatting parameter to the LogRecord message property.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod   name of method that issued the logging request
 * @param   bundleName     name of resource bundle to localize msg,
 * can be null
 * @param   msg     The string message (or a key in the message catalog)
 * @param   thrown  Throwable associated with log message.
 * @deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
 * java.lang.String, java.util.ResourceBundle, java.lang.String,
 * java.lang.Throwable)} instead.
 */
====>[PUBLIC]<java.util.logging.Logger: void logrb(Level,String,String,String,String,Throwable)>    ---->    #logrb(java.util.logging.Level, java.lang.String,  java.lang.String, java.util.ResourceBundle, java.lang.String,  java.lang.Throwable)
<androidx.cursoradapter.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param context The context where the ListView associated with this adapter is running
 * @param layout resource identifier of a layout file that defines the views
 * for this list item.  Unless you override them later, this will
 * define both the item views and the drop down views.
 */
====>[PUBLIC]<androidx.cursoradapter.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>    ---->    android.app.LoaderManager
<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice(Context)>
/**
 * Indicates whether VoWifi is provisioned on device.
 *
 * When CarrierConfig KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL is true, and VoLTE is not
 * provisioned on device, this method returns false.
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isWfcProvisionedOnDevice()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice(Context)>    ---->    #isWfcProvisionedOnDevice()
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
/**
 * Gets whether there are any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @return {@code true} if there are any saved username/password pairs
 * @see WebView#savePassword
 * @see #clearUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>    ---->
<java.net.URLDecoder: String decode(String)>
/**
 * Decodes a {@code x-www-form-urlencoded} string.
 * The platform's default encoding is used to determine what characters
 * are represented by any consecutive sequences of the form
 * "<i>{@code %xy}</i>".
 * @param s the {@code String} to decode
 * @deprecated The resulting string may vary depending on the platform's
 * default encoding. Instead, use the decode(String,String) method
 * to specify the encoding.
 * @return the newly decoded {@code String}
 */
====>[PUBLIC]<java.net.URLDecoder: String decode(String)>    ---->
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
/**
 * Clears any saved username/password pairs for web forms.
 * Note that these are unrelated to HTTP authentication credentials.
 *
 * @see WebView#savePassword
 * @see #hasUsernamePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: void clearUsernamePassword()>    ---->
<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates the fixed function fragment program from the current
 * state of the builder.
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: ProgramFragmentFixedFunction create()>    ---->
<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreCell(CellBuilder)>
/**
 * If all content in a slice cannot be shown, the cell added here may be displayed where the
 * content is cut off.
 * <p>
 * This method should only be used if you want to display a custom cell to indicate more
 * content, consider using {@link #addSeeMoreAction(PendingIntent)} otherwise. If you do
 * choose to specify a custom cell, the cell should have
 * {@link CellBuilder#setContentIntent(PendingIntent)} specified to take the user to an
 * activity to see all of the content.
 * </p>
 * <p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 *
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreCell(CellBuilder)>    ---->
<android.security.keystore.recovery.RecoverySession: byte[] start(CertPath,byte[],byte[],List<KeyChainProtectionParams>)>
/**
 * @deprecated Use {@link #start(String, CertPath, byte[], byte[], List)} instead.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoverySession: byte[] start(CertPath,byte[],byte[],List<KeyChainProtectionParams>)>    ---->    #start(String, CertPath, byte[], byte[], List)
<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,int,CharSequence)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,int,CharSequence)>    ---->
<android.util.AtomicFile: void truncate()>
/**
 * @hide
 * @deprecated This is not safe.
 */
====>[HIDDEN]<android.util.AtomicFile: void truncate()>    ---->
<androidx.fragment.app.FragmentManager: FragmentTransaction openTransaction()>
/**
 * @hide -- remove once prebuilts are in.
 * @deprecated
 */
====>[HIDDEN]<androidx.fragment.app.FragmentManager: FragmentTransaction openTransaction()>    ---->
<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)>
/**
 * Sets the background color for the selected week.
 *
 * @param color The week background color.
 *
 * @attr ref android.R.styleable#CalendarView_selectedWeekBackgroundColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)>    ---->
<android.view.View: boolean willNotCacheDrawing()>
/**
 * Returns whether or not this View can cache its drawing or not.
 *
 * @return true if this view does not cache its drawing, false otherwise
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: boolean willNotCacheDrawing()>    ---->    #setLayerType(int, Paint)
<androidx.core.view.ViewGroupCompat: boolean onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent)>
/**
 * Called when a child has requested sending an {@link AccessibilityEvent} and
 * gives an opportunity to its parent to augment the event.
 * <p>
 * If an {@link AccessibilityDelegateCompat} has been specified via calling
 * {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)} its
 * {@link AccessibilityDelegateCompat#onRequestSendAccessibilityEvent(ViewGroup, View,
 * AccessibilityEvent)} is responsible for handling this call.
 * </p>
 *
 * @param group The group whose method to invoke.
 * @param child The child which requests sending the event.
 * @param event The event to be sent.
 * @return True if the event should be sent.
 *
 * @deprecated Use {@link ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)}
 * directly.
 */
====>[PUBLIC]<androidx.core.view.ViewGroupCompat: boolean onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent)>    ---->    ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)
<java.util.logging.Logger: void logrb(Level,String,String,String,String,Object)>
/**
 * Log a message, specifying source class, method, and resource bundle name,
 * with a single object parameter to the log message.
 * <p>
 * If the logger is currently enabled for the given message
 * level then a corresponding LogRecord is created and forwarded
 * to all the registered output Handler objects.
 * <p>
 * The msg string is localized using the named resource bundle.  If the
 * resource bundle name is null, or an empty String or invalid
 * then the msg string is not localized.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod   name of method that issued the logging request
 * @param   bundleName     name of resource bundle to localize msg,
 * can be null
 * @param   msg      The string message (or a key in the message catalog)
 * @param   param1    Parameter to the log message.
 * @deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
 * java.lang.String, java.util.ResourceBundle, java.lang.String,
 * java.lang.Object...)} instead
 */
====>[PUBLIC]<java.util.logging.Logger: void logrb(Level,String,String,String,String,Object)>    ---->    #logrb(java.util.logging.Level, java.lang.String,  java.lang.String, java.util.ResourceBundle, java.lang.String,  java.lang.Object...)
<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,int[],PointerCoords[],int,float,float,int,int,int,int)>
/**
 * Create a new MotionEvent, filling in all of the basic values that
 * define the motion.
 *
 * @param downTime The time (in ms) when the user originally pressed down to start
 * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param eventTime The the time (in ms) when this specific event was generated.  This
 * must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.
 * @param pointerCount The number of pointers that will be in this event.
 * @param pointerIds An array of <em>pointerCount</em> values providing
 * an identifier for each pointer.
 * @param pointerCoords An array of <em>pointerCount</em> values providing
 * a {@link PointerCoords} coordinate object for each pointer.
 * @param metaState The state of any meta / modifier keys that were in effect when
 * the event was generated.
 * @param xPrecision The precision of the X coordinate being reported.
 * @param yPrecision The precision of the Y coordinate being reported.
 * @param deviceId The id for the device that this event came from.  An id of
 * zero indicates that the event didn't come from a physical device; other
 * numbers are arbitrary and you shouldn't depend on the values.
 * @param edgeFlags A bitfield indicating which edges, if any, were touched by this
 * MotionEvent.
 * @param source The source of this event.
 * @param flags The motion event flags.
 *
 * @deprecated Use {@link #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)}
 * instead.
 */
====>[PUBLIC]<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,int[],PointerCoords[],int,float,float,int,int,int,int)>    ---->    #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)
<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the texture matrix in the fixed function matrix buffer.
 * Texture matrix must be enabled in the
 * ProgramVertexFixedFunction builder for the shader to utilize
 * it.
 *
 * @param m modelview matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setTexture(Matrix4f)>    ---->
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(OnUtteranceCompletedListener)>
/**
 * Sets the listener that will be notified when synthesis of an utterance completes.
 *
 * @param listener The listener to use.
 *
 * @return {@link #ERROR} or {@link #SUCCESS}.
 *
 * @deprecated Use {@link #setOnUtteranceProgressListener(UtteranceProgressListener)}
 * instead.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(OnUtteranceCompletedListener)>    ---->    #setOnUtteranceProgressListener(UtteranceProgressListener)
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,Paint)>
/**
 * Returns the next cursor position in the run.  This avoids placing the cursor between
 * surrogates, between characters that form conjuncts, between base characters and combining
 * marks, or within a reordering cluster.
 *
 * <p>The context is the shaping context for cursor movement, generally the bounds of the metric
 * span enclosing the cursor in the direction of movement.
 * <code>contextStart</code>, <code>contextEnd</code> and <code>offset</code> are relative to
 * the start of the string.</p>
 *
 * <p>If cursorOpt is CURSOR_AT and the offset is not a valid cursor position,
 * this returns -1.  Otherwise this will never return a value before contextStart or after
 * contextEnd.</p>
 *
 * @param contextStart the start index of the context
 * @param contextEnd the (non-inclusive) end index of the context
 * @param dir either DIRECTION_RTL or DIRECTION_LTR
 * @param offset the cursor position to move from
 * @param cursorOpt how to move the cursor, one of CURSOR_AFTER,
 * CURSOR_AT_OR_AFTER, CURSOR_BEFORE,
 * CURSOR_AT_OR_BEFORE, or CURSOR_AT
 * @param p the Paint object that is requesting this information
 * @return the offset of the next position, or -1
 * @deprecated This is an internal method, refrain from using it in your code
 */
====>[PUBLIC]<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,Paint)>    ---->
Inconsistency (Non-Documentation):<java.net.AbstractPlainDatagramSocketImpl: void setTTL(byte)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\java\net\AbstractPlainDatagramSocketImpl.java
<java.net.AbstractPlainDatagramSocketImpl: void setTTL(byte)>
/**
 * Set the TTL (time-to-live) option.
 * @param ttl TTL to be set.
 */
====>[PUBLIC]<java.net.AbstractPlainDatagramSocketImpl: void setTTL(byte)>    ---->
<android.webkit.WebSettings: void setPluginsPath(String)>
/**
 * Sets a custom path to plugins used by the WebView. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @param pluginsPath a String path to the directory containing plugins
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setPluginsPath(String)>    ---->
<android.app.slice.Slice.Builder: void <init>(Uri)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: void <init>(Uri)>    ---->
<androidx.legacy.app.FragmentTabHost: void onAttachedToWindow()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void onAttachedToWindow()>    ---->    androidx.fragment.app.FragmentTabHost
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance()>
/**
 * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.
 *
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance()>    ---->    #getInstance(Locale)
<androidx.browser.customtabs.CustomTabsIntent.Builder: Builder addToolbarItem(int,Bitmap,String,PendingIntent)>
/**
 * Adds an action button to the custom tab. Multiple buttons can be added via this method.
 * If the given id equals {@link #TOOLBAR_ACTION_BUTTON_ID}, the button will be placed on
 * the toolbar; if the bitmap is too wide, it will be put to the bottom bar instead. If
 * the id is not {@link #TOOLBAR_ACTION_BUTTON_ID}, it will be directly put on secondary
 * toolbar. The maximum number of allowed toolbar items in a single intent is
 * {@link CustomTabsIntent#getMaxToolbarItems()}. Throws an
 * {@link IllegalStateException} when that number is exceeded per intent.
 *
 * @param id The unique id of the action button. This should be non-negative.
 * @param icon The icon.
 * @param description The description for the button. To be used for accessibility.
 * @param pendingIntent The pending intent delivered when the button is clicked.
 *
 * @see CustomTabsIntent#getMaxToolbarItems()
 * @deprecated Use
 * CustomTabsIntent.Builder#setSecondaryToolbarViews(RemoteViews, int[], PendingIntent).
 */
====>[PUBLIC]<androidx.browser.customtabs.CustomTabsIntent.Builder: Builder addToolbarItem(int,Bitmap,String,PendingIntent)>    ---->
<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap)>    ---->    Palette.Builder
<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()>
/**
 * Gets the non-localized description of the accessibility service.
 * <p>
 * <strong>Statically set from
 * {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>
 * </p>
 * @return The description.
 *
 * @deprecated Use {@link #loadDescription(PackageManager)}.
 */
====>[PUBLIC]<android.accessibilityservice.AccessibilityServiceInfo: String getDescription()>    ---->    #loadDescription(PackageManager)
<androidx.leanback.widget.ListRowPresenter: int getZoomFactor()>
/**
 * Returns the zoom factor used for focus highlighting.
 * @deprecated use {@link #getFocusZoomFactor} instead.
 */
====>[PUBLIC]<androidx.leanback.widget.ListRowPresenter: int getZoomFactor()>    ---->    #getFocusZoomFactor
Inconsistency (Non-Documentation):<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\speech\tts\TextToSpeech.java
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>
/**
 * Checks whether the user's settings should override settings requested
 * by the calling application. As of the Ice cream sandwich release,
 * user settings never forcibly override the app's settings.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>    ---->
<android.view.ViewConfiguration: int getDoubleTapSlop()>
/**
 * @return Distance in dips between the first touch and second touch to still be
 * considered a double tap
 * @deprecated Use {@link #getScaledDoubleTapSlop()} instead.
 * @hide The only client of this should be GestureDetector, which needs this
 * for clients that still use its deprecated constructor.
 */
====>[HIDDEN]<android.view.ViewConfiguration: int getDoubleTapSlop()>    ---->    #getScaledDoubleTapSlop()
<android.widget.CursorAdapter: void <init>(Context,Cursor)>
/**
 * Constructor that always enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param c The cursor from which to get the data.
 * @param context The context
 */
====>[PUBLIC]<android.widget.CursorAdapter: void <init>(Context,Cursor)>    ---->    android.app.LoaderManager
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)>
/**
 * Copy a raw SMS PDU to the SIM.
 *
 * @param smsc the SMSC for this message, or NULL for the default SMSC
 * @param pdu the raw PDU to store
 * @param status message status (STATUS_ON_SIM_READ, STATUS_ON_SIM_UNREAD,
 * STATUS_ON_SIM_SENT, STATUS_ON_SIM_UNSENT)
 * @return true for success
 * @deprecated Use android.telephony.SmsManager.
 * {@hide}
 */
====>[HIDDEN]<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)>    ---->
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
/**
 * Gets the background color for the selected week.
 *
 * @return The week background color.
 *
 * @attr ref android.R.styleable#CalendarView_selectedWeekBackgroundColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>    ---->
Inconsistency (Non-Documentation):<android.database.CursorWrapper: boolean requery()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\database\CursorWrapper.java
<android.database.CursorWrapper: boolean requery()>

====>[PUBLIC]<android.database.CursorWrapper: boolean requery()>    ---->
<androidx.core.view.MenuItemCompat: void setShowAsAction(MenuItem,int)>
/**
 * Sets how this item should display in the presence of a compatible Action Bar. If the given
 * item is compatible, this will call the item's supported implementation of
 * {@link MenuItem#setShowAsAction(int)}.
 *
 * @param item - the item to change
 * @param actionEnum - How the item should display.
 *
 * @deprecated Use {@link MenuItem#setShowAsAction(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: void setShowAsAction(MenuItem,int)>    ---->    MenuItem#setShowAsAction(int)
<androidx.leanback.app.PlaybackFragment: void fadeOut()>
/**
 * Fades out the playback overlay immediately.
 * @deprecated Call {@link #hideControlsOverlay(boolean)}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackFragment: void fadeOut()>    ---->    #hideControlsOverlay(boolean)
<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,CharSequence)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,CharSequence)>    ---->
<android.view.View: Bitmap getDrawingCache()>
/**
 * <p>Calling this method is equivalent to calling <code>getDrawingCache(false)</code>.</p>
 *
 * @return A non-scaled bitmap representing this view or null if cache is disabled.
 *
 * @see #getDrawingCache(boolean)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: Bitmap getDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
/**
 * Sets the maximum size for the Application Cache content. The passed size
 * will be rounded to the nearest value that the database can support, so
 * this should be viewed as a guide, not a hard limit. Setting the
 * size to a value less than current database size does not cause the
 * database to be trimmed. The default size is {@link Long#MAX_VALUE}.
 * It is recommended to leave the maximum size set to the default value.
 *
 * @param appCacheMaxSize the maximum size in bytes
 * @deprecated In future quota will be managed automatically.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setAppCacheMaxSize(long)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityRecordCompat obtain()>
/**
 * Returns a cached instance if such is available or a new one is
 * instantiated.
 *
 * @return An instance.
 *
 * @deprecated Use {@link AccessibilityRecord#obtain()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityRecordCompat obtain()>    ---->    AccessibilityRecord#obtain()
<android.view.Display: float[] getSupportedRefreshRates()>
/**
 * Get the supported refresh rates of this display in frames per second.
 * <p>
 * This method only returns refresh rates for the display's default modes. For more options, use
 * {@link #getSupportedModes()}.
 *
 * @deprecated use {@link #getSupportedModes()} instead
 */
====>[PUBLIC]<android.view.Display: float[] getSupportedRefreshRates()>    ---->    #getSupportedModes()
<android.speech.tts.UtteranceProgressListener: void onUtteranceRangeStart(String,int,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.speech.tts.UtteranceProgressListener: void onUtteranceRangeStart(String,int,int)>    ---->
<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)>
/**
 * @deprecated in API 16
 * Configure the multisample rendering.
 *
 * @param minimum The required number of samples, must be at least 1.
 * @param preferred The targe number of samples, must be at least
 * minimum
 * @param Q  The quality of samples, range 0-1.  Used to decide between
 * different formats which have the same number of samples but
 * different rendering quality.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setSamples(int,int,float)>    ---->
<android.hardware.fingerprint.FingerprintManager: void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)>
/**
 * Request authentication of a crypto object. This call warms up the fingerprint hardware
 * and starts scanning for a fingerprint. It terminates when
 * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or
 * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at
 * which point the object is no longer valid. The operation can be canceled by using the
 * provided cancel object.
 *
 * @param crypto object associated with the call or null if none required.
 * @param cancel an object that can be used to cancel authentication
 * @param flags optional flags; should be 0
 * @param callback an object to receive authentication events
 * @param handler an optional handler to handle callback events
 *
 * @throws IllegalArgumentException if the crypto operation is not supported or is not backed
 * by <a href="{@docRoot}training/articles/keystore.html">Android Keystore
 * facility</a>.
 * @throws IllegalStateException if the crypto primitive is not initialized.
 * @deprecated See {@link BiometricPrompt#authenticate(CancellationSignal, Executor,
 * BiometricPrompt.AuthenticationCallback)} and {@link BiometricPrompt#authenticate(
 * BiometricPrompt.CryptoObject, CancellationSignal, Executor,
 * BiometricPrompt.AuthenticationCallback)}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)>    ---->    BiometricPrompt#authenticate(CancellationSignal, Executor,  BiometricPrompt.AuthenticationCallback)
<android.location.LocationManager: boolean addGpsStatusListener(Listener)>
/**
 * Adds a GPS status listener.
 *
 * @param listener GPS status listener object to register
 *
 * @return true if the listener was successfully added
 *
 * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
 * @deprecated use {@link #registerGnssStatusCallback(GnssStatus.Callback)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: boolean addGpsStatusListener(Listener)>    ---->    #registerGnssStatusCallback(GnssStatus.Callback)
<androidx.core.app.TaskStackBuilder: Iterator<Intent> iterator()>
/**
 * @deprecated Use editIntentAt instead
 */
====>[PUBLIC]<androidx.core.app.TaskStackBuilder: Iterator<Intent> iterator()>    ---->    editIntentAt
<androidx.core.view.ViewCompat: void setFitsSystemWindows(View,boolean)>
/**
 * Sets whether or not this view should account for system screen decorations
 * such as the status bar and inset its content; that is, controlling whether
 * the default implementation of {@link View#fitSystemWindows(Rect)} will be
 * executed. See that method for more details.
 *
 * @deprecated Use {@link View#setFitsSystemWindows(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setFitsSystemWindows(View,boolean)>    ---->    View#setFitsSystemWindows(boolean)
<android.content.Intent: Object getExtra(String)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 *
 * @return the value of an item previously added with putExtra(),
 * or null if none was found.
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Object getExtra(String)>    ---->
Inconsistency (Non-Documentation):<androidx.loader.content.CursorLoader: void dump(String,FileDescriptor,PrintWriter,String[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\loader\content\CursorLoader.java
<androidx.loader.content.CursorLoader: void dump(String,FileDescriptor,PrintWriter,String[])>

====>[PUBLIC]<androidx.loader.content.CursorLoader: void dump(String,FileDescriptor,PrintWriter,String[])>    ---->
<android.hardware.SensorManager: int getSensors()>
/**
 * @return available sensors.
 * @deprecated This method is deprecated, use
 * {@link SensorManager#getSensorList(int)} instead
 */
====>[PUBLIC]<android.hardware.SensorManager: int getSensors()>    ---->    SensorManager#getSensorList(int)
<android.util.proto.ProtoOutputStream: void writePackedInt32(long,int[])>
/**
 * Write a list of packed proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedInt32(long,int[])>    ---->    #write
<android.renderscript.ProgramFragment.Builder: ProgramFragment create()>
/**
 * @deprecated in API 16
 * Creates ProgramFragment from the current state of the builder
 *
 * @return  ProgramFragment
 */
====>[PUBLIC]<android.renderscript.ProgramFragment.Builder: ProgramFragment create()>    ---->
<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(Editable)>
/**
 * Formats a phone number in-place using the Japanese formatting rules.
 * Numbers will be formatted as:
 *
 * <p><code>
 * 03-xxxx-xxxx
 * 090-xxxx-xxxx
 * 0120-xxx-xxx
 * +81-3-xxxx-xxxx
 * +81-90-xxxx-xxxx
 * </code></p>
 *
 * @param text the number to be formatted, will be modified with
 * the formatting
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(Editable)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.net.NetworkInfo: boolean isRoaming()>
/**
 * Indicates whether the device is currently roaming on this network. When
 * {@code true}, it suggests that use of data on this network may incur
 * extra costs.
 *
 * @return {@code true} if roaming is in effect, {@code false} otherwise.
 * @deprecated Callers should switch to checking
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING}
 * instead, since that handles more complex situations, such as
 * VPNs.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isRoaming()>    ---->    NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING
Inconsistency (Non-Documentation):<com.android.bitmap.util.Exif: int getOrientation(byte[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\bitmap\util\Exif.java
<com.android.bitmap.util.Exif: int getOrientation(byte[])>

====>[PUBLIC]<com.android.bitmap.util.Exif: int getOrientation(byte[])>    ---->
Inconsistency (Non-Documentation):<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\GridBuilder.java
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon,boolean)>
/**
 * Adds an image to the cell that should be displayed as large as the cell allows.
 * There can be at most one image, the first one added will be used, others will be ignored.
 * <p>
 * Use this method to specify content that will appear in the template once it's been
 * loaded.
 * </p>
 * @param isLoading indicates whether the app is doing work to load the added content in the
 * background or not.
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon,boolean)>    ---->
<java.util.logging.Logger: void logrb(Level,String,String,String,String)>
/**
 * Log a message, specifying source class, method, and resource bundle name
 * with no arguments.
 * <p>
 * If the logger is currently enabled for the given message
 * level then the given message is forwarded to all the
 * registered output Handler objects.
 * <p>
 * The msg string is localized using the named resource bundle.  If the
 * resource bundle name is null, or an empty String or invalid
 * then the msg string is not localized.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod   name of method that issued the logging request
 * @param   bundleName     name of resource bundle to localize msg,
 * can be null
 * @param   msg     The string message (or a key in the message catalog)
 * @deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
 * java.lang.String, java.util.ResourceBundle, java.lang.String,
 * java.lang.Object...)} instead.
 */
====>[PUBLIC]<java.util.logging.Logger: void logrb(Level,String,String,String,String)>    ---->    #logrb(java.util.logging.Level, java.lang.String,  java.lang.String, java.util.ResourceBundle, java.lang.String,  java.lang.Object...)
<android.graphics.drawable.BitmapDrawable: void <init>(String)>
/**
 * Create a drawable by opening a given file path and decoding the bitmap.
 * @deprecated Use {@link #BitmapDrawable(Resources, String)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(String)>    ---->    #BitmapDrawable(Resources, String)
<androidx.core.view.ViewCompat: Matrix getMatrix(View)>
/**
 * The transform matrix of this view, which is calculated based on the current
 * rotation, scale, and pivot properties.
 * <p>
 *
 * @param view The view whose Matrix will be returned
 * @return The current transform matrix for the view
 *
 * @see #getRotation(View)
 * @see #getScaleX(View)
 * @see #getScaleY(View)
 * @see #getPivotX(View)
 * @see #getPivotY(View)
 *
 * @deprecated Use {@link View#getMatrix()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: Matrix getMatrix(View)>    ---->    View#getMatrix()
<androidx.core.widget.ScrollerCompat: void notifyVerticalEdgeReached(int,int,int)>
/**
 * Notify the scroller that we've reached a vertical boundary.
 * Normally the information to handle this will already be known
 * when the animation is started, such as in a call to one of the
 * fling functions. However there are cases where this cannot be known
 * in advance. This function will animate a parabolic motion from
 * startY to finalY.
 *
 * @param startY Starting/current Y position
 * @param finalY Desired final Y position
 * @param overY Magnitude of overscroll allowed. This should be the maximum
 * desired distance from finalY. Absolute value - must be positive.
 *
 * @deprecated Use {@link OverScroller#notifyVerticalEdgeReached(int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void notifyVerticalEdgeReached(int,int,int)>    ---->    OverScroller#notifyVerticalEdgeReached(int, int, int)
<android.hardware.location.ContextHubManager: int[] getContextHubHandles()>
/**
 * Get a handle to all the context hubs in the system
 *
 * @return array of context hub handles
 *
 * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the
 * new APIs.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int[] getContextHubHandles()>    ---->    #getContextHubs()
<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
/**
 * Returns the record index of the message on the SIM (1-based index).
 * @return the record index of the message on the SIM, or -1 if this
 * SmsMessage was not created from a SIM SMS EF record.
 * @deprecated Use android.telephony.SmsMessage and getIndexOnIcc instead.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int getIndexOnSim()>    ---->    android.telephony.SmsMessage and getIndexOnIcc
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,boolean)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,boolean)>    ---->
<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(ComponentName,String)>
/**
 * Called by a profile owner or device owner to grant access to privileged certificate
 * manipulation APIs to a third-party certificate installer app. Granted APIs include
 * {@link #getInstalledCaCerts}, {@link #hasCaCertInstalled}, {@link #installCaCert},
 * {@link #uninstallCaCert}, {@link #uninstallAllUserCaCerts} and {@link #installKeyPair}.
 * <p>
 * Delegated certificate installer is a per-user state. The delegated access is persistent until
 * it is later cleared by calling this method with a null value or uninstallling the certificate
 * installer.
 * <p>
 * <b>Note:</b>Starting from {@link android.os.Build.VERSION_CODES#N}, if the caller
 * application's target SDK version is {@link android.os.Build.VERSION_CODES#N} or newer, the
 * supplied certificate installer package must be installed when calling this API, otherwise an
 * {@link IllegalArgumentException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param installerPackage The package name of the certificate installer which will be given
 * access. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_CERT_INSTALL} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(ComponentName,String)>    ---->
<androidx.core.view.ScaleGestureDetectorCompat: boolean isQuickScaleEnabled(Object)>
/**
 * Returns whether the quick scale gesture, in which the user performs a double tap followed by
 * a swipe, should perform scaling. See
 * {@link #setQuickScaleEnabled(ScaleGestureDetector, boolean)}.
 *
 * @deprecated Use {@link #isQuickScaleEnabled(ScaleGestureDetector)} that takes
 * {@link ScaleGestureDetector} instead of {@link Object}.
 */
====>[PUBLIC]<androidx.core.view.ScaleGestureDetectorCompat: boolean isQuickScaleEnabled(Object)>    ---->    #isQuickScaleEnabled(ScaleGestureDetector)
<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback,Handler)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback,Handler)>    ---->
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: RecurrenceRule buildNever()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\util\RecurrenceRule.java
<android.util.RecurrenceRule: RecurrenceRule buildNever()>

====>[PUBLIC]<android.util.RecurrenceRule: RecurrenceRule buildNever()>    ---->
<android.graphics.drawable.Drawable: void setDither(boolean)>
/**
 * Set to true to have the drawable dither its colors when drawn to a
 * device with fewer than 8-bits per color component.
 *
 * @see android.graphics.Paint#setDither(boolean);
 * @deprecated This property is ignored.
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: void setDither(boolean)>    ---->
<android.app.Notification.Builder: Builder setDefaults(int)>
/**
 * Set which notification properties will be inherited from system defaults.
 * <p>
 * The value should be one or more of the following fields combined with
 * bitwise-or:
 * {@link #DEFAULT_SOUND}, {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}.
 * <p>
 * For all default values, use {@link #DEFAULT_ALL}.
 *
 * @deprecated use {@link NotificationChannel#enableVibration(boolean)} and
 * {@link NotificationChannel#enableLights(boolean)} and
 * {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setDefaults(int)>    ---->    NotificationChannel#enableVibration(boolean)
<android.util.proto.ProtoOutputStream: void writeFixed32(long,int)>
/**
 * Write a single proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFixed32(long,int)>    ---->    #write
<android.telephony.TelephonyManager: CellLocation getCellLocation()>
/**
 * Returns the current location of the device.
 * <p>
 * If there is only one radio in the device and that radio has an LTE connection,
 * this method will return null. The implementation must not to try add LTE
 * identifiers into the existing cdma/gsm classes.
 * <p>
 * @return Current location of the device or null if not available.
 *
 * @deprecated use {@link #getAllCellInfo} instead, which returns a superset of this API.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: CellLocation getCellLocation()>    ---->    #getAllCellInfo
<androidx.core.net.TrafficStatsCompat: int getThreadStatsTag()>
/**
 * Get the active tag used when accounting {@link Socket} traffic originating
 * from the current thread. Only one active tag per thread is supported.
 * {@link #tagSocket(Socket)}.
 *
 * @deprecated Use {@link TrafficStats#getThreadStatsTag()} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: int getThreadStatsTag()>    ---->    TrafficStats#getThreadStatsTag()
<android.content.pm.PackageManager: void removePackageFromPreferred(String)>
/**
 * @deprecated This function no longer does anything; it was an old
 * approach to managing preferred activities, which has been superseded
 * by (and conflicts with) the modern activity-based preferences.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void removePackageFromPreferred(String)>    ---->
<androidx.core.widget.EdgeEffectCompat: boolean isFinished()>
/**
 * Reports if this EdgeEffectCompat's animation is finished. If this method returns false
 * after a call to {@link #draw(Canvas)} the host widget should schedule another
 * drawing pass to continue the animation.
 *
 * @return true if animation is finished, false if drawing should continue on the next frame.
 *
 * @deprecated Use {@link EdgeEffect#isFinished()} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean isFinished()>    ---->    EdgeEffect#isFinished()
<android.renderscript.RenderScriptGL: void resume()>
/**
 * @deprecated in API 16
 * Resume calls to the root rendering script.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void resume()>    ---->
<androidx.leanback.widget.PlaybackControlsRow: int getCurrentTime()>
/**
 * Returns the current time in milliseconds for the playback controls row.
 * @throws ArithmeticException If current time in milliseconds overflows int.
 * @deprecated Use {@link #getCurrentPosition()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: int getCurrentTime()>    ---->    #getCurrentPosition()
<android.util.proto.ProtoOutputStream: void writeFloat(long,float)>
/**
 * Write a single proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFloat(long,float)>    ---->    #write
<android.test.InstrumentationTestCase: void injectInsrumentation(Instrumentation)>
/**
 * Injects instrumentation into this test case. This method is
 * called by the test runner during test setup.
 *
 * @param instrumentation the instrumentation to use with this instance
 *
 * @deprecated Incorrect spelling,
 * use {@link #injectInstrumentation(android.app.Instrumentation)} instead.
 */
====>[PUBLIC]<android.test.InstrumentationTestCase: void injectInsrumentation(Instrumentation)>    ---->    #injectInstrumentation(android.app.Instrumentation)
<androidx.core.net.TrafficStatsCompat: void incrementOperationCount(int)>
/**
 * Increment count of network operations performed under the accounting tag
 * currently active on the calling thread. This can be used to derive
 * bytes-per-operation.
 *
 * @param operationCount Number of operations to increment count by.
 *
 * @deprecated Use {@link TrafficStats#incrementOperationCount(int)} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void incrementOperationCount(int)>    ---->    TrafficStats#incrementOperationCount(int)
<android.hardware.radio.RadioTuner: int tune(int,int)>
/**
 * Tune to a specific frequency.
 * The operation is asynchronous and {@link Callback}
 * onProgramInfoChanged() will be called when tune completes or
 * onError() when cancelled or timeout.
 * @param channel the specific channel or frequency to tune to.
 * @param subChannel the specific sub-channel to tune to. N/A if the selected configuration
 * does not support cub channels.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Use {@link tune(ProgramSelector)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int tune(int,int)>    ---->    tune(ProgramSelector)
<android.media.AudioTrack: int setStereoVolume(float,float)>
/**
 * Sets the specified left and right output gain values on the AudioTrack.
 * <p>Gain values are clamped to the closed interval [0.0, max] where
 * max is the value of {@link #getMaxVolume}.
 * A value of 0.0 results in zero gain (silence), and
 * a value of 1.0 means unity gain (signal unchanged).
 * The default value is 1.0 meaning unity gain.
 * <p>The word "volume" in the API name is historical; this is actually a linear gain.
 * @param leftGain output gain for the left channel.
 * @param rightGain output gain for the right channel
 * @return error code or success, see {@link #SUCCESS},
 * {@link #ERROR_INVALID_OPERATION}
 * @deprecated Applications should use {@link #setVolume} instead, as it
 * more gracefully scales down to mono, and up to multi-channel content beyond stereo.
 */
====>[PUBLIC]<android.media.AudioTrack: int setStereoVolume(float,float)>    ---->    #setVolume
<android.graphics.Canvas: boolean clipRect(RectF,Op)>
/**
 * Modify the current clip with the specified rectangle.
 *
 * @param rect The rect to intersect with the current clip
 * @param op How the clip is modified
 * @return true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(RectF)} and {@link #clipOutRect(RectF)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(RectF,Op)>    ---->    Region.Op#INTERSECT
<android.view.textservice.SpellCheckerSubtype: String getLocale()>
/**
 * @return the locale of the subtype
 *
 * @deprecated Use {@link #getLanguageTag()} instead.
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSubtype: String getLocale()>    ---->    #getLanguageTag()
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\util\RecurrenceRule.java
<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)>

====>[PUBLIC]<android.util.RecurrenceRule: RecurrenceRule buildRecurringMonthly(int,ZoneId)>    ---->
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean,TruncateAt,int)>    ---->    Builder
<android.hardware.radio.RadioManager.ProgramInfo: int getChannel()>
/**
 * Main channel expressed in units according to band type.
 * Currently all defined band types express channels as frequency in kHz
 * @return the program channel
 * @deprecated Use {@link getSelector()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: int getChannel()>    ---->    getSelector()
<androidx.core.view.MotionEventCompat: int getActionMasked(MotionEvent)>
/**
 * Call {@link MotionEvent#getAction}, returning only the {@link #ACTION_MASK}
 * portion.
 *
 * @deprecated Call {@link MotionEvent#getAction()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getActionMasked(MotionEvent)>    ---->    MotionEvent#getAction()
<androidx.leanback.widget.PlaybackControlsRow: int getTotalTime()>
/**
 * Returns the total time in milliseconds for the playback controls row.
 * @throws ArithmeticException If total time in milliseconds overflows int.
 * @deprecated use {@link #getDuration()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: int getTotalTime()>    ---->    #getDuration()
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>
/**
 * Used by VM to control lowmem implicit suspension.
 *
 * @param b boolean to allow or disallow suspension
 * @return true on success
 * @since   JDK1.1
 * @deprecated The definition of this call depends on {@link #suspend},
 * which is deprecated.  Further, the behavior of this call
 * was never specified.
 */
====>[PUBLIC]<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>    ---->    #suspend
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>
/**
 * Set a label to display while the wearable is preparing to automatically execute the
 * action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @param label the label to display while the action is being prepared to execute
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setInProgressLabel(CharSequence)>    ---->
<android.util.jar.StrictJarFile: Certificate[] getCertificates(ZipEntry)>
/**
 * Return all certificates for a given {@link ZipEntry} belonging to this jar.
 * This method MUST be called only after fully exhausting the InputStream belonging
 * to this entry.
 *
 * Returns {@code null} if this jar file isn't signed or if this method is
 * called before the stream is processed.
 *
 * @deprecated Switch callers to use getCertificateChains instead
 */
====>[PUBLIC]<android.util.jar.StrictJarFile: Certificate[] getCertificates(ZipEntry)>    ---->    getCertificateChains
<androidx.leanback.widget.DetailsOverviewRow: void addAction(int,Action)>
/**
 * Adds an Action to the overview at the specified position. It will throw ClassCastException if
 * current actions adapter is not an instance of f{@link ArrayObjectAdapter}. Must be called
 * on the UI thread.
 *
 * @param pos The position to insert the Action.
 * @param action The Action to add.
 * @deprecated Use {@link #setActionsAdapter(ObjectAdapter)} and {@link #getActionsAdapter()}
 */
====>[PUBLIC]<androidx.leanback.widget.DetailsOverviewRow: void addAction(int,Action)>    ---->    #setActionsAdapter(ObjectAdapter)
<android.provider.Contacts.Organizations: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Organizations: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.content.Context: Drawable getWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDrawable
 * WallpaperManager.get()} instead.
 */
====>[PUBLIC]<android.content.Context: Drawable getWallpaper()>    ---->    android.app.WallpaperManager#getDrawable  WallpaperManager.get()
<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarIndeterminateVisibility(boolean)>
/**
 * @deprecated Progress bars are no longer provided in AppCompat.
 */
====>[PUBLIC]<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarIndeterminateVisibility(boolean)>    ---->
<androidx.fragment.app.FragmentActivity: void supportInvalidateOptionsMenu()>
/**
 * Support library version of {@link Activity#invalidateOptionsMenu}.
 *
 * <p>Invalidate the activity's options menu. This will cause relevant presentations
 * of the menu to fully update via calls to onCreateOptionsMenu and
 * onPrepareOptionsMenu the next time the menu is requested.
 *
 * @deprecated Call {@link Activity#invalidateOptionsMenu} directly.
 */
====>[PUBLIC]<androidx.fragment.app.FragmentActivity: void supportInvalidateOptionsMenu()>    ---->    Activity#invalidateOptionsMenu
<androidx.core.widget.ScrollerCompat: void startScroll(int,int,int,int)>
/**
 * Start scrolling by providing a starting point and the distance to travel.
 * The scroll will use the default value of 250 milliseconds for the
 * duration.
 *
 * @param startX Starting horizontal scroll offset in pixels. Positive
 * numbers will scroll the content to the left.
 * @param startY Starting vertical scroll offset in pixels. Positive numbers
 * will scroll the content up.
 * @param dx Horizontal distance to travel. Positive numbers will scroll the
 * content to the left.
 * @param dy Vertical distance to travel. Positive numbers will scroll the
 * content up.
 *
 * @deprecated Use {@link OverScroller#getCurrX()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void startScroll(int,int,int,int)>    ---->    OverScroller#getCurrX()
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
/**
 * The amount of time a user needs to press the relevant key to bring up
 * the global actions dialog.
 *
 * @return how long a user needs to press the relevant key to bring up
 * the global actions dialog.
 * @deprecated This timeout should not be used by applications
 */
====>[PUBLIC]<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>    ---->
<android.location.GnssMeasurement: void resetCarrierCycles()>
/**
 * Resets the number of full carrier cycles between the satellite and the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierCycles()>    ---->    #setAccumulatedDeltaRangeMeters(double)
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
/**
 * Enables using light touches to make a selection and activate mouseovers.
 * @deprecated From {@link android.os.Build.VERSION_CODES#JELLY_BEAN} this
 * setting is obsolete and has no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>    ---->
<com.android.support.mediarouter.media.MediaRouteDescriptor.Builder: Builder setConnecting(boolean)>
/**
 * Sets whether the route is in the process of connecting and is not yet
 * ready for use.
 * @deprecated Use {@link #setConnectionState} instead.
 */
====>[PUBLIC]<com.android.support.mediarouter.media.MediaRouteDescriptor.Builder: Builder setConnecting(boolean)>    ---->    #setConnectionState
<android.database.CursorWindow: boolean isString(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_STRING} or {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_STRING}
 * or {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isString(int,int)>    ---->    #getType(int, int)
<android.widget.CalendarView: void setShownWeekCount(int)>
/**
 * Sets the number of weeks to be shown.
 *
 * @param count The shown week count.
 *
 * @attr ref android.R.styleable#CalendarView_shownWeekCount
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setShownWeekCount(int)>    ---->
<android.os.PowerManager: void userActivity(long,boolean)>
/**
 * Notifies the power manager that user activity happened.
 * <p>
 * Resets the auto-off timer and brightens the screen if the device
 * is not asleep.  This is what happens normally when a key or the touch
 * screen is pressed or when some other user activity occurs.
 * This method does not wake up the device if it has been put to sleep.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}
 * time base.  This timestamp is used to correctly order the user activity request with
 * other power management functions.  It should be set
 * to the timestamp of the input event that caused the user activity.
 * @param noChangeLights If true, does not cause the keyboard backlight to turn on
 * because of this event.  This is set when the power key is pressed.
 * We want the device to stay on while the button is down, but we're about
 * to turn off the screen so we don't want the keyboard backlight to turn on again.
 * Otherwise the lights flash on and then off and it looks weird.
 *
 * @see #wakeUp
 * @see #goToSleep
 *
 * @removed Requires signature or system permission.
 * @deprecated Use {@link #userActivity(long, int, int)}.
 */
====>[HIDDEN]<android.os.PowerManager: void userActivity(long,boolean)>    ---->    #userActivity(long, int, int)
<java.util.jar.Pack200.Unpacker: void removePropertyChangeListener(PropertyChangeListener)>
/**
 * Remove a listener for PropertyChange events, added by
 * the {@link #addPropertyChangeListener}.
 *
 * <p> The default implementation of this method does nothing and has
 * no side-effects.</p>
 *
 * <p><b>WARNING:</b> This method is omitted from the interface
 * declaration in all subset Profiles of Java SE that do not include
 * the {@code java.beans} package. </p>
 *
 * @see #addPropertyChangeListener
 * @param listener  The PropertyChange listener to be removed.
 * @deprecated The dependency on {@code PropertyChangeListener} creates
 * a significant impediment to future modularization of the
 * Java platform. This method will be removed in a future
 * release.
 */
====>[PUBLIC]<java.util.jar.Pack200.Unpacker: void removePropertyChangeListener(PropertyChangeListener)>    ---->
<android.app.Activity: void onPrepareDialog(int,Dialog,Bundle)>
/**
 * Provides an opportunity to prepare a managed dialog before it is being
 * shown.  The default implementation calls through to
 * {@link #onPrepareDialog(int, Dialog)} for compatibility.
 *
 * <p>
 * Override this if you need to update a managed dialog based on the state
 * of the application each time it is shown. For example, a time picker
 * dialog might want to be updated with the current time. You should call
 * through to the superclass's implementation. The default implementation
 * will set this Activity as the owner activity on the Dialog.
 *
 * @param id The id of the managed dialog.
 * @param dialog The dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @see #onCreateDialog(int, Bundle)
 * @see #showDialog(int)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void onPrepareDialog(int,Dialog,Bundle)>    ---->    DialogFragment
<androidx.leanback.media.PlaybackControlGlue: PlaybackControlsRowPresenter getControlsRowPresenter()>
/**
 * Returns the playback controls row Presenter managed by the glue layer.
 * @deprecated PlaybackControlGlue supports any PlaybackRowPresenter, use
 * {@link #getPlaybackRowPresenter()}.
 */
====>[PUBLIC]<androidx.leanback.media.PlaybackControlGlue: PlaybackControlsRowPresenter getControlsRowPresenter()>    ---->    #getPlaybackRowPresenter()
<androidx.core.view.ViewCompat: void setRotation(View,float)>
/**
 * Sets the degrees that the view is rotated around the pivot point. Increasing values
 * result in clockwise rotation.
 *
 * @param value The degrees of rotation.
 *
 * @deprecated Use {@link View#setRotation(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setRotation(View,float)>    ---->    View#setRotation(float)
<androidx.legacy.app.FragmentCompat: PermissionCompatDelegate getPermissionCompatDelegate()>
/**
 * @hide
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[HIDDEN]<androidx.legacy.app.FragmentCompat: PermissionCompatDelegate getPermissionCompatDelegate()>    ---->    androidx.fragment.app.Fragment
<android.net.wifi.WpsInfo: int describeContents()>
/**
 * Implement the Parcelable interface
 * @deprecated This API is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WpsInfo: int describeContents()>    ---->
<android.telephony.gsm.SmsMessage: String getMessageBody()>
/**
 * Returns the message body as a String, if it exists and is text based.
 * @return message body is there is one, otherwise null
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getMessageBody()>    ---->
<android.app.Notification.Builder: Builder setSound(Uri,int)>
/**
 * Set the sound to play, along with a specific stream on which to play it.
 *
 * See {@link android.media.AudioManager} for the <code>STREAM_</code> constants.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)}.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri,int)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
<androidx.core.view.ViewCompat: void setChildrenDrawingOrderEnabled(ViewGroup,boolean)>
/**
 * Tells the ViewGroup whether to draw its children in the order defined by the method
 * {@code ViewGroup.getChildDrawingOrder(int, int)}.
 *
 * @param enabled true if the order of the children when drawing is determined by
 * {@link ViewGroup#getChildDrawingOrder(int, int)}, false otherwise
 *
 * <p>Prior to API 7 this will have no effect.</p>
 *
 * @deprecated Use {@link ViewGroup#setChildrenDrawingOrderEnabled(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setChildrenDrawingOrderEnabled(ViewGroup,boolean)>    ---->    ViewGroup#setChildrenDrawingOrderEnabled(boolean)
<androidx.viewpager.widget.PagerAdapter: void finishUpdate(View)>
/**
 * Called when the a change in the shown pages has been completed.  At this
 * point you must ensure that all of the pages have actually been added or
 * removed from the container as appropriate.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #finishUpdate(ViewGroup)}
 */
====>[PUBLIC]<androidx.viewpager.widget.PagerAdapter: void finishUpdate(View)>    ---->    #finishUpdate(ViewGroup)
<android.renderscript.ProgramRaster: CullMode getCullMode()>
/**
 * @deprecated in API 16
 * Specifies how triangles are culled based on their orientation
 * @return cull mode
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: CullMode getCullMode()>    ---->
<androidx.legacy.app.FragmentTabHost: void onTabChanged(String)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void onTabChanged(String)>    ---->    androidx.fragment.app.FragmentTabHost
<android.preference.PreferenceActivity: Preference findPreference(CharSequence)>
/**
 * Finds a {@link Preference} based on its key.
 *
 * @param key The key of the preference to retrieve.
 * @return The {@link Preference} with the key, or null.
 * @see PreferenceGroup#findPreference(CharSequence)
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: Preference findPreference(CharSequence)>    ---->
Inconsistency (Non-Documentation):<android.app.Fragment: void performMultiWindowModeChanged(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Fragment.java
<android.app.Fragment: void performMultiWindowModeChanged(boolean)>

====>[PUBLIC]<android.app.Fragment: void performMultiWindowModeChanged(boolean)>    ---->
<java.sql.Time: void setYear(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a year component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #getYear
 */
====>[PUBLIC]<java.sql.Time: void setYear(int)>    ---->
<android.app.Notification.Action: void <init>(int,CharSequence,PendingIntent)>
/**
 * @deprecated Use {@link android.app.Notification.Action.Builder}.
 */
====>[PUBLIC]<android.app.Notification.Action: void <init>(int,CharSequence,PendingIntent)>    ---->    android.app.Notification.Action.Builder
<android.os.Debug: int getGlobalFreedCount()>
/**
 * Returns the global count of objects freed by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalFreedCount()>    ---->
<android.content.Context: void setWallpaper(Bitmap)>
/**
 * @deprecated Use {@link android.app.WallpaperManager#setBitmap(Bitmap)
 * WallpaperManager.set()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void setWallpaper(Bitmap)>    ---->    android.app.WallpaperManager#setBitmap(Bitmap)  WallpaperManager.set()
<androidx.core.view.inputmethod.EditorInfoCompat: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.core.view.inputmethod.EditorInfoCompat: void <init>()>    ---->
<java.sql.DriverManager: PrintStream getLogStream()>
/**
 * Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code>
 * and all drivers.
 *
 * @return the logging/tracing PrintStream; if disabled, is <code>null</code>
 * @deprecated Use {@code getLogWriter} instead.
 * @see #setLogStream
 */
====>[PUBLIC]<java.sql.DriverManager: PrintStream getLogStream()>    ---->    {@code getLogWriter}
<android.widget.CalendarView: void setSelectedDateVerticalBar(int)>
/**
 * Sets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @param resourceId The vertical bar drawable resource id.
 *
 * @attr ref android.R.styleable#CalendarView_selectedDateVerticalBar
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedDateVerticalBar(int)>    ---->
<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>()>    ---->
<android.app.usage.StorageStatsManager: StorageStats queryStatsForPackage(String,String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForPackage(String,String,UserHandle)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setFullScreen(boolean)>
/**
 * Sets if the source is taking the entire screen.
 *
 * @param isFullScreen True if the source is full screen, false otherwise.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setFullScreen(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setFullScreen(boolean)>    ---->    AccessibilityRecord#setFullScreen(boolean)
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintAvoidBackgroundClipping()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintAvoidBackgroundClipping()>
/**
 * Get a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @return {@code true} if it's ok if the background is clipped on the screen, false
 * otherwise. The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintAvoidBackgroundClipping()>    ---->
<androidx.legacy.app.FragmentStatePagerAdapter: Object instantiateItem(ViewGroup,int)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: Object instantiateItem(ViewGroup,int)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.net.Proxy: int getPort(Context)>
/**
 * Return the proxy port set by the user.
 * @param ctx A Context used to get the settings for the proxy port.
 * @return The port number to use or -1 if no proxy is to be used.
 * @deprecated Use standard java vm proxy values to find the host, port
 * and exclusion list.  This call ignores the exclusion list.
 */
====>[PUBLIC]<android.net.Proxy: int getPort(Context)>    ---->
<android.app.Notification.BigPictureStyle: void <init>(Builder)>
/**
 * @deprecated use {@code BigPictureStyle()}.
 */
====>[PUBLIC]<android.app.Notification.BigPictureStyle: void <init>(Builder)>    ---->
<android.hardware.radio.RadioTuner: int getProgramInformation(ProgramInfo[])>
/**
 * Get current station information.
 * @param info a ProgramInfo array of lengh 1 where the information is returned.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Use {@link onProgramInfoChanged} callback instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int getProgramInformation(ProgramInfo[])>    ---->    onProgramInfoChanged
<android.graphics.Canvas: int saveLayer(RectF,Paint,int)>
/**
 * This behaves the same as save(), but in addition it allocates and
 * redirects drawing to an offscreen bitmap.
 * <p class="note"><strong>Note:</strong> this method is very expensive,
 * incurring more than double rendering cost for contained content. Avoid
 * using this method, especially if the bounds provided are large. It is
 * recommended to use a {@link android.view.View#LAYER_TYPE_HARDWARE hardware layer} on a View
 * to apply an xfermode, color filter, or alpha, as it will perform much
 * better than this method.
 * <p>
 * All drawing calls are directed to a newly allocated offscreen bitmap.
 * Only when the balancing call to restore() is made, is that offscreen
 * buffer drawn back to the current target of the Canvas (either the
 * screen, it's target Bitmap, or the previous layer).
 * <p>
 * Attributes of the Paint - {@link Paint#getAlpha() alpha},
 * {@link Paint#getXfermode() Xfermode}, and
 * {@link Paint#getColorFilter() ColorFilter} are applied when the
 * offscreen bitmap is drawn back when restore() is called.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayer(RectF, Paint)} instead.
 * @param bounds May be null. The maximum size the offscreen bitmap
 * needs to be (in local coordinates)
 * @param paint  This is copied, and is applied to the offscreen when
 * restore() is called.
 * @param saveFlags see _SAVE_FLAG constants, generally {@link #ALL_SAVE_FLAG} is recommended
 * for performance reasons.
 * @return       value to pass to restoreToCount() to balance this save()
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayer(RectF,Paint,int)>    ---->    #saveLayer(RectF, Paint)
<android.webkit.CookieManager: void removeSessionCookie()>
/**
 * Removes all session cookies, which are cookies without an expiration
 * date.
 * @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeSessionCookie()>    ---->    #removeSessionCookies(ValueCallback)
<androidx.leanback.widget.ShadowOverlayContainer: void initialize(boolean,boolean,boolean)>
/**
 * Initialize shadows, color overlay, and rounded corners.  All are optional.
 * Shadow type are auto-selected based on {@link #useStaticShadow()} and
 * {@link #useDynamicShadow()} call.
 * @deprecated use {@link ShadowOverlayHelper#createShadowOverlayContainer(Context)} instead.
 */
====>[PUBLIC]<androidx.leanback.widget.ShadowOverlayContainer: void initialize(boolean,boolean,boolean)>    ---->    ShadowOverlayHelper#createShadowOverlayContainer(Context)
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onStopNestedScroll(CoordinatorLayout,V,View)>
/**
 * @deprecated You should now override
 * {@link #onStopNestedScroll(CoordinatorLayout, View, View, int)}. This method will still
 * continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.
 */
====>[PUBLIC]<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onStopNestedScroll(CoordinatorLayout,V,View)>    ---->    #onStopNestedScroll(CoordinatorLayout, View, View, int)
<android.net.wifi.WifiManager: void restoreSupplicantBackupData(byte[],byte[])>
/**
 * Restore state from the older version of back up data.
 * The old backup data was essentially a backup of wpa_supplicant.conf
 * and ipconfig.txt file.
 * @deprecated this is no longer supported.
 * @hide
 */
====>[HIDDEN]<android.net.wifi.WifiManager: void restoreSupplicantBackupData(byte[],byte[])>    ---->
<android.net.NetworkInfo: void setIsAvailable(boolean)>
/**
 * Sets if the network is available, ie, if the connectivity is possible.
 * @param isAvailable the new availability value.
 * @deprecated Use {@link NetworkCapabilities} instead
 *
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setIsAvailable(boolean)>    ---->    NetworkCapabilities
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
/**
 * Indicates whether the ViewGroup is currently drawing its children using
 * their drawing cache.
 *
 * @return true if children should be drawn with their cache, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer be forced to cache their rendering state by their parents.
 * Use {@link View#setLayerType(int, Paint)} on individual Views instead.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>    ---->    View#setLayerType(int, Paint)
<android.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 */
====>[PUBLIC]<android.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>    ---->    android.app.LoaderManager
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
/**
 * Determines whether all children, or just those in the VISIBLE or
 * INVISIBLE state, are considered when measuring.
 *
 * @return Whether all children are considered when measuring.
 *
 * @deprecated This method is deprecated in favor of
 * {@link #getMeasureAllChildren() getMeasureAllChildren()}, which was
 * renamed for consistency with
 * {@link #setMeasureAllChildren(boolean) setMeasureAllChildren()}.
 */
====>[PUBLIC]<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>    ---->    #getMeasureAllChildren() getMeasureAllChildren()
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setFromIndex(int)>
/**
 * Sets the index of the first character of the changed sequence
 * or the beginning of a text selection or the index of the first
 * visible item when scrolling.
 *
 * @param fromIndex The index of the first character or selection
 * start or the first visible item.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setFromIndex(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setFromIndex(int)>    ---->    AccessibilityRecord#setFromIndex(int)
<androidx.legacy.app.FragmentCompat: void setPermissionCompatDelegate(PermissionCompatDelegate)>
/**
 * Sets the permission delegate for {@code FragmentCompat}. Replaces the previously set
 * delegate.
 *
 * @param delegate The delegate to be set. {@code null} to clear the set delegate.
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: void setPermissionCompatDelegate(PermissionCompatDelegate)>    ---->    androidx.fragment.app.Fragment
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getCustomSizePreset()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getCustomSizePreset()>
/**
 * Get the custom size preset for the display of this notification out of the available
 * presets found in {@link android.app.Notification.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link #setDisplayIntent}. Check the documentation for the preset in question.
 * See also {@link #setCustomContentHeight} and {@link #setCustomSizePreset}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getCustomSizePreset()>    ---->
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
/**
 * Gets the color for the separator line between weeks.
 *
 * @return The week separator color.
 *
 * @attr ref android.R.styleable#CalendarView_weekSeparatorLineColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getWeekSeparatorLineColor()>    ---->
<android.app.Activity: void setPictureInPictureArgs(PictureInPictureArgs)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Activity: void setPictureInPictureArgs(PictureInPictureArgs)>    ---->
Inconsistency (Non-Documentation):<android.view.Window: void setTitleColor(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\view\Window.java
<android.view.Window: void setTitleColor(int)>

====>[PUBLIC]<android.view.Window: void setTitleColor(int)>    ---->
<com.android.setupwizardlib.GlifRecyclerLayout: void setDividerInset(int)>
/**
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.GlifRecyclerLayout: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<com.android.internal.telephony.uicc.UiccCard: void sendEnvelopeWithStatus(String,Message)>
/**
 * Exposes {@link CommandsInterface#sendEnvelopeWithStatus}
 * @deprecated Please use {@link UiccProfile#sendEnvelopeWithStatus(String, Message)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void sendEnvelopeWithStatus(String,Message)>    ---->    UiccProfile#sendEnvelopeWithStatus(String, Message)
<com.android.server.wifi.WifiServiceImpl: DhcpInfo getDhcpInfo()>
/**
 * Return the DHCP-assigned addresses from the last successful DHCP request,
 * if any.
 * @return the DHCP information
 * @deprecated
 */
====>[PUBLIC]<com.android.server.wifi.WifiServiceImpl: DhcpInfo getDhcpInfo()>    ---->
<android.test.TouchUtils: int dragViewBy(InstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it by the specified amount.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param deltaX Amount to drag horizontally in pixels
 * @param deltaY Amount to drag vertically in pixels
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewBy(InstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<androidx.mediarouter.media.MediaRouteDescriptor.Builder: Builder setConnecting(boolean)>
/**
 * Sets whether the route is in the process of connecting and is not yet
 * ready for use.
 * @deprecated Use {@link #setConnectionState} instead.
 */
====>[PUBLIC]<androidx.mediarouter.media.MediaRouteDescriptor.Builder: Builder setConnecting(boolean)>    ---->    #setConnectionState
<android.widget.DatePicker: void setSpinnersShown(boolean)>
/**
 * Sets whether the spinners are shown.
 * <p>
 * Calling this method has no effect when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @param shown {@code true} to show the spinners, {@code false} to hide
 * them
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: void setSpinnersShown(boolean)>    ---->
<android.webkit.UrlInterceptRegistry: CacheResult getSurrogate(String,Map<String, String>)>
/**
 * Given an url, returns the CacheResult of the first
 * UrlInterceptHandler interested, or {@code null} if none are.
 *
 * @return A CacheResult containing surrogate content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: CacheResult getSurrogate(String,Map<String, String>)>    ---->
<android.view.View: void invalidate(int,int,int,int)>
/**
 * Mark the area defined by the rect (l,t,r,b) as needing to be drawn. The
 * coordinates of the dirty rect are relative to the view. If the view is
 * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some
 * point in the future.
 * <p>
 * This must be called from a UI thread. To call from a non-UI thread, call
 * {@link #postInvalidate()}.
 *
 * @param l the left position of the dirty region
 * @param t the top position of the dirty region
 * @param r the right position of the dirty region
 * @param b the bottom position of the dirty region
 *
 * @deprecated The switch to hardware accelerated rendering in API 14 reduced
 * the importance of the dirty rectangle. In API 21 the given rectangle is
 * ignored entirely in favor of an internally-calculated area instead.
 * Because of this, clients are encouraged to just call {@link #invalidate()}.
 */
====>[PUBLIC]<android.view.View: void invalidate(int,int,int,int)>    ---->    #invalidate()
<android.app.PictureInPictureArgs: void setSourceRectHintInsets(Rect)>
/**
 * Sets the insets to be used with the source rect hint bounds.
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setSourceRectHintInsets(Rect)>    ---->
<android.content.res.Resources: ColorStateList getColorStateList(int)>
/**
 * Returns a color state list associated with a particular resource ID. The
 * resource may contain either a single raw color value or a complex
 * {@link ColorStateList} holding multiple possible colors.
 *
 * @param id The desired resource identifier of a {@link ColorStateList},
 * as generated by the aapt tool. This integer encodes the
 * package, type, and resource entry. The value 0 is an invalid
 * identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 *
 * @return A ColorStateList object containing either a single solid color
 * or multiple colors that can be selected based on a state.
 * @deprecated Use {@link #getColorStateList(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: ColorStateList getColorStateList(int)>    ---->    #getColorStateList(int, Theme)
<androidx.slice.SliceUtils: int getLoadingState(Slice)>
/**
 * @return the current loading state of the provided {@link Slice}.
 *
 * @deprecated TO BE REMOVED: use {@link SliceMetadata#getLoadingState()}
 */
====>[PUBLIC]<androidx.slice.SliceUtils: int getLoadingState(Slice)>    ---->    SliceMetadata#getLoadingState()
<android.provider.Settings.System: boolean getShowGTalkServiceStatus(ContentResolver)>
/**
 * @deprecated - Do not use
 */
====>[PUBLIC]<android.provider.Settings.System: boolean getShowGTalkServiceStatus(ContentResolver)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void <init>(Object)>
/**
 * @deprecated This is not type safe. If you want to modify an
 * {@link AccessibilityEvent}'s properties defined in
 * {@link android.view.accessibility.AccessibilityRecord} use
 * {@link AccessibilityEventCompat#asRecord(AccessibilityEvent)}. This method will be removed
 * in a subsequent release of the support library.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void <init>(Object)>    ---->    AccessibilityEvent
Inconsistency (Non-Documentation):<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>

====>[PUBLIC]<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>    ---->
<android.telephony.PhoneNumberUtils: String formatNumber(String,int)>
/**
 * Formats the given number with the given formatting type. Currently
 * {@link #FORMAT_NANP} and {@link #FORMAT_JAPAN} are supported as a formating type.
 *
 * @param source the phone number to format
 * @param defaultFormattingType The default formatting rules to apply if the number does
 * not begin with +[country_code]
 * @return The phone number formatted with the given formatting type.
 *
 * @hide
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: String formatNumber(String,int)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<androidx.leanback.widget.SearchOrbView: void setOrbColor(int,int)>
/**
 * Sets the search orb colors.
 * Other colors are provided by the framework.
 * @deprecated Use {@link #setOrbColors(Colors)} instead.
 */
====>[PUBLIC]<androidx.leanback.widget.SearchOrbView: void setOrbColor(int,int)>    ---->    #setOrbColors(Colors)
<android.view.Surface: void unlockCanvas(Canvas)>
/**
 * @deprecated This API has been removed and is not supported.  Do not use.
 */
====>[PUBLIC]<android.view.Surface: void unlockCanvas(Canvas)>    ---->
<androidx.legacy.app.FragmentTabHost: void <init>(Context)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void <init>(Context)>    ---->    androidx.fragment.app.FragmentTabHost
<android.app.backup.BackupManager: int requestRestore(RestoreObserver)>
/**
 * @deprecated Applications shouldn't request a restore operation using this method. In Android
 * P and later, this method is a no-op.
 *
 * <p>Restore the calling application from backup. The data will be restored from the
 * current backup dataset if the application has stored data there, or from
 * the dataset used during the last full device setup operation if the current
 * backup dataset has no matching data.  If no backup data exists for this application
 * in either source, a non-zero value is returned.
 *
 * <p>If this method returns zero (meaning success), the OS attempts to retrieve a backed-up
 * dataset from the remote transport, instantiate the application's backup agent, and pass the
 * dataset to the agent's
 * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}
 * method.
 *
 * <p class="caution">Unlike other restore operations, this method doesn't terminate the
 * application after the restore. The application continues running to receive the
 * {@link RestoreObserver} callbacks on the {@code observer} argument. Full backups use an
 * {@link android.app.Application Application} base class while key-value backups use the
 * application subclass declared in the AndroidManifest.xml {@code <application>} tag.
 *
 * @param observer The {@link RestoreObserver} to receive callbacks during the restore
 * operation. This must not be null.
 *
 * @return Zero on success; nonzero on error.
 */
====>[PUBLIC]<android.app.backup.BackupManager: int requestRestore(RestoreObserver)>    ---->    android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()
<androidx.appcompat.app.ActionBar: void setNavigationMode(int)>
/**
 * Set the current navigation mode.
 *
 * @param mode The new mode to set.
 * @see #NAVIGATION_MODE_STANDARD
 * @see #NAVIGATION_MODE_LIST
 * @see #NAVIGATION_MODE_TABS
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void setNavigationMode(int)>    ---->
Inconsistency (Non-Documentation):<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\opengl\EGL14.java
<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)>

====>[PUBLIC]<android.opengl.EGL14: EGLSurface eglCreatePixmapSurface(EGLDisplay,EGLConfig,int,int[],int)>    ---->
<android.hardware.usb.UsbRequest: boolean queue(ByteBuffer,int)>
/**
 * Queues the request to send or receive data on its endpoint.
 * <p>For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints,
 * the endpoint will attempt to read the given number of bytes into the specified buffer. If the
 * queueing operation is successful, return true. The result will be returned via
 * {@link UsbDeviceConnection#requestWait}</p>
 *
 * @param buffer the buffer containing the bytes to write, or location to store the results of a
 * read. Position and array offset will be ignored and assumed to be 0. Limit and
 * capacity will be ignored. Once the request
 * {@link UsbDeviceConnection#requestWait() is processed} the position will be set
 * to the number of bytes read/written.
 * @param length number of bytes to read or write. Before {@value Build.VERSION_CODES#P}, a
 * value larger than 16384 bytes would be truncated down to 16384. In API
 * {@value Build.VERSION_CODES#P} and after, any value of length is valid.
 *
 * @return true if the queueing operation succeeded
 *
 * @deprecated Use {@link #queue(ByteBuffer)} instead.
 */
====>[PUBLIC]<android.hardware.usb.UsbRequest: boolean queue(ByteBuffer,int)>    ---->    #queue(ByteBuffer)
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,QuotaUpdater)>
/**
 * Notify the host application that the Application Cache has reached the
 * maximum size. The client must respond by invoking the
 * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}
 * method of the supplied {@link WebStorage.QuotaUpdater} instance. The
 * minimum value that can be set for the new quota is the current quota. The
 * default implementation responds with the current quota, so the quota will
 * not be increased.
 * @param requiredStorage The amount of storage required by the Application
 * Cache operation that triggered this notification,
 * in bytes.
 * @param quota the current maximum Application Cache size, in bytes
 * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which
 * must be used to inform the WebView of the new quota.
 * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota
 * Management API.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,QuotaUpdater)>    ---->
<android.net.wifi.WpsInfo: void <init>()>
/**
 * @deprecated This API is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WpsInfo: void <init>()>    ---->
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccountAsUser(Account,AccountManagerCallback<Boolean>,Handler,UserHandle)>
/**
 * @see #removeAccount(Account, AccountManagerCallback, Handler)
 * @hide
 * @deprecated use
 * {@link #removeAccountAsUser(Account, Activity, AccountManagerCallback, Handler)}
 * instead
 */
====>[HIDDEN]<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccountAsUser(Account,AccountManagerCallback<Boolean>,Handler,UserHandle)>    ---->    #removeAccountAsUser(Account, Activity, AccountManagerCallback, Handler)
<android.app.ActionBar: Tab getTabAt(int)>
/**
 * Returns the tab at the specified index.
 *
 * @param index Index value in the range 0-get
 * @return
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab getTabAt(int)>    ---->
<android.view.GestureDetector: void <init>(OnGestureListener)>
/**
 * Creates a GestureDetector with the supplied listener.
 * You may only use this constructor from a UI thread (this is the usual situation).
 * @see android.os.Handler#Handler()
 *
 * @param listener the listener invoked for all the callbacks, this must
 * not be null.
 *
 * @throws NullPointerException if {@code listener} is null.
 *
 * @deprecated Use {@link #GestureDetector(android.content.Context,
 * android.view.GestureDetector.OnGestureListener)} instead.
 */
====>[PUBLIC]<android.view.GestureDetector: void <init>(OnGestureListener)>    ---->    #GestureDetector(android.content.Context,  android.view.GestureDetector.OnGestureListener)
<com.android.server.notification.NotificationRecord: int getUserId()>
/**
 * @deprecated Use {@link #getUser()} instead.
 */
====>[PUBLIC]<com.android.server.notification.NotificationRecord: int getUserId()>    ---->    #getUser()
<android.view.textservice.SpellCheckerSubtype: void <init>(int,String,String)>
/**
 * Constructor.
 * @param nameId The name of the subtype
 * @param locale The locale supported by the subtype
 * @param extraValue The extra value of the subtype
 *
 * @deprecated There is no public API that requires developers to directly instantiate custom
 * {@link SpellCheckerSubtype} objects right now.  Hence only the system is expected to be able
 * to instantiate {@link SpellCheckerSubtype} object.
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSubtype: void <init>(int,String,String)>    ---->    SpellCheckerSubtype
<androidx.appcompat.app.AppCompatActivity: void onSupportContentChanged()>
/**
 * @deprecated Use {@link #onContentChanged()} instead.
 */
====>[PUBLIC]<androidx.appcompat.app.AppCompatActivity: void onSupportContentChanged()>    ---->    #onContentChanged()
<android.app.Notification.Builder: Builder setVibrate(long[])>
/**
 * Set the vibration pattern to use.
 *
 * See {@link android.os.Vibrator#vibrate(long[], int)} for a discussion of the
 * <code>pattern</code> parameter.
 *
 * <p>
 * A notification that vibrates is more likely to be presented as a heads-up notification.
 * </p>
 *
 * @deprecated use {@link NotificationChannel#setVibrationPattern(long[])} instead.
 * @see Notification#vibrate
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setVibrate(long[])>    ---->    NotificationChannel#setVibrationPattern(long[])
<androidx.core.app.ActivityCompat: boolean invalidateOptionsMenu(Activity)>
/**
 * Invalidate the activity's options menu, if able.
 *
 * <p>Before API level 11 (Android 3.0/Honeycomb) the lifecycle of the
 * options menu was controlled primarily by the user's operation of
 * the hardware menu key. When the user presses down on the menu key
 * for the first time the menu was created and prepared by calls
 * to {@link Activity#onCreateOptionsMenu(android.view.Menu)} and
 * {@link Activity#onPrepareOptionsMenu(android.view.Menu)} respectively.
 * Subsequent presses of the menu key kept the existing instance of the
 * Menu itself and called {@link Activity#onPrepareOptionsMenu(android.view.Menu)}
 * to give the activity an opportunity to contextually alter the menu
 * before the menu panel was shown.</p>
 *
 * <p>In Android 3.0+ the Action Bar forces the options menu to be built early
 * so that items chosen to show as actions may be displayed when the activity
 * first becomes visible. The Activity method invalidateOptionsMenu forces
 * the entire menu to be destroyed and recreated from
 * {@link Activity#onCreateOptionsMenu(android.view.Menu)}, offering a similar
 * though heavier-weight opportunity to change the menu's contents. Normally
 * this functionality is used to support a changing configuration of Fragments.</p>
 *
 * <p>Applications may use this support helper to signal a significant change in
 * activity state that should cause the options menu to be rebuilt. If the app
 * is running on an older platform version that does not support menu invalidation
 * the app will still receive {@link Activity#onPrepareOptionsMenu(android.view.Menu)}
 * the next time the user presses the menu key and this method will return false.
 * If this method returns true the options menu was successfully invalidated.</p>
 *
 * @param activity Invalidate the options menu of this activity
 * @return true if this operation was supported and it completed; false if it was not available.
 * @deprecated Use {@link Activity#invalidateOptionsMenu()} directly.
 */
====>[PUBLIC]<androidx.core.app.ActivityCompat: boolean invalidateOptionsMenu(Activity)>    ---->    Activity#invalidateOptionsMenu()
<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)>
/**
 * @deprecated use ActivityManager.noteWakeupAlarm instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteWakeupAlarm(PendingIntent,int,String,String)>    ---->    ActivityManager.noteWakeupAlarm
Inconsistency (Non-Documentation):<androidx.loader.app.LoaderManagerImpl: void dump(String,FileDescriptor,PrintWriter,String[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\loader\app\LoaderManagerImpl.java
<androidx.loader.app.LoaderManagerImpl: void dump(String,FileDescriptor,PrintWriter,String[])>

====>[PUBLIC]<androidx.loader.app.LoaderManagerImpl: void dump(String,FileDescriptor,PrintWriter,String[])>    ---->
<android.telephony.TelephonyManager: List<NeighboringCellInfo> getNeighboringCellInfo()>
/**
 * Returns the neighboring cell information of the device.
 *
 * @return List of NeighboringCellInfo or null if info unavailable.
 *
 * @deprecated Use {@link #getAllCellInfo} which returns a superset of the information
 * from NeighboringCellInfo.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: List<NeighboringCellInfo> getNeighboringCellInfo()>    ---->    #getAllCellInfo
<android.net.http.SslCertificate: void <init>(String,String,Date,Date)>
/**
 * Creates a new SSL certificate object
 * @param issuedTo The entity this certificate is issued to
 * @param issuedBy The entity that issued this certificate
 * @param validNotBefore The not-before date from the certificate validity period
 * @param validNotAfter The not-after date from the certificate validity period
 * @deprecated Use {@link #SslCertificate(X509Certificate)}
 */
====>[PUBLIC]<android.net.http.SslCertificate: void <init>(String,String,Date,Date)>    ---->    #SslCertificate(X509Certificate)
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>
/**
 * Determine if fingerprint hardware is present and functional.
 *
 * @return true if hardware is present and functional, false otherwise.
 * @deprecated See {@link BiometricPrompt} and
 * {@link FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE}
 */
====>[PUBLIC]<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>    ---->    BiometricPrompt
<android.os.Debug: void resetGlobalExternalFreedCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalFreedCount()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isEnabled()>
/**
 * Gets if the source is enabled.
 *
 * @return True if the view is enabled, false otherwise.
 *
 * @deprecated Use {@link AccessibilityRecord#isEnabled()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isEnabled()>    ---->    AccessibilityRecord#isEnabled()
<androidx.core.view.ViewCompat: float getAlpha(View)>
/**
 * The opacity of the view. This is a value from 0 to 1, where 0 means the view is
 * completely transparent and 1 means the view is completely opaque.
 *
 * <p>By default this is 1.0f.
 * @return The opacity of the view.
 *
 * @deprecated Use {@link View#getAlpha()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getAlpha(View)>    ---->    View#getAlpha()
<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)>
/**
 * Helper version of saveLayer() that takes 4 values rather than a RectF.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayer(float, float, float, float, Paint)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayer(float,float,float,float,Paint,int)>    ---->    #saveLayer(float, float, float, float, Paint)
<android.telephony.gsm.SmsManager: SmsManager getDefault()>
/**
 * Get the default instance of the SmsManager
 *
 * @return the default instance of the SmsManager
 * @deprecated Use android.telephony.SmsManager.
 */
====>[PUBLIC]<android.telephony.gsm.SmsManager: SmsManager getDefault()>    ---->
<android.telecom.Connection: void onAudioStateChanged(AudioState)>
/**
 * Notifies this Connection that the {@link #getAudioState()} property has a new value.
 *
 * @param state The new connection audio state.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Connection: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.media.MediaDrm: void release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.media.MediaDrm: void release()>    ---->    #close()
<android.app.Notification.MessagingStyle.Message: CharSequence getSender()>
/**
 * Get the text used to display the contact's name in the messaging experience
 *
 * @deprecated use {@link #getSenderPerson()}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle.Message: CharSequence getSender()>    ---->    #getSenderPerson()
<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)>
/**
 * @deprecated in API 16
 * Adds a vertex data type to the builder object
 *
 * @param e element describing the vertex data layout
 * @param size number of elements in the buffer
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addVertexType(Element,int)>    ---->
<androidx.recyclerview.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>
/**
 * @deprecated
 * override {@link #onDetachedFromWindow(RecyclerView, Recycler)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>    ---->    #onDetachedFromWindow(RecyclerView, Recycler)
<android.bluetooth.BluetoothAdapter: BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int)>
/**
 * Return the record of {@link BluetoothActivityEnergyInfo} object that
 * has the activity and energy info. This can be used to ascertain what
 * the controller has been up to, since the last sample.
 *
 * @param updateType Type of info, cached vs refreshed.
 * @return a record with {@link BluetoothActivityEnergyInfo} or null if report is unavailable or
 * unsupported
 * @hide
 * @deprecated use the asynchronous {@link #requestControllerActivityEnergyInfo(ResultReceiver)}
 * instead.
 */
====>[HIDDEN]<android.bluetooth.BluetoothAdapter: BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int)>    ---->    #requestControllerActivityEnergyInfo(ResultReceiver)
<androidx.legacy.app.FragmentTabHost: void onRestoreInstanceState(Parcelable)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void onRestoreInstanceState(Parcelable)>    ---->    androidx.fragment.app.FragmentTabHost
<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarIndeterminate(boolean)>
/**
 * @deprecated Progress bars are no longer provided in AppCompat.
 */
====>[PUBLIC]<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarIndeterminate(boolean)>    ---->
<java.lang.Runtime: void runFinalizersOnExit(boolean)>
/**
 * Enable or disable finalization on exit; doing so specifies that the
 * finalizers of all objects that have finalizers that have not yet been
 * automatically invoked are to be run before the Java runtime exits.
 * By default, finalization on exit is disabled.
 *
 * <p>If there is a security manager,
 * its <code>checkExit</code> method is first called
 * with 0 as its argument to ensure the exit is allowed.
 * This could result in a SecurityException.
 *
 * @param value true to enable finalization on exit, false to disable
 * @deprecated  This method is inherently unsafe.  It may result in
 * finalizers being called on live objects while other threads are
 * concurrently manipulating those objects, resulting in erratic
 * behavior or deadlock.
 *
 * @throws  SecurityException
 * if a security manager exists and its <code>checkExit</code>
 * method doesn't allow the exit.
 *
 * @see     java.lang.Runtime#exit(int)
 * @see     java.lang.Runtime#gc()
 * @see     java.lang.SecurityManager#checkExit(int)
 * @since   JDK1.1
 */
====>[PUBLIC]<java.lang.Runtime: void runFinalizersOnExit(boolean)>    ---->    java.lang.Runtime#exit(int)
<androidx.core.view.accessibility.AccessibilityRecordCompat: int hashCode()>
/**
 * @deprecated Use {@link AccessibilityRecord#hashCode()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int hashCode()>    ---->    AccessibilityRecord#hashCode()
<java.util.Date: int getSeconds()>
/**
 * Returns the number of seconds past the minute represented by this date.
 * The value returned is between <code>0</code> and <code>61</code>. The
 * values <code>60</code> and <code>61</code> can only occur on those
 * Java Virtual Machines that take leap seconds into account.
 *
 * @return  the number of seconds past the minute represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.SECOND)</code>.
 */
====>[PUBLIC]<java.util.Date: int getSeconds()>    ---->
<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()>
/**
 * Deprecated
 * returns false
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: boolean getEnableAutoJoinWhenAssociated()>    ---->
<android.support.v8.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>
/**
 * Sets an output of the ScriptGroup. This specifies an
 * Allocation to be used for the kernels that require an output
 * Allocation visible after the ScriptGroup is executed.
 *
 * @deprecated Use return value of {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.support.v8.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>    ---->    #execute(Object...)
<androidx.lifecycle.ViewModelStores: ViewModelStore of(Fragment)>
/**
 * Returns the {@link ViewModelStore} of the given fragment.
 *
 * @param fragment a fragment whose {@code ViewModelStore} is requested
 * @return a {@code ViewModelStore}
 * @deprecated Use {@link Fragment#getViewModelStore()}
 */
====>[PUBLIC]<androidx.lifecycle.ViewModelStores: ViewModelStore of(Fragment)>    ---->    Fragment#getViewModelStore()
Inconsistency (Non-Documentation):<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>

====>[PUBLIC]<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>    ---->
<android.database.sqlite.SQLiteQueryBuilder: String buildQuery(String[],String,String[],String,String,String,String)>
/**
 * @deprecated This method's signature is misleading since no SQL parameter
 * substitution is carried out.  The selection arguments parameter does not get
 * used at all.  To avoid confusion, call
 * {@link #buildQuery(String[], String, String, String, String, String)} instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteQueryBuilder: String buildQuery(String[],String,String[],String,String,String,String)>    ---->    #buildQuery(String[], String, String, String, String, String)
<androidx.leanback.widget.GuidedActionsStylist: void setEditingMode(ViewHolder,GuidedAction,boolean)>
/**
 * @deprecated This method is for internal library use only and should not
 * be called directly.
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedActionsStylist: void setEditingMode(ViewHolder,GuidedAction,boolean)>    ---->
<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)>
/**
 * @deprecated in API 16
 * Creates the mesh object from the current state of the builder
 *
 * @param uploadToBufferObject specifies whether the vertex data
 * is to be uploaded into the buffer
 * object indicating that it's likely
 * not going to be modified and
 * rendered many times.
 * Alternatively, it indicates the
 * mesh data will be updated
 * frequently and remain in script
 * accessible memory
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: Mesh create(boolean)>    ---->
Inconsistency (Non-Documentation):<android.app.Activity: void enterPictureInPictureMode()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Activity.java
<android.app.Activity: void enterPictureInPictureMode()>
/**
 * Puts the activity in picture-in-picture mode if possible in the current system state. Any
 * prior calls to {@link #setPictureInPictureParams(PictureInPictureParams)} will still apply
 * when entering picture-in-picture through this call.
 *
 * @see #enterPictureInPictureMode(PictureInPictureParams)
 * @see android.R.attr#supportsPictureInPicture
 */
====>[PUBLIC]<android.app.Activity: void enterPictureInPictureMode()>    ---->
<java.sql.Date: void <init>(int,int,int)>
/**
 * Constructs a <code>Date</code> object initialized with the given
 * year, month, and day.
 * <P>
 * The result is undefined if a given argument is out of bounds.
 *
 * @param year the year minus 1900; must be 0 to 8099. (Note that
 * 8099 is 9999 minus 1900.)
 * @param month 0 to 11
 * @param day 1 to 31
 * @deprecated instead use the constructor <code>Date(long date)</code>
 */
====>[PUBLIC]<java.sql.Date: void <init>(int,int,int)>    ---->
<android.content.pm.LauncherApps: int getShortcutIconResId(String,String,UserHandle)>
/**
 * @hide kept for testing.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: int getShortcutIconResId(String,String,UserHandle)>    ---->
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>
/**
 * Force switch to the last used input method and subtype. If the last input method didn't have
 * any subtypes, the framework will simply switch to the last input method with no subtype
 * specified.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @return true if the current input method and subtype was successfully switched to the last
 * used input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToPreviousInputMethod()} instead. This method
 * was intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(IBinder)>    ---->    InputMethodService#switchToPreviousInputMethod()
<android.os.Bundle: void putIBinder(String,IBinder)>
/**
 * Inserts an IBinder value into the mapping of this Bundle, replacing
 * any existing value for the given key.  Either key or value may be null.
 *
 * @param key a String, or null
 * @param value an IBinder object, or null
 *
 * @deprecated
 * @hide This is the old name of the function.
 */
====>[HIDDEN]<android.os.Bundle: void putIBinder(String,IBinder)>    ---->
<java.util.jar.JarVerifier: Certificate[] getCerts(String)>
/**
 * Return an array of java.security.cert.Certificate objects for
 * the given file in the jar.
 * @deprecated Deprecated.
 */
====>[PUBLIC]<java.util.jar.JarVerifier: Certificate[] getCerts(String)>    ---->
<com.android.setupwizardlib.GlifRecyclerLayout: int getDividerInset()>
/**
 * @deprecated Use {@link #getDividerInsetStart()} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.GlifRecyclerLayout: int getDividerInset()>    ---->    #getDividerInsetStart()
<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)>
/**
 * @deprecated use ActivityManager.noteAlarmFinish instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteAlarmFinish(PendingIntent,int,String)>    ---->    ActivityManager.noteAlarmFinish
<androidx.core.view.ViewCompat: float getRotationY(View)>
/**
 * @deprecated Use {@link View#getRotationY()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getRotationY(View)>    ---->    View#getRotationY()
<android.os.Debug: void resetThreadExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadExternalAllocSize()>    ---->
<android.content.Intent: Intent putExtra(String,IBinder)>
/**
 * Add extended data to the intent.  The name must include a package
 * prefix, for example the app com.android.contacts would use names
 * like "com.android.contacts.ShowAll".
 *
 * @param name The name of the extra data, with package prefix.
 * @param value The IBinder data value.
 *
 * @return Returns the same Intent object, for chaining multiple calls
 * into a single statement.
 *
 * @see #putExtras
 * @see #removeExtra
 * @see #getIBinderExtra(String)
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Intent putExtra(String,IBinder)>    ---->
<android.widget.OverScroller: int getDuration()>
/**
 * Returns how long the scroll event will take, in milliseconds.
 *
 * @return The duration of the scroll in milliseconds.
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScrollers don't necessarily have a fixed duration.
 * This function will lie to the best of its ability.
 */
====>[HIDDEN]<android.widget.OverScroller: int getDuration()>    ---->
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\IpConfigStore.java
<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)>
/**
 * @Deprecated use {@link #writeIpConfigurations(String, ArrayMap)} instead.
 * New method uses string as network identifier which could be interface name or MAC address or
 * other token.
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: void writeIpAndProxyConfigurationsToFile(String,SparseArray<IpConfiguration>)>    ---->
<java.io.ObjectInputStream: String readLine()>
/**
 * Reads in a line that has been terminated by a \n, \r, \r\n or EOF.
 *
 * @return  a String copy of the line.
 * @throws  IOException if there are I/O errors while reading from the
 * underlying <code>InputStream</code>
 * @deprecated This method does not properly convert bytes to characters.
 * see DataInputStream for the details and alternatives.
 */
====>[PUBLIC]<java.io.ObjectInputStream: String readLine()>    ---->
<androidx.core.view.ViewCompat: void setY(View,float)>
/**
 * Sets the visual y position of this view, in pixels. This is equivalent to setting the
 * {@link #setTranslationY(View, float) translationY} property to be the difference between
 * the y value passed in and the current top property of the view as determined by the
 * layout bounds.
 *
 * @param value The visual y position of this view, in pixels.
 *
 * @deprecated Use {@link View#setY(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setY(View,float)>    ---->    View#setY(float)
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>
/**
 * @deprecated use {@link #getTypeLabel(Resources, int, CharSequence)} instead.
 * @hide
 */
====>[HIDDEN]<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>    ---->    #getTypeLabel(Resources, int, CharSequence)
<android.hardware.location.ContextHubManager: int loadNanoApp(int,NanoApp)>
/**
 * Load a nano app on a specified context hub.
 *
 * Note that loading is asynchronous.  When we return from this method,
 * the nano app (probably) hasn't loaded yet.  Assuming a return of 0
 * from this method, then the final success/failure for the load, along
 * with the "handle" for the nanoapp, is all delivered in a byte
 * string via a call to Callback.onMessageReceipt.
 *
 * TODO(b/30784270): Provide a better success/failure and "handle" delivery.
 *
 * @param hubHandle handle of context hub to load the app on.
 * @param app the nanoApp to load on the hub
 *
 * @return 0 if the command for loading was sent to the context hub;
 * -1 otherwise
 *
 * @see NanoApp
 *
 * @deprecated Use {@link #loadNanoApp(ContextHubInfo, NanoAppBinary)} instead.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int loadNanoApp(int,NanoApp)>    ---->    #loadNanoApp(ContextHubInfo, NanoAppBinary)
<android.text.style.ImageSpan: void <init>(Bitmap,int)>
/**
 * @deprecated Use {@link #ImageSpan(Context, Bitmap, int)} instead.
 */
====>[PUBLIC]<android.text.style.ImageSpan: void <init>(Bitmap,int)>    ---->    #ImageSpan(Context, Bitmap, int)
<java.lang.Thread: void stop(Throwable)>
/**
 * Throws {@code UnsupportedOperationException}.
 *
 * @param obj ignored
 *
 * @deprecated This method was originally designed to force a thread to stop
 * and throw a given {@code Throwable} as an exception. It was
 * inherently unsafe (see {@link #stop()} for details), and furthermore
 * could be used to generate exceptions that the target thread was
 * not prepared to handle.
 * For more information, see
 * <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
 * are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
 */
====>[PUBLIC]<java.lang.Thread: void stop(Throwable)>    ---->    #stop()} for details), and furthermore  could be used to generate exceptions that the target thread was  not prepared to handle.  For more information, see  <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why  are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>. /@Deprecatedpublic final void stop(Throwable obj) {    throw new UnsupportedOperationException()
<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
/**
 * returns true if this message is a "Message Waiting Indication Group:
 * Discard Message" notification and should not be stored.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>    ---->
<android.app.Notification.Builder: Notification getNotification()>
/**
 * @deprecated Use {@link #build()} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Notification getNotification()>    ---->    #build()
<java.sql.Date: int getMinutes()>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #setMinutes
 */
====>[PUBLIC]<java.sql.Date: int getMinutes()>    ---->    #setMinutes
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\settingslib\NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: int getPolicyCycleDay(NetworkTemplate)>    ---->
<androidx.core.view.MenuItemCompat: View getActionView(MenuItem)>
/**
 * Returns the currently set action view for this menu item.
 *
 * @param item the item to query
 * @return This item's action view
 *
 * @deprecated Use {@link MenuItem#getActionView()} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: View getActionView(MenuItem)>    ---->    MenuItem#getActionView()
<android.drm.DrmStore.RightsStatus: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.RightsStatus: void <init>()>    ---->
<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(SurfaceTexture,int,int)>    ---->
<java.sql.Time: void setMonth(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a month component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #getMonth
 */
====>[PUBLIC]<java.sql.Time: void setMonth(int)>    ---->
<java.util.Date: int getDate()>
/**
 * Returns the day of the month represented by this <tt>Date</tt> object.
 * The value returned is between <code>1</code> and <code>31</code>
 * representing the day of the month that contains or begins with the
 * instant in time represented by this <tt>Date</tt> object, as
 * interpreted in the local time zone.
 *
 * @return  the day of the month represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.DAY_OF_MONTH)</code>.
 */
====>[PUBLIC]<java.util.Date: int getDate()>    ---->
Inconsistency (Non-Documentation):<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\ConnectivityService.java
<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()>

====>[PUBLIC]<com.android.server.ConnectivityService: NetworkQuotaInfo getActiveNetworkQuotaInfo()>    ---->
<android.database.sqlite.SQLiteDatabase: Map<String, String> getSyncedTables()>
/**
 * Deprecated.
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: Map<String, String> getSyncedTables()>    ---->
<androidx.recyclerview.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>
/**
 * Calculate a MeasureSpec value for measuring a child view in one dimension.
 *
 * @param parentSize Size of the parent view where the child will be placed
 * @param padding Total space currently consumed by other elements of the parent
 * @param childDimension Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.
 * Generally obtained from the child view's LayoutParams
 * @param canScroll true if the parent RecyclerView can scroll in this dimension
 *
 * @return a MeasureSpec value for the child view
 * @deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>    ---->    #getChildMeasureSpec(int, int, int, int, boolean)
<android.net.ConnectivityManager: void reportInetCondition(int,int)>
/**
 * Report network connectivity status.  This is currently used only
 * to alter status bar UI.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#STATUS_BAR}.
 *
 * @param networkType The type of network you want to report on
 * @param percentage The quality of the connection 0 is bad, 100 is good
 * @deprecated Types are deprecated. Use {@link #reportNetworkConnectivity} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: void reportInetCondition(int,int)>    ---->    #reportNetworkConnectivity
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getConfirmLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getConfirmLabel()>
/**
 * Get the label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @return the label to confirm the action should be executed
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getConfirmLabel()>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setDisabledMessageResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setDisabledMessageResId(int)>    ---->
<androidx.core.view.ViewCompat: float getX(View)>
/**
 * @deprecated Use {@link View#getX()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getX(View)>    ---->    View#getX()
<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>
/**
 * @deprecated in API 16
 * Create a new RenderScriptGL object and attach it to the
 * TextureView if present.
 *
 * @param sc The RS surface config to create.
 *
 * @return RenderScriptGL The new object created.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: RenderScriptGL createRenderScriptGL(SurfaceConfig)>    ---->
<java.lang.String: void <init>(int,int,char[])>
/**
 * Package private constructor
 *
 * @deprecated Use {@link #String(char[],int,int)} instead.
 */
====>[PUBLIC]<java.lang.String: void <init>(int,int,char[])>    ---->    #String(char[],int,int)
<androidx.core.view.ViewCompat: float getPivotX(View)>
/**
 * The x location of the point around which the view is
 * {@link #setRotation(View, float) rotated} and {@link #setScaleX(View, float) scaled}.
 *
 * @deprecated Use {@link View#getPivotX()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getPivotX(View)>    ---->    View#getPivotX()
<java.sql.Time: int getYear()>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a year component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #setYear
 */
====>[PUBLIC]<java.sql.Time: int getYear()>    ---->
<android.renderscript.RSSurfaceView: void <init>(Context,AttributeSet)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void <init>(Context,AttributeSet)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.net.ConnectivityManager: void reportBadNetwork(Network)>
/**
 * Report a problem network to the framework.  This provides a hint to the system
 * that there might be connectivity problems on this network and may cause
 * the framework to re-evaluate network connectivity and/or switch to another
 * network.
 *
 * @param network The {@link Network} the application was attempting to use
 * or {@code null} to indicate the current default network.
 * @deprecated Use {@link #reportNetworkConnectivity} which allows reporting both
 * working and non-working connectivity.
 */
====>[PUBLIC]<android.net.ConnectivityManager: void reportBadNetwork(Network)>    ---->    #reportNetworkConnectivity
<androidx.core.view.accessibility.AccessibilityRecordCompat: Object getImpl()>
/**
 * @return The wrapped implementation.
 *
 * @deprecated This method will be removed in a subsequent release of
 * the support library.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: Object getImpl()>    ---->
<com.android.ims.ImsConfig: int setProvisionedValue(int,int)>
/**
 * @deprecated see {@link #setConfig(int, int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int setProvisionedValue(int,int)>    ---->    #setConfig(int, int)
<androidx.leanback.app.GuidedStepFragment: void onGuidedActionEdited(GuidedAction)>
/**
 * Callback invoked when an action's title or description has been edited, this happens either
 * when user clicks confirm button in IME or user closes IME window by BACK key.
 * @deprecated Override {@link #onGuidedActionEditedAndProceed(GuidedAction)} and/or
 * {@link #onGuidedActionEditCanceled(GuidedAction)}.
 */
====>[PUBLIC]<androidx.leanback.app.GuidedStepFragment: void onGuidedActionEdited(GuidedAction)>    ---->    #onGuidedActionEditedAndProceed(GuidedAction)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void removeStickyBroadcast(Intent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void removeStickyBroadcast(Intent)>

====>[PUBLIC]<android.app.ContextImpl: void removeStickyBroadcast(Intent)>    ---->
<android.renderscript.FileA3D: int getIndexEntryCount()>
/**
 * @deprecated in API 16
 * Returns the number of objects stored inside the a3d file
 *
 * @return the number of objects stored inside the a3d file
 */
====>[PUBLIC]<android.renderscript.FileA3D: int getIndexEntryCount()>    ---->
<androidx.leanback.widget.PlaybackControlsRow: long getCurrentTimeLong()>
/**
 * Returns the current time in milliseconds of long type for playback controls row.
 * @deprecated Use {@link #getCurrentPosition()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: long getCurrentTimeLong()>    ---->    #getCurrentPosition()
<android.provider.UserDictionary.Words: void addWord(Context,String,int,int)>
/**
 * Adds a word to the dictionary, with the given frequency and the specified
 * specified locale type.
 *
 * @deprecated Please use
 * {@link #addWord(Context, String, int, String, Locale)} instead.
 *
 * @param context the current application context
 * @param word the word to add to the dictionary. This should not be null or
 * empty.
 * @param localeType the locale type for this word. It should be one of
 * {@link #LOCALE_TYPE_ALL} or {@link #LOCALE_TYPE_CURRENT}.
 */
====>[PUBLIC]<android.provider.UserDictionary.Words: void addWord(Context,String,int,int)>    ---->    #addWord(Context, String, int, String, Locale)
<android.hardware.radio.RadioTuner: boolean isAnalogForced()>
/**
 * Checks, if the analog playback is forced, see setAnalogForced.
 *
 * @throws IllegalStateException if the switch is not supported at current
 * configuration.
 * @return {@code true} if analog is forced, {@code false} otherwise.
 * @deprecated Use {@link isConfigFlagSet(int)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: boolean isAnalogForced()>    ---->    isConfigFlagSet(int)
<android.provider.Contacts.People: Bitmap loadContactPhoto(Context,Uri,int,Options)>
/**
 * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
 * If the person's photo isn't present returns the placeholderImageResource instead.
 * @param context the Context
 * @param person the person whose photo should be used
 * @param placeholderImageResource the image resource to use if the person doesn't
 * have a photo
 * @param options the decoding options, can be set to null
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Bitmap loadContactPhoto(Context,Uri,int,Options)>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<com.android.server.backup.TransportManager: String selectTransport(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\backup\TransportManager.java
<com.android.server.backup.TransportManager: String selectTransport(String)>
/**
 * Sets {@code transportName} as selected transport and returns previously selected transport
 * name. If there was no previous transport it returns null.
 *
 * <p>You should NOT call this method in new code. This won't make any checks against {@code
 * transportName}, putting any operation at risk of a {@link TransportNotRegisteredException} or
 * another error at the time it's being executed.
 *
 * <p>{@link Deprecated} as public, this method can be used as private.
 */
====>[PUBLIC]<com.android.server.backup.TransportManager: String selectTransport(String)>    ---->
<com.android.setupwizardlib.TemplateLayout: int getContainerId()>
/**
 * @return ID of the default container for this layout. This will be used to find the container
 * ViewGroup, which all children views of this layout will be placed in.
 * @deprecated Override {@link #findContainer(int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.TemplateLayout: int getContainerId()>    ---->    #findContainer(int)
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
/**
 * Sets whether the WebView uses its background for over scroll background.
 * If {@code true}, it will use the WebView's background. If {@code false}, it will use an
 * internal pattern. Default is {@code true}.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>    ---->
<android.provider.ContactsContract.StreamItems: void <init>()>
/**
 * This utility class cannot be instantiated
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItems: void <init>()>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getCancelLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getCancelLabel()>
/**
 * Get the label to display to cancel the action.
 * This is usually an imperative verb like "Cancel".
 *
 * @return the label to display to cancel the action
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getCancelLabel()>    ---->
<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(Network)>
/**
 * Binds the current process to {@code network}.  All Sockets created in the future
 * (and not explicitly bound via a bound SocketFactory from
 * {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to
 * {@code network}.  All host name resolutions will be limited to {@code network} as well.
 * Note that if {@code network} ever disconnects, all Sockets created in this way will cease to
 * work and all host name resolutions will fail.  This is by design so an application doesn't
 * accidentally use Sockets it thinks are still bound to a particular {@link Network}.
 * To clear binding pass {@code null} for {@code network}.  Using individually bound
 * Sockets created by Network.getSocketFactory().createSocket() and
 * performing network-specific host name resolutions via
 * {@link Network#getAllByName Network.getAllByName} is preferred to calling
 * {@code setProcessDefaultNetwork}.
 *
 * @param network The {@link Network} to bind the current process to, or {@code null} to clear
 * the current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 * @deprecated This function can throw {@link IllegalStateException}.  Use
 * {@link #bindProcessToNetwork} instead.  {@code bindProcessToNetwork}
 * is a direct replacement.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(Network)>    ---->    IllegalStateException
<com.android.setupwizardlib.GlifListLayout: int getDividerInset()>
/**
 * @deprecated Use {@link #getDividerInsetStart()} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.GlifListLayout: int getDividerInset()>    ---->    #getDividerInsetStart()
<android.net.ConnectivityManager: String getNetworkTypeName(int)>
/**
 * Returns a non-localized string representing a given network type.
 * ONLY used for debugging output.
 * @param type the type needing naming
 * @return a String for the given type, or a string version of the type ("87")
 * if no name is known.
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: String getNetworkTypeName(int)>    ---->    NetworkCapabilities
<android.app.ActivityManager: List<RecentTaskInfo> getRecentTasks(int,int)>
/**
 * <p></p>Return a list of the tasks that the user has recently launched, with
 * the most recent being first and older ones after in order.
 *
 * <p><b>Note: this method is only intended for debugging and presenting
 * task management user interfaces</b>.  This should never be used for
 * core logic in an application, such as deciding between different
 * behaviors based on the information found here.  Such uses are
 * <em>not</em> supported, and will likely break in the future.  For
 * example, if multiple applications can be actively running at the
 * same time, assumptions made about the meaning of the data here for
 * purposes of control flow will be incorrect.</p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method is
 * no longer available to third party applications: the introduction of
 * document-centric recents means
 * it can leak personal information to the caller.  For backwards compatibility,
 * it will still return a small subset of its data: at least the caller's
 * own tasks (though see {@link #getAppTasks()} for the correct supported
 * way to retrieve that information), and possibly some other tasks
 * such as home that are known to not be sensitive.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many tasks the
 * user has started and the maximum number the system can remember.
 * @param flags Information about what to return.  May be any combination
 * of {@link #RECENT_WITH_EXCLUDED} and {@link #RECENT_IGNORE_UNAVAILABLE}.
 *
 * @return Returns a list of RecentTaskInfo records describing each of
 * the recent tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RecentTaskInfo> getRecentTasks(int,int)>    ---->
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(IconCompat)>
/**
 * Adds an icon to the end items of the row builder. A mixture of icons and actions
 * is not permitted. If an action has already been added this will throw
 * {@link IllegalArgumentException}.
 *
 * @deprecated use ListBuilder{@link #addEndItem(Icon, int)} instead.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(IconCompat)>    ---->    #addEndItem(Icon, int)
<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceDestroyed(SurfaceHolder)>    ---->
<java.lang.Thread: void destroy()>
/**
 * Throws {@link UnsupportedOperationException}.
 *
 * @deprecated This method was originally designed to destroy this
 * thread without any cleanup. Any monitors it held would have
 * remained locked. However, the method was never implemented.
 * If if were to be implemented, it would be deadlock-prone in
 * much the manner of {@link #suspend}. If the target thread held
 * a lock protecting a critical system resource when it was
 * destroyed, no thread could ever access this resource again.
 * If another thread ever attempted to lock this resource, deadlock
 * would result. Such deadlocks typically manifest themselves as
 * "frozen" processes. For more information, see
 * <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">
 * Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
 * @throws UnsupportedOperationException always
 */
====>[PUBLIC]<java.lang.Thread: void destroy()>    ---->    #suspend
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
/**
 * Sets whether to include DRM ringtones.
 *
 * @param includeDrm Whether to include DRM ringtones.
 * Obsolete - no longer has any effect
 * @deprecated DRM ringtones are no longer supported
 */
====>[PUBLIC]<android.media.RingtoneManager: void setIncludeDrm(boolean)>    ---->
<android.net.ConnectivityManager: Network getNetworkForType(int)>
/**
 * Returns the {@link Network} object currently serving a given type, or
 * null if the given type is not connected.
 *
 * @hide
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[HIDDEN]<android.net.ConnectivityManager: Network getNetworkForType(int)>    ---->    #getAllNetworks
<android.telephony.TelephonyManager: void silenceRinger()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#silenceRinger} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void silenceRinger()>    ---->    android.telecom.TelecomManager#silenceRinger
<android.view.View: void requestFitSystemWindows()>
/**
 * Ask that a new dispatch of {@link #fitSystemWindows(Rect)} be performed.
 * @deprecated Use {@link #requestApplyInsets()} for newer platform versions.
 */
====>[PUBLIC]<android.view.View: void requestFitSystemWindows()>    ---->    #requestApplyInsets()
<androidx.legacy.app.FragmentPagerAdapter: void finishUpdate(ViewGroup)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void finishUpdate(ViewGroup)>    ---->    androidx.fragment.app.FragmentPagerAdapter
Inconsistency (Non-Documentation):<java.net.AbstractPlainDatagramSocketImpl: byte getTTL()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\java\net\AbstractPlainDatagramSocketImpl.java
<java.net.AbstractPlainDatagramSocketImpl: byte getTTL()>
/**
 * Get the TTL (time-to-live) option.
 */
====>[PUBLIC]<java.net.AbstractPlainDatagramSocketImpl: byte getTTL()>    ---->
<android.hardware.SensorManager: boolean registerListener(SensorListener,int,int)>
/**
 * Registers a SensorListener for given sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
 * instead.
 *
 * @param listener
 * sensor listener object
 *
 * @param sensors
 * a bit masks of the sensors to register to
 *
 * @param rate
 * rate of events. This is only a hint to the system. events may be
 * received faster or slower than the specified rate. Usually events
 * are received faster. The value must be one of
 * {@link #SENSOR_DELAY_NORMAL}, {@link #SENSOR_DELAY_UI},
 * {@link #SENSOR_DELAY_GAME}, or {@link #SENSOR_DELAY_FASTEST}.
 *
 * @return <code>true</code> if the sensor is supported and successfully
 * enabled
 */
====>[PUBLIC]<android.hardware.SensorManager: boolean registerListener(SensorListener,int,int)>    ---->    SensorManager#registerListener(SensorEventListener, Sensor, int)
<android.os.Vibrator: void vibrate(long,AudioAttributes)>
/**
 * Vibrate constantly for the specified period of time.
 *
 * @param milliseconds The number of milliseconds to vibrate.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long,AudioAttributes)>    ---->    #vibrate(VibrationEffect, AudioAttributes)
<android.content.pm.ShortcutInfo: CharSequence getTitle()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: CharSequence getTitle()>    ---->
<android.view.KeyEvent: boolean dispatch(Callback)>
/**
 * @deprecated Use {@link #dispatch(Callback, DispatcherState, Object)} instead.
 */
====>[PUBLIC]<android.view.KeyEvent: boolean dispatch(Callback)>    ---->    #dispatch(Callback, DispatcherState, Object)
<android.hardware.SensorDirectChannel: boolean isValid()>
/**
 * @removed
 */
====>[HIDDEN]<android.hardware.SensorDirectChannel: boolean isValid()>    ---->
<android.media.AudioManager: void unregisterRemoteController(RemoteController)>
/**
 * Unregisters a {@link RemoteController}, causing it to no longer receive
 * media metadata and playback state information, and no longer be capable
 * of controlling playback.
 *
 * @param rctlr the object to unregister.
 * @deprecated Use
 * {@link MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)}
 * instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterRemoteController(RemoteController)>    ---->    MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)
<java.lang.SecurityManager: boolean inClass(String)>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: boolean inClass(String)>    ---->    #checkPermission
<android.net.wifi.WpsInfo: String toString()>
/**
 * @deprecated This API is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WpsInfo: String toString()>    ---->
<androidx.leanback.app.BackgroundManager: Drawable getDefaultDimLayer()>
/**
 * Returns the default drawable used as a dim layer.
 * @deprecated No longer support dim layer.
 */
====>[PUBLIC]<androidx.leanback.app.BackgroundManager: Drawable getDefaultDimLayer()>    ---->
<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last vertex buffer type added to
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: int getCurrentVertexTypeIndex()>    ---->
<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)>
/**
 * @deprecated in API 16
 * Bind an os surface
 *
 * @param w
 * @param h
 * @param sur
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void setSurface(SurfaceHolder,int,int)>    ---->
<android.content.pm.ShortcutInfo: int getTitleResId()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: int getTitleResId()>    ---->
<android.telecom.RemoteConnection: void setAudioState(AudioState)>
/**
 * Set the audio state of this {@code RemoteConnection}.
 *
 * @param state The audio state of this {@code RemoteConnection}.
 * @hide
 * @deprecated Use {@link #setCallAudioState(CallAudioState)} instead.
 */
====>[HIDDEN]<android.telecom.RemoteConnection: void setAudioState(AudioState)>    ---->    #setCallAudioState(CallAudioState)
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: void <init>(RenderScript)>    ---->
<com.android.internal.widget.PagerAdapter: void finishUpdate(View)>
/**
 * Called when the a change in the shown pages has been completed.  At this
 * point you must ensure that all of the pages have actually been added or
 * removed from the container as appropriate.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #finishUpdate(android.view.ViewGroup)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void finishUpdate(View)>    ---->    #finishUpdate(android.view.ViewGroup)
Inconsistency (Non-Documentation):<android.databinding.parser.BindingExpressionLexer: String[] getTokenNames()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\databinding\parser\BindingExpressionLexer.java
<android.databinding.parser.BindingExpressionLexer: String[] getTokenNames()>

====>[PUBLIC]<android.databinding.parser.BindingExpressionLexer: String[] getTokenNames()>    ---->
<android.util.proto.ProtoOutputStream: void writeSInt64(long,long)>
/**
 * Write a single proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSInt64(long,long)>    ---->    #write
<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.app.Notification: long getTimeout()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification: long getTimeout()>    ---->
<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,PendingIntent)>
/**
 * @deprecated Use {@link #setBroadcastSubscriber(PendingIntent, long, long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean setBroadcastSubscriber(long,long,PendingIntent)>    ---->    #setBroadcastSubscriber(PendingIntent, long, long)
<androidx.core.view.MotionEventCompat: float getAxisValue(MotionEvent,int,int)>
/**
 * Returns the value of the requested axis for the given pointer <em>index</em>
 * (use {@link #getPointerId(MotionEvent, int)} to find the pointer identifier for this index).
 *
 * @param axis The axis identifier for the axis value to retrieve.
 * @param pointerIndex Raw index of pointer to retrieve.  Value may be from 0
 * (the first pointer that is down) to {@link #getPointerCount(MotionEvent)}-1.
 * @return The value of the axis, or 0 if the axis is not available.
 *
 * @see #AXIS_X
 * @see #AXIS_Y
 *
 * @deprecated Call {@link MotionEvent#getAxisValue(int, int)} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: float getAxisValue(MotionEvent,int,int)>    ---->    MotionEvent#getAxisValue(int, int)
<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(boolean,boolean)>
/**
 * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus
 * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point
 * (only one per field) if specified.
 *
 * @deprecated Use {@link #getInstance(Locale, boolean, boolean)} instead.
 */
====>[PUBLIC]<android.text.method.DigitsKeyListener: DigitsKeyListener getInstance(boolean,boolean)>    ---->    #getInstance(Locale, boolean, boolean)
<androidx.core.database.DatabaseUtilsCompat: String[] appendSelectionArgs(String[],String[])>
/**
 * Appends one set of selection args to another. This is useful when adding a selection
 * argument to a user provided set.
 *
 * @deprecated Use
 * {@link android.database.DatabaseUtils#appendSelectionArgs(String[], String[])} directly.
 */
====>[PUBLIC]<androidx.core.database.DatabaseUtilsCompat: String[] appendSelectionArgs(String[],String[])>    ---->    android.database.DatabaseUtils#appendSelectionArgs(String[], String[])
<android.telecom.StatusHints: int getIconResId()>
/**
 * The icon resource ID for the icon to show.
 *
 * @return A resource ID.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: int getIconResId()>    ---->
<android.view.View: void setDrawingCacheEnabled(boolean)>
/**
 * <p>Enables or disables the drawing cache. When the drawing cache is enabled, the next call
 * to {@link #getDrawingCache()} or {@link #buildDrawingCache()} will draw the view in a
 * bitmap. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when
 * the cache is enabled. To benefit from the cache, you must request the drawing cache by
 * calling {@link #getDrawingCache()} and draw it on screen if the returned bitmap is not
 * null.</p>
 *
 * <p>Enabling the drawing cache is similar to
 * {@link #setLayerType(int, android.graphics.Paint) setting a layer} when hardware
 * acceleration is turned off. When hardware acceleration is turned on, enabling the
 * drawing cache has no effect on rendering because the system uses a different mechanism
 * for acceleration which ignores the flag. If you want to use a Bitmap for the view, even
 * when hardware acceleration is enabled, see {@link #setLayerType(int, android.graphics.Paint)}
 * for information on how to enable software and hardware layers.</p>
 *
 * <p>This API can be used to manually generate
 * a bitmap copy of this view, by setting the flag to <code>true</code> and calling
 * {@link #getDrawingCache()}.</p>
 *
 * @param enabled true to enable the drawing cache, false otherwise
 *
 * @see #isDrawingCacheEnabled()
 * @see #getDrawingCache()
 * @see #buildDrawingCache()
 * @see #setLayerType(int, android.graphics.Paint)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheEnabled(boolean)>    ---->    #setLayerType(int, Paint)
<android.telecom.Conference: void setConnectTimeMillis(long)>
/**
 * @hide
 * @deprecated Use {@link #setConnectionTime}.
 */
====>[HIDDEN]<android.telecom.Conference: void setConnectTimeMillis(long)>    ---->    #setConnectionTime
<android.animation.LayoutTransition: void showChild(ViewGroup,View)>
/**
 * @deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.
 */
====>[PUBLIC]<android.animation.LayoutTransition: void showChild(ViewGroup,View)>    ---->    #showChild(android.view.ViewGroup, android.view.View, int)
<androidx.core.widget.EdgeEffectCompat: void finish()>
/**
 * Immediately finish the current animation.
 * After this call {@link #isFinished()} will return true.
 *
 * @deprecated Use {@link EdgeEffect#finish()} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: void finish()>    ---->    EdgeEffect#finish()
<androidx.slidingpanelayout.widget.SlidingPaneLayout: void smoothSlideClosed()>
/**
 * @deprecated Renamed to {@link #closePane()} - this method is going away soon!
 */
====>[PUBLIC]<androidx.slidingpanelayout.widget.SlidingPaneLayout: void smoothSlideClosed()>    ---->    #closePane()
<android.service.carrier.CarrierMessagingService: void onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)>
/**
 * Override this method to filter inbound SMS messages.
 *
 * @param pdu the PDUs of the message
 * @param format the format of the PDUs, typically "3gpp" or "3gpp2"
 * @param destPort the destination port of a binary SMS, this will be -1 for text SMS
 * @param subId SMS subscription ID of the SIM
 * @param callback result callback. Call with {@code true} to keep an inbound SMS message and
 * deliver to SMS apps, and {@code false} to drop the message.
 * @deprecated Use {@link #onReceiveTextSms} instead.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)>    ---->    #onReceiveTextSms
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isScrollable()>
/**
 * Gets if the source is scrollable.
 *
 * @return True if the source is scrollable, false otherwise.
 *
 * @deprecated Use {@link AccessibilityRecord#isScrollable()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isScrollable()>    ---->    AccessibilityRecord#isScrollable()
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\content\PackageHelper.java
<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,Handle,String)>    ---->
<androidx.leanback.widget.GuidedActionsStylist: void startExpandedTransition(ViewHolder)>
/**
 * Start transition to expand or collapse GuidedActionStylist.
 * @param avh When not null, the GuidedActionStylist expands the sub actions of avh.  When null
 * the GuidedActionStylist will collapse sub actions.
 * @deprecated use {@link #expandAction(GuidedAction, boolean)} and
 * {@link #collapseAction(boolean)}
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedActionsStylist: void startExpandedTransition(ViewHolder)>    ---->    #expandAction(GuidedAction, boolean)
<android.view.ViewConfiguration: int getEdgeSlop()>
/**
 * @return Inset in dips to look for touchable content when the user touches the edge of the
 * screen
 *
 * @deprecated Use {@link #getScaledEdgeSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getEdgeSlop()>    ---->    #getScaledEdgeSlop()
<androidx.appcompat.app.ActionBar: Tab getTabAt(int)>
/**
 * Returns the tab at the specified index.
 *
 * @param index Index value in the range 0-get
 * @return
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: Tab getTabAt(int)>    ---->
<android.nfc.NfcAdapter: void enableForegroundNdefPush(Activity,NdefMessage)>
/**
 * Enable NDEF message push over NFC while this Activity is in the foreground.
 *
 * <p>You must explicitly call this method every time the activity is
 * resumed, and you must call {@link #disableForegroundNdefPush} before
 * your activity completes {@link Activity#onPause}.
 *
 * <p>Strongly recommend to use the new {@link #setNdefPushMessage}
 * instead: it automatically hooks into your activity life-cycle,
 * so you do not need to call enable/disable in your onResume/onPause.
 *
 * <p>For NDEF push to function properly the other NFC device must
 * support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or
 * Android's "com.android.npp" (Ndef Push Protocol). This was optional
 * on Gingerbread level Android NFC devices, but SNEP is mandatory on
 * Ice-Cream-Sandwich and beyond.
 *
 * <p>This method must be called from the main thread.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param activity foreground activity
 * @param message a NDEF Message to push over NFC
 * @throws IllegalStateException if the activity is not currently in the foreground
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated use {@link #setNdefPushMessage} instead
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void enableForegroundNdefPush(Activity,NdefMessage)>    ---->    #setNdefPushMessage
<android.view.ViewGroup: ViewParent invalidateChildInParent(int[],Rect)>
/**
 * Don't call or override this method. It is used for the implementation of
 * the view hierarchy.
 *
 * This implementation returns null if this ViewGroup does not have a parent,
 * if this ViewGroup is already fully invalidated or if the dirty rectangle
 * does not intersect with this ViewGroup's bounds.
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead to observe updates to
 * draw state in descendants.
 */
====>[PUBLIC]<android.view.ViewGroup: ViewParent invalidateChildInParent(int[],Rect)>    ---->    #onDescendantInvalidated(View, View)
<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)>
/**
 * Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatusForCurrentTransaction}.
 * @deprecated Please use
 * {@link UiccProfile#getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)>    ---->    UiccProfile#getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)
<android.os.Debug: void resetThreadAllocCount()>
/**
 * Clears the thread-local count of objects allocated.
 * @see #getThreadAllocCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadAllocCount()>    ---->
<com.android.ims.ImsManager: int getWfcMode()>
/**
 * Returns the user configuration of WFC preference setting
 * @deprecated. Use {@link #getWfcMode(boolean roaming)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: int getWfcMode()>    ---->    #getWfcMode(boolean roaming)
<androidx.legacy.app.FragmentStatePagerAdapter: void destroyItem(ViewGroup,int,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void destroyItem(ViewGroup,int,Object)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.webkit.WebChromeClient: boolean onJsTimeout()>
/**
 * Tell the client that a JavaScript execution timeout has occured. And the
 * client may decide whether or not to interrupt the execution. If the
 * client returns {@code true}, the JavaScript will be interrupted. If the client
 * returns {@code false}, the execution will continue. Note that in the case of
 * continuing execution, the timeout counter will be reset, and the callback
 * will continue to occur if the script does not finish at the next check
 * point.
 * @return boolean Whether the JavaScript execution should be interrupted.
 * @deprecated This method is no longer supported and will not be invoked.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: boolean onJsTimeout()>    ---->
<android.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param context The context where the ListView associated with this adapter is running
 * @param layout resource identifier of a layout file that defines the views
 * for this list item.  Unless you override them later, this will
 * define both the item views and the drop down views.
 */
====>[PUBLIC]<android.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor)>    ---->    android.app.LoaderManager
<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplication(int)>
/**
 * @deprecated Please use {@link UiccProfile#getApplication(int)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplication(int)>    ---->    UiccProfile#getApplication(int)
<android.provider.Contacts.People: long tryGetMyContactsGroupId(ContentResolver)>
/**
 * @hide Used in vCard parser code.
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[HIDDEN]<android.provider.Contacts.People: long tryGetMyContactsGroupId(ContentResolver)>    ---->    android.provider.ContactsContract
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIcon(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIcon(int)>
/**
 * Set an icon that goes with the content of this notification.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setContentIcon(int)>    ---->
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiScanner.java
<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])>
/**
 * configure WifiChange detection
 * @param rssiSampleSize number of samples used for RSSI averaging
 * @param lostApSampleSize number of samples to confirm an access point's loss
 * @param unchangedSampleSize number of samples to confirm there are no changes
 * @param minApsBreachingThreshold minimum number of access points that need to be
 * out of range to detect WifiChange
 * @param periodInMs indicates period of scan to find changes
 * @param bssidInfos access points to watch
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void configureWifiChange(int,int,int,int,int,BssidInfo[])>    ---->
<androidx.core.view.ViewCompat: float getPivotY(View)>
/**
 * The y location of the point around which the view is {@link #setRotation(View,
 * float) rotated} and {@link #setScaleY(View, float) scaled}.
 *
 * @return The y location of the pivot point.
 *
 * @deprecated Use {@link View#getPivotY()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getPivotY(View)>    ---->    View#getPivotY()
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollable(boolean)>
/**
 * Sets if the source is scrollable.
 *
 * @param scrollable True if the source is scrollable, false otherwise.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setScrollable(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollable(boolean)>    ---->    AccessibilityRecord#setScrollable(boolean)
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Parameters getParameters()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\CameraAgent.java
<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Parameters getParameters()>
/**
 * Gets the current camera parameters synchronously. This method is
 * synchronous since the caller has to wait for the camera to return
 * the parameters. If the parameters are already cached, it returns
 * immediately.
 */
====>[PUBLIC]<com.android.ex.camera2.portability.CameraAgent.CameraProxy: Parameters getParameters()>    ---->
<android.speech.tts.TextToSpeech: int setEngineByPackageName(String)>
/**
 * Sets the TTS engine to use.
 *
 * @deprecated This doesn't inform callers when the TTS engine has been
 * initialized. {@link #TextToSpeech(Context, OnInitListener, String)}
 * can be used with the appropriate engine name. Also, there is no
 * guarantee that the engine specified will be loaded. If it isn't
 * installed or disabled, the user / system wide defaults will apply.
 *
 * @param enginePackageName The package name for the synthesis engine (e.g. "com.svox.pico")
 *
 * @return {@link #ERROR} or {@link #SUCCESS}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int setEngineByPackageName(String)>    ---->    #TextToSpeech(Context, OnInitListener, String)
<android.app.Activity: boolean requestVisibleBehind(boolean)>
/**
 * Activities that want to remain visible behind a translucent activity above them must call
 * this method anytime between the start of {@link #onResume()} and the return from
 * {@link #onPause()}. If this call is successful then the activity will remain visible after
 * {@link #onPause()} is called, and is allowed to continue playing media in the background.
 *
 * <p>The actions of this call are reset each time that this activity is brought to the
 * front. That is, every time {@link #onResume()} is called the activity will be assumed
 * to not have requested visible behind. Therefore, if you want this activity to continue to
 * be visible in the background you must call this method again.
 *
 * <p>Only fullscreen opaque activities may make this call. I.e. this call is a nop
 * for dialog and translucent activities.
 *
 * <p>Under all circumstances, the activity must stop playing and release resources prior to or
 * within a call to {@link #onVisibleBehindCanceled()} or if this call returns false.
 *
 * <p>False will be returned any time this method is called between the return of onPause and
 * the next call to onResume.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @param visible true to notify the system that the activity wishes to be visible behind other
 * translucent activities, false to indicate otherwise. Resources must be
 * released when passing false to this method.
 *
 * @return the resulting visibiity state. If true the activity will remain visible beyond
 * {@link #onPause()} if the next activity is translucent or not fullscreen. If false
 * then the activity may not count on being visible behind other translucent activities,
 * and must stop any media playback and release resources.
 * Returning false may occur in lieu of a call to {@link #onVisibleBehindCanceled()} so
 * the return value must be checked.
 *
 * @see #onVisibleBehindCanceled()
 */
====>[PUBLIC]<android.app.Activity: boolean requestVisibleBehind(boolean)>    ---->    #onVisibleBehindCanceled()
<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)>
/**
 * @deprecated in API 16
 * Set the default ProgramVertex object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramVertex(ProgramVertex)>    ---->
<java.sql.ResultSet: InputStream getUnicodeStream(int)>
/**
 * Retrieves the value of the designated column in the current row
 * of this <code>ResultSet</code> object as
 * as a stream of two-byte 3 characters. The first byte is
 * the high byte; the second byte is the low byte.
 *
 * The value can then be read in chunks from the
 * stream. This method is particularly
 * suitable for retrieving large <code>LONGVARCHAR</code>values.  The
 * JDBC driver will do any necessary conversion from the database
 * format into Unicode.
 *
 * <P><B>Note:</B> All the data in the returned stream must be
 * read prior to getting the value of any other column. The next
 * call to a getter method implicitly closes the stream.
 * Also, a stream may return <code>0</code> when the method
 * <code>InputStream.available</code>
 * is called, whether there is data available or not.
 *
 * @param columnIndex the first column is 1, the second is 2, ...
 * @return a Java input stream that delivers the database column value
 * as a stream of two-byte Unicode characters;
 * if the value is SQL <code>NULL</code>, the value returned is
 * <code>null</code>
 *
 * @exception SQLException if the columnIndex is not valid;
 * if a database access error occurs or this method is
 * called on a closed result set
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated use <code>getCharacterStream</code> in place of
 * <code>getUnicodeStream</code>
 */
====>[PUBLIC]<java.sql.ResultSet: InputStream getUnicodeStream(int)>    ---->
<android.net.TrafficStats: long getUidUdpTxPackets(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpTxPackets(int)>    ---->    #getUidTxPackets(int)
<android.app.Activity: Dialog onCreateDialog(int,Bundle)>
/**
 * Callback for creating dialogs that are managed (saved and restored) for you
 * by the activity.  The default implementation calls through to
 * {@link #onCreateDialog(int)} for compatibility.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>If you use {@link #showDialog(int)}, the activity will call through to
 * this method the first time, and hang onto it thereafter.  Any dialog
 * that is created by this method will automatically be saved and restored
 * for you, including whether it is showing.
 *
 * <p>If you would like the activity to manage saving and restoring dialogs
 * for you, you should override this method and handle any ids that are
 * passed to {@link #showDialog}.
 *
 * <p>If you would like an opportunity to prepare your dialog before it is shown,
 * override {@link #onPrepareDialog(int, Dialog, Bundle)}.
 *
 * @param id The id of the dialog.
 * @param args The dialog arguments provided to {@link #showDialog(int, Bundle)}.
 * @return The dialog.  If you return null, the dialog will not be created.
 *
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: Dialog onCreateDialog(int,Bundle)>    ---->    DialogFragment
<androidx.core.widget.ScrollerCompat: int getCurrX()>
/**
 * Returns the current X offset in the scroll.
 *
 * @return The new X offset as an absolute distance from the origin.
 *
 * @deprecated Use {@link OverScroller#getCurrX()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: int getCurrX()>    ---->    OverScroller#getCurrX()
<com.android.setupwizardlib.SetupWizardRecyclerLayout: int getDividerInset()>
/**
 * @deprecated Use {@link #getDividerInsetStart()} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardRecyclerLayout: int getDividerInset()>    ---->    #getDividerInsetStart()
<androidx.core.view.MotionEventCompat: int getButtonState(MotionEvent)>
/**
 * @deprecated Call {@link MotionEvent#getButtonState()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getButtonState(MotionEvent)>    ---->    MotionEvent#getButtonState()
<androidx.core.view.ViewCompat: float getY(View)>
/**
 * @deprecated Use {@link View#getY()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getY(View)>    ---->    View#getY()
<android.content.Context: int getWallpaperDesiredMinimumHeight()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumHeight()
 * WallpaperManager.getDesiredMinimumHeight()} instead.
 */
====>[PUBLIC]<android.content.Context: int getWallpaperDesiredMinimumHeight()>    ---->    android.app.WallpaperManager#getDesiredMinimumHeight()  WallpaperManager.getDesiredMinimumHeight()
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,int,Icon)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and TvInputHardwareInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.
 * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},
 * {@code service} label will be loaded.
 * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is
 * {@code null}, the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,int,Icon)>    ---->    Builder
<android.content.pm.ShortcutInfo: boolean isManifestShortcut()>
/**
 * @hide kept for unit tests
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: boolean isManifestShortcut()>    ---->
<androidx.legacy.app.FragmentPagerAdapter: void destroyItem(ViewGroup,int,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void destroyItem(ViewGroup,int,Object)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle)>
/**
 * <p>Version of {@link #sendStickyBroadcast(Intent)} that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast, and the Intent will be held to
 * be re-broadcast to future receivers.
 * @param user UserHandle to send the intent to.
 *
 * @see #sendBroadcast(Intent)
 */
====>[PUBLIC]<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->    #sendBroadcast(Intent)
<android.telephony.TelephonyManager: boolean getDataEnabled(int)>
/**
 * @deprecated use {@link #isDataEnabled()} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean getDataEnabled(int)>    ---->    #isDataEnabled()
<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>
/**
 * Adds an NMEA listener.
 *
 * @param listener a {@link GpsStatus.NmeaListener} object to register
 *
 * @return true if the listener was successfully added
 *
 * @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present
 * @deprecated use {@link #addNmeaListener(OnNmeaMessageListener)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>    ---->    #addNmeaListener(OnNmeaMessageListener)
<android.widget.CalendarView: void setFocusedMonthDateColor(int)>
/**
 * Sets the color for the dates of the focused month.
 *
 * @param color The focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_focusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setFocusedMonthDateColor(int)>    ---->
<androidx.room.RoomWarnings: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.room.RoomWarnings: void <init>()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getAddedCount()>
/**
 * Gets the number of added characters.
 *
 * @return The number of added characters.
 *
 * @deprecated Use {@link AccessibilityRecord#getAddedCount()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getAddedCount()>    ---->    AccessibilityRecord#getAddedCount()
<androidx.palette.graphics.Palette: Palette generate(Bitmap,int)>
/**
 * @deprecated Use {@link Builder} to generate the Palette.
 */
====>[PUBLIC]<androidx.palette.graphics.Palette: Palette generate(Bitmap,int)>    ---->    Builder
<android.view.KeyEvent: void <init>(KeyEvent,long,int)>
/**
 * Copy an existing key event, modifying its time and repeat count.
 *
 * @deprecated Use {@link #changeTimeRepeat(KeyEvent, long, int)}
 * instead.
 *
 * @param origEvent The existing event to be copied.
 * @param eventTime The new event time
 * (in {@link android.os.SystemClock#uptimeMillis}) of the event.
 * @param newRepeat The new repeat count of the event.
 */
====>[PUBLIC]<android.view.KeyEvent: void <init>(KeyEvent,long,int)>    ---->    #changeTimeRepeat(KeyEvent, long, int)
<androidx.core.view.ViewCompat: int getMeasuredHeightAndState(View)>
/**
 * Return the full height measurement information for this view as computed
 * by the most recent call to {@link android.view.View#measure(int, int)}.
 * This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and
 * {@link #MEASURED_STATE_TOO_SMALL}.
 * This should be used during measurement and layout calculations only. Use
 * {@link android.view.View#getHeight()} to see how wide a view is after layout.
 *
 * @return The measured width of this view as a bit mask.
 *
 * @deprecated Use {@link View#getMeasuredHeightAndState()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int getMeasuredHeightAndState(View)>    ---->    View#getMeasuredHeightAndState()
<androidx.legacy.widget.Space: void <init>(Context,AttributeSet)>
/**
 * @deprecated Use framework {@link android.widget.Space} class instead.
 */
====>[PUBLIC]<androidx.legacy.widget.Space: void <init>(Context,AttributeSet)>    ---->    android.widget.Space
<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)>
/**
 * Set subject match (deprecated). This is the substring to be matched against the subject of
 * the authentication server certificate.
 * @param subjectMatch substring to be matched
 * @deprecated in favor of altSubjectMatch
 */
====>[PUBLIC]<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(String)>    ---->    altSubjectMatch
<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)>
/**
 * @hide
 */
====>[HIDDEN]<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)>    ---->
<com.android.vcard.VCardEntryConstructor: void <init>(int,Account,String)>
/**
 * @deprecated targetCharset is not used anymore.
 * Use {@link #VCardEntryConstructor(int, Account)}
 */
====>[PUBLIC]<com.android.vcard.VCardEntryConstructor: void <init>(int,Account,String)>    ---->    #VCardEntryConstructor(int, Account)
<android.graphics.Canvas: GL getGL()>
/**
 * Returns null.
 *
 * @deprecated This method is not supported and should not be invoked.
 *
 * @hide
 */
====>[HIDDEN]<android.graphics.Canvas: GL getGL()>    ---->
<java.security.Signature: Object getParameter(String)>
/**
 * Gets the value of the specified algorithm parameter. This method
 * supplies a general-purpose mechanism through which it is possible to
 * get the various parameters of this object. A parameter may be any
 * settable parameter for the algorithm, such as a parameter size, or
 * a source of random bits for signature generation (if appropriate),
 * or an indication of whether or not to perform a specific but optional
 * computation. A uniform algorithm-specific naming scheme for each
 * parameter is desirable but left unspecified at this time.
 *
 * @param param the string name of the parameter.
 *
 * @return the object that represents the parameter value, or null if
 * there is none.
 *
 * @exception InvalidParameterException if {@code param} is an invalid
 * parameter for this engine, or another exception occurs while
 * trying to get this parameter.
 *
 * @see #setParameter(String, Object)
 *
 * @deprecated Deprecated.
 */
====>[PUBLIC]<java.security.Signature: Object getParameter(String)>    ---->
<android.database.AbstractCursor: boolean isFieldUpdated(int)>
/**
 * @deprecated Always returns false since Cursors do not support updating rows
 */
====>[PUBLIC]<android.database.AbstractCursor: boolean isFieldUpdated(int)>    ---->
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(Context,Intent)>
/**
 * Called after the user has changed their device or profile challenge password, as a result of
 * receiving {@link #ACTION_PASSWORD_CHANGED}.  At this point you
 * can use {@link DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}
 * to retrieve the active password characteristics.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordChanged(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(Context,Intent)>    ---->    #onPasswordChanged(Context, Intent, UserHandle)
<android.app.ActivityManager: List<RunningTaskInfo> getRunningTasks(int)>
/**
 * Return a list of the tasks that are currently running, with
 * the most recent being first and older ones after in order.  Note that
 * "running" does not mean any of the task's code is currently loaded or
 * activity -- the task may have been frozen by the system, so that it
 * can be restarted in its previous state when next brought to the
 * foreground.
 *
 * <p><b>Note: this method is only intended for debugging and presenting
 * task management user interfaces</b>.  This should never be used for
 * core logic in an application, such as deciding between different
 * behaviors based on the information found here.  Such uses are
 * <em>not</em> supported, and will likely break in the future.  For
 * example, if multiple applications can be actively running at the
 * same time, assumptions made about the meaning of the data here for
 * purposes of control flow will be incorrect.</p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method
 * is no longer available to third party
 * applications: the introduction of document-centric recents means
 * it can leak person information to the caller.  For backwards compatibility,
 * it will still return a small subset of its data: at least the caller's
 * own tasks, and possibly some other tasks
 * such as home that are known to not be sensitive.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many tasks the
 * user has started.
 *
 * @return Returns a list of RunningTaskInfo records describing each of
 * the running tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RunningTaskInfo> getRunningTasks(int)>    ---->
<java.lang.ThreadGroup: void suspend()>
/**
 * Suspends all threads in this thread group.
 * <p>
 * First, the <code>checkAccess</code> method of this thread group is
 * called with no arguments; this may result in a security exception.
 * <p>
 * This method then calls the <code>suspend</code> method on all the
 * threads in this thread group and in all of its subgroups.
 *
 * @exception  SecurityException  if the current thread is not allowed
 * to access this thread group or any of the threads in
 * the thread group.
 * @see        java.lang.Thread#suspend()
 * @see        java.lang.SecurityException
 * @see        java.lang.ThreadGroup#checkAccess()
 * @since      JDK1.0
 * @deprecated    This method is inherently deadlock-prone.  See
 * {@link Thread#suspend} for details.
 */
====>[PUBLIC]<java.lang.ThreadGroup: void suspend()>    ---->    Thread#suspend
<androidx.leanback.app.BrowseSupportFragment: void enableRowScaling(boolean)>
/**
 * @deprecated use {@link BrowseSupportFragment#enableMainFragmentScaling(boolean)} instead.
 *
 * @param enable true to enable row scaling
 */
====>[PUBLIC]<androidx.leanback.app.BrowseSupportFragment: void enableRowScaling(boolean)>    ---->    BrowseSupportFragment#enableMainFragmentScaling(boolean)
<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap,int)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: Palette generate(Bitmap,int)>    ---->    Palette.Builder
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>
/**
 * Tests if a given integer represents a valid network type.
 * @param networkType the type to be tested
 * @return a boolean.  {@code true} if the type is valid, else {@code false}
 * @deprecated All APIs accepting a network type are deprecated. There should be no need to
 * validate a network type.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>    ---->
<android.location.Location: void removeBearing()>
/**
 * Remove the bearing from this location.
 *
 * <p>Following this call {@link #hasBearing} will return false,
 * and {@link #getBearing} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeBearing()>    ---->
<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>
/**
 * Sets the rate at which preview frames are received. This is the
 * target frame rate. The actual frame rate depends on the driver.
 *
 * @param fps the frame rate (frames per second)
 * @deprecated replaced by {@link #setPreviewFpsRange(int,int)}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: void setPreviewFrameRate(int)>    ---->    #setPreviewFpsRange(int,int)
<android.bluetooth.BluetoothAdapter: void stopLeScan(LeScanCallback)>
/**
 * Stops an ongoing Bluetooth LE device scan.
 *
 * @param callback used to identify which scan to stop must be the same handle used to start the
 * scan
 * @deprecated Use {@link BluetoothLeScanner#stopScan(ScanCallback)} instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: void stopLeScan(LeScanCallback)>    ---->    BluetoothLeScanner#stopScan(ScanCallback)
<android.app.Activity: boolean onCreateThumbnail(Bitmap,Canvas)>
/**
 * @deprecated Method doesn't do anything and will be removed in the future.
 */
====>[PUBLIC]<android.app.Activity: boolean onCreateThumbnail(Bitmap,Canvas)>    ---->
<android.test.TouchUtils: void scrollToBottom(ActivityInstrumentationTestCase,ViewGroup)>
/**
 * Scroll a ViewGroup to the bottom by repeatedly calling
 * {@link #dragQuarterScreenUp(InstrumentationTestCase, Activity)}
 *
 * @param test The test case that is being run
 * @param v The ViewGroup that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void scrollToBottom(ActivityInstrumentationTestCase,ViewGroup)>    ---->    android.test.ActivityInstrumentationTestCase2
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setBeforeText(CharSequence)>
/**
 * Sets the text before a change.
 *
 * @param beforeText The text before the change.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setBeforeText(CharSequence)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setBeforeText(CharSequence)>    ---->    AccessibilityRecord#setBeforeText(CharSequence)
<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>
/**
 * Class constructor with audio session. Use this constructor when the AudioTrack must be
 * attached to a particular audio session. The primary use of the audio session ID is to
 * associate audio effects to a particular instance of AudioTrack: if an audio session ID
 * is provided when creating an AudioEffect, this effect will be applied only to audio tracks
 * and media players in the same session and not to the output mix.
 * When an AudioTrack is created without specifying a session, it will create its own session
 * which can be retrieved by calling the {@link #getAudioSessionId()} method.
 * If a non-zero session ID is provided, this AudioTrack will share effects attached to this
 * session
 * with all other media players or audio tracks in the same session, otherwise a new session
 * will be created for this track if none is supplied.
 * @param streamType the type of the audio stream. See
 * {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM},
 * {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC},
 * {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}.
 * @param sampleRateInHz the initial source sample rate expressed in Hz.
 * {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value
 * which is usually the sample rate of the sink.
 * @param channelConfig describes the configuration of the audio channels.
 * See {@link AudioFormat#CHANNEL_OUT_MONO} and
 * {@link AudioFormat#CHANNEL_OUT_STEREO}
 * @param audioFormat the format in which the audio data is represented.
 * See {@link AudioFormat#ENCODING_PCM_16BIT} and
 * {@link AudioFormat#ENCODING_PCM_8BIT},
 * and {@link AudioFormat#ENCODING_PCM_FLOAT}.
 * @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is
 * read from for playback. This should be a nonzero multiple of the frame size in bytes.
 * <p> If the track's creation mode is {@link #MODE_STATIC},
 * this is the maximum length sample, or audio clip, that can be played by this instance.
 * <p> If the track's creation mode is {@link #MODE_STREAM},
 * this should be the desired buffer size
 * for the <code>AudioTrack</code> to satisfy the application's
 * latency requirements.
 * If <code>bufferSizeInBytes</code> is less than the
 * minimum buffer size for the output sink, it is increased to the minimum
 * buffer size.
 * The method {@link #getBufferSizeInFrames()} returns the
 * actual size in frames of the buffer created, which
 * determines the minimum frequency to write
 * to the streaming <code>AudioTrack</code> to avoid underrun.
 * You can write data into this buffer in smaller chunks than this size.
 * See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size
 * for an AudioTrack instance in streaming mode.
 * @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}
 * @param sessionId Id of audio session the AudioTrack must be attached to
 * @throws java.lang.IllegalArgumentException
 * @deprecated use {@link Builder} or
 * {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the
 * {@link AudioAttributes} instead of the stream type which is only for volume control.
 */
====>[PUBLIC]<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>    ---->    Builder
<androidx.legacy.app.FragmentTabHost: void setup()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void setup()>    ---->    androidx.fragment.app.FragmentTabHost
<androidx.slidingpanelayout.widget.SlidingPaneLayout: void smoothSlideOpen()>
/**
 * @deprecated Renamed to {@link #openPane()} - this method is going away soon!
 */
====>[PUBLIC]<androidx.slidingpanelayout.widget.SlidingPaneLayout: void smoothSlideOpen()>    ---->    #openPane()
<android.telecom.Call: void removeListener(Listener)>
/**
 * Removes a listener from this {@code Call}.
 *
 * @param listener A {@code Listener}.
 * @deprecated Use {@link #unregisterCallback} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Call: void removeListener(Listener)>    ---->    #unregisterCallback
<java.sql.Date: int getSeconds()>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #setSeconds
 */
====>[PUBLIC]<java.sql.Date: int getSeconds()>    ---->    #setSeconds
<android.view.View: int getDrawingCacheBackgroundColor()>
/**
 * @see #setDrawingCacheBackgroundColor(int)
 *
 * @return The background color to used for the drawing cache's bitmap
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: int getDrawingCacheBackgroundColor()>    ---->    #setLayerType(int, Paint)
<java.net.URLEncoder: String encode(String)>
/**
 * Translates a string into {@code x-www-form-urlencoded}
 * format. This method uses the platform's default encoding
 * as the encoding scheme to obtain the bytes for unsafe characters.
 *
 * @param   s   {@code String} to be translated.
 * @deprecated The resulting string may vary depending on the platform's
 * default encoding. Instead, use the encode(String,String)
 * method to specify the encoding.
 * @return  the translated {@code String}.
 */
====>[PUBLIC]<java.net.URLEncoder: String encode(String)>    ---->
<android.app.FragmentManagerImpl: void dispatchPictureInPictureModeChanged(boolean)>
/**
 * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentManagerImpl: void dispatchPictureInPictureModeChanged(boolean)>    ---->    #dispatchPictureInPictureModeChanged(boolean, Configuration)
<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)>
/**
 * @deprecated in API 16
 * Set the bit depth for the depth buffer. This configures the
 * surface for an unsigned integer buffer type.  If a minimum of 0
 * is specified then its possible no depth buffer will be
 * allocated.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setDepth(int,int)>    ---->
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\BaseCanvas.java
<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->
<com.android.server.pm.PackageManagerService: void querySyncProviders(List<String>,List<ProviderInfo>)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.server.pm.PackageManagerService: void querySyncProviders(List<String>,List<ProviderInfo>)>    ---->
<android.media.RingtoneManager: boolean getIncludeDrm()>
/**
 * Returns whether DRM ringtones will be included.
 *
 * @return Whether DRM ringtones will be included.
 * @see #setIncludeDrm(boolean)
 * Obsolete - always returns false
 * @deprecated DRM ringtones are no longer supported
 */
====>[PUBLIC]<android.media.RingtoneManager: boolean getIncludeDrm()>    ---->
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.CameraAgent.CameraProxy: void setParameters(Parameters)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\CameraAgent.java
<com.android.ex.camera2.portability.CameraAgent.CameraProxy: void setParameters(Parameters)>
/**
 * Sets the camera parameters.
 *
 * @param params The camera parameters to use.
 */
====>[PUBLIC]<com.android.ex.camera2.portability.CameraAgent.CameraProxy: void setParameters(Parameters)>    ---->
<android.graphics.drawable.NinePatchDrawable: void <init>(NinePatch)>
/**
 * Create drawable from existing nine-patch, not dealing with density.
 *
 * @deprecated Use {@link #NinePatchDrawable(Resources, NinePatch)}
 * to ensure that the drawable has correctly set its target
 * density.
 */
====>[PUBLIC]<android.graphics.drawable.NinePatchDrawable: void <init>(NinePatch)>    ---->    #NinePatchDrawable(Resources, NinePatch)
<android.view.View: boolean startDrag(ClipData,DragShadowBuilder,Object,int)>
/**
 * @deprecated Use {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)
 * startDragAndDrop()} for newer platform versions.
 */
====>[PUBLIC]<android.view.View: boolean startDrag(ClipData,DragShadowBuilder,Object,int)>    ---->    #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)  startDragAndDrop()
<android.view.ViewDebug: void stopHierarchyTracing()>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void stopHierarchyTracing()>    ---->
Inconsistency (Non-Documentation):<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkTemplate.java
<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()>

====>[PUBLIC]<android.net.NetworkTemplate: NetworkTemplate buildTemplateWifi()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)>
/**
 * Set a hint that this notification's icon should not be displayed.
 * @param hintHideIcon {@code true} to hide the icon, {@code false} otherwise.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintHideIcon(boolean)>    ---->
<android.util.proto.ProtoOutputStream: void writePackedFixed32(long,int[])>
/**
 * Write a list of packed proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFixed32(long,int[])>    ---->    #write
<android.nfc.NfcAdapter: void disableForegroundNdefPush(Activity)>
/**
 * Disable NDEF message push over P2P.
 *
 * <p>After calling {@link #enableForegroundNdefPush}, an activity
 * must call this method before its {@link Activity#onPause} callback
 * completes.
 *
 * <p>Strongly recommend to use the new {@link #setNdefPushMessage}
 * instead: it automatically hooks into your activity life-cycle,
 * so you do not need to call enable/disable in your onResume/onPause.
 *
 * <p>This method must be called from the main thread.
 *
 * <p class="note">Requires the {@link android.Manifest.permission#NFC} permission.
 *
 * @param activity the Foreground activity
 * @throws IllegalStateException if the Activity has already been paused
 * @throws UnsupportedOperationException if FEATURE_NFC is unavailable.
 * @deprecated use {@link #setNdefPushMessage} instead
 */
====>[PUBLIC]<android.nfc.NfcAdapter: void disableForegroundNdefPush(Activity)>    ---->    #setNdefPushMessage
<java.security.SignatureSpi: Object engineGetParameter(String)>
/**
 * Gets the value of the specified algorithm parameter.
 * This method supplies a general-purpose mechanism through which it
 * is possible to get the various parameters of this object. A parameter
 * may be any settable parameter for the algorithm, such as a parameter
 * size, or  a source of random bits for signature generation (if
 * appropriate), or an indication of whether or not to perform a
 * specific but optional computation. A uniform algorithm-specific
 * naming scheme for each parameter is desirable but left unspecified
 * at this time.
 *
 * @param param the string name of the parameter.
 *
 * @return the object that represents the parameter value, or null if
 * there is none.
 *
 * @exception InvalidParameterException if {@code param} is an
 * invalid parameter for this engine, or another exception occurs while
 * trying to get this parameter.
 *
 * @deprecated Deprecated.
 */
====>[PUBLIC]<java.security.SignatureSpi: Object engineGetParameter(String)>    ---->
<android.webkit.PluginList: void removePlugin(Plugin)>
/**
 * Removes a plugin from the list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void removePlugin(Plugin)>    ---->
<androidx.slidingpanelayout.widget.SlidingPaneLayout: void setShadowResource(int)>
/**
 * Set a drawable to use as a shadow cast by the right pane onto the left pane
 * during opening/closing.
 *
 * @param resId Resource ID of a drawable to use
 * @deprecated Renamed to {@link #setShadowResourceLeft(int)} to support LTR (left to
 * right language) and {@link #setShadowResourceRight(int)} to support RTL (right to left
 * language) during opening/closing.
 */
====>[PUBLIC]<androidx.slidingpanelayout.widget.SlidingPaneLayout: void setShadowResource(int)>    ---->    #setShadowResourceLeft(int)
<android.webkit.PluginData: long getContentLength()>
/**
 * Returns the length of the plugin content.
 *
 * @return the length of the plugin content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: long getContentLength()>    ---->
Inconsistency (Non-Documentation):<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\connectivity\Vpn.java
<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)>

====>[PUBLIC]<com.android.server.connectivity.Vpn: void interfaceStatusChanged(String,boolean)>    ---->
<android.app.Activity: Cursor managedQuery(Uri,String[],String,String)>
/**
 * Wrapper around
 * {@link ContentResolver#query(android.net.Uri , String[], String, String[], String)}
 * that gives the resulting {@link Cursor} to call
 * {@link #startManagingCursor} so that the activity will manage its
 * lifecycle for you.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on a cursor obtained using
 * this method, because the activity will do that for you at the appropriate time. However, if
 * you call {@link #stopManagingCursor} on a cursor from a managed query, the system <em>will
 * not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param uri The URI of the content provider to query.
 * @param projection List of columns to return.
 * @param selection SQL WHERE clause.
 * @param sortOrder SQL ORDER BY clause.
 *
 * @return The Cursor that was returned by query().
 *
 * @see ContentResolver#query(android.net.Uri , String[], String, String[], String)
 * @see #startManagingCursor
 * @hide
 *
 * @deprecated Use {@link CursorLoader} instead.
 */
====>[HIDDEN]<android.app.Activity: Cursor managedQuery(Uri,String[],String,String)>    ---->    CursorLoader
<android.telephony.gsm.SmsMessage: SmsMessageBase getSmsFacility()>
/**
 * This method returns the reference to a specific
 * SmsMessage object, which is used for accessing its static methods.
 * @return Specific SmsMessage.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: SmsMessageBase getSmsFacility()>    ---->
<androidx.appcompat.app.ActionBar: void setSelectedNavigationItem(int)>
/**
 * Set the selected navigation item in list or tabbed navigation modes.
 *
 * @param position Position of the item to select.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void setSelectedNavigationItem(int)>    ---->
<androidx.core.net.TrafficStatsCompat: void tagSocket(Socket)>
/**
 * Tag the given {@link Socket} with any statistics parameters active for
 * the current thread. Subsequent calls always replace any existing
 * parameters. When finished, call {@link #untagSocket(Socket)} to remove
 * statistics parameters.
 *
 * @see #setThreadStatsTag(int)
 *
 * @deprecated Use {@link TrafficStats#tagSocket(Socket)} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void tagSocket(Socket)>    ---->    TrafficStats#tagSocket(Socket)
<android.app.Notification: void <init>(int,CharSequence,long)>
/**
 * Constructs a Notification object with the information needed to
 * have a status bar icon without the standard expanded view.
 *
 * @param icon          The resource id of the icon to put in the status bar.
 * @param tickerText    The text that flows by in the status bar when the notification first
 * activates.
 * @param when          The time to show in the time field.  In the System.currentTimeMillis
 * timebase.
 *
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.app.Notification: void <init>(int,CharSequence,long)>    ---->    Builder
<androidx.slice.builders.ListBuilder: ListBuilder addGrid(Consumer<GridBuilder>)>
/**
 * Add a grid row to the list builder.
 *
 * @deprecated TO BE REMOVED; use {@link #addGridRow(GridRowBuilder)} instead
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder addGrid(Consumer<GridBuilder>)>    ---->    #addGridRow(GridRowBuilder)
<android.view.ViewParent: ViewParent invalidateChildInParent(int[],Rect)>
/**
 * All or part of a child is dirty and needs to be redrawn.
 *
 * <p>The location array is an array of two int values which respectively
 * define the left and the top position of the dirty child.</p>
 *
 * <p>This method must return the parent of this ViewParent if the specified
 * rectangle must be invalidated in the parent. If the specified rectangle
 * does not require invalidation in the parent or if the parent does not
 * exist, this method must return null.</p>
 *
 * <p>When this method returns a non-null value, the location array must
 * have been updated with the left and top coordinates of this ViewParent.</p>
 *
 * @param location An array of 2 ints containing the left and top
 * coordinates of the child to invalidate
 * @param r The area within the child that is invalid
 *
 * @return the parent of this ViewParent or null
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.
 */
====>[PUBLIC]<android.view.ViewParent: ViewParent invalidateChildInParent(int[],Rect)>    ---->    #onDescendantInvalidated(View, View)
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setAddedCount(int)>
/**
 * Sets the number of added characters.
 *
 * @param addedCount The number of added characters.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setAddedCount(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setAddedCount(int)>    ---->    AccessibilityRecord#setAddedCount(int)
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
/**
 * Indicates whether this ViewGroup will always try to draw its children using their
 * drawing cache. This property can be set to true when the cache rendering is
 * slightly different from the children's normal rendering. Renderings can be different,
 * for instance, when the cache's quality is set to low.
 *
 * When this property is disabled, the ViewGroup will use the drawing cache of its
 * children only when asked to. It's usually the task of subclasses to tell ViewGroup
 * when to start using the drawing cache and when to stop using it.
 *
 * @param always true to always draw with the drawing cache, false otherwise
 *
 * @see #isAlwaysDrawnWithCacheEnabled()
 * @see #setChildrenDrawnWithCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 * @see View#setDrawingCacheQuality(int)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer have their caching behavior disabled by parents.
 */
====>[PUBLIC]<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>    ---->
<android.bluetooth.le.ScanResult: void <init>(BluetoothDevice,ScanRecord,int,long)>
/**
 * Constructs a new ScanResult.
 *
 * @param device Remote Bluetooth device found.
 * @param scanRecord Scan record including both advertising data and scan response data.
 * @param rssi Received signal strength.
 * @param timestampNanos Timestamp at which the scan result was observed.
 * @deprecated use {@link #ScanResult(BluetoothDevice, int, int, int, int, int, int, int,
 * ScanRecord, long)}
 */
====>[PUBLIC]<android.bluetooth.le.ScanResult: void <init>(BluetoothDevice,ScanRecord,int,long)>    ---->    #ScanResult(BluetoothDevice, int, int, int, int, int, int, int,  ScanRecord, long)
<androidx.core.view.ViewCompat: int resolveSizeAndState(int,int,int)>
/**
 * Utility to reconcile a desired size and state, with constraints imposed
 * by a MeasureSpec.  Will take the desired size, unless a different size
 * is imposed by the constraints.  The returned value is a compound integer,
 * with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and
 * optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the resulting
 * size is smaller than the size the view wants to be.
 *
 * @param size How big the view wants to be
 * @param measureSpec Constraints imposed by the parent
 * @return Size information bit mask as defined by
 * {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.
 *
 * @deprecated Use {@link View#resolveSizeAndState(int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int resolveSizeAndState(int,int,int)>    ---->    View#resolveSizeAndState(int, int, int)
<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreCell(Consumer<CellBuilder>)>
/**
 * If all content in a slice cannot be shown, the cell added here may be displayed where the
 * content is cut off.
 * <p>
 * This method should only be used if you want to display a custom cell to indicate more
 * content, consider using {@link #addSeeMoreAction(PendingIntent)} otherwise. If you do
 * choose to specify a custom cell, the cell should have
 * {@link CellBuilder#setContentIntent(PendingIntent)} specified to take the user to an
 * activity to see all of the content.
 * </p>
 * <p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 *
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreCell(Consumer<CellBuilder>)>    ---->
<android.telephony.NeighboringCellInfo: void setCid(int)>
/**
 * Set the cell id.
 *
 * NeighboringCellInfo is a one time shot for the neighboring cells based on
 * the radio network type at that moment. It shouldn't be changed after
 * creation.
 *
 * @deprecated cid value passed as in location parameter passed to constructor
 * {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void setCid(int)>    ---->    #NeighboringCellInfo(int, String, int)
<android.telephony.gsm.SmsMessage: byte[] getUserData()>
/**
 * returns the user data section minus the user data header if one was present.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: byte[] getUserData()>    ---->
<android.hardware.Camera.Parameters: int getPreviewFrameRate()>
/**
 * Returns the setting for the rate at which preview frames are
 * received. This is the target frame rate. The actual frame rate
 * depends on the driver.
 *
 * @return the frame rate setting (frames per second)
 * @deprecated replaced by {@link #getPreviewFpsRange(int[])}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: int getPreviewFrameRate()>    ---->    #getPreviewFpsRange(int[])
<android.net.NetworkInfo: String getReason()>
/**
 * Report the reason an attempt to establish connectivity failed,
 * if one is available.
 * @return the reason for failure, or null if not available
 * @deprecated This method does not have a consistent contract that could make it useful
 * to callers.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getReason()>    ---->
<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)>
/**
 * @hide
 * Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
 * @param l the listener with which focus was requested.
 * @param aa the {@link AudioAttributes} with which audio focus was requested
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)}
 */
====>[HIDDEN]<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener,AudioAttributes)>    ---->    #abandonAudioFocusRequest(AudioFocusRequest)
<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>
/**
 * WPS operation failed
 * @param reason The reason for failure could be one of
 * {@link #WPS_TKIP_ONLY_PROHIBITED}, {@link #WPS_OVERLAP_ERROR},
 * {@link #WPS_WEP_PROHIBITED}, {@link #WPS_TIMED_OUT} or {@link #WPS_AUTH_FAILURE}
 * and some generic errors.
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onFailed(int)>    ---->
<androidx.core.graphics.drawable.DrawableCompat: void jumpToCurrentState(Drawable)>
/**
 * Call {@link Drawable#jumpToCurrentState() Drawable.jumpToCurrentState()}.
 *
 * @param drawable The Drawable against which to invoke the method.
 *
 * @deprecated Use {@link Drawable#jumpToCurrentState()} directly.
 */
====>[PUBLIC]<androidx.core.graphics.drawable.DrawableCompat: void jumpToCurrentState(Drawable)>    ---->    Drawable#jumpToCurrentState()
<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromAsset(RenderScript,Resources,String,float)>    ---->
<android.net.ConnectivityManager: boolean setProcessDefaultNetworkForHostResolution(Network)>
/**
 * Binds host resolutions performed by this process to {@code network}.
 * {@link #bindProcessToNetwork} takes precedence over this setting.
 *
 * @param network The {@link Network} to bind host resolutions from the current process to, or
 * {@code null} to clear the current binding.
 * @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.
 * @hide
 * @deprecated This is strictly for legacy usage to support {@link #startUsingNetworkFeature}.
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean setProcessDefaultNetworkForHostResolution(Network)>    ---->    #startUsingNetworkFeature
<com.android.setupwizardlib.span.LinkSpan: OnClickListener getLegacyListenerFromContext(Context)>
/**
 * @deprecated Deprecated together with {@link OnClickListener}
 */
====>[PUBLIC]<com.android.setupwizardlib.span.LinkSpan: OnClickListener getLegacyListenerFromContext(Context)>    ---->    OnClickListener
<android.webkit.CookieManager: void removeExpiredCookie()>
/**
 * Removes all expired cookies.
 * @deprecated The WebView handles removing expired cookies automatically.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeExpiredCookie()>    ---->
<androidx.recyclerview.widget.RecyclerView.ViewHolder: int getPosition()>
/**
 * @deprecated This method is deprecated because its meaning is ambiguous due to the async
 * handling of adapter updates. You should use {@link #getLayoutPosition()} or
 * {@link #getAdapterPosition()} depending on your use case.
 *
 * @see #getLayoutPosition()
 * @see #getAdapterPosition()
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.ViewHolder: int getPosition()>    ---->    #getLayoutPosition()
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\content\PackageHelper.java
<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: String resolveInstallVolume(Context,String,int,long,TestableInterface)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isChecked()>
/**
 * Gets if the source is checked.
 *
 * @return True if the view is checked, false otherwise.
 *
 * @deprecated Use {@link AccessibilityRecord#isChecked()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isChecked()>    ---->    AccessibilityRecord#isChecked()
<android.os.Debug: int getThreadExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getThreadExternalAllocCount()>    ---->
<android.hardware.radio.RadioManager.ProgramInfo: boolean isDigital()>
/**
 * {@code true} if the received program is digital (e.g HD radio)
 * @return {@code true} if digital, {@code false} otherwise.
 * @deprecated Use {@link getLogicallyTunedTo()} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioManager.ProgramInfo: boolean isDigital()>    ---->    getLogicallyTunedTo()
<androidx.core.view.ViewCompat: void setRotationY(View,float)>
/**
 * Sets the degrees that the view is rotated around the vertical axis through the pivot point.
 * Increasing values result in counter-clockwise rotation from the viewpoint of looking
 * down the y axis.
 *
 * @param value The degrees of Y rotation.
 *
 * @deprecated Use {@link View#setRotationY(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setRotationY(View,float)>    ---->    View#setRotationY(float)
<com.android.ims.ImsManager: void setWfcSetting(Context,boolean)>
/**
 * Change persistent WFC enabled setting.
 * @deprecated Does not support MSIM devices. Please use
 * {@link #setWfcSetting} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void setWfcSetting(Context,boolean)>    ---->    #setWfcSetting
Inconsistency (Non-Documentation):<android.net.NetworkStatsHistory: void recordData(long,long,long,long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\NetworkStatsHistory.java
<android.net.NetworkStatsHistory: void recordData(long,long,long,long)>
/**
 * Record that data traffic occurred in the given time range. Will
 * distribute across internal buckets, creating new buckets as needed.
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void recordData(long,long,long,long)>    ---->
<androidx.slice.SliceItem: long getTimestamp()>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.SliceItem: long getTimestamp()>    ---->
<android.net.NetworkInfo: boolean isAvailable()>
/**
 * Indicates whether network connectivity is possible. A network is unavailable
 * when a persistent or semi-persistent condition prevents the possibility
 * of connecting to that network. Examples include
 * <ul>
 * <li>The device is out of the coverage area for any network of this type.</li>
 * <li>The device is on a network other than the home network (i.e., roaming), and
 * data roaming has been disabled.</li>
 * <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li>
 * </ul>
 * Since Android L, this always returns {@code true}, because the system only
 * returns info for available networks.
 * @return {@code true} if the network is available, {@code false} otherwise
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isAvailable()>    ---->    android.net.ConnectivityManager.NetworkCallback
Inconsistency (Non-Documentation):<android.test.mock.MockCursor: void deactivate()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\test\mock\MockCursor.java
<android.test.mock.MockCursor: void deactivate()>

====>[PUBLIC]<android.test.mock.MockCursor: void deactivate()>    ---->
<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled(Context)>
/**
 * Indicates whether the call is non-TTY or if TTY - whether TTY on VoLTE is
 * supported.
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isNonTtyOrTtyOnVolteEnabled()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled(Context)>    ---->    #isNonTtyOrTtyOnVolteEnabled()
<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence)>
/**
 * Sets the summary subtitle to be shown in this header. If unset, the normal subtitle
 * will be used. The summary is used when the parent template is presented in a
 * small format.
 * @deprecated TO BE REMOVED; use {@link #setSummary(CharSequence)}
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence)>    ---->    #setSummary(CharSequence)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()>
/**
 * Get a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link android.app.Notification.WearableExtender#addPage}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintShowBackgroundOnly()>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed32(long,int)>
/**
 * Write a single repeated proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed32(long,int)>    ---->    #write
<androidx.leanback.app.SearchSupportFragment: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>
/**
 * Sets this callback to have the fragment pass speech recognition requests
 * to the activity rather than using a SpeechRecognizer object.
 * @deprecated Launching voice recognition activity is no longer supported. App should declare
 * android.permission.RECORD_AUDIO in AndroidManifest file.
 */
====>[PUBLIC]<androidx.leanback.app.SearchSupportFragment: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>    ---->
Inconsistency (Non-Documentation):<android.os.UserManager: void setUserRestrictions(Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\os\UserManager.java
<android.os.UserManager: void setUserRestrictions(Bundle)>
/**
 * This will no longer work.  Device owners and profile owners should use
 * {@link DevicePolicyManager#addUserRestriction(ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestrictions(Bundle)>    ---->
<android.webkit.WebSettings: boolean getPluginsEnabled()>
/**
 * Gets whether plugins are enabled.
 *
 * @return {@code true} if plugins are enabled
 * @see #setPluginsEnabled
 * @deprecated This method has been replaced by {@link #getPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getPluginsEnabled()>    ---->    #getPluginState
<android.util.proto.ProtoOutputStream: void writePackedDouble(long,double[])>
/**
 * Write a list of packed proto "double" type field values.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedDouble(long,double[])>    ---->    #write
<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,String)>
/**
 * Adds a person to a group referred to by name.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @param groupName the name of the group to add the contact to
 * @return the URI of the group membership row
 * @throws IllegalStateException if the group can't be found
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,String)>    ---->    android.provider.ContactsContract
<android.location.GnssMeasurement: void setCarrierPhaseUncertainty(double)>
/**
 * Sets the Carrier-phase's uncertainty (1-Sigma) in cycles.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierPhaseUncertainty(double)>    ---->    #setAccumulatedDeltaRangeUncertaintyMeters(double)
<android.telephony.gsm.SmsMessage: byte[] getPdu()>
/**
 * Returns the raw PDU for the message.
 *
 * @return the raw PDU for the message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: byte[] getPdu()>    ---->
<androidx.legacy.app.ActivityCompat: void <init>()>
/**
 * This class should not be instantiated, but the constructor must be
 * visible for the class to be extended.
 *
 * @deprecated Use {@link androidx.core.app.ActivityCompat
 * androidx.core.app.ActivityCompat}.
 */
====>[PUBLIC]<androidx.legacy.app.ActivityCompat: void <init>()>    ---->    androidx.core.app.ActivityCompat  androidx.core.app.ActivityCompat
<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>(SurfaceConfig)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void <init>(SurfaceConfig)>    ---->
<android.telephony.gsm.SmsMessage: int getStatus()>
/**
 * GSM:
 * For an SMS-STATUS-REPORT message, this returns the status field from
 * the status report.  This field indicates the status of a previously
 * submitted SMS, if requested.  See TS 23.040, 9.2.3.15 TP-Status for a
 * description of values.
 * CDMA:
 * For not interfering with status codes from GSM, the value is
 * shifted to the bits 31-16.
 * The value is composed of an error class (bits 25-24) and a status code (bits 23-16).
 * Possible codes are described in C.S0015-B, v2.0, 4.5.21.
 *
 * @return 0 indicates the previously sent message was received.
 * See TS 23.040, 9.9.2.3.15 and C.S0015-B, v2.0, 4.5.21
 * for a description of other possible values.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int getStatus()>    ---->
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
/**
 * Indicates whether the children's drawing cache is used during a layout
 * animation. By default, the drawing cache is enabled but this will prevent
 * nested layout animations from working. To nest animations, you must disable
 * the cache.
 *
 * @return true if the animation cache is enabled, false otherwise
 *
 * @see #setAnimationCacheEnabled(boolean)
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
====>[PUBLIC]<android.view.ViewGroup: boolean isAnimationCacheEnabled()>    ---->
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>
/**
 * @hide
 */
====>[HIDDEN]<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->
<android.app.Activity: LoaderManager getLoaderManager()>
/**
 * Return the LoaderManager for this activity, creating it if needed.
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#getSupportLoaderManager()}
 */
====>[PUBLIC]<android.app.Activity: LoaderManager getLoaderManager()>    ---->    android.support.v4.app.FragmentActivity#getSupportLoaderManager()
<java.lang.String: void getBytes(int,int,byte[],int)>
/**
 * Copies characters from this string into the destination byte array. Each
 * byte receives the 8 low-order bits of the corresponding character. The
 * eight high-order bits of each character are not copied and do not
 * participate in the transfer in any way.
 *
 * <p> The first character to be copied is at index {@code srcBegin}; the
 * last character to be copied is at index {@code srcEnd-1}.  The total
 * number of characters to be copied is {@code srcEnd-srcBegin}. The
 * characters, converted to bytes, are copied into the subarray of {@code
 * dst} starting at index {@code dstBegin} and ending at index:
 *
 * <blockquote><pre>
 * dstBegin + (srcEnd-srcBegin) - 1
 * </pre></blockquote>
 *
 * @deprecated  This method does not properly convert characters into
 * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the
 * {@link #getBytes()} method, which uses the platform's default charset.
 *
 * @param  srcBegin
 * Index of the first character in the string to copy
 *
 * @param  srcEnd
 * Index after the last character in the string to copy
 *
 * @param  dst
 * The destination array
 *
 * @param  dstBegin
 * The start offset in the destination array
 *
 * @throws  IndexOutOfBoundsException
 * If any of the following is true:
 * <ul>
 * <li> {@code srcBegin} is negative
 * <li> {@code srcBegin} is greater than {@code srcEnd}
 * <li> {@code srcEnd} is greater than the length of this String
 * <li> {@code dstBegin} is negative
 * <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code
 * dst.length}
 * </ul>
 */
====>[PUBLIC]<java.lang.String: void getBytes(int,int,byte[],int)>    ---->    #getBytes()
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set data type to the builder object
 *
 * @param e element describing the index set data layout
 * @param size number of elements in the buffer
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Element,int,Primitive)>    ---->
<android.provider.Settings.System: boolean getShowGTalkServiceStatusForUser(ContentResolver,int)>
/**
 * @hide
 * @deprecated - Do not use
 */
====>[HIDDEN]<android.provider.Settings.System: boolean getShowGTalkServiceStatusForUser(ContentResolver,int)>    ---->
<android.service.notification.NotificationListenerService: void cancelNotification(String,String,int)>
/**
 * Inform the notification manager about dismissal of a single notification.
 * <p>
 * Use this if your listener has a user interface that allows the user to dismiss individual
 * notifications, similar to the behavior of Android's status bar and notification panel.
 * It should be called after the user dismisses a single notification using your UI;
 * upon being informed, the notification manager will actually remove the notification
 * and you will get an {@link #onNotificationRemoved(StatusBarNotification)} callback.
 * <p>
 * <b>Note:</b> If your listener allows the user to fire a notification's
 * {@link android.app.Notification#contentIntent} by tapping/clicking/etc., you should call
 * this method at that time <i>if</i> the Notification in question has the
 * {@link android.app.Notification#FLAG_AUTO_CANCEL} flag set.
 *
 * <p>The service should wait for the {@link #onListenerConnected()} event
 * before performing this operation.
 *
 * @param pkg Package of the notifying app.
 * @param tag Tag of the notification as specified by the notifying app in
 * {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
 * @param id  ID of the notification as specified by the notifying app in
 * {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.
 * <p>
 * @deprecated Use {@link #cancelNotification(String key)}
 * instead. Beginning with {@link android.os.Build.VERSION_CODES#LOLLIPOP} this method will no longer
 * cancel the notification. It will continue to cancel the notification for applications
 * whose {@code targetSdkVersion} is earlier than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.
 */
====>[PUBLIC]<android.service.notification.NotificationListenerService: void cancelNotification(String,String,int)>    ---->    #cancelNotification(String key)
<android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)>
/**
 * Checks if the given network type is backed by a Wi-Fi radio.
 *
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)>    ---->    NetworkCapabilities
<androidx.core.view.ViewCompat: void setAlpha(View,float)>
/**
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is
 * completely transparent and 1 means the view is completely opaque.</p>
 *
 * <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant
 * performance implications, especially for large views. It is best to use the alpha property
 * sparingly and transiently, as in the case of fading animations.</p>
 *
 * @param value The opacity of the view.
 *
 * @deprecated Use {@link View#setAlpha(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setAlpha(View,float)>    ---->    View#setAlpha(float)
<android.webkit.WebSettings: PluginState getPluginState()>
/**
 * Gets the current state regarding whether plugins are enabled.
 *
 * @return the plugin state as a {@link PluginState} value
 * @see #setPluginState
 * @deprecated Plugins will not be supported in future, and should not be used.
 */
====>[PUBLIC]<android.webkit.WebSettings: PluginState getPluginState()>    ---->
<android.provider.Contacts.People: Cursor queryGroups(ContentResolver,long)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Cursor queryGroups(ContentResolver,long)>    ---->    android.provider.ContactsContract
<androidx.recyclerview.widget.SnapHelper: LinearSmoothScroller createSnapScroller(LayoutManager)>
/**
 * Creates a scroller to be used in the snapping implementation.
 *
 * @param layoutManager     The {@link RecyclerView.LayoutManager} associated with the attached
 * {@link RecyclerView}.
 *
 * @return a {@link LinearSmoothScroller} which will handle the scrolling.
 * @deprecated use {@link #createScroller(RecyclerView.LayoutManager)} instead.
 */
====>[PUBLIC]<androidx.recyclerview.widget.SnapHelper: LinearSmoothScroller createSnapScroller(LayoutManager)>    ---->    #createScroller(RecyclerView.LayoutManager)
<androidx.appcompat.app.ActionBar: int getNavigationItemCount()>
/**
 * Get the number of navigation items present in the current navigation mode.
 *
 * @return Number of navigation items.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: int getNavigationItemCount()>    ---->
<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void <init>(Object)>
/**
 * Creates a new instance wrapping an
 * {@link android.view.accessibility.AccessibilityNodeInfo}.
 *
 * @param info The info.
 *
 * @deprecated Use {@link #wrap(AccessibilityNodeInfo)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: void <init>(Object)>    ---->    #wrap(AccessibilityNodeInfo)
<android.text.Html: Spanned fromHtml(String,ImageGetter,TagHandler)>
/**
 * Returns displayable styled text from the provided HTML string with the legacy flags
 * {@link #FROM_HTML_MODE_LEGACY}.
 *
 * @deprecated use {@link #fromHtml(String, int, ImageGetter, TagHandler)} instead.
 */
====>[PUBLIC]<android.text.Html: Spanned fromHtml(String,ImageGetter,TagHandler)>    ---->    #fromHtml(String, int, ImageGetter, TagHandler)
<android.app.slice.Slice.Builder: Builder addTimestamp(long,String,List<String>)>
/**
 * @deprecated TO BE REMOVED.
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: Builder addTimestamp(long,String,List<String>)>    ---->
<androidx.leanback.app.PlaybackSupportFragment: void fadeOut()>
/**
 * Fades out the playback overlay immediately.
 * @deprecated Call {@link #hideControlsOverlay(boolean)}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackSupportFragment: void fadeOut()>    ---->    #hideControlsOverlay(boolean)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->
<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(UrlInterceptHandler)>
/**
 * Unregister a previously registered UrlInterceptHandler.
 *
 * @param handler A previously registered UrlInterceptHandler.
 * @return {@code true} if the handler was found and removed from the list.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(UrlInterceptHandler)>    ---->
<android.view.ActionProvider: View onCreateActionView()>
/**
 * Factory method called by the Android framework to create new action views.
 *
 * <p>This method has been deprecated in favor of {@link #onCreateActionView(MenuItem)}.
 * Newer apps that wish to support platform versions prior to API 16 should also
 * implement this method to return a valid action view.</p>
 *
 * @return A new action view.
 *
 * @deprecated use {@link #onCreateActionView(MenuItem)}
 */
====>[PUBLIC]<android.view.ActionProvider: View onCreateActionView()>    ---->    #onCreateActionView(MenuItem)
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Parameters getParameters()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\AndroidCameraAgentImpl.java
<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Parameters getParameters()>

====>[PUBLIC]<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Parameters getParameters()>    ---->
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\BaseCanvas.java
<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],Paint)>    ---->
<android.telephony.CellIdentityLte: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityLte: int getMnc()>    ---->    #getMncString
<androidx.appcompat.app.ActionBar: void addTab(Tab,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 *
 * @param tab Tab to add
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void addTab(Tab,boolean)>    ---->
<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>    ---->    Palette.Builder
<android.telephony.PhoneNumberUtils: String formatNumber(String)>
/**
 * Breaks the given number down and formats it according to the rules
 * for the country the number is from.
 *
 * @param source The phone number to format
 * @return A locally acceptable formatting of the input, or the raw input if
 * formatting rules aren't known for the number
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String formatNumber(String)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.view.textclassifier.TextClassification: Drawable getIcon()>
/**
 * Returns an icon that may be rendered on a widget used to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the icon of the
 * first {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: Drawable getIcon()>    ---->    #getActions()
<androidx.appcompat.app.ActionBar: int getNavigationMode()>
/**
 * Returns the current navigation mode. The result will be one of:
 * <ul>
 * <li>{@link #NAVIGATION_MODE_STANDARD}</li>
 * <li>{@link #NAVIGATION_MODE_LIST}</li>
 * <li>{@link #NAVIGATION_MODE_TABS}</li>
 * </ul>
 *
 * @return The current navigation mode.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: int getNavigationMode()>    ---->
<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin.PreferencesClickHandler: void handleClickEvent(Context)>    ---->
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,String,Uri)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and TvInputHardwareInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device.
 * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
 * label will be loaded.
 * @param iconUri The {@link android.net.Uri} to load the icon image. See
 * {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
 * the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,TvInputHardwareInfo,String,Uri)>    ---->    Builder
<android.os.Debug: int getThreadGcInvocationCount()>
/**
 * Returns the number of thread-local non-concurrent GC invocations between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadGcInvocationCount()>    ---->
<androidx.core.widget.EdgeEffectCompat: boolean onAbsorb(int)>
/**
 * Call when the effect absorbs an impact at the given velocity.
 * Used when a fling reaches the scroll boundary.
 *
 * <p>When using a {@link android.widget.Scroller} or {@link android.widget.OverScroller},
 * the method <code>getCurrVelocity</code> will provide a reasonable approximation
 * to use here.</p>
 *
 * @param velocity Velocity at impact in pixels per second.
 * @return true if the host view should invalidate, false if it should not.
 *
 * @deprecated Use {@link EdgeEffect#onAbsorb(int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean onAbsorb(int)>    ---->    EdgeEffect#onAbsorb(int)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->
<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform(Context)>
/**
 * Returns a platform configuration for VoLTE which may override the user setting.
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isVolteEnabledByPlatform()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform(Context)>    ---->    #isVolteEnabledByPlatform()
<android.app.Activity: void setSecondaryProgress(int)>
/**
 * Sets the secondary progress for the progress bar in the title. This
 * progress is drawn between the primary progress (set via
 * {@link #setProgress(int)} and the background. It can be ideal for media
 * scenarios such as showing the buffering progress while the default
 * progress shows the play progress.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param secondaryProgress The secondary progress for the progress bar. Valid ranges are from
 * 0 to 10000 (both inclusive).
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setSecondaryProgress(int)>    ---->
<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: CharSequence getMessage()>
/**
 * Return the message informing the user of the problem, as per
 * {@link android.app.VoiceInteractor.AbortVoiceRequest VoiceInteractor.AbortVoiceRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows a separate visual message.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.AbortVoiceRequest: CharSequence getMessage()>    ---->    #getVoicePrompt()
<android.app.SearchManager: void onCancel(DialogInterface)>
/**
 * @deprecated This method is an obsolete internal implementation detail. Do not use.
 */
====>[PUBLIC]<android.app.SearchManager: void onCancel(DialogInterface)>    ---->
<android.renderscript.Mesh.AllocationBuilder: Mesh create()>
/**
 * @deprecated in API 16
 * Create a Mesh object from the current state of the builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: Mesh create()>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedString(long,String)>
/**
 * Write a single repeated proto "string" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedString(long,String)>    ---->    #write
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>
/**
 * Gets the carrier-phase's uncertainty (1-Sigma).
 *
 * <p>The uncertainty is represented as an absolute (single sided) value.
 *
 * <p>The value is only available if {@link #hasCarrierPhaseUncertainty()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeUncertaintyMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>    ---->    #getAccumulatedDeltaRangeUncertaintyMeters()
<java.util.Date: int getYear()>
/**
 * Returns a value that is the result of subtracting 1900 from the
 * year that contains or begins with the instant in time represented
 * by this <code>Date</code> object, as interpreted in the local
 * time zone.
 *
 * @return  the year represented by this date, minus 1900.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.YEAR) - 1900</code>.
 */
====>[PUBLIC]<java.util.Date: int getYear()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintHideIcon()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: boolean getHintHideIcon()>
/**
 * Get a hint that this notification's icon should not be displayed.
 * @return {@code true} if this icon should not be displayed, false otherwise.
 * The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintHideIcon()>    ---->
<android.view.inputmethod.InputMethodSubtype: String getLocale()>
/**
 * @return The locale of the subtype. This method returns the "locale" string parameter passed
 * to the constructor.
 *
 * @deprecated Use {@link #getLanguageTag()} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: String getLocale()>    ---->    #getLanguageTag()
<androidx.fragment.app.FragmentTransaction: FragmentTransaction setAllowOptimization(boolean)>
/**
 * @deprecated This has been renamed {@link #setReorderingAllowed(boolean)}.
 */
====>[PUBLIC]<androidx.fragment.app.FragmentTransaction: FragmentTransaction setAllowOptimization(boolean)>    ---->    #setReorderingAllowed(boolean)
<android.view.View: void setDrawingCacheQuality(int)>
/**
 * Set the drawing cache quality of this view. This value is used only when the
 * drawing cache is enabled
 *
 * @param quality One of {@link #DRAWING_CACHE_QUALITY_AUTO},
 * {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}
 *
 * @see #getDrawingCacheQuality()
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 *
 * @attr ref android.R.styleable#View_drawingCacheQuality
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setDrawingCacheQuality(int)>    ---->    #setLayerType(int, Paint)
<androidx.core.widget.ScrollerCompat: int getCurrY()>
/**
 * Returns the current Y offset in the scroll.
 *
 * @return The new Y offset as an absolute distance from the origin.
 *
 * @deprecated Use {@link OverScroller#getCurrY()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: int getCurrY()>    ---->    OverScroller#getCurrY()
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getInProgressLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getInProgressLabel()>
/**
 * Get the label to display while the wearable is preparing to automatically execute
 * the action. This is usually a 'ing' verb ending in ellipsis like "Sending..."
 *
 * @return the label to display while the action is being prepared to execute
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: CharSequence getInProgressLabel()>    ---->
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.CameraSettings: void setSetting(String,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\CameraSettings.java
<com.android.ex.camera2.portability.CameraSettings: void setSetting(String,String)>
/**
 * General setting *
 */
====>[PUBLIC]<com.android.ex.camera2.portability.CameraSettings: void setSetting(String,String)>    ---->
<android.telephony.euicc.DownloadableSubscription: void setCarrierName(String)>
/**
 * Set the user-visible carrier name.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setCarrierName(String)>    ---->
<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view and dragging to the top of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
Inconsistency (Non-Documentation):<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\location\LocationManager.java
<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)>
/**
 * Retrieves information about the current status of the GPS engine.
 * This should only be called from the {@link GpsStatus.Listener#onGpsStatusChanged}
 * callback to ensure that the data is copied atomically.
 *
 * The caller may either pass in a {@link GpsStatus} object to set with the latest
 * status information, or pass null to create a new {@link GpsStatus} object.
 *
 * @param status object containing GPS status details, or null.
 * @return status object containing updated GPS status.
 */
====>[PUBLIC]<android.location.LocationManager: GpsStatus getGpsStatus(GpsStatus)>    ---->
<android.widget.CalendarView: boolean getShowWeekNumber()>
/**
 * Gets whether to show the week number.
 *
 * @return True if showing the week number.
 * @deprecated No longer used by Material-style CalendarView.
 *
 * @attr ref android.R.styleable#CalendarView_showWeekNumber
 */
====>[PUBLIC]<android.widget.CalendarView: boolean getShowWeekNumber()>    ---->
<android.hardware.radio.RadioTuner: int setConfiguration(BandConfig)>
/**
 * Set the active band configuration for this module.
 * Must be a valid configuration obtained via buildConfig() from a valid BandDescriptor listed
 * in the ModuleProperties of the module with the specified ID.
 * @param config The desired band configuration (FmBandConfig or AmBandConfig).
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int setConfiguration(BandConfig)>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->
<android.net.wifi.WpsInfo: void writeToParcel(Parcel,int)>
/**
 * Implement the Parcelable interface
 * @deprecated This API is no longer supported.
 */
====>[PUBLIC]<android.net.wifi.WpsInfo: void writeToParcel(Parcel,int)>    ---->
<android.os.FileUtils: void copyToFileOrThrow(InputStream,File)>
/**
 * @deprecated use {@link #copy(InputStream, OutputStream)} instead.
 */
====>[PUBLIC]<android.os.FileUtils: void copyToFileOrThrow(InputStream,File)>    ---->    #copy(InputStream, OutputStream)
<android.net.http.SslError: void <init>(int,SslCertificate)>
/**
 * Creates a new SslError object using the supplied error and certificate.
 * The URL will be set to the empty string.
 * @param error The SSL error
 * @param certificate The associated SSL certificate
 * @deprecated Use {@link #SslError(int, SslCertificate, String)}
 */
====>[PUBLIC]<android.net.http.SslError: void <init>(int,SslCertificate)>    ---->    #SslError(int, SslCertificate, String)
<android.view.Display: int getWidth()>
/**
 * @deprecated Use {@link #getSize(Point)} instead.
 */
====>[PUBLIC]<android.view.Display: int getWidth()>    ---->    #getSize(Point)
<android.transition.ChangeBounds: void setReparent(boolean)>
/**
 * Setting this flag tells ChangeBounds to track the before/after parent
 * of every view using this transition. The flag is not enabled by
 * default because it requires the parent instances to be the same
 * in the two scenes or else all parents must use ids to allow
 * the transition to determine which parents are the same.
 *
 * @param reparent true if the transition should track the parent
 * container of target views and animate parent changes.
 * @deprecated Use {@link android.transition.ChangeTransform} to handle
 * transitions between different parents.
 */
====>[PUBLIC]<android.transition.ChangeBounds: void setReparent(boolean)>    ---->    android.transition.ChangeTransform
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
/**
 * Returns the service centre timestamp in currentTimeMillis() format
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: long getTimestampMillis()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)>
/**
 * Set the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #setContentIcon
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setContentIconGravity(int)>    ---->
<android.provider.Contacts.ContactMethods: void addPostalLocation(Context,long,double,double)>
/**
 * Add a longitude and latitude location to a postal address.
 *
 * @param context the context to use when updating the database
 * @param postalId the address to update
 * @param latitude the latitude for the address
 * @param longitude the longitude for the address
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: void addPostalLocation(Context,long,double,double)>    ---->    android.provider.ContactsContract
<android.view.View: boolean fitSystemWindows(Rect)>
/**
 * Called by the view hierarchy when the content insets for a window have
 * changed, to allow it to adjust its content to fit within those windows.
 * The content insets tell you the space that the status bar, input method,
 * and other system windows infringe on the application's window.
 *
 * <p>You do not normally need to deal with this function, since the default
 * window decoration given to applications takes care of applying it to the
 * content of the window.  If you use {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}
 * or {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION} this will not be the case,
 * and your content can be placed under those system elements.  You can then
 * use this method within your view hierarchy if you have parts of your UI
 * which you would like to ensure are not being covered.
 *
 * <p>The default implementation of this method simply applies the content
 * insets to the view's padding, consuming that content (modifying the
 * insets to be 0), and returning true.  This behavior is off by default, but can
 * be enabled through {@link #setFitsSystemWindows(boolean)}.
 *
 * <p>This function's traversal down the hierarchy is depth-first.  The same content
 * insets object is propagated down the hierarchy, so any changes made to it will
 * be seen by all following views (including potentially ones above in
 * the hierarchy since this is a depth-first traversal).  The first view
 * that returns true will abort the entire traversal.
 *
 * <p>The default implementation works well for a situation where it is
 * used with a container that covers the entire window, allowing it to
 * apply the appropriate insets to its content on all edges.  If you need
 * a more complicated layout (such as two different views fitting system
 * windows, one on the top of the window, and one on the bottom),
 * you can override the method and handle the insets however you would like.
 * Note that the insets provided by the framework are always relative to the
 * far edges of the window, not accounting for the location of the called view
 * within that window.  (In fact when this method is called you do not yet know
 * where the layout will place the view, as it is done before layout happens.)
 *
 * <p>Note: unlike many View methods, there is no dispatch phase to this
 * call.  If you are overriding it in a ViewGroup and want to allow the
 * call to continue to your children, you must be sure to call the super
 * implementation.
 *
 * <p>Here is a sample layout that makes use of fitting system windows
 * to have controls for a video view placed inside of the window decorations
 * that it hides and shows.  This can be used with code like the second
 * sample (video player) shown in {@link #setSystemUiVisibility(int)}.
 *
 * {@sample development/samples/ApiDemos/res/layout/video_player.xml complete}
 *
 * @param insets Current content insets of the window.  Prior to
 * {@link android.os.Build.VERSION_CODES#JELLY_BEAN} you must not modify
 * the insets or else you and Android will be unhappy.
 *
 * @return {@code true} if this view applied the insets and it should not
 * continue propagating further down the hierarchy, {@code false} otherwise.
 * @see #getFitsSystemWindows()
 * @see #setFitsSystemWindows(boolean)
 * @see #setSystemUiVisibility(int)
 *
 * @deprecated As of API 20 use {@link #dispatchApplyWindowInsets(WindowInsets)} to apply
 * insets to views. Views should override {@link #onApplyWindowInsets(WindowInsets)} or use
 * {@link #setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)}
 * to implement handling their own insets.
 */
====>[PUBLIC]<android.view.View: boolean fitSystemWindows(Rect)>    ---->    #dispatchApplyWindowInsets(WindowInsets)
<android.database.sqlite.SQLiteQueryBuilder: String buildUnionSubQuery(String,String[],Set<String>,int,String,String,String[],String,String)>
/**
 * @deprecated This method's signature is misleading since no SQL parameter
 * substitution is carried out.  The selection arguments parameter does not get
 * used at all.  To avoid confusion, call
 * {@link #buildUnionSubQuery}
 * instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteQueryBuilder: String buildUnionSubQuery(String,String[],Set<String>,int,String,String,String[],String,String)>    ---->    #buildUnionSubQuery
<com.android.internal.telephony.uicc.UiccCard: boolean hasCarrierPrivilegeRules()>
/**
 * Returns true if there are some carrier privilege rules loaded and specified.
 * @deprecated Please use {@link UiccProfile#hasCarrierPrivilegeRules()} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: boolean hasCarrierPrivilegeRules()>    ---->    UiccProfile#hasCarrierPrivilegeRules()
<android.test.TouchUtils: void scrollToTop(ActivityInstrumentationTestCase,ViewGroup)>
/**
 * Scroll a ViewGroup to the top by repeatedly calling
 * {@link #dragQuarterScreenDown(InstrumentationTestCase, Activity)}
 *
 * @param test The test case that is being run
 * @param v The ViewGroup that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void scrollToTop(ActivityInstrumentationTestCase,ViewGroup)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.media.AudioManager: void setStreamMute(int,boolean)>
/**
 * Mute or unmute an audio stream.
 * <p>
 * This method should only be used by applications that replace the
 * platform-wide management of audio settings or the main telephony
 * application.
 * <p>
 * This method has no effect if the device implements a fixed volume policy
 * as indicated by {@link #isVolumeFixed()}.
 * <p>
 * This method was deprecated in API level 22. Prior to API level 22 this
 * method had significantly different behavior and should be used carefully.
 * The following applies only to pre-22 platforms:
 * <ul>
 * <li>The mute command is protected against client process death: if a
 * process with an active mute request on a stream dies, this stream will be
 * unmuted automatically.</li>
 * <li>The mute requests for a given stream are cumulative: the AudioManager
 * can receive several mute requests from one or more clients and the stream
 * will be unmuted only when the same number of unmute requests are
 * received.</li>
 * <li>For a better user experience, applications MUST unmute a muted stream
 * in onPause() and mute is again in onResume() if appropriate.</li>
 * </ul>
 *
 * @param streamType The stream to be muted/unmuted.
 * @param state The required mute state: true for mute ON, false for mute
 * OFF
 * @see #isVolumeFixed()
 * @deprecated Use {@link #adjustStreamVolume(int, int, int)} with
 * {@link #ADJUST_MUTE} or {@link #ADJUST_UNMUTE} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void setStreamMute(int,boolean)>    ---->    #adjustStreamVolume(int, int, int)
<androidx.legacy.app.FragmentPagerAdapter: Fragment getItem(int)>
/**
 * Return the Fragment associated with a specified position.
 *
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: Fragment getItem(int)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.provider.Settings.Secure: boolean isLocationProviderEnabled(ContentResolver,String)>
/**
 * Helper method for determining if a location provider is enabled.
 *
 * @param cr the content resolver to use
 * @param provider the location provider to query
 * @return true if the provider is enabled
 *
 * @deprecated use {@link LocationManager#isProviderEnabled(String)}
 */
====>[PUBLIC]<android.provider.Settings.Secure: boolean isLocationProviderEnabled(ContentResolver,String)>    ---->    LocationManager#isProviderEnabled(String)
Inconsistency (Non-Documentation):<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\security\keystore\AndroidKeyStoreSignatureSpiBase.java
<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)>

====>[PUBLIC]<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineSetParameter(String,Object)>    ---->
<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceChanged(SurfaceHolder,int,int,int)>    ---->
<androidx.core.view.MotionEventCompat: int getPointerCount(MotionEvent)>
/**
 * The number of pointers of data contained in this event.  Always
 *
 * @deprecated Call {@link MotionEvent#getPointerCount()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getPointerCount(MotionEvent)>    ---->    MotionEvent#getPointerCount()
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)>
/**
 * @deprecated in API 16
 * Adds a float2 vertex to the mesh
 *
 * @param x position x
 * @param y position y
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addVertex(float,float)>    ---->
<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(AccessibilityManager)>
/**
 * Returns if the touch exploration in the system is enabled.
 *
 * @param manager The accessibility manager.
 * @return True if touch exploration is enabled, false otherwise.
 *
 * @deprecated Use {@link AccessibilityManager#isTouchExplorationEnabled()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(AccessibilityManager)>    ---->    AccessibilityManager#isTouchExplorationEnabled()
<androidx.leanback.widget.DetailsOverviewRow: boolean removeAction(Action)>
/**
 * Removes the given Action from the overview. It will throw ClassCastException if current
 * actions adapter is not {@link ArrayObjectAdapter}. Must be called on UI thread.
 *
 * @param action The Action to remove.
 * @return true if the overview contained the specified Action.
 * @deprecated Use {@link #setActionsAdapter(ObjectAdapter)} and {@link #getActionsAdapter()}
 */
====>[PUBLIC]<androidx.leanback.widget.DetailsOverviewRow: boolean removeAction(Action)>    ---->    #setActionsAdapter(ObjectAdapter)
<android.app.Activity: void onBackgroundVisibleBehindChanged(boolean)>
/**
 * The topmost foreground activity will receive this call when the background visibility state
 * of the activity below it changes.
 *
 * This call may be a consequence of {@link #requestVisibleBehind(boolean)} or might be
 * due to a background activity finishing itself.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @param visible true if a background activity is visible, false otherwise.
 *
 * @see #requestVisibleBehind(boolean)
 * @see #onVisibleBehindCanceled()
 * @hide
 */
====>[HIDDEN]<android.app.Activity: void onBackgroundVisibleBehindChanged(boolean)>    ---->    #requestVisibleBehind(boolean)
<android.hardware.radio.RadioTuner: int getConfiguration(BandConfig[])>
/**
 * Get current configuration.
 * @param config a BandConfig array of lengh 1 where the configuration is returned.
 * @return
 * <ul>
 * <li>{@link RadioManager#STATUS_OK} in case of success, </li>
 * <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>
 * <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>
 * <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>
 * <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>
 * <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native
 * service fails, </li>
 * </ul>
 *
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: int getConfiguration(BandConfig[])>    ---->
<java.util.Date: void setMonth(int)>
/**
 * Sets the month of this date to the specified value. This
 * <tt>Date</tt> object is modified so that it represents a point
 * in time within the specified month, with the year, date, hour,
 * minute, and second the same as before, as interpreted in the
 * local time zone. If the date was October 31, for example, and
 * the month is set to June, then the new date will be treated as
 * if it were on July 1, because June has only 30 days.
 *
 * @param   month   the month value between 0-11.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.MONTH, int month)</code>.
 */
====>[PUBLIC]<java.util.Date: void setMonth(int)>    ---->
<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(SurfaceTexture)>    ---->
<android.os.Debug: int getGlobalExternalFreedSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalFreedSize()>    ---->
<android.view.ViewConfiguration: int getScrollBarSize()>
/**
 * @return The width of the horizontal scrollbar and the height of the vertical
 * scrollbar in dips
 *
 * @deprecated Use {@link #getScaledScrollBarSize()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getScrollBarSize()>    ---->    #getScaledScrollBarSize()
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)>
/**
 * Set the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. See also
 * {@link android.app.Notification.WearableExtender#setCustomSizePreset} and
 * {@link #getCustomContentHeight}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setCustomContentHeight(int)>    ---->
<androidx.legacy.app.FragmentPagerAdapter: Parcelable saveState()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: Parcelable saveState()>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
/**
 * Control whether or not the SQLiteDatabase is made thread-safe by using locks
 * around critical sections. This is pretty expensive, so if you know that your
 * DB will only be used by a single thread then you should set this to false.
 * The default is true.
 * @param lockingEnabled set to true to enable locks, false otherwise
 *
 * @deprecated This method now does nothing.  Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setSource(View)>
/**
 * Sets the event source.
 *
 * @param source The source.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setSource(View)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setSource(View)>    ---->    AccessibilityRecord#setSource(View)
<android.content.pm.PackageParser.Package: void setApplicationInfoBaseResourcePath(String)>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoBaseResourcePath(String)>    ---->
<android.os.storage.StorageManager: String[] getVolumePaths()>
/**
 * Returns list of paths for all mountable volumes.
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: String[] getVolumePaths()>    ---->
<androidx.core.view.ViewCompat: void setTranslationY(View,float)>
/**
 * Sets the vertical location of this view relative to its top position.
 * This effectively positions the object post-layout, in addition to wherever the object's
 * layout placed it.
 *
 * @param value The vertical position of this view relative to its top position,
 * in pixels.
 *
 * @attr name android:translationY
 *
 * @deprecated Use {@link View#setTranslationY(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setTranslationY(View,float)>    ---->    View#setTranslationY(float)
<android.text.method.DateKeyListener: DateKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateKeyListener: DateKeyListener getInstance()>    ---->    #getInstance(Locale)
<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)>
/**
 * This behaves the same as save(), but in addition it allocates and
 * redirects drawing to an offscreen bitmap.
 * <p class="note"><strong>Note:</strong> this method is very expensive,
 * incurring more than double rendering cost for contained content. Avoid
 * using this method, especially if the bounds provided are large. It is
 * recommended to use a {@link android.view.View#LAYER_TYPE_HARDWARE hardware layer} on a View
 * to apply an xfermode, color filter, or alpha, as it will perform much
 * better than this method.
 * <p>
 * All drawing calls are directed to a newly allocated offscreen bitmap.
 * Only when the balancing call to restore() is made, is that offscreen
 * buffer drawn back to the current target of the Canvas (either the
 * screen, it's target Bitmap, or the previous layer).
 * <p>
 * The {@code alpha} parameter is applied when the offscreen bitmap is
 * drawn back when restore() is called.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayerAlpha(RectF, int)} instead.
 * @param bounds    The maximum size the offscreen bitmap needs to be
 * (in local coordinates)
 * @param alpha     The alpha to apply to the offscreen when it is
 * drawn during restore()
 * @param saveFlags see _SAVE_FLAG constants, generally {@link #ALL_SAVE_FLAG} is recommended
 * for performance reasons.
 * @return          value to pass to restoreToCount() to balance this call
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayerAlpha(RectF,int,int)>    ---->    #saveLayerAlpha(RectF, int)
<androidx.fragment.app.FragmentController: LoaderManager getSupportLoaderManager()>
/**
 * Returns a {@link LoaderManager}.
 *
 * @deprecated Loaders are managed separately from FragmentController and this now throws an
 * {@link UnsupportedOperationException}. Use {@link LoaderManager#getInstance} to obtain a
 * LoaderManager.
 * @see LoaderManager#getInstance
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: LoaderManager getSupportLoaderManager()>    ---->    LoaderManager#getInstance
<android.os.storage.StorageManager: StorageManager from(Context)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.os.storage.StorageManager: StorageManager from(Context)>    ---->
<android.service.autofill.ImageTransformation.Builder: Builder addOption(Pattern,int)>
/**
 * Adds an option to replace the child view with a different image when the regex matches.
 *
 * @param regex regular expression defining what should be matched to use this image.
 * @param resId resource id of the image (in the autofill service's package). The
 * {@link RemoteViews presentation} must contain a {@link ImageView} child with that id.
 *
 * @return this build
 *
 * @deprecated use {@link #addOption(Pattern, int, CharSequence)} instead.
 */
====>[PUBLIC]<android.service.autofill.ImageTransformation.Builder: Builder addOption(Pattern,int)>    ---->    #addOption(Pattern, int, CharSequence)
<android.view.ViewConfiguration: int getTouchSlop()>
/**
 * @return Distance in dips a touch can wander before we think the user is scrolling
 *
 * @deprecated Use {@link #getScaledTouchSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getTouchSlop()>    ---->    #getScaledTouchSlop()
<android.os.StatFs: int getFreeBlocks()>
/**
 * @deprecated Use {@link #getFreeBlocksLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getFreeBlocks()>    ---->    #getFreeBlocksLong()
<android.telephony.NetworkScan: void stop()>
/**
 * @deprecated Use {@link #stopScan()}
 * @removed
 */
====>[HIDDEN]<android.telephony.NetworkScan: void stop()>    ---->    #stopScan()
<android.net.wifi.WifiManager: boolean saveConfiguration()>
/**
 * Tell the device to persist the current list of configured networks.
 * <p>
 * Note: It is possible for this method to change the network IDs of
 * existing networks. You should assume the network IDs can be different
 * after calling this method.
 *
 * @return {@code false} Will always return true.
 * @deprecated There is no need to call this method -
 * {@link #addNetwork(WifiConfiguration)}, {@link #updateNetwork(WifiConfiguration)}
 * and {@link #removeNetwork(int)} already persist the configurations automatically.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean saveConfiguration()>    ---->    #addNetwork(WifiConfiguration)
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,String,ResultCallback<SendMultipartSmsResult>)>
/**
 * Override this method to intercept long SMSs sent from the device.
 * @deprecated Override {@link #onSendMultipartTextSms} below instead.
 *
 * @param parts a {@link List} of the message parts
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param callback result callback. Call with a {@link SendMultipartSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(List<String>,int,String,ResultCallback<SendMultipartSmsResult>)>    ---->    #onSendMultipartTextSms
<android.test.TouchUtils: void dragQuarterScreenDown(ActivityInstrumentationTestCase)>
/**
 * Simulate touching in the center of the screen and dragging one quarter of the way down
 * @param test The test case that is being run
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragQuarterScreenDown(ActivityInstrumentationTestCase)>    ---->    android.test.ActivityInstrumentationTestCase2
<androidx.core.widget.ScrollerCompat: void fling(int,int,int,int,int,int,int,int)>
/**
 * Start scrolling based on a fling gesture. The distance travelled will
 * depend on the initial velocity of the fling.
 *
 * @param startX Starting point of the scroll (X)
 * @param startY Starting point of the scroll (Y)
 * @param velocityX Initial velocity of the fling (X) measured in pixels per
 * second.
 * @param velocityY Initial velocity of the fling (Y) measured in pixels per
 * second
 * @param minX Minimum X value. The scroller will not scroll past this
 * point.
 * @param maxX Maximum X value. The scroller will not scroll past this
 * point.
 * @param minY Minimum Y value. The scroller will not scroll past this
 * point.
 * @param maxY Maximum Y value. The scroller will not scroll past this
 * point.
 *
 * @deprecated Use {@link OverScroller#fling(int, int, int, int, int, int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void fling(int,int,int,int,int,int,int,int)>    ---->    OverScroller#fling(int, int, int, int, int, int, int, int)
Inconsistency (Non-Documentation):<com.android.layoutlib.bridge.Bridge: EnumSet<Capability> getCapabilities()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\layoutlib\bridge\Bridge.java
<com.android.layoutlib.bridge.Bridge: EnumSet<Capability> getCapabilities()>

====>[PUBLIC]<com.android.layoutlib.bridge.Bridge: EnumSet<Capability> getCapabilities()>    ---->
<android.os.UserManager: void setUserRestriction(String,boolean)>
/**
 * Sets the value of a specific restriction.
 * Requires the MANAGE_USERS permission.
 * @param key the key of the restriction
 * @param value the value for the restriction
 * @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(
 * android.content.ComponentName, String)} or
 * {@link android.app.admin.DevicePolicyManager#clearUserRestriction(
 * android.content.ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestriction(String,boolean)>    ---->    android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)
<android.os.Debug: int getGlobalExternalAllocCount()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalAllocCount()>    ---->
<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreRow(Consumer<RowBuilder>)>
/**
 * If all content in a slice cannot be shown, the row added here may be displayed where the
 * content is cut off. This row should have an affordance to take the user to an activity to
 * see all of the content.
 * <p>
 * This method should only be used if you want to display a custom row to indicate more
 * content, consider using {@link #addSeeMoreAction(PendingIntent)} otherwise. If you do
 * choose to specify a custom row, the row should have a content intent or action end item
 * specified to take the user to an activity to see all of the content.
 * </p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 *
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreRow(Consumer<RowBuilder>)>    ---->
<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>
/**
 * Sets the path where the Geolocation databases should be saved. In order
 * for Geolocation permissions and cached positions to be persisted, this
 * method must be called with a path to which the application can write.
 *
 * @param databasePath a path to the directory where databases should be
 * saved.
 * @deprecated Geolocation database are managed by the implementation and calling this method
 * will have no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setGeolocationDatabasePath(String)>    ---->
<android.provider.Contacts.Intents.UI: void <init>()>
/**
 * @deprecated Do not use. This is not supported.
 */
====>[PUBLIC]<android.provider.Contacts.Intents.UI: void <init>()>    ---->
<android.text.method.DateTimeKeyListener: DateTimeKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateTimeKeyListener: DateTimeKeyListener getInstance()>    ---->    #getInstance(Locale)
Inconsistency (Non-Documentation):<android.webkit.WebSettings: void setSaveFormData(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\WebSettings.java
<android.webkit.WebSettings: void setSaveFormData(boolean)>
/**
 * Sets whether the WebView should save form data. In Android O, the
 * platform has implemented a fully functional Autofill feature to store
 * form data. Therefore, the Webview form data save feature is disabled.
 *
 * Note that the feature will continue to be supported on older versions of
 * Android as before.
 *
 * This function does not have any effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setSaveFormData(boolean)>    ---->
<java.sql.PreparedStatement: void setUnicodeStream(int,InputStream,int)>
/**
 * Sets the designated parameter to the given input stream, which
 * will have the specified number of bytes.
 *
 * When a very large Unicode value is input to a <code>LONGVARCHAR</code>
 * parameter, it may be more practical to send it via a
 * <code>java.io.InputStream</code> object. The data will be read from the
 * stream as needed until end-of-file is reached.  The JDBC driver will
 * do any necessary conversion from Unicode to the database char format.
 *
 * The byte format of the Unicode stream must be a Java UTF-8, as defined in the
 * Java Virtual Machine Specification.
 *
 * <P><B>Note:</B> This stream object can either be a standard
 * Java stream object or your own subclass that implements the
 * standard interface.
 *
 * @param parameterIndex the first parameter is 1, the second is 2, ...
 * @param x a <code>java.io.InputStream</code> object that contains the
 * Unicode parameter value
 * @param length the number of bytes in the stream
 * @exception SQLException if parameterIndex does not correspond to a parameter
 * marker in the SQL statement; if a database access error occurs or
 * this method is called on a closed <code>PreparedStatement</code>
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated Deprecated.
 */
====>[PUBLIC]<java.sql.PreparedStatement: void setUnicodeStream(int,InputStream,int)>    ---->
<com.android.ims.ImsManager: void addRegistrationListener(ImsConnectionStateListener)>
/**
 * Adds registration listener to the IMS service.
 *
 * @param listener To listen to IMS registration events; It cannot be null
 * @throws NullPointerException if {@code listener} is null
 * @throws ImsException if calling the IMS service results in an error
 * @deprecated use {@link #addRegistrationCallback(ImsRegistrationImplBase.Callback)} and
 * {@link #addCapabilitiesCallback(ImsFeature.CapabilityCallback)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void addRegistrationListener(ImsConnectionStateListener)>    ---->    #addCapabilitiesCallback(ImsFeature.CapabilityCallback)
<androidx.slice.SliceUtils: List<SliceItem> getSliceActions(Slice)>
/**
 * @return the group of actions associated with the provided slice, if they exist.
 *
 * @deprecated TO BE REMOVED; use {@link SliceMetadata#getSliceActions()}
 */
====>[PUBLIC]<androidx.slice.SliceUtils: List<SliceItem> getSliceActions(Slice)>    ---->    SliceMetadata#getSliceActions()
<android.webkit.Plugin: void dispatchClickEvent(Context)>
/**
 * Invokes the click handler for this plugin.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void dispatchClickEvent(Context)>    ---->
<android.net.NetworkInfo: void setFailover(boolean)>
/**
 * Set the failover boolean.
 * @param isFailover {@code true} to mark the current connection attempt
 * as a failover.
 * @deprecated This hasn't been set in any recent Android release.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setFailover(boolean)>    ---->
<androidx.fragment.app.FragmentController: void doLoaderRetain()>
/**
 * Retains the state of each of the loaders.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void doLoaderRetain()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: List<CharSequence> getText()>
/**
 * Gets the text of the event. The index in the list represents the priority
 * of the text. Specifically, the lower the index the higher the priority.
 *
 * @return The text.
 *
 * @deprecated Use {@link AccessibilityRecord#getText()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: List<CharSequence> getText()>    ---->    AccessibilityRecord#getText()
<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityRecordCompat obtain(AccessibilityRecordCompat)>
/**
 * Returns a cached instance if such is available or a new one is
 * instantiated. The instance is initialized with data from the
 * given record.
 *
 * @return An instance.
 *
 * @deprecated Use {@link AccessibilityRecord#obtain(AccessibilityRecord)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityRecordCompat obtain(AccessibilityRecordCompat)>    ---->    AccessibilityRecord#obtain(AccessibilityRecord)
<android.app.ActivityManager: boolean isInLockTaskMode()>
/**
 * Return whether currently in lock task mode.  When in this mode
 * no new tasks can be created or switched to.
 *
 * @see Activity#startLockTask()
 *
 * @deprecated Use {@link #getLockTaskModeState} instead.
 */
====>[PUBLIC]<android.app.ActivityManager: boolean isInLockTaskMode()>    ---->    #getLockTaskModeState
<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(IBinder,int)>
/**
 * Show the input method's soft input area, so the user
 * sees the input method window and can interact with it.
 * This can only be called from the currently active input method,
 * as validated by the given token.
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param flags Provides additional operating flags.  Currently may be
 * 0 or have the {@link #SHOW_IMPLICIT} or
 * {@link #SHOW_FORCED} bit set.
 * @deprecated Use {@link InputMethodService#requestShowSelf(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(IBinder,int)>    ---->    InputMethodService#requestShowSelf(int)
<android.inputmethodservice.InputMethodService: void onUpdateCursor(Rect)>
/**
 * Called when the application has reported a new location of its text
 * cursor.  This is only called if explicitly requested by the input method.
 * The default implementation does nothing.
 * @deprecated Use {#link onUpdateCursorAnchorInfo(CursorAnchorInfo)} instead.
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: void onUpdateCursor(Rect)>    ---->    {#link onUpdateCursorAnchorInfo(CursorAnchorInfo)}
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Camera getCamera()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\AndroidCameraAgentImpl.java
<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Camera getCamera()>

====>[PUBLIC]<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: Camera getCamera()>    ---->
<android.util.proto.ProtoOutputStream: void endObject(long)>
/**
 * End a child object. Pass in the token from the correspoinding startObject call.
 *
 * @deprecated Use #end() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void endObject(long)>    ---->    #end()
<android.test.mock.MockContentProvider: void attachInfoForTesting(ContentProvider,Context,ProviderInfo)>
/**
 * Like {@link #attachInfo(Context, android.content.pm.ProviderInfo)}, but for use
 * when directly instantiating the provider for testing.
 *
 * <p>Provided for use by {@code android.test.ProviderTestCase2} and
 * {@code android.test.RenamingDelegatingContext}.
 *
 * @deprecated Use a mocking framework like <a href="https://github.com/mockito/mockito">Mockito</a>.
 * New tests should be written using the
 * <a href="{@docRoot}tools/testing-support-library/index.html">Android Testing Support Library</a>.
 */
====>[PUBLIC]<android.test.mock.MockContentProvider: void attachInfoForTesting(ContentProvider,Context,ProviderInfo)>    ---->
<androidx.core.view.ViewCompat: int getMeasuredState(View)>
/**
 * Return only the state bits of {@link #getMeasuredWidthAndState}
 * and {@link #getMeasuredHeightAndState}, combined into one integer.
 * The width component is in the regular bits {@link #MEASURED_STATE_MASK}
 * and the height component is at the shifted bits
 * {@link #MEASURED_HEIGHT_STATE_SHIFT}>>{@link #MEASURED_STATE_MASK}.
 *
 * @deprecated Use {@link View#getMeasuredState()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int getMeasuredState(View)>    ---->    View#getMeasuredState()
<android.app.Notification.Builder: Builder setTimeout(long)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.Builder: Builder setTimeout(long)>    ---->
<com.android.internal.logging.MetricsLogger: void action(Context,int,boolean)>
/**
 * @deprecated use {@link #action(int, boolean)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,boolean)>    ---->    #action(int, boolean)
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollY(int)>
/**
 * Sets the scroll offset of the source top edge in pixels.
 *
 * @param scrollY The scroll.
 *
 * @deprecated Use {@link AccessibilityRecord#setScrollY(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollY(int)>    ---->    AccessibilityRecord#setScrollY(int)
Inconsistency (Non-Documentation):<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\util\FileRotator.java
<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)>

====>[PUBLIC]<com.android.internal.util.FileRotator: void combineActive(Reader,Writer,long)>    ---->
<android.telephony.CellIdentityWcdma: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityWcdma: int getMcc()>    ---->    #getMccString
<android.content.ClipData: void addItem(Item,ContentResolver)>
/**
 * @removed use #addItem(ContentResolver, Item) instead
 */
====>[HIDDEN]<android.content.ClipData: void addItem(Item,ContentResolver)>    ---->
<androidx.core.view.ViewCompat: void setScaleX(View,float)>
/**
 * Sets the amount that the view is scaled in x around the pivot point, as a proportion of
 * the view's unscaled width. A value of 1 means that no scaling is applied.
 *
 * @param value The scaling factor.
 *
 * @deprecated Use {@link View#setScaleX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setScaleX(View,float)>    ---->    View#setScaleX(float)
<androidx.legacy.app.FragmentCompat: boolean shouldShowRequestPermissionRationale(Fragment,String)>
/**
 * Gets whether you should show UI with rationale for requesting a permission.
 * You should do this only if you do not have the permission and the context in
 * which the permission is requested does not clearly communicate to the user
 * what would be the benefit from granting this permission.
 * <p>
 * For example, if you write a camera app, requesting the camera permission
 * would be expected by the user and no rationale for why it is requested is
 * needed. If however, the app needs location for tagging photos then a non-tech
 * savvy user may wonder how location is related to taking photos. In this case
 * you may choose to show UI with rationale of requesting this permission.
 * </p>
 *
 * @param fragment The target fragment.
 * @param permission A permission your app wants to request.
 * @return Whether you can show permission rationale UI.
 *
 * @see androidx.core.content.ContextCompat#checkSelfPermission(
 * android.content.Context, String)
 * @see #requestPermissions(android.app.Fragment, String[], int)
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: boolean shouldShowRequestPermissionRationale(Fragment,String)>    ---->    androidx.fragment.app.Fragment
<android.util.proto.ProtoOutputStream: void writePackedSInt64(long,long[])>
/**
 * Write a list of packed proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSInt64(long,long[])>    ---->    #write
<android.util.proto.ProtoOutputStream: void writeDouble(long,double)>
/**
 * Write a single proto "double" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeDouble(long,double)>    ---->    #write
<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)>
/**
 * @deprecated in API 16
 * Returns an index entry from the list of all objects inside
 * FileA3D
 *
 * @param index number of the entry from the list to return
 *
 * @return entry in the a3d file described by the index
 */
====>[PUBLIC]<android.renderscript.FileA3D: IndexEntry getIndexEntry(int)>    ---->
<android.webkit.UrlInterceptRegistry: PluginData getPluginData(String,Map<String, String>)>
/**
 * Given an url, returns the PluginData of the first
 * UrlInterceptHandler interested, or {@code null} if none are or if
 * intercepts are disabled.
 *
 * @return A PluginData instance containing surrogate content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: PluginData getPluginData(String,Map<String, String>)>    ---->
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String,String)>
/**
 * Mark this table as syncable, with the _sync_dirty residing in another
 * table. When an update occurs in this table the _sync_dirty field of the
 * row in updateTable with the _id in foreignKey will be set to
 * ensure proper syncing operation.
 *
 * @param table an update on this table will trigger a sync time removal
 * @param foreignKey this is the column in table whose value is an _id in
 * updateTable
 * @param updateTable this is the table that will have its _sync_dirty
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String,String)>    ---->
<android.hardware.location.ContextHubManager: int unloadNanoApp(int)>
/**
 * Unload a specified nanoApp
 *
 * Note that unloading is asynchronous.  When we return from this method,
 * the nano app (probably) hasn't unloaded yet.  Assuming a return of 0
 * from this method, then the final success/failure for the unload is
 * delivered in a byte string via a call to Callback.onMessageReceipt.
 *
 * TODO(b/30784270): Provide a better success/failure delivery.
 *
 * @param nanoAppHandle handle of the nanoApp to unload
 *
 * @return 0 if the command for unloading was sent to the context hub;
 * -1 otherwise
 *
 * @deprecated Use {@link #unloadNanoApp(ContextHubInfo, long)} instead.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int unloadNanoApp(int)>    ---->    #unloadNanoApp(ContextHubInfo, long)
<androidx.core.net.TrafficStatsCompat: void setThreadStatsTag(int)>
/**
 * Set active tag to use when accounting {@link Socket} traffic originating
 * from the current thread. Only one active tag per thread is supported.
 * <p>
 * Changes only take effect during subsequent calls to
 * {@link #tagSocket(Socket)}.
 * <p>
 * Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and
 * used internally by system services like DownloadManager when performing
 * traffic on behalf of an application.
 *
 * @deprecated Use {@link TrafficStats#setThreadStatsTag(int)} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void setThreadStatsTag(int)>    ---->    TrafficStats#setThreadStatsTag(int)
<androidx.core.app.NotificationCompat.MessagingStyle: CharSequence getUserDisplayName()>
/**
 * Returns the name to be displayed for any replies sent by the user.
 *
 * @deprecated Use {@link #getUser()} instead.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.MessagingStyle: CharSequence getUserDisplayName()>    ---->    #getUser()
<com.android.ims.ImsManager: boolean isVtEnabledByUser(Context)>
/**
 * Returns the user configuration of VT setting
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isVtEnabledByUser()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isVtEnabledByUser(Context)>    ---->    #isVtEnabledByUser()
<androidx.core.os.BuildCompat: boolean isAtLeastNMR1()>
/**
 * Checks if the device is running on the Android N MR1 release or newer.
 *
 * @return {@code true} if N MR1 APIs are available for use
 * @deprecated Android N MR1 is a finalized release and this method is no longer necessary. It
 * will be removed in a future release of the Support Library. Instead, use
 * {@code Build.SDK_INT >= Build.VERSION_CODES.N_MR1}.
 */
====>[PUBLIC]<androidx.core.os.BuildCompat: boolean isAtLeastNMR1()>    ---->
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.widget.OverScroller: void setFinalY(int)>
/**
 * Sets the final position (Y) for this scroller.
 *
 * @param newY The new Y offset as an absolute distance from the origin.
 * @see #extendDuration(int)
 * @see #setFinalX(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScroller's final position may change during an animation.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void setFinalY(int)>    ---->
<androidx.core.app.NotificationCompat.MessagingStyle: void <init>(CharSequence)>
/**
 * @param userDisplayName Required - the name to be displayed for any replies sent by the
 * user before the posting app reposts the notification with those messages after they've
 * been actually sent and in previous messages sent by the user added in
 * {@link #addMessage(Message)}
 * @deprecated Use {@code #MessagingStyle(Person)} instead.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.MessagingStyle: void <init>(CharSequence)>    ---->    {@code #MessagingStyle(Person)}
<android.app.Notification.MediaStyle: void <init>(Builder)>
/**
 * @deprecated use {@code MediaStyle()}.
 */
====>[PUBLIC]<android.app.Notification.MediaStyle: void <init>(Builder)>    ---->
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\content\PackageHelper.java
<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: int resolveInstallLocation(Context,String,int,long,int)>    ---->
<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: CharSequence getMessage()>
/**
 * Return the message informing the user of the completion, as per
 * {@link android.app.VoiceInteractor.CompleteVoiceRequest
 * VoiceInteractor.CompleteVoiceRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows a separate visual message.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.CompleteVoiceRequest: CharSequence getMessage()>    ---->    #getVoicePrompt()
<android.telecom.Call: void addListener(Listener)>
/**
 * Adds a listener to this {@code Call}.
 *
 * @param listener A {@code Listener}.
 * @deprecated Use {@link #registerCallback} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Call: void addListener(Listener)>    ---->    #registerCallback
<android.telecom.InCallService: void onAudioStateChanged(AudioState)>
/**
 * Called when the audio state changes.
 *
 * @param audioState The new {@link AudioState}.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState) instead}.
 * @hide
 */
====>[HIDDEN]<android.telecom.InCallService: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.app.Fragment: LoaderManager getLoaderManager()>
/**
 * Return the LoaderManager for this fragment, creating it if needed.
 *
 * @deprecated Use {@link android.support.v4.app.Fragment#getLoaderManager()}
 */
====>[PUBLIC]<android.app.Fragment: LoaderManager getLoaderManager()>    ---->    android.support.v4.app.Fragment#getLoaderManager()
<android.content.pm.PackageManager: void getPackageSizeInfo(String,IPackageStatsObserver)>
/**
 * Like {@link #getPackageSizeInfoAsUser(String, int, IPackageStatsObserver)}, but
 * returns the size for the calling user.
 *
 * @deprecated use {@link StorageStatsManager} instead.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void getPackageSizeInfo(String,IPackageStatsObserver)>    ---->    StorageStatsManager
<android.app.Activity: void setPersistent(boolean)>
/**
 * @deprecated As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}
 * this is a no-op.
 * @hide
 */
====>[HIDDEN]<android.app.Activity: void setPersistent(boolean)>    ---->
<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>
/**
 * @hide
 * This is just here for sending CONNECTIVITY_ACTION.
 */
====>[HIDDEN]<android.content.Context: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->
<android.telephony.TelephonyManager: IccOpenLogicalChannelResponse iccOpenLogicalChannel(String)>
/**
 * Opens a logical channel to the ICC card.
 *
 * Input parameters equivalent to TS 27.007 AT+CCHO command.
 *
 * <p>Requires Permission:
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE} or that the calling
 * app has carrier privileges (see {@link #hasCarrierPrivileges}).
 *
 * @param AID Application id. See ETSI 102.221 and 101.220.
 * @return an IccOpenLogicalChannelResponse object.
 * @deprecated Replaced by {@link #iccOpenLogicalChannel(String, int)}
 */
====>[PUBLIC]<android.telephony.TelephonyManager: IccOpenLogicalChannelResponse iccOpenLogicalChannel(String)>    ---->    #iccOpenLogicalChannel(String, int)
<androidx.leanback.app.DetailsFragment: View inflateTitle(LayoutInflater,ViewGroup,Bundle)>
/**
 * @deprecated override {@link #onInflateTitleView(LayoutInflater,ViewGroup,Bundle)} instead.
 */
====>[PUBLIC]<androidx.leanback.app.DetailsFragment: View inflateTitle(LayoutInflater,ViewGroup,Bundle)>    ---->    #onInflateTitleView(LayoutInflater,ViewGroup,Bundle)
<com.android.internal.telephony.uicc.UiccCard: List<String> getCarrierPackageNamesForIntent(PackageManager,Intent)>
/**
 * Exposes {@link UiccCarrierPrivilegeRules#getCarrierPackageNamesForIntent}.
 * @deprecated Please use
 * {@link UiccProfile#getCarrierPackageNamesForIntent(PackageManager, Intent)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: List<String> getCarrierPackageNamesForIntent(PackageManager,Intent)>    ---->    UiccProfile#getCarrierPackageNamesForIntent(PackageManager, Intent)
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\BaseCanvas.java
<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawPosText(String,float[],Paint)>    ---->
<android.database.Cursor: boolean requery()>
/**
 * Performs the query that created the cursor again, refreshing its
 * contents. This may be done at any time, including after a call to {@link
 * #deactivate}.
 *
 * Since this method could execute a query on the database and potentially take
 * a while, it could cause ANR if it is called on Main (UI) thread.
 * A warning is printed if this method is being executed on Main thread.
 *
 * @return true if the requery succeeded, false if not, in which case the
 * cursor becomes invalid.
 * @deprecated Don't use this. Just request a new cursor, so you can do this
 * asynchronously and update your list view once the new cursor comes back.
 */
====>[PUBLIC]<android.database.Cursor: boolean requery()>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintShowBackgroundOnly()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintShowBackgroundOnly()>
/**
 * Get a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link NotificationCompat.WearableExtender#addPage}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintShowBackgroundOnly()>    ---->
<com.android.internal.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>
/**
 * @deprecated Use {@link #onRequestChildFocus(RecyclerView, State, View, View)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>    ---->    #onRequestChildFocus(RecyclerView, State, View, View)
<android.widget.DatePicker: boolean getCalendarViewShown()>
/**
 * Returns whether the {@link CalendarView} is shown.
 * <p>
 * <strong>Note:</strong> This method returns {@code false} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return {@code true} if the calendar view is shown
 * @see #getCalendarView()
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: boolean getCalendarViewShown()>    ---->
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
/**
 * Enables or disables the children's drawing cache during a layout animation.
 * By default, the drawing cache is enabled but this will prevent nested
 * layout animations from working. To nest animations, you must disable the
 * cache.
 *
 * @param enabled true to enable the animation cache, false otherwise
 *
 * @see #isAnimationCacheEnabled()
 * @see View#setDrawingCacheEnabled(boolean)
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Caching behavior of children may be controlled through {@link View#setLayerType(int, Paint)}.
 */
====>[PUBLIC]<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>    ---->
<android.hardware.SensorManager: void unregisterListener(SensorListener)>
/**
 * Unregisters a listener for all sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#unregisterListener(SensorEventListener)}
 * instead.
 *
 * @param listener
 * a SensorListener object
 */
====>[PUBLIC]<android.hardware.SensorManager: void unregisterListener(SensorListener)>    ---->    SensorManager#unregisterListener(SensorEventListener)
<android.media.MediaCodecList: int getCodecCount()>
/**
 * Count the number of available (regular) codecs.
 *
 * @deprecated Use {@link #getCodecInfos} instead.
 *
 * @see #REGULAR_CODECS
 */
====>[PUBLIC]<android.media.MediaCodecList: int getCodecCount()>    ---->    #getCodecInfos
<android.opengl.Matrix: void <init>()>
/**
 * @deprecated All methods are static, do not instantiate this class.
 */
====>[PUBLIC]<android.opengl.Matrix: void <init>()>    ---->
<com.android.setupwizardlib.DividerItemDecoration: DividerItemDecoration getDefault(Context)>
/**
 * @deprecated Use {@link #DividerItemDecoration(android.content.Context)}
 */
====>[PUBLIC]<com.android.setupwizardlib.DividerItemDecoration: DividerItemDecoration getDefault(Context)>    ---->    #DividerItemDecoration(android.content.Context)
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>
/**
 * Legacy version of drawBitmap(int[] colors, ...) that took ints for x,y
 *
 * @deprecated Usage with a {@link #isHardwareAccelerated() hardware accelerated} canvas
 * requires an internal copy of color buffer contents every time this method is
 * called. Using a Bitmap avoids this copy, and allows the application to more
 * explicitly control the lifetime and copies of pixel data.
 */
====>[PUBLIC]<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->    #isHardwareAccelerated() hardware accelerated
<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the projection matrix in the fixed function matrix buffer
 *
 * @param m projection matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setProjection(Matrix4f)>    ---->
<android.app.Activity: void setTitleColor(int)>
/**
 * Change the color of the title associated with this activity.
 * <p>
 * This method is deprecated starting in API Level 11 and replaced by action
 * bar styles. For information on styling the Action Bar, read the <a
 * href="{@docRoot} guide/topics/ui/actionbar.html">Action Bar</a> developer
 * guide.
 *
 * @deprecated Use action bar styles instead.
 */
====>[PUBLIC]<android.app.Activity: void setTitleColor(int)>    ---->    action bar styles
<android.telephony.gsm.SmsMessage: boolean isEmail()>
/**
 * Returns true if message is an email.
 *
 * @return true if this message came through an email gateway and email
 * sender / subject / parsed body are available
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isEmail()>    ---->
<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,long)>
/**
 * Adds a person to a group.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @param groupId the group to add the person to
 * @return the URI of the group membership row
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToGroup(ContentResolver,long,long)>    ---->    android.provider.ContactsContract
<android.widget.AutoCompleteTextView: OnItemSelectedListener getItemSelectedListener()>
/**
 * <p>Returns the listener that is notified whenever the user selects an
 * item in the drop down list.</p>
 *
 * @return the item selected listener
 *
 * @deprecated Use {@link #getOnItemSelectedListener()} intead
 */
====>[PUBLIC]<android.widget.AutoCompleteTextView: OnItemSelectedListener getItemSelectedListener()>    ---->    #getOnItemSelectedListener()
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiScanner.java
<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)>
/**
 * set interesting access points to find
 * @param bssidInfos access points of interest
 * @param apLostThreshold number of scans needed to indicate that AP is lost
 * @param listener object provided to report events on; this object must be unique and must
 * also be provided on {@link #stopTrackingBssids}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void startTrackingBssids(BssidInfo[],int,BssidListener)>    ---->
<android.telephony.NeighboringCellInfo: void setRssi(int)>
/**
 * Set the signal strength of the cell.
 *
 * NeighboringCellInfo is a one time shot for the neighboring cells based on
 * the radio network type at that moment. It shouldn't be changed after
 * creation.
 *
 * @deprecated initial rssi value passed as parameter to constructor
 * {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void setRssi(int)>    ---->    #NeighboringCellInfo(int, String, int)
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(Locale)>
/**
 * Returns the phone number formatting type for the given locale.
 *
 * @param locale The locale of interest, usually {@link Locale#getDefault()}
 * @return The formatting type for the given locale, or FORMAT_UNKNOWN if the formatting
 * rules are not known for the given locale
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(Locale)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
<android.provider.Contacts.People.Extensions: void <init>()>
/**
 * no public constructor since this is a utility class
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People.Extensions: void <init>()>    ---->    android.provider.ContactsContract
<android.app.Notification.BigTextStyle: void <init>(Builder)>
/**
 * @deprecated use {@code BigTextStyle()}.
 */
====>[PUBLIC]<android.app.Notification.BigTextStyle: void <init>(Builder)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getCustomContentHeight()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getCustomContentHeight()>
/**
 * Get the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link #setDisplayIntent}. See also {@link #setCustomSizePreset} and
 * {@link #setCustomContentHeight}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getCustomContentHeight()>    ---->
Inconsistency (Non-Documentation):<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\security\keystore\AndroidKeyStoreSignatureSpiBase.java
<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)>

====>[PUBLIC]<android.security.keystore.AndroidKeyStoreSignatureSpiBase: Object engineGetParameter(String)>    ---->
<androidx.recyclerview.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>
/**
 * @deprecated use {@link #findViewHolderForLayoutPosition(int)} or
 * {@link #findViewHolderForAdapterPosition(int)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>    ---->    #findViewHolderForLayoutPosition(int)
<android.security.keystore.recovery.WrappedApplicationKey.Builder: Builder setAccount(byte[])>
/**
 * @deprecated AOSP does not associate keys with accounts. This may be done by system app.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.WrappedApplicationKey.Builder: Builder setAccount(byte[])>    ---->
<java.util.Date: long UTC(int,int,int,int,int,int)>
/**
 * Determines the date and time based on the arguments. The
 * arguments are interpreted as a year, month, day of the month,
 * hour of the day, minute within the hour, and second within the
 * minute, exactly as for the <tt>Date</tt> constructor with six
 * arguments, except that the arguments are interpreted relative
 * to UTC rather than to the local time zone. The time indicated is
 * returned represented as the distance, measured in milliseconds,
 * of that time from the epoch (00:00:00 GMT on January 1, 1970).
 *
 * @param   year    the year minus 1900.
 * @param   month   the month between 0-11.
 * @param   date    the day of the month between 1-31.
 * @param   hrs     the hours between 0-23.
 * @param   min     the minutes between 0-59.
 * @param   sec     the seconds between 0-59.
 * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT for
 * the date and time specified by the arguments.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(year + 1900, month, date,
 * hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900,
 * month, date, hrs, min, sec)</code>, using a UTC
 * <code>TimeZone</code>, followed by <code>Calendar.getTime().getTime()</code>.
 */
====>[PUBLIC]<java.util.Date: long UTC(int,int,int,int,int,int)>    ---->
<android.location.LocationManager: void removeNmeaListener(NmeaListener)>
/**
 * Removes an NMEA listener.
 *
 * @param listener a {@link GpsStatus.NmeaListener} object to remove
 * @deprecated use {@link #removeNmeaListener(OnNmeaMessageListener)} instead.
 */
====>[PUBLIC]<android.location.LocationManager: void removeNmeaListener(NmeaListener)>    ---->    #removeNmeaListener(OnNmeaMessageListener)
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)>
/**
 * @deprecated in API 16
 * Adds a new triangle to the mesh builder
 *
 * @param idx1 index of the first vertex in the triangle
 * @param idx2 index of the second vertex in the triangle
 * @param idx3 index of the third vertex in the triangle
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder addTriangle(int,int,int)>    ---->
<android.app.UiAutomation: boolean grantRuntimePermission(String,String,UserHandle)>
/**
 * @deprecated replaced by
 * {@link #grantRuntimePermissionAsUser(String, String, UserHandle)}.
 * @hide
 */
====>[HIDDEN]<android.app.UiAutomation: boolean grantRuntimePermission(String,String,UserHandle)>    ---->    #grantRuntimePermissionAsUser(String, String, UserHandle)
<android.renderscript.Allocation: void resize(int)>
/**
 * Resize a 1D allocation.  The contents of the allocation are preserved.
 * If new elements are allocated objects are created with null contents and
 * the new region is otherwise undefined.
 *
 * <p>If the new region is smaller the references of any objects outside the
 * new region will be released.</p>
 *
 * <p>A new type will be created with the new dimension.</p>
 *
 * @param dimX The new size of the allocation.
 *
 * @deprecated RenderScript objects should be immutable once created.  The
 * replacement is to create a new allocation and copy the contents. This
 * function will throw an exception if API 21 or higher is used.
 */
====>[PUBLIC]<android.renderscript.Allocation: void resize(int)>    ---->
<android.renderscript.RSSurfaceView: void <init>(Context)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void <init>(Context)>    ---->    android.opengl.GLSurfaceView#setRenderer
<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int)>
/**
 * Same as calling {@link #startActivityFromFragment(Fragment, Intent, int, Bundle)}
 * with no options.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#startActivityFromFragment(
 * android.support.v4.app.Fragment,Intent,int)}
 */
====>[PUBLIC]<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int)>    ---->    android.support.v4.app.FragmentActivity#startActivityFromFragment(  android.support.v4.app.Fragment,Intent,int)
<android.content.Intent: String toURI()>
/**
 * Call {@link #toUri} with 0 flags.
 * @deprecated Use {@link #toUri} instead.
 */
====>[PUBLIC]<android.content.Intent: String toURI()>    ---->    #toUri
<android.app.ActionBar: int getNavigationMode()>
/**
 * Returns the current navigation mode. The result will be one of:
 * <ul>
 * <li>{@link #NAVIGATION_MODE_STANDARD}</li>
 * <li>{@link #NAVIGATION_MODE_LIST}</li>
 * <li>{@link #NAVIGATION_MODE_TABS}</li>
 * </ul>
 *
 * @return The current navigation mode.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getNavigationMode()>    ---->
<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
/**
 * Create a new MotionEvent, filling in all of the basic values that
 * define the motion.
 *
 * @param downTime The time (in ms) when the user originally pressed down to start
 * a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param eventTime  The the time (in ms) when this specific event was generated.  This
 * must be obtained from {@link SystemClock#uptimeMillis()}.
 * @param action The kind of action being performed, such as {@link #ACTION_DOWN}.
 * @param pointerCount The number of pointers that are active in this event.
 * @param x The X coordinate of this event.
 * @param y The Y coordinate of this event.
 * @param pressure The current pressure of this event.  The pressure generally
 * ranges from 0 (no pressure at all) to 1 (normal pressure), however
 * values higher than 1 may be generated depending on the calibration of
 * the input device.
 * @param size A scaled value of the approximate size of the area being pressed when
 * touched with the finger. The actual value in pixels corresponding to the finger
 * touch is normalized with a device specific range of values
 * and scaled to a value between 0 and 1.
 * @param metaState The state of any meta / modifier keys that were in effect when
 * the event was generated.
 * @param xPrecision The precision of the X coordinate being reported.
 * @param yPrecision The precision of the Y coordinate being reported.
 * @param deviceId The id for the device that this event came from.  An id of
 * zero indicates that the event didn't come from a physical device; other
 * numbers are arbitrary and you shouldn't depend on the values.
 * @param edgeFlags A bitfield indicating which edges, if any, were touched by this
 * MotionEvent.
 *
 * @deprecated Use {@link #obtain(long, long, int, float, float, float, float, int, float, float, int, int)}
 * instead.
 */
====>[PUBLIC]<android.view.MotionEvent: MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>    ---->    #obtain(long, long, int, float, float, float, float, int, float, float, int, int)
<com.android.internal.telephony.BlockChecker: boolean isBlocked(Context,String)>
/**
 * Returns {@code true} if {@code phoneNumber} is blocked according to {@code extras}.
 * <p>
 * This method catches all underlying exceptions to ensure that this method never throws any
 * exception.
 * <p>
 * @deprecated use {@link #isBlocked(Context, String, Bundle)} instead.
 *
 * @param context the context of the caller.
 * @param phoneNumber the number to check.
 * @return {@code true} if the number is blocked. {@code false} otherwise.
 */
====>[PUBLIC]<com.android.internal.telephony.BlockChecker: boolean isBlocked(Context,String)>    ---->    #isBlocked(Context, String, Bundle)
<android.net.wifi.WifiManager: boolean pingSupplicant()>
/**
 * Check that the supplicant daemon is responding to requests.
 * @return {@code true} if we were able to communicate with the supplicant and
 * it returned the expected response to the PING message.
 * @deprecated Will return the output of {@link #isWifiEnabled()} instead.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean pingSupplicant()>    ---->    #isWifiEnabled()
<androidx.core.view.MenuCompat: void setShowAsAction(MenuItem,int)>
/**
 * Call {@link MenuItem#setShowAsAction(int) MenuItem.setShowAsAction()}.
 *
 * @deprecated Use {@link MenuItem#setShowAsAction(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuCompat: void setShowAsAction(MenuItem,int)>    ---->    MenuItem#setShowAsAction(int)
<android.test.AndroidTestRunner: void setInstrumentaiton(Instrumentation)>
/**
 * @deprecated Incorrect spelling,
 * use {@link #setInstrumentation(android.app.Instrumentation)} instead.
 */
====>[PUBLIC]<android.test.AndroidTestRunner: void setInstrumentaiton(Instrumentation)>    ---->    #setInstrumentation(android.app.Instrumentation)
<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
/**
 * returns true if this message is a CPHS voicemail / message waiting
 * indicator (MWI) set message
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>    ---->
<android.app.Activity: void setProgressBarVisibility(boolean)>
/**
 * Sets the visibility of the progress bar in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param visible Whether to show the progress bars in the title.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarVisibility(boolean)>    ---->
<android.telephony.NeighboringCellInfo: void <init>()>
/**
 * Empty constructor.  Initializes the RSSI and CID.
 *
 * NeighboringCellInfo is one time shot for the neighboring cells based on
 * the radio network type at that moment. Its constructor needs radio network
 * type.
 *
 * @deprecated by {@link #NeighboringCellInfo(int, String, int)}
 */
====>[PUBLIC]<android.telephony.NeighboringCellInfo: void <init>()>    ---->    #NeighboringCellInfo(int, String, int)
<android.util.proto.ProtoOutputStream: void writePackedUInt32(long,int[])>
/**
 * Write a list of packed proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedUInt32(long,int[])>    ---->    #write
<android.graphics.drawable.BitmapDrawable: void <init>(InputStream)>
/**
 * Create a drawable by decoding a bitmap from the given input stream.
 * @deprecated Use {@link #BitmapDrawable(Resources, java.io.InputStream)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(InputStream)>    ---->    #BitmapDrawable(Resources, java.io.InputStream)
<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>
/**
 * Adds a message for display by this notification. Convenience call for a simple
 * {@link Message} in {@link #addMessage(Notification.MessagingStyle.Message)}.
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link #getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @see Message#Message(CharSequence, long, CharSequence)
 *
 * @return this object for method chaining
 *
 * @deprecated use {@link #addMessage(CharSequence, long, Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>    ---->    #addMessage(CharSequence, long, Person)
<android.view.RecordingCanvas: void drawPosText(String,float[],Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.view.RecordingCanvas: void drawPosText(String,float[],Paint)>    ---->
<android.nfc.NdefRecord: byte[] toByteArray()>
/**
 * Return this NDEF Record as a byte array.<p>
 * This method is deprecated, use {@link NdefMessage#toByteArray}
 * instead. This is because the NDEF binary format is not defined for
 * a record outside of the context of a message: the MB and ME flags
 * cannot be set without knowing the location inside a message.<p>
 * This implementation will attempt to serialize a single record by
 * always setting the MB and ME flags (in other words, assume this
 * is a single-record NDEF Message).<p>
 *
 * @deprecated use {@link NdefMessage#toByteArray()} instead
 */
====>[PUBLIC]<android.nfc.NdefRecord: byte[] toByteArray()>    ---->    NdefMessage#toByteArray()
<android.util.proto.ProtoOutputStream: void writeRepeatedInt32(long,int)>
/**
 * Write a single repeated proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedInt32(long,int)>    ---->    #write
<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(VerticalGridView,boolean)>
/**
 * Sets up the focus highlight behavior of a focused item in header list.
 *
 * @param gridView  The header list.
 * @param scaleEnabled True if scale the item when focused, false otherwise. Note that
 * {@link RowHeaderPresenter#onSelectLevelChanged(RowHeaderPresenter.ViewHolder)}
 * will always be called regardless value of scaleEnabled.
 * @deprecated Use {@link #setupHeaderItemFocusHighlight(ItemBridgeAdapter, boolean)}
 */
====>[PUBLIC]<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(VerticalGridView,boolean)>    ---->    #setupHeaderItemFocusHighlight(ItemBridgeAdapter, boolean)
<android.app.ActionBar: int getTabCount()>
/**
 * Returns the number of tabs currently registered with the action bar.
 * @return Tab count
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getTabCount()>    ---->
<android.graphics.Canvas: boolean clipRegion(Region)>
/**
 * Intersect the current clip with the specified region. Note that unlike
 * clipRect() and clipPath() which transform their arguments by the
 * current matrix, clipRegion() assumes its argument is already in the
 * coordinate system of the current layer's bitmap, and so not
 * transformation is performed.
 *
 * @param region The region to operate on the current clip, based on op
 * @return true if the resulting is non-empty
 *
 * @removed
 * @deprecated Unlike all other clip calls this API does not respect the
 * current matrix. Use {@link #clipRect(Rect)} as an alternative.
 */
====>[HIDDEN]<android.graphics.Canvas: boolean clipRegion(Region)>    ---->    #clipRect(Rect)
<java.lang.SecurityManager: int classLoaderDepth()>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: int classLoaderDepth()>    ---->    #checkPermission
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getCustomSizePreset()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getCustomSizePreset()>
/**
 * Get the custom size preset for the display of this notification out of the available
 * presets found in {@link NotificationCompat.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link #setDisplayIntent}. Check the documentation for the preset in question.
 * See also {@link #setCustomContentHeight} and {@link #setCustomSizePreset}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getCustomSizePreset()>    ---->
<android.database.CursorWindow: boolean isBlob(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_BLOB} or {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_BLOB} or
 * {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isBlob(int,int)>    ---->    #getType(int, int)
<androidx.legacy.app.FragmentPagerAdapter: void <init>(FragmentManager)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void <init>(FragmentManager)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence)>
/**
 * @deprecated use {@link #getTypeLabel(Resources, int, CharSequence)} instead.
 * @hide
 */
====>[HIDDEN]<android.provider.ContactsContract.CommonDataKinds.Phone: CharSequence getDisplayLabel(Context,int,CharSequence)>    ---->    #getTypeLabel(Resources, int, CharSequence)
<android.app.usage.StorageStatsManager: StorageStats queryStatsForUid(String,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForUid(String,int)>    ---->
<android.media.AudioTrack: int getNativeFrameCount()>
/**
 * Returns the frame count of the native <code>AudioTrack</code> buffer.
 * @return current size in frames of the <code>AudioTrack</code> buffer.
 * @throws IllegalStateException
 * @deprecated Use the identical public method {@link #getBufferSizeInFrames()} instead.
 */
====>[PUBLIC]<android.media.AudioTrack: int getNativeFrameCount()>    ---->    #getBufferSizeInFrames()
<android.view.ViewDebug: void trace(View,HierarchyTraceType)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void trace(View,HierarchyTraceType)>    ---->
<android.content.Context: void clearWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#clear
 * WallpaperManager.clear()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void clearWallpaper()>    ---->    android.app.WallpaperManager#clear  WallpaperManager.clear()
<android.content.ClipboardManager: void setText(CharSequence)>
/**
 * @deprecated Use {@link #setPrimaryClip(ClipData)} instead.  This
 * creates a ClippedItem holding the given text and sets it as the
 * primary clip.  It has no label or icon.
 */
====>[PUBLIC]<android.content.ClipboardManager: void setText(CharSequence)>    ---->    #setPrimaryClip(ClipData)
<android.net.TrafficStats: long getUidUdpRxPackets(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpRxPackets(int)>    ---->    #getUidRxPackets(int)
<android.renderscript.ProgramVertex.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Create a builder object.
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: void <init>(RenderScript)>    ---->
<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,CharSequence,boolean)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.SliceAction: void <init>(PendingIntent,Icon,CharSequence,boolean)>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedUInt32(long,int)>
/**
 * Write a single repeated proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedUInt32(long,int)>    ---->    #write
<android.graphics.Paint: Rasterizer setRasterizer(Rasterizer)>
/**
 * Set or clear the rasterizer object.
 * <p />
 * Pass null to clear any previous rasterizer.
 * As a convenience, the parameter passed is also returned.
 *
 * @param rasterizer May be null. The new rasterizer to be installed in
 * the paint.
 * @return           rasterizer
 *
 * @deprecated Rasterizer is not supported by either the HW or PDF backends.
 * @removed
 */
====>[HIDDEN]<android.graphics.Paint: Rasterizer setRasterizer(Rasterizer)>    ---->
<android.view.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.view.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->
<java.lang.Runtime: OutputStream getLocalizedOutputStream(OutputStream)>
/**
 * Creates a localized version of an output stream. This method
 * takes an <code>OutputStream</code> and returns an
 * <code>OutputStream</code> equivalent to the argument in all respects
 * except that it is localized: as Unicode characters are written to
 * the stream, they are automatically converted to the local
 * character set.
 * <p>
 * If the argument is already a localized stream, it may be returned
 * as the result.
 *
 * @deprecated As of JDK&nbsp;1.1, the preferred way to translate a
 * Unicode character stream into a byte stream in the local encoding is via
 * the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and
 * <code>PrintWriter</code> classes.
 *
 * @param      out OutputStream to localize
 * @return     a localized output stream
 * @see        java.io.OutputStream
 * @see        java.io.BufferedWriter#BufferedWriter(java.io.Writer)
 * @see        java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
 * @see        java.io.PrintWriter#PrintWriter(java.io.OutputStream)
 */
====>[PUBLIC]<java.lang.Runtime: OutputStream getLocalizedOutputStream(OutputStream)>    ---->    java.io.OutputStream
<android.util.proto.ProtoOutputStream: void writeSFixed32(long,int)>
/**
 * Write a single proto "sfixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSFixed32(long,int)>    ---->    #write
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getItemCount()>
/**
 * Gets the number of items that can be visited.
 *
 * @return The number of items.
 *
 * @deprecated Use {@link AccessibilityRecord#getItemCount()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getItemCount()>    ---->    AccessibilityRecord#getItemCount()
<android.hardware.Camera.Parameters: void dump()>
/**
 * Writes the current Parameters to the log.
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.hardware.Camera.Parameters: void dump()>    ---->
<androidx.legacy.app.FragmentCompat.PermissionCompatDelegate: boolean requestPermissions(Fragment,String[],int)>
/**
 * Determines whether the delegate should handle
 * {@link FragmentCompat#requestPermissions(Fragment, String[], int)}, and request
 * permissions if applicable. If this method returns true, it means that permission
 * request is successfully handled by the delegate, and platform should not perform any
 * further requests for permission.
 *
 * @param fragment The target fragment.
 * @param permissions The requested permissions.
 * @param requestCode Application specific request code to match with a result
 * reported to {@link OnRequestPermissionsResultCallback#onRequestPermissionsResult(
 * int, String[], int[])}.
 *
 * @return Whether the delegate has handled the permission request.
 * @see FragmentCompat#requestPermissions(Fragment, String[], int)
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat.PermissionCompatDelegate: boolean requestPermissions(Fragment,String[],int)>    ---->    androidx.fragment.app.Fragment
Inconsistency (Non-Documentation):<com.android.server.AppStateTracker: void dump(PrintWriter,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\AppStateTracker.java
<com.android.server.AppStateTracker: void dump(PrintWriter,String)>

====>[PUBLIC]<com.android.server.AppStateTracker: void dump(PrintWriter,String)>    ---->
<android.net.NetworkCapabilities: void setCapabilities(int[])>
/**
 * @deprecated use {@link #setCapabilities(int[], int[])}
 * @hide
 */
====>[HIDDEN]<android.net.NetworkCapabilities: void setCapabilities(int[])>    ---->    #setCapabilities(int[], int[])
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintHideIcon(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintHideIcon(boolean)>
/**
 * Set a hint that this notification's icon should not be displayed.
 * @param hintHideIcon {@code true} to hide the icon, {@code false} otherwise.
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintHideIcon(boolean)>    ---->
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,boolean)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,boolean)>    ---->
<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)>
/**
 * @deprecated in API 16
 * Binds the constant buffer containing fixed function emulation
 * matrices
 *
 * @param va allocation containing fixed function matrices
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction: void bindConstants(Constants)>    ---->
<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)>
/**
 * Convenience for sending a sticky broadcast.  For internal use only.
 * If you don't care about permission, use null.
 *
 * @deprecated use ActivityManager.broadcastStickyIntent instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int,int)>    ---->    ActivityManager.broadcastStickyIntent
<android.speech.tts.TextToSpeech: int playEarcon(String,int,HashMap<String, String>)>
/**
 * Plays the earcon using the specified queueing mode and parameters.
 * The earcon must already have been added with {@link #addEarcon(String, String)} or
 * {@link #addEarcon(String, String, int)}.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param earcon The earcon that should be played
 * @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_STREAM},
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playEarcon operation.
 * @deprecated As of API level 21, replaced by
 * {@link #playEarcon(String, int, Bundle, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int playEarcon(String,int,HashMap<String, String>)>    ---->    #playEarcon(String, int, Bundle, String)
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
/**
 * Whether this service can retrieve the current window's content.
 * <p>
 * <strong>Statically set from
 * {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>
 * </p>
 * @return True if window content can be retrieved.
 *
 * @deprecated Use {@link #getCapabilities()}.
 */
====>[PUBLIC]<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>    ---->    #getCapabilities()
<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)>
/**
 * @deprecated see {@link #setConfig(int, String)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsConfig: int setProvisionedStringValue(int,String)>    ---->    #setConfig(int, String)
<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>
/**
 * Sets the default zoom density of the page. This must be called from the UI
 * thread. The default is {@link ZoomDensity#MEDIUM}.
 *
 * This setting is not recommended for use in new applications.  If the WebView
 * is utilized to display mobile-oriented pages, the desired effect can be achieved by
 * adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport'
 * tag. For pages lacking the tag, {@link android.webkit.WebView#setInitialScale}
 * and {@link #setUseWideViewPort} can be used.
 *
 * @param zoom the zoom density
 * @deprecated This method is no longer supported, see the function documentation for
 * recommended alternatives.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setDefaultZoom(ZoomDensity)>    ---->
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>
/**
 * Called by any application to find out whether it has been granted permission via
 * {@link #setApplicationRestrictionsManagingPackage} to manage application restrictions
 * for the calling user.
 *
 * <p>This is done by comparing the calling Linux uid with the uid of the package specified by
 * that method.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatedScopes}
 * instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>    ---->
<androidx.slice.builders.ListBuilder.InputRangeBuilder: InputRangeBuilder setAction(PendingIntent)>
/**
 * Set the {@link PendingIntent} to send when the current value is updated.
 *
 * @deprecated TO BE REMOVED; use {@link InputRangeBuilder#setInputAction(PendingIntent)}
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.InputRangeBuilder: InputRangeBuilder setAction(PendingIntent)>    ---->    InputRangeBuilder#setInputAction(PendingIntent)
<android.widget.CalendarView: void setShowWeekNumber(boolean)>
/**
 * Sets whether to show the week number.
 *
 * @param showWeekNumber True to show the week number.
 * @deprecated No longer used by Material-style CalendarView.
 *
 * @attr ref android.R.styleable#CalendarView_showWeekNumber
 */
====>[PUBLIC]<android.widget.CalendarView: void setShowWeekNumber(boolean)>    ---->
<com.android.internal.telephony.uicc.UiccCard: boolean areCarrierPriviligeRulesLoaded()>
/**
 * Returns true iff carrier privileges rules are null (dont need to be loaded) or loaded.
 * @deprecated Please use {@link UiccProfile#areCarrierPriviligeRulesLoaded()} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: boolean areCarrierPriviligeRulesLoaded()>    ---->    UiccProfile#areCarrierPriviligeRulesLoaded()
<android.renderscript.Mesh.Builder: void <init>(RenderScript,int)>
/**
 * @deprecated in API 16
 * Creates builder object
 * @param rs Context to which the mesh will belong.
 * @param usage specifies how the mesh allocations are to be
 * handled, whether they need to be uploaded to a
 * buffer on the gpu, maintain a cpu copy, etc
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: void <init>(RenderScript,int)>    ---->
<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>
/**
 * Returns whether or not "OEM unlock" is enabled or disabled on this device.
 *
 * @deprecated use {@link OemLockManager#isOemUnlockAllowedByUser()} instead.
 */
====>[PUBLIC]<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>    ---->    OemLockManager#isOemUnlockAllowedByUser()
<androidx.core.view.ViewParentCompat: boolean requestSendAccessibilityEvent(ViewParent,View,AccessibilityEvent)>
/**
 * Called by a child to request from its parent to send an {@link AccessibilityEvent}.
 * The child has already populated a record for itself in the event and is delegating
 * to its parent to send the event. The parent can optionally add a record for itself.
 * <p>
 * Note: An accessibility event is fired by an individual view which populates the
 * event with a record for its state and requests from its parent to perform
 * the sending. The parent can optionally add a record for itself before
 * dispatching the request to its parent. A parent can also choose not to
 * respect the request for sending the event. The accessibility event is sent
 * by the topmost view in the view tree.</p>
 *
 * @param parent The parent whose method to invoke.
 * @param child The child which requests sending the event.
 * @param event The event to be sent.
 * @return True if the event was sent.
 *
 * @deprecated Use {@link ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)}
 * directly.
 */
====>[PUBLIC]<androidx.core.view.ViewParentCompat: boolean requestSendAccessibilityEvent(ViewParent,View,AccessibilityEvent)>    ---->    ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)
<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertexFixedFunction from the current state of
 * the builder
 *
 * @return Fixed function emulation ProgramVertex
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: ProgramVertexFixedFunction create()>    ---->
Inconsistency (Non-Documentation):<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\GridBuilder.java
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon)>
/**
 * Adds an image to the cell. There can be at most one image, the first one added
 * will be used, others will be ignored.
 *
 * @param image the image to display in the cell.
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon)>    ---->
Inconsistency (Non-Documentation):<com.android.setupwizardlib.view.Illustration: void setForeground(Drawable)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\setupwizardlib\view\Illustration.java
<com.android.setupwizardlib.view.Illustration: void setForeground(Drawable)>

====>[PUBLIC]<com.android.setupwizardlib.view.Illustration: void setForeground(Drawable)>    ---->
<androidx.leanback.media.PlaybackGlueHost: void fadeOut()>
/**
 * Fades out the playback overlay immediately.
 * @deprecated Call {@link #hideControlsOverlay(boolean)}
 */
====>[PUBLIC]<androidx.leanback.media.PlaybackGlueHost: void fadeOut()>    ---->    #hideControlsOverlay(boolean)
<com.android.internal.telephony.SubscriptionController: int[] getSubId(int)>
/**
 * Return the subId for specified slot Id.
 * @deprecated
 */
====>[PUBLIC]<com.android.internal.telephony.SubscriptionController: int[] getSubId(int)>    ---->
<android.security.keystore.recovery.RecoveryController: Key generateKey(String,byte[])>
/**
 * @deprecated Use {@link #generateKey(String)}.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: Key generateKey(String,byte[])>    ---->    #generateKey(String)
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getGravity()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getGravity()>
/**
 * Get the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getGravity()>    ---->
<androidx.appcompat.app.ActionBar: void removeAllTabs()>
/**
 * Remove all tabs from the action bar and deselect the current tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void removeAllTabs()>    ---->
<android.os.Debug: void resetGlobalClassInitTime()>
/**
 * Clears the count of time spent initializing classes.
 * @see #getGlobalClassInitTime()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalClassInitTime()>    ---->
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(Context,Intent)>
/**
 * Called periodically when the device or profile challenge password is about to expire
 * or has expired.  It will typically be called at these times: on device boot, once per day
 * before the password expires, and at the time when the password expires.
 *
 * <p>If the password is not updated by the user, this method will continue to be called
 * once per day until the password is changed or the device admin disables password expiration.
 *
 * <p>The admin will typically post a notification requesting the user to change their password
 * in response to this call. The actual password expiration time can be obtained by calling
 * {@link DevicePolicyManager#getPasswordExpiration(ComponentName) }
 *
 * <p>The admin should be sure to take down any notifications it posted in response to this call
 * when it receives {@link DeviceAdminReceiver#onPasswordChanged(Context, Intent) }.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordExpiring(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(Context,Intent)>    ---->    #onPasswordExpiring(Context, Intent, UserHandle)
<android.util.proto.ProtoOutputStream: void writePackedFloat(long,float[])>
/**
 * Write a list of packed proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFloat(long,float[])>    ---->    #write
<android.hardware.location.ContextHubManager: int unregisterCallback(ICallback)>
/**
 * @deprecated Use {@link #unregisterCallback(Callback)} instead.
 * @hide
 */
====>[HIDDEN]<android.hardware.location.ContextHubManager: int unregisterCallback(ICallback)>    ---->    #unregisterCallback(Callback)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyBroadcastAsUser(Intent,UserHandle)>    ---->
<android.support.v8.renderscript.ScriptGroup: void execute()>
/**
 * Execute the ScriptGroup.  This will run all the kernels in
 * the ScriptGroup.  No internal connection results will be visible
 * after execution of the ScriptGroup.
 *
 * If Incremental Support for intrinsics is needed, the execution
 * will take the naive path: execute kernels one by one in the
 * correct order.
 *
 * @deprecated Use {@link #execute} instead.
 */
====>[PUBLIC]<android.support.v8.renderscript.ScriptGroup: void execute()>    ---->    #execute
<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromFile(RenderScript,Resources,File,float)>    ---->
<android.webkit.Plugin: void setFileName(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setFileName(String)>    ---->
<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreAction(PendingIntent)>
/**
 * If all content in a slice cannot be shown, a "see more" affordance may be displayed where
 * the content is cut off. The action added here should take the user to an activity to see
 * all of the content, and will be invoked when the "see more" affordance is tapped.
 * <p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 *
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreAction(PendingIntent)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void recycle()>
/**
 * Return an instance back to be reused.
 * <p>
 * <strong>Note:</strong> You must not touch the object after calling this
 * function.
 * </p>
 *
 * @throws IllegalStateException If the record is already recycled.
 *
 * @deprecated Use {@link AccessibilityRecord#recycle()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void recycle()>    ---->    AccessibilityRecord#recycle()
<androidx.appcompat.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>
/**
 * Set the adapter and navigation callback for list navigation mode.
 *
 * The supplied adapter will provide views for the expanded list as well as
 * the currently selected item. (These may be displayed differently.)
 *
 * The supplied OnNavigationListener will alert the application when the user
 * changes the current list selection.
 *
 * @param adapter An adapter that will provide views both to display
 * the current navigation selection and populate views
 * within the dropdown navigation menu.
 * @param callback An OnNavigationListener that will receive events when the user
 * selects a navigation item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>    ---->
<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,Location)>
/**
 * The callback called when the state of a monitoring system changes.
 * {@link GeofenceHardware#MONITORING_TYPE_GPS_HARDWARE} is an example of a
 * monitoring system.
 *
 * @deprecated use {@link #onMonitoringSystemChange(GeofenceHardwareMonitorEvent)} instead.
 * NOTE: this API is will remain to be called on Android API 21 and above for backwards
 * compatibility. But clients must stop implementing it when updating their code.
 *
 * @param monitoringType The type of the monitoring system.
 * @param available Indicates whether the system is currently available or not.
 * @param location The last known location according to the monitoring system.
 */
====>[PUBLIC]<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,Location)>    ---->    #onMonitoringSystemChange(GeofenceHardwareMonitorEvent)
Inconsistency (Non-Documentation):<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\os\UserManager.java
<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)>
/**
 * This will no longer work.  Device owners and profile owners should use
 * {@link DevicePolicyManager#addUserRestriction(ComponentName, String)} instead.
 */
====>[PUBLIC]<android.os.UserManager: void setUserRestrictions(Bundle,UserHandle)>    ---->
<com.android.uiautomator.core.UiDevice: String getCurrentActivityName()>
/**
 * Retrieves the last activity to report accessibility events.
 * @deprecated The results returned should be considered unreliable
 * @return String name of activity
 * @since API Level 16
 */
====>[PUBLIC]<com.android.uiautomator.core.UiDevice: String getCurrentActivityName()>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintHideIcon()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintHideIcon()>
/**
 * Get a hint that this notification's icon should not be displayed.
 * @return {@code true} if this icon should not be displayed, false otherwise.
 * The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: boolean getHintHideIcon()>    ---->
<android.location.Location: void removeAccuracy()>
/**
 * Remove the horizontal accuracy from this location.
 *
 * <p>Following this call {@link #hasAccuracy} will return false, and
 * {@link #getAccuracy} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeAccuracy()>    ---->
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon)>    ---->
<android.app.Notification.Builder: Builder setChannel(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.Builder: Builder setChannel(String)>    ---->
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
/**
 * @return Maximum velocity to initiate a fling, as measured in dips per second.
 *
 * @deprecated Use {@link #getScaledMaximumFlingVelocity()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMaximumFlingVelocity()>    ---->    #getScaledMaximumFlingVelocity()
Inconsistency (Non-Documentation):<android.databinding.parser.BindingExpressionParser: String[] getTokenNames()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\databinding\parser\BindingExpressionParser.java
<android.databinding.parser.BindingExpressionParser: String[] getTokenNames()>

====>[PUBLIC]<android.databinding.parser.BindingExpressionParser: String[] getTokenNames()>    ---->
<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence,boolean)>
/**
 * Sets the summary subtitle to be shown in this header. If unset, the normal subtitle
 * will be used. The summary is used when the parent template is presented in a
 * small format.
 * @deprecated TO BE REMOVED; use {@link #setSummary(CharSequence, boolean)}
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.HeaderBuilder: HeaderBuilder setSummarySubtitle(CharSequence,boolean)>    ---->    #setSummary(CharSequence, boolean)
<android.view.RecordingCanvas: void drawPosText(char[],int,int,float[],Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.view.RecordingCanvas: void drawPosText(char[],int,int,float[],Paint)>    ---->
<android.view.inputmethod.InputMethodManager: void setInputMethod(IBinder,String)>
/**
 * Force switch to a new input method component. This can only be called
 * from an application or a service which has a token of the currently active input method.
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param id The unique identifier for the new input method to be switched to.
 * @deprecated Use {@link InputMethodService#switchInputMethod(String)}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void setInputMethod(IBinder,String)>    ---->    InputMethodService#switchInputMethod(String)
<com.android.internal.telephony.RIL: void getPDPContextList(Message)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.internal.telephony.RIL: void getPDPContextList(Message)>    ---->
<com.android.ims.ImsConnectionStateListener: void onVoiceMessageCountChanged(int)>
/**
 * Called when waiting voice message count changes.
 * @deprecated not used in newer IMS provider implementations.
 */
====>[PUBLIC]<com.android.ims.ImsConnectionStateListener: void onVoiceMessageCountChanged(int)>    ---->
<androidx.fragment.app.FragmentController: void restoreLoaderNonConfig(SimpleArrayMap<String, LoaderManager>)>
/**
 * Restores the saved state for all LoaderManagers. The given LoaderManager list are
 * LoaderManager instances retained across configuration changes.
 *
 * @see #retainLoaderNonConfig()
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void restoreLoaderNonConfig(SimpleArrayMap<String, LoaderManager>)>    ---->
<android.view.textclassifier.TextClassification.Builder: Builder setIcon(Drawable)>
/**
 * Sets the icon for the <i>primary</i> action that may be rendered on a widget used to act
 * on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the
 * returned icon represents the icon of the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setIcon(Drawable)>    ---->    #addAction(RemoteAction)
<android.os.Debug: void resetThreadExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadExternalAllocCount()>    ---->
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
/**
 * Sets whether the WebView will enable smooth transition while panning or
 * zooming or while the window hosting the WebView does not have focus.
 * If it is {@code true}, WebView will choose a solution to maximize the performance.
 * e.g. the WebView's content may not be updated during the transition.
 * If it is false, WebView will keep its fidelity. The default value is {@code false}.
 *
 * @deprecated This method is now obsolete, and will become a no-op in future.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>    ---->
<androidx.fragment.app.FragmentController: void reportLoaderStart()>
/**
 * Lets the loaders know the host is ready to receive notifications.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void reportLoaderStart()>    ---->
<android.location.Location: void removeBearingAccuracy()>
/**
 * Remove the bearing accuracy from this location.
 *
 * <p>Following this call {@link #hasBearingAccuracy} will return false, and
 * {@link #getBearingAccuracyDegrees} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeBearingAccuracy()>    ---->
<androidx.core.view.inputmethod.InputConnectionCompat: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.core.view.inputmethod.InputConnectionCompat: void <init>()>    ---->
<com.android.internal.telephony.test.SimulatedCommands: void getPDPContextList(Message)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.internal.telephony.test.SimulatedCommands: void getPDPContextList(Message)>    ---->
<android.util.proto.ProtoOutputStream: void writeSInt32(long,int)>
/**
 * Write a single proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSInt32(long,int)>    ---->    #write
<android.os.storage.StorageManager: void disableUsbMassStorage()>
/**
 * Disables USB Mass Storage (UMS) on the device.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: void disableUsbMassStorage()>    ---->
<android.webkit.WebSettings: void setTextSize(TextSize)>
/**
 * Sets the text size of the page. The default is {@link TextSize#NORMAL}.
 *
 * @param t the text size as a {@link TextSize} value
 * @deprecated Use {@link #setTextZoom} instead.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setTextSize(TextSize)>    ---->    #setTextZoom
<android.net.NetworkInfo: void setDetailedState(DetailedState,String,String)>
/**
 * Sets the fine-grained state of the network.
 * @param detailedState the {@link DetailedState}.
 * @param reason a {@code String} indicating the reason for the state change,
 * if one was supplied. May be {@code null}.
 * @param extraInfo an optional {@code String} providing addditional network state
 * information passed up from the lower networking layers.
 * @deprecated Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setDetailedState(DetailedState,String,String)>    ---->    NetworkCapabilities
<android.text.Html: String toHtml(Spanned)>
/**
 * @deprecated use {@link #toHtml(Spanned, int)} instead.
 */
====>[PUBLIC]<android.text.Html: String toHtml(Spanned)>    ---->    #toHtml(Spanned, int)
<android.database.CursorWindow: boolean isLong(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_INTEGER}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_INTEGER}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isLong(int,int)>    ---->    #getType(int, int)
<android.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>
/**
 * Set the adapter and navigation callback for list navigation mode.
 *
 * The supplied adapter will provide views for the expanded list as well as
 * the currently selected item. (These may be displayed differently.)
 *
 * The supplied OnNavigationListener will alert the application when the user
 * changes the current list selection.
 *
 * @param adapter An adapter that will provide views both to display
 * the current navigation selection and populate views
 * within the dropdown navigation menu.
 * @param callback An OnNavigationListener that will receive events when the user
 * selects a navigation item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setListNavigationCallbacks(SpinnerAdapter,OnNavigationListener)>    ---->
<android.app.admin.DevicePolicyManager: UserHandle createUser(ComponentName,String)>
/**
 * Called by a device owner to create a user with the specified name. The UserHandle returned
 * by this method should not be persisted as user handles are recycled as users are removed and
 * created. If you need to persist an identifier for this user, use
 * {@link UserManager#getSerialNumberForUser}.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param name the user's name
 * @see UserHandle
 * @return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
 * user could not be created.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#M}
 * @removed From {@link android.os.Build.VERSION_CODES#N}
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: UserHandle createUser(ComponentName,String)>    ---->
<android.os.Debug: int getGlobalAllocCount()>
/**
 * Returns the global count of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalAllocCount()>    ---->
<android.content.pm.PackageManager: void addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>
/**
 * @deprecated This is a protected API that should not have been available
 * to third party applications.  It is the platform's responsibility for
 * assigning preferred activities and this cannot be directly modified.
 *
 * Add a new preferred activity mapping to the system.  This will be used
 * to automatically select the given activity component when
 * {@link Context#startActivity(Intent) Context.startActivity()} finds
 * multiple matching activities and also matches the given filter.
 *
 * @param filter The set of intents under which this activity will be
 * made preferred.
 * @param match The IntentFilter match category that this preference
 * applies to.
 * @param set The set of activities that the user was picking from when
 * this preference was made.
 * @param activity The component name of the activity that is to be
 * preferred.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>    ---->    Context#startActivity(Intent) Context.startActivity()
<android.os.Debug: int getGlobalExternalAllocSize()>
/**
 * This method exists for compatibility and always returns 0.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalExternalAllocSize()>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setTitleResId(int)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTitleResId(int)>    ---->
<android.database.AbstractCursor: Object getUpdatedField(int)>
/**
 * @deprecated Always returns null since Cursors do not support updating rows
 */
====>[PUBLIC]<android.database.AbstractCursor: Object getUpdatedField(int)>    ---->
<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)>
/**
 * @deprecated in API 16
 * Accepts one of the following family names as an argument
 * and will attempt to produce the best match with a system font:
 *
 * "sans-serif" "arial" "helvetica" "tahoma" "verdana"
 * "serif" "times" "times new roman" "palatino" "georgia" "baskerville"
 * "goudy" "fantasy" "cursive" "ITC Stone Serif"
 * "monospace" "courier" "courier new" "monaco"
 *
 * Returns default font if no match could be found.
 */
====>[PUBLIC]<android.renderscript.Font: Font create(RenderScript,Resources,String,Style,float)>    ---->
<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)>
/**
 * @deprecated in API 16
 * Set the bit depth for alpha. This configures the surface for
 * an unsigned integer buffer type.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setAlpha(int,int)>    ---->
<android.media.AudioManager: void setRouting(int,int,int)>
/**
 * Sets the audio routing for a specified mode
 *
 * @param mode   audio mode to change route. E.g., MODE_RINGTONE.
 * @param routes bit vector of routes requested, created from one or
 * more of ROUTE_xxx types. Set bits indicate that route should be on
 * @param mask   bit vector of routes to change, created from one or more of
 * ROUTE_xxx types. Unset bits indicate the route should be left unchanged
 *
 * @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(),
 * setBluetoothScoOn() methods instead.
 */
====>[PUBLIC]<android.media.AudioManager: void setRouting(int,int,int)>    ---->
<android.view.Surface: void transferFrom(Surface)>
/**
 * This is intended to be used by {@link SurfaceView#updateWindow} only.
 * @param other access is not thread safe
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.view.Surface: void transferFrom(Surface)>    ---->
<java.io.ObjectOutputStream.PutField: void write(ObjectOutput)>
/**
 * Write the data and fields to the specified ObjectOutput stream,
 * which must be the same stream that produced this
 * <code>PutField</code> object.
 *
 * @param  out the stream to write the data and fields to
 * @throws IOException if I/O errors occur while writing to the
 * underlying stream
 * @throws IllegalArgumentException if the specified stream is not
 * the same stream that produced this <code>PutField</code>
 * object
 * @deprecated This method does not write the values contained by this
 * <code>PutField</code> object in a proper format, and may
 * result in corruption of the serialization stream.  The
 * correct way to write <code>PutField</code> data is by
 * calling the {@link java.io.ObjectOutputStream#writeFields()}
 * method.
 */
====>[PUBLIC]<java.io.ObjectOutputStream.PutField: void write(ObjectOutput)>    ---->    java.io.ObjectOutputStream#writeFields()
<androidx.slice.builders.ListBuilder: void <init>(Context,Uri)>
/**
 * Create a builder which will construct a slice made up of rows of content.
 *
 * @param uri Uri to tag for this slice.
 *
 * @deprecated TO BE REMOVED; use {@link #ListBuilder(Context, Uri, long)}.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: void <init>(Context,Uri)>    ---->    #ListBuilder(Context, Uri, long)
<java.security.SignatureSpi: void engineSetParameter(String,Object)>
/**
 * Sets the specified algorithm parameter to the specified
 * value. This method supplies a general-purpose mechanism through
 * which it is possible to set the various parameters of this object.
 * A parameter may be any settable parameter for the algorithm, such as
 * a parameter size, or a source of random bits for signature generation
 * (if appropriate), or an indication of whether or not to perform
 * a specific but optional computation. A uniform algorithm-specific
 * naming scheme for each parameter is desirable but left unspecified
 * at this time.
 *
 * @param param the string identifier of the parameter.
 *
 * @param value the parameter value.
 *
 * @exception InvalidParameterException if {@code param} is an
 * invalid parameter for this signature algorithm engine,
 * the parameter is already set
 * and cannot be set again, a security exception occurs, and so on.
 *
 * @deprecated Replaced by {@link
 * #engineSetParameter(java.security.spec.AlgorithmParameterSpec)
 * engineSetParameter}.
 */
====>[PUBLIC]<java.security.SignatureSpi: void engineSetParameter(String,Object)>    ---->    #engineSetParameter(java.security.spec.AlgorithmParameterSpec)  engineSetParameter
<android.view.View: boolean computeFitSystemWindows(Rect,Rect)>
/**
 * @hide Compute the insets that should be consumed by this view and the ones
 * that should propagate to those under it.
 *
 * Note: This is used by appcompat's ActionBarOverlayLayout through reflection.
 *
 * @param inoutInsets the insets given to this view
 * @param outLocalInsets the insets that should be applied to this view
 * @deprecated use {@link #computeSystemWindowInsets}
 * @return
 */
====>[HIDDEN]<android.view.View: boolean computeFitSystemWindows(Rect,Rect)>    ---->    #computeSystemWindowInsets
<android.widget.CalendarView: void setSelectedDateVerticalBar(Drawable)>
/**
 * Sets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @param drawable The vertical bar drawable.
 *
 * @attr ref android.R.styleable#CalendarView_selectedDateVerticalBar
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setSelectedDateVerticalBar(Drawable)>    ---->
<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()>
/**
 * @hide
 * @return The list of {@link CapabilityInfo} objects.
 * @deprecated The version that takes a context works better.
 */
====>[HIDDEN]<android.accessibilityservice.AccessibilityServiceInfo: List<CapabilityInfo> getCapabilityInfos()>    ---->
Inconsistency (Non-Documentation):<android.webkit.WebViewDatabase: boolean hasFormData()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\WebViewDatabase.java
<android.webkit.WebViewDatabase: boolean hasFormData()>
/**
 * Gets whether there is any saved data for web forms.
 *
 * @return whether there is any saved data for web forms
 * @see #clearFormData
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: boolean hasFormData()>    ---->
<android.view.ViewDebug: void dump(View,boolean,boolean,OutputStream)>
/**
 * Dumps the view hierarchy starting from the given view.
 * @deprecated See {@link #dumpv2(View, ByteArrayOutputStream)} below.
 * @hide
 */
====>[HIDDEN]<android.view.ViewDebug: void dump(View,boolean,boolean,OutputStream)>    ---->    #dumpv2(View, ByteArrayOutputStream)
<java.net.DatagramSocketImpl: byte getTTL()>
/**
 * Retrieve the TTL (time-to-live) option.
 *
 * @exception IOException if an I/O exception occurs
 * while retrieving the time-to-live option
 * @deprecated use getTimeToLive instead.
 * @return a byte representing the TTL value
 * @see #setTTL(byte)
 */
====>[PUBLIC]<java.net.DatagramSocketImpl: byte getTTL()>    ---->    getTimeToLive
<java.lang.SecurityManager: boolean getInCheck()>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: boolean getInCheck()>    ---->    #checkPermission
<android.net.SSLCertificateSocketFactory: void <init>(int)>
/**
 * @deprecated Use {@link #getDefault(int)} instead.
 */
====>[PUBLIC]<android.net.SSLCertificateSocketFactory: void <init>(int)>    ---->    #getDefault(int)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(LeScanCallback)>
/**
 * Starts a scan for Bluetooth LE devices.
 *
 * <p>Results of the scan are reported using the
 * {@link LeScanCallback#onLeScan} callback.
 *
 * @param callback the callback LE scan results are delivered
 * @return true, if the scan was started successfully
 * @deprecated use {@link BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)}
 * instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: boolean startLeScan(LeScanCallback)>    ---->    BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)
<com.android.internal.widget.RecyclerView.ViewHolder: int getPosition()>
/**
 * @deprecated This method is deprecated because its meaning is ambiguous due to the async
 * handling of adapter updates. Please use {@link #getLayoutPosition()} or
 * {@link #getAdapterPosition()} depending on your use case.
 *
 * @see #getLayoutPosition()
 * @see #getAdapterPosition()
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ViewHolder: int getPosition()>    ---->    #getLayoutPosition()
<java.sql.Time: int getDay()>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a day component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 */
====>[PUBLIC]<java.sql.Time: int getDay()>    ---->
<android.webkit.CookieSyncManager: void startSync()>
/**
 * startSync() requests sync manager to start sync.
 * @deprecated Calling startSync is no longer necessary as the WebView automatically
 * syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void startSync()>    ---->
<androidx.appcompat.app.ActionBar: void removeTabAt(int)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param position Position of the tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void removeTabAt(int)>    ---->
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>
/**
 * Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture
 * mode of the activity changed.
 * <p>Call when the picture-in-picture mode of the activity changed.
 *
 * @see Fragment#onPictureInPictureModeChanged
 * @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>    ---->    #dispatchPictureInPictureModeChanged(boolean, Configuration)
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
/**
 * Indicates what types of drawing caches should be kept in memory after
 * they have been created.
 *
 * @see #getPersistentDrawingCache()
 * @see #setAnimationCacheEnabled(boolean)
 *
 * @param drawingCacheToKeep one or a combination of {@link #PERSISTENT_NO_CACHE},
 * {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
 * and {@link #PERSISTENT_ALL_CACHES}
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: void setPersistentDrawingCache(int)>    ---->    #setLayerType(int, Paint)
<android.widget.OverScroller: void <init>(Context,Interpolator,float,float)>
/**
 * Creates an OverScroller with flywheel enabled.
 * @param context The context of this application.
 * @param interpolator The scroll interpolator. If null, a default (viscous) interpolator will
 * be used.
 * @param bounceCoefficientX A value between 0 and 1 that will determine the proportion of the
 * velocity which is preserved in the bounce when the horizontal edge is reached. A null value
 * means no bounce. This behavior is no longer supported and this coefficient has no effect.
 * @param bounceCoefficientY Same as bounceCoefficientX but for the vertical direction. This
 * behavior is no longer supported and this coefficient has no effect.
 * @deprecated Use {@link #OverScroller(Context, Interpolator)} instead.
 */
====>[PUBLIC]<android.widget.OverScroller: void <init>(Context,Interpolator,float,float)>    ---->    #OverScroller(Context, Interpolator)
<android.webkit.CookieManager: void removeAllCookie()>
/**
 * Removes all cookies.
 * @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.
 */
====>[PUBLIC]<android.webkit.CookieManager: void removeAllCookie()>    ---->    #removeAllCookies(ValueCallback)
<com.android.internal.telephony.CommandsInterface: void getPDPContextList(Message)>
/**
 * returned message
 * retMsg.obj = AsyncResult ar
 * ar.exception carries exception on failure
 * ar.userObject contains the orignal value of result.obj
 * ar.result contains a List of DataCallResponse
 * @deprecated Do not use.
 */
====>[PUBLIC]<com.android.internal.telephony.CommandsInterface: void getPDPContextList(Message)>    ---->
<android.hardware.Camera.Parameters: List<Integer> getSupportedPreviewFrameRates()>
/**
 * Gets the supported preview frame rates.
 *
 * @return a list of supported preview frame rates. null if preview
 * frame rate setting is not supported.
 * @deprecated replaced by {@link #getSupportedPreviewFpsRange()}
 */
====>[PUBLIC]<android.hardware.Camera.Parameters: List<Integer> getSupportedPreviewFrameRates()>    ---->    #getSupportedPreviewFpsRange()
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,String)>
/**
 * Tells the underlying networking system that the caller wants to
 * begin using the named feature. The interpretation of {@code feature}
 * is completely up to each networking implementation.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType specifies which network the request pertains to
 * @param feature the name of the feature to be used
 * @return an integer value representing the outcome of the request.
 * The interpretation of this value is specific to each networking
 * implementation+feature combination, except that the value {@code -1}
 * always indicates failure.
 *
 * @deprecated Deprecated in favor of the cleaner
 * {@link #requestNetwork(NetworkRequest, NetworkCallback)} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: int startUsingNetworkFeature(int,String)>    ---->    #requestNetwork(NetworkRequest, NetworkCallback)
<androidx.appcompat.app.ActionBar: void addTab(Tab)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 * If this is the first tab to be added it will become the selected tab.
 *
 * @param tab Tab to add
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void addTab(Tab)>    ---->
<androidx.leanback.widget.FocusHighlightHelper: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.leanback.widget.FocusHighlightHelper: void <init>()>    ---->
<android.app.usage.StorageStatsManager: long getCacheBytes(String)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getCacheBytes(String)>    ---->
<android.widget.ListView: long[] getCheckItemIds()>
/**
 * Returns the set of checked items ids. The result is only valid if the
 * choice mode has not been set to {@link #CHOICE_MODE_NONE}.
 *
 * @return A new array which contains the id of each checked item in the
 * list.
 *
 * @deprecated Use {@link #getCheckedItemIds()} instead.
 */
====>[PUBLIC]<android.widget.ListView: long[] getCheckItemIds()>    ---->    #getCheckedItemIds()
<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>
/**
 * Constructor
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link MessagingStyle#getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @deprecated use {@code Message(CharSequence, long, Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>    ---->
<junit.runner.BaseTestRunner: TestSuiteLoader getLoader()>
/**
 * Returns the loader to be used.
 *
 * @deprecated not present in JUnit4.10
 */
====>[PUBLIC]<junit.runner.BaseTestRunner: TestSuiteLoader getLoader()>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: Drawable getWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: Drawable getWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: Drawable getWallpaper()>    ---->
<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from an asset stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param mgr asset manager used to load asset
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromAsset(RenderScript,AssetManager,String)>    ---->
<android.telephony.gsm.SmsMessage: String getDisplayOriginatingAddress()>
/**
 * Returns the originating address, or email from address if this message
 * was from an email gateway. Returns null if originating address
 * unavailable.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getDisplayOriginatingAddress()>    ---->
<android.net.TrafficStats: void setThreadStatsUidSelf()>
/**
 * Set specific UID to use when accounting {@link Socket} traffic
 * originating from the current thread as the calling UID. Designed for use
 * when another application is performing operations on your behalf.
 * <p>
 * Changes only take effect during subsequent calls to
 * {@link #tagSocket(Socket)}.
 *
 * @removed
 * @deprecated use {@link #setThreadStatsUid(int)} instead.
 */
====>[HIDDEN]<android.net.TrafficStats: void setThreadStatsUidSelf()>    ---->    #setThreadStatsUid(int)
<android.speech.tts.TextToSpeech: Locale getLanguage()>
/**
 * Returns a Locale instance describing the language currently being used for synthesis
 * requests sent to the TextToSpeech engine.
 *
 * In Android 4.2 and before (API <= 17) this function returns the language that is currently
 * being used by the TTS engine. That is the last language set by this or any other
 * client by a {@link TextToSpeech#setLanguage} call to the same engine.
 *
 * In Android versions after 4.2 this function returns the language that is currently being
 * used for the synthesis requests sent from this client. That is the last language set
 * by a {@link TextToSpeech#setLanguage} call on this instance.
 *
 * If a voice is set (by {@link #setVoice(Voice)}), getLanguage will return the language of
 * the currently set voice.
 *
 * Please note that the Locale object returned by this method is NOT a valid Locale object. Its
 * language field contains a three-letter ISO 639-2/T code (where a proper Locale would use
 * a two-letter ISO 639-1 code), and the country field contains a three-letter ISO 3166 country
 * code (where a proper Locale would use a two-letter ISO 3166-1 code).
 *
 * @return language, country (if any) and variant (if any) used by the client stored in a
 * Locale instance, or {@code null} on error.
 *
 * @deprecated As of API level 21, please use <code>getVoice().getLocale()</code>
 * ({@link #getVoice()}).
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Locale getLanguage()>    ---->    #getVoice()
<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether texture matrix calculations are to be added
 * to the shader
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: Builder setTextureMatrixEnable(boolean)>    ---->
<androidx.core.view.ViewCompat: float getRotation(View)>
/**
 * @deprecated Use {@link View#getRotation()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getRotation(View)>    ---->    View#getRotation()
<androidx.leanback.widget.PlaybackControlsRow: long getBufferedProgressLong()>
/**
 * Returns the buffered progress of long type for the playback controls row.
 * @deprecated Use {@link #getBufferedPosition()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: long getBufferedProgressLong()>    ---->    #getBufferedPosition()
<androidx.appcompat.app.ActionBar: Tab newTab()>
/**
 * Create and return a new {@link Tab}.
 * This tab will not be included in the action bar until it is added.
 *
 * @return A new Tab
 *
 * @see #addTab(Tab)
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: Tab newTab()>    ---->
<android.webkit.Plugin: String getDescription()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getDescription()>    ---->
<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,INetworkScoreCache)>
/**
 * Register a network score cache.
 *
 * @param networkType the type of network this cache can handle. See {@link NetworkKey#type}.
 * @param scoreCache implementation of {@link INetworkScoreCache} to store the scores.
 * @throws SecurityException if the caller does not hold the
 * {@link permission#REQUEST_NETWORK_SCORES} permission.
 * @throws IllegalArgumentException if a score cache is already registered for this type.
 * @deprecated equivalent to registering for cache updates with CACHE_FILTER_NONE.
 * @hide
 */
====>[HIDDEN]<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,INetworkScoreCache)>    ---->
<android.app.Notification: String getChannel()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification: String getChannel()>    ---->
<android.telephony.gsm.SmsManager: void sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)>
/**
 * Send a data based SMS to a specific application port.
 *
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to use
 * the current default SMSC
 * @param destinationPort the port to deliver the message to
 * @param data the body of the message to send
 * @param sentIntent if not NULL this <code>PendingIntent</code> is
 * broadcast when the message is sucessfully sent, or failed.
 * The result code will be <code>Activity.RESULT_OK<code> for success,
 * or one of these errors:
 * <code>RESULT_ERROR_GENERIC_FAILURE</code>
 * <code>RESULT_ERROR_RADIO_OFF</code>
 * <code>RESULT_ERROR_NULL_PDU</code>.
 * The per-application based SMS control checks sentIntent. If sentIntent
 * is NULL the caller will be checked against all unknown applicaitons,
 * which cause smaller number of SMS to be sent in checking period.
 * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
 * broadcast when the message is delivered to the recipient.  The
 * raw pdu of the status report is in the extended data ("pdu").
 *
 * @throws IllegalArgumentException if destinationAddress or data are empty
 * @deprecated Use android.telephony.SmsManager.
 */
====>[PUBLIC]<android.telephony.gsm.SmsManager: void sendDataMessage(String,String,short,byte[],PendingIntent,PendingIntent)>    ---->
<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
/**
 * returns true if this message is a CPHS voicemail / message waiting
 * indicator (MWI) clear message
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>    ---->
<androidx.recyclerview.widget.RecyclerView: int getChildPosition(View)>
/**
 * @deprecated use {@link #getChildAdapterPosition(View)} or
 * {@link #getChildLayoutPosition(View)}.
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView: int getChildPosition(View)>    ---->    #getChildAdapterPosition(View)
<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>
/**
 * Class constructor.
 * @param streamType the type of the audio stream. See
 * {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM},
 * {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC},
 * {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}.
 * @param sampleRateInHz the initial source sample rate expressed in Hz.
 * {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value
 * which is usually the sample rate of the sink.
 * {@link #getSampleRate()} can be used to retrieve the actual sample rate chosen.
 * @param channelConfig describes the configuration of the audio channels.
 * See {@link AudioFormat#CHANNEL_OUT_MONO} and
 * {@link AudioFormat#CHANNEL_OUT_STEREO}
 * @param audioFormat the format in which the audio data is represented.
 * See {@link AudioFormat#ENCODING_PCM_16BIT},
 * {@link AudioFormat#ENCODING_PCM_8BIT},
 * and {@link AudioFormat#ENCODING_PCM_FLOAT}.
 * @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is
 * read from for playback. This should be a nonzero multiple of the frame size in bytes.
 * <p> If the track's creation mode is {@link #MODE_STATIC},
 * this is the maximum length sample, or audio clip, that can be played by this instance.
 * <p> If the track's creation mode is {@link #MODE_STREAM},
 * this should be the desired buffer size
 * for the <code>AudioTrack</code> to satisfy the application's
 * latency requirements.
 * If <code>bufferSizeInBytes</code> is less than the
 * minimum buffer size for the output sink, it is increased to the minimum
 * buffer size.
 * The method {@link #getBufferSizeInFrames()} returns the
 * actual size in frames of the buffer created, which
 * determines the minimum frequency to write
 * to the streaming <code>AudioTrack</code> to avoid underrun.
 * See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size
 * for an AudioTrack instance in streaming mode.
 * @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}
 * @throws java.lang.IllegalArgumentException
 * @deprecated use {@link Builder} or
 * {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the
 * {@link AudioAttributes} instead of the stream type which is only for volume control.
 */
====>[PUBLIC]<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>    ---->    Builder
<android.app.Notification: void setLatestEventInfo(Context,CharSequence,CharSequence,PendingIntent)>
/**
 * Sets the {@link #contentView} field to be a view with the standard "Latest Event"
 * layout.
 *
 * <p>Uses the {@link #icon} and {@link #when} fields to set the icon and time fields
 * in the view.</p>
 * @param context       The context for your application / activity.
 * @param contentTitle The title that goes in the expanded entry.
 * @param contentText  The text that goes in the expanded entry.
 * @param contentIntent The intent to launch when the user clicks the expanded notification.
 * If this is an activity, it must include the
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK} flag, which requires
 * that you take care of task management as described in the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document.
 *
 * @deprecated Use {@link Builder} instead.
 * @removed
 */
====>[HIDDEN]<android.app.Notification: void setLatestEventInfo(Context,CharSequence,CharSequence,PendingIntent)>    ---->    Builder
<android.app.StatsManager: boolean addConfiguration(long,byte[])>
/**
 * @deprecated Use {@link #addConfig(long, byte[])}
 */
====>[PUBLIC]<android.app.StatsManager: boolean addConfiguration(long,byte[])>    ---->    #addConfig(long, byte[])
<android.media.Ringtone: int getStreamType()>
/**
 * Gets the stream type where this ringtone will be played.
 *
 * @return The stream type, see {@link AudioManager}.
 * @deprecated use of stream types is deprecated, see
 * {@link #setAudioAttributes(AudioAttributes)}
 */
====>[PUBLIC]<android.media.Ringtone: int getStreamType()>    ---->    #setAudioAttributes(AudioAttributes)
<android.widget.CalendarView: void setWeekSeparatorLineColor(int)>
/**
 * Sets the color for the separator line between weeks.
 *
 * @param color The week separator color.
 *
 * @attr ref android.R.styleable#CalendarView_weekSeparatorLineColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setWeekSeparatorLineColor(int)>    ---->
<androidx.legacy.app.FragmentTabHost: void <init>(Context,AttributeSet)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void <init>(Context,AttributeSet)>    ---->    androidx.fragment.app.FragmentTabHost
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)>
/**
 * @deprecated in API 16
 * Sets the normal vector for the vertices that are added after this method call.
 *
 * @param x normal vector x
 * @param y normal vector y
 * @param z normal vector z
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setNormal(float,float,float)>    ---->
<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)>
/**
 * Currently not implemented. It does nothing.
 * @deprecated Time lapse mode video recording using camera still image capture
 * is not desirable, and will not be supported.
 * @hide
 */
====>[HIDDEN]<android.media.MediaRecorder: void setAuxiliaryOutputFile(String)>    ---->
<android.webkit.UrlInterceptRegistry: boolean registerHandler(UrlInterceptHandler)>
/**
 * Register a new UrlInterceptHandler. This handler will be called
 * before any that were previously registered.
 *
 * @param handler The new UrlInterceptHandler object
 * @return {@code true} if the handler was not previously registered.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean registerHandler(UrlInterceptHandler)>    ---->
Inconsistency (Non-Documentation):<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\view\accessibility\AccessibilityManager.java
<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()>
/**
 * Returns the {@link ServiceInfo}s of the installed accessibility services.
 *
 * @return An unmodifiable list with {@link ServiceInfo}s.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityManager: List<ServiceInfo> getAccessibilityServiceList()>    ---->
<android.widget.CalendarView: Drawable getSelectedDateVerticalBar()>
/**
 * Gets the drawable for the vertical bar shown at the beginning and at
 * the end of the selected date.
 *
 * @return The vertical bar drawable.
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: Drawable getSelectedDateVerticalBar()>    ---->
<android.view.View: void buildDrawingCache()>
/**
 * <p>Calling this method is equivalent to calling <code>buildDrawingCache(false)</code>.</p>
 *
 * @see #buildDrawingCache(boolean)
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void buildDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.app.usage.StorageStatsManager: ExternalStorageStats queryExternalStatsForUser(String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: ExternalStorageStats queryExternalStatsForUser(String,UserHandle)>    ---->
<android.os.Debug: void resetGlobalFreedCount()>
/**
 * Clears the global count of objects freed.
 * @see #getGlobalFreedCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalFreedCount()>    ---->
<android.app.Fragment: void onInflate(AttributeSet,Bundle)>
/**
 * @deprecated Use {@link #onInflate(Context, AttributeSet, Bundle)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onInflate(AttributeSet,Bundle)>    ---->    #onInflate(Context, AttributeSet, Bundle)
<android.content.pm.InstantAppResolveInfo: int getVersionCode()>
/**
 * @deprecated Use {@link #getLongVersionCode} instead.
 */
====>[PUBLIC]<android.content.pm.InstantAppResolveInfo: int getVersionCode()>    ---->    #getLongVersionCode
<android.text.format.DateUtils: String getMonthString(int,int)>
/**
 * Return a localized string for the month of the year.
 * @param month One of {@link Calendar#JANUARY Calendar.JANUARY},
 * {@link Calendar#FEBRUARY Calendar.FEBRUARY}, etc.
 * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_MEDIUM},
 * or {@link #LENGTH_SHORTEST}.
 * Undefined lengths will return {@link #LENGTH_MEDIUM}
 * but may return something different in the future.
 * @return Localized month of the year.
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getMonthString(int,int)>    ---->    java.text.SimpleDateFormat
<androidx.core.view.ViewCompat: void onPopulateAccessibilityEvent(View,AccessibilityEvent)>
/**
 * Called from {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)}
 * giving a chance to this View to populate the accessibility event with its
 * text content. While this method is free to modify event
 * attributes other than text content, doing so should normally be performed in
 * {@link View#onInitializeAccessibilityEvent(AccessibilityEvent)}.
 * <p>
 * Example: Adding formatted date string to an accessibility event in addition
 * to the text added by the super implementation:
 * <pre> public void onPopulateAccessibilityEvent(AccessibilityEvent event) {
 * super.onPopulateAccessibilityEvent(event);
 * final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY;
 * String selectedDateUtterance = DateUtils.formatDateTime(mContext,
 * mCurrentDate.getTimeInMillis(), flags);
 * event.getText().add(selectedDateUtterance);
 * }</pre>
 * <p>
 * If an {@link AccessibilityDelegateCompat} has been specified via calling
 * {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)} its
 * {@link AccessibilityDelegateCompat#onPopulateAccessibilityEvent(View, AccessibilityEvent)}
 * is responsible for handling this call.
 * </p>
 * <p class="note"><strong>Note:</strong> Always call the super implementation before adding
 * information to the event, in case the default implementation has basic information to add.
 * </p>
 *
 * @param v The View against which to invoke the method.
 * @param event The accessibility event which to populate.
 *
 * @see View#sendAccessibilityEvent(int)
 * @see View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)
 *
 * @deprecated Call {@link View#onPopulateAccessibilityEvent(AccessibilityEvent)} directly.
 * This method will be removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void onPopulateAccessibilityEvent(View,AccessibilityEvent)>    ---->    View#onPopulateAccessibilityEvent(AccessibilityEvent)
<android.os.Parcel: FileDescriptor openFileDescriptor(String,int)>
/**
 * @deprecated use {@link android.system.Os#open(String, int, int)}
 */
====>[PUBLIC]<android.os.Parcel: FileDescriptor openFileDescriptor(String,int)>    ---->    android.system.Os#open(String, int, int)
<android.location.LocationManager: void removeGpsMeasurementListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #unregisterGnssMeasurementsCallback} instead.
 * @hide
 * @deprecated use {@link #unregisterGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)}
 * instead.
 */
====>[HIDDEN]<android.location.LocationManager: void removeGpsMeasurementListener(Listener)>    ---->    #unregisterGnssMeasurementsCallback(GnssMeasurementsEvent.Callback)
<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>
/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedObject(long,byte[])>    ---->    #write
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether the texture coordinate passed from the
 * vertex program is replaced with an openGL internal point
 * sprite texture coordinate
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setPointSpriteTexCoordinateReplacement(boolean)>    ---->
<com.android.internal.widget.PagerAdapter: void startUpdate(View)>
/**
 * Called when a change in the shown pages is going to start being made.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #startUpdate(android.view.ViewGroup)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void startUpdate(View)>    ---->    #startUpdate(android.view.ViewGroup)
<android.webkit.PluginData: InputStream getInputStream()>
/**
 * Returns the input stream that contains the plugin content.
 *
 * @return An InputStream instance with the plugin content.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: InputStream getInputStream()>    ---->
<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View,int)>
/**
 * Simulate touching the center of a view and dragging to the top of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param stepCount How many move steps to include in the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToTop(ActivityInstrumentationTestCase,View,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<java.net.URLConnection: void setDefaultRequestProperty(String,String)>
/**
 * Sets the default value of a general request property. When a
 * {@code URLConnection} is created, it is initialized with
 * these properties.
 *
 * @param   key     the keyword by which the request is known
 * (e.g., "{@code Accept}").
 * @param   value   the value associated with the key.
 *
 * @see java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)
 *
 * @deprecated The instance specific setRequestProperty method
 * should be used after an appropriate instance of URLConnection
 * is obtained. Invoking this method will have no effect.
 *
 * @see #getDefaultRequestProperty(java.lang.String)
 */
====>[PUBLIC]<java.net.URLConnection: void setDefaultRequestProperty(String,String)>    ---->    #getDefaultRequestProperty(java.lang.String)
<android.service.voice.VoiceInteractionSession.PickOptionRequest: CharSequence getPrompt()>
/**
 * Return the prompt informing the user of what they are picking, as per
 * {@link android.app.VoiceInteractor.PickOptionRequest VoiceInteractor.PickOptionRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows multiple voice prompts.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.PickOptionRequest: CharSequence getPrompt()>    ---->    #getVoicePrompt()
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)>
/**
 * Returns whether the visual voicemail client is enabled.
 *
 * @param phoneAccountHandle the phone account to check for.
 * @return {@code true} when the visual voicemail client is enabled for this client
 * @hide
 * @deprecated Visual voicemail no longer in telephony. {@link VisualVoicemailService} should
 * be implemented instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(PhoneAccountHandle)>    ---->    VisualVoicemailService
<android.net.wifi.WifiManager: void cancelWps(WpsCallback)>
/**
 * WPS support has been deprecated from Client mode and this method will immediately trigger
 * {@link WpsCallback#onFailed(int)} with a generic error.
 *
 * @param listener for callbacks on success or failure. Can be null.
 * @throws IllegalStateException if the WifiManager instance needs to be initialized again
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void cancelWps(WpsCallback)>    ---->
Inconsistency (Non-Documentation):<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: void setParameters(Parameters)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\camera2\portability\AndroidCameraAgentImpl.java
<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: void setParameters(Parameters)>

====>[PUBLIC]<com.android.ex.camera2.portability.AndroidCameraAgentImpl.AndroidCameraProxyImpl: void setParameters(Parameters)>    ---->
<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from an application resource
 *
 * @param rs Context to which the object will belong.
 * @param res resource manager used for loading
 * @param id resource to create FileA3D from
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromResource(RenderScript,Resources,int)>    ---->
<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)>
/**
 * @deprecated in API 16
 * Set the per-component bit depth for color (red, green, blue).  This
 * configures the surface for an unsigned integer buffer type.
 *
 * @param minimum
 * @param preferred
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL.SurfaceConfig: void setColor(int,int)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getMaxScrollX()>
/**
 * Gets the max scroll offset of the source left edge in pixels.
 *
 * @return The max scroll.
 *
 * @deprecated Use {@link #getMaxScrollX(AccessibilityRecord)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getMaxScrollX()>    ---->    #getMaxScrollX(AccessibilityRecord)
<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(ComponentName,String)>
/**
 * Called by a profile owner or device owner to grant permission to a package to manage
 * application restrictions for the calling user via {@link #setApplicationRestrictions} and
 * {@link #getApplicationRestrictions}.
 * <p>
 * This permission is persistent until it is later cleared by calling this method with a
 * {@code null} value or uninstalling the managing package.
 * <p>
 * The supplied application restriction managing package must be installed when calling this
 * API, otherwise an {@link NameNotFoundException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The package name which will be given access to application restrictions
 * APIs. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if {@code packageName} is not found
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(ComponentName,String)>    ---->
<android.graphics.Shader: void <init>()>
/**
 * @deprecated Use subclass constructors directly instead.
 */
====>[PUBLIC]<android.graphics.Shader: void <init>()>    ---->    subclass constructors directly
<android.content.IntentSender: String getTargetPackage()>
/**
 * @deprecated Renamed to {@link #getCreatorPackage()}.
 */
====>[PUBLIC]<android.content.IntentSender: String getTargetPackage()>    ---->    #getCreatorPackage()
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(Context,int,int)>
/**
 * @deprecated use {@link #action(VisibilityLoggerMixin, int, int)}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(Context,int,int)>    ---->    #action(VisibilityLoggerMixin, int, int)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])>
/**
 * Update the specified message on the SIM.
 *
 * @param messageIndex record index of message to update
 * @param newStatus new message status (STATUS_ON_SIM_READ,
 * STATUS_ON_SIM_UNREAD, STATUS_ON_SIM_SENT,
 * STATUS_ON_SIM_UNSENT, STATUS_ON_SIM_FREE)
 * @param pdu the raw PDU to store
 * @return true for success
 * @deprecated Use android.telephony.SmsManager.
 * {@hide}
 */
====>[HIDDEN]<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])>    ---->
<com.android.internal.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>
/**
 * Set a listener that will be notified of any changes in scroll state or position.
 *
 * @param listener Listener to set or null to clear
 *
 * @deprecated Use {@link #addOnScrollListener(OnScrollListener)} and
 * {@link #removeOnScrollListener(OnScrollListener)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>    ---->    #addOnScrollListener(OnScrollListener)
<com.android.internal.telephony.RIL: void getLastPdpFailCause(Message)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.internal.telephony.RIL: void getLastPdpFailCause(Message)>    ---->
<android.webkit.PluginData: void <init>(InputStream,long,Map<String, String[]>,int)>
/**
 * Creates a PluginData instance.
 *
 * @param stream The stream that supplies content for the plugin.
 * @param length The length of the plugin content.
 * @param headers The response headers. Map of
 * lowercase header name to [ unmodified header name, header value]
 * @param length The HTTP response status code.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: void <init>(InputStream,long,Map<String, String[]>,int)>    ---->
<android.net.TrafficStats: long getUidTcpTxSegments(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpTxSegments(int)>    ---->    #getUidTxPackets(int)
<com.android.internal.telephony.uicc.UiccCard: void unregisterForCarrierPrivilegeRulesLoaded(Handler)>
/**
 * @deprecated Please use
 * {@link UiccProfile#unregisterForCarrierPrivilegeRulesLoaded(Handler)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void unregisterForCarrierPrivilegeRulesLoaded(Handler)>    ---->    UiccProfile#unregisterForCarrierPrivilegeRulesLoaded(Handler)
<androidx.legacy.widget.Space: void onMeasure(int,int)>
/**
 * @deprecated Use framework {@link android.widget.Space} class instead.
 */
====>[PUBLIC]<androidx.legacy.widget.Space: void onMeasure(int,int)>    ---->    android.widget.Space
<android.telephony.CellIdentityGsm: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getMcc()>    ---->    #getMccString
<java.util.Date: void setHours(int)>
/**
 * Sets the hour of this <tt>Date</tt> object to the specified value.
 * This <tt>Date</tt> object is modified so that it represents a point
 * in time within the specified hour of the day, with the year, month,
 * date, minute, and second the same as before, as interpreted in the
 * local time zone.
 *
 * @param   hours   the hour value.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.HOUR_OF_DAY, int hours)</code>.
 */
====>[PUBLIC]<java.util.Date: void setHours(int)>    ---->
<com.android.internal.telephony.uicc.UiccCard: String getOperatorBrandOverride()>
/**
 * @deprecated Please use {@link UiccProfile#getOperatorBrandOverride()} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: String getOperatorBrandOverride()>    ---->    UiccProfile#getOperatorBrandOverride()
<androidx.appcompat.app.ActionBar: void removeTab(Tab)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param tab The tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void removeTab(Tab)>    ---->
<android.database.AbstractWindowedCursor: boolean isFloat(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isFloat(int)>    ---->    #getType
<androidx.cursoradapter.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor,boolean)>
/**
 * Constructor with default behavior as per
 * {@link CursorAdapter#CursorAdapter(Context, Cursor, boolean)}; it is recommended
 * you not use this, but instead {@link #ResourceCursorAdapter(Context, int, Cursor, int)}.
 * When using this constructor, {@link #FLAG_REGISTER_CONTENT_OBSERVER}
 * will always be set.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param context The context where the ListView associated with this adapter is running
 * @param layout resource identifier of a layout file that defines the views
 * for this list item.  Unless you override them later, this will
 * define both the item views and the drop down views.
 * @param c The cursor from which to get the data.
 * @param autoRequery If true the adapter will call requery() on the
 * cursor whenever it changes so the most recent
 * data is always displayed.  Using true here is discouraged.
 */
====>[PUBLIC]<androidx.cursoradapter.widget.ResourceCursorAdapter: void <init>(Context,int,Cursor,boolean)>    ---->    android.app.LoaderManager
<android.webkit.WebSettings: String getPluginsPath()>
/**
 * Gets the directory that contains the plugin libraries. This method is
 * obsolete since each plugin is now loaded from its own package.
 *
 * @return an empty string
 * @deprecated This method is no longer used as plugins are loaded from
 * their own APK via the system's package manager.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: String getPluginsPath()>    ---->
<android.telephony.CellIdentityGsm: int getPsc()>
/**
 * @deprecated Primary Scrambling Code is not applicable to GSM.
 * @return Integer.MAX_VALUE, undefined for GSM
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getPsc()>    ---->
<android.widget.TimePicker: Integer getCurrentHour()>
/**
 * @return the currently selected hour, in the range (0-23)
 * @deprecated Use {@link #getHour()}
 */
====>[PUBLIC]<android.widget.TimePicker: Integer getCurrentHour()>    ---->    #getHour()
<android.view.ViewDebug: void stopRecyclerTracing()>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void stopRecyclerTracing()>    ---->
<android.preference.PreferenceActivity: void setPreferenceScreen(PreferenceScreen)>
/**
 * Sets the root of the preference hierarchy that this activity is showing.
 *
 * @param preferenceScreen The root {@link PreferenceScreen} of the preference hierarchy.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void setPreferenceScreen(PreferenceScreen)>    ---->
<androidx.appcompat.app.ActionBar: int getTabCount()>
/**
 * Returns the number of tabs currently registered with the action bar.
 *
 * @return Tab count
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: int getTabCount()>    ---->
<android.media.AudioManager: void setParameter(String,String)>
/**
 * @hide
 * @deprecated Use {@link #setParameters(String)} instead
 */
====>[HIDDEN]<android.media.AudioManager: void setParameter(String,String)>    ---->    #setParameters(String)
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>
/**
 * Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of
 * the activity changed.
 * <p>Call when the multi-window mode of the activity changed.
 *
 * @see Fragment#onMultiWindowModeChanged
 * @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}
 */
====>[PUBLIC]<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>    ---->    #dispatchMultiWindowModeChanged(boolean, Configuration)
<java.util.Date: int getTimezoneOffset()>
/**
 * Returns the offset, measured in minutes, for the local time zone
 * relative to UTC that is appropriate for the time represented by
 * this <code>Date</code> object.
 * <p>
 * For example, in Massachusetts, five time zones west of Greenwich:
 * <blockquote><pre>
 * new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>
 * because on February 14, 1996, standard time (Eastern Standard Time)
 * is in use, which is offset five hours from UTC; but:
 * <blockquote><pre>
 * new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>
 * because on June 1, 1996, daylight saving time (Eastern Daylight Time)
 * is in use, which is offset only four hours from UTC.<p>
 * This method produces the same result as if it computed:
 * <blockquote><pre>
 * (this.getTime() - UTC(this.getYear(),
 * this.getMonth(),
 * this.getDate(),
 * this.getHours(),
 * this.getMinutes(),
 * this.getSeconds())) / (60 * 1000)
 * </pre></blockquote>
 *
 * @return  the time-zone offset, in minutes, for the current time zone.
 * @see     java.util.Calendar#ZONE_OFFSET
 * @see     java.util.Calendar#DST_OFFSET
 * @see     java.util.TimeZone#getDefault
 * @deprecated As of JDK version 1.1,
 * replaced by <code>-(Calendar.get(Calendar.ZONE_OFFSET) +
 * Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code>.
 */
====>[PUBLIC]<java.util.Date: int getTimezoneOffset()>    ---->
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean)>
/**
 * Constructor with no subtype ID specified.
 * @deprecated use {@link InputMethodSubtypeBuilder} instead.
 * Arguments for this constructor have the same meanings as
 * {@link InputMethodSubtype#InputMethodSubtype(int, int, String, String, String, boolean,
 * boolean, int)} except "id".
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,String,String,String,boolean,boolean)>    ---->    InputMethodSubtypeBuilder
<android.view.ViewGroup: int getPersistentDrawingCache()>
/**
 * Returns an integer indicating what types of drawing caches are kept in memory.
 *
 * @see #setPersistentDrawingCache(int)
 * @see #setAnimationCacheEnabled(boolean)
 *
 * @return one or a combination of {@link #PERSISTENT_NO_CACHE},
 * {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}
 * and {@link #PERSISTENT_ALL_CACHES}
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: int getPersistentDrawingCache()>    ---->    #setLayerType(int, Paint)
<androidx.leanback.media.PlaybackControlGlue: void setControlsRowPresenter(PlaybackControlsRowPresenter)>
/**
 * Sets the controls row Presenter to be managed by the glue layer.
 * @deprecated PlaybackControlGlue supports any PlaybackRowPresenter, use
 * {@link #setPlaybackRowPresenter(PlaybackRowPresenter)}.
 */
====>[PUBLIC]<androidx.leanback.media.PlaybackControlGlue: void setControlsRowPresenter(PlaybackControlsRowPresenter)>    ---->    #setPlaybackRowPresenter(PlaybackRowPresenter)
<android.webkit.PluginData: Map<String, String[]> getHeaders()>
/**
 * Returns the HTTP response headers associated with the plugin
 * content.
 *
 * @return A Map<String, String[]> containing all headers. The
 * mapping is 'lowercase header name' to ['unmodified header
 * name', header value].
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: Map<String, String[]> getHeaders()>    ---->
<android.os.Debug: void resetGlobalAllocSize()>
/**
 * Clears the global size of objects allocated.
 * @see #getGlobalAllocSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalAllocSize()>    ---->
<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last index set added to the
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: int getCurrentIndexSetIndex()>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: void setWallpaper(InputStream)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void setWallpaper(InputStream)>

====>[PUBLIC]<android.app.ContextImpl: void setWallpaper(InputStream)>    ---->
<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()>
/**
 * @deprecated in API 16
 * Specifies whether vertices are rendered as screen aligned
 * elements of a specified size
 * @return whether point sprites are enabled
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: boolean isPointSpriteEnabled()>    ---->
<androidx.core.view.MenuItemCompat: MenuItem setActionView(MenuItem,View)>
/**
 * Set an action view for this menu item. An action view will be displayed in place
 * of an automatically generated menu item element in the UI when this item is shown
 * as an action within a parent.
 *
 * @param item the item to change
 * @param view View to use for presenting this item to the user.
 * @return This Item so additional setters can be called.
 *
 * @see #setShowAsAction(MenuItem, int)
 *
 * @deprecated Use {@link MenuItem#setActionView(View)} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: MenuItem setActionView(MenuItem,View)>    ---->    MenuItem#setActionView(View)
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setItemCount(int)>
/**
 * Sets the number of items that can be visited.
 *
 * @param itemCount The number of items.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setItemCount(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setItemCount(int)>    ---->    AccessibilityRecord#setItemCount(int)
<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Phones: CharSequence getDisplayLabel(Context,int,CharSequence,CharSequence[])>    ---->    android.provider.ContactsContract
<android.telephony.TelephonyManager: void answerRingingCall()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#acceptRingingCall} instead
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void answerRingingCall()>    ---->    android.telecom.TelecomManager#acceptRingingCall
<android.app.Dialog: void <init>(Context,boolean,Message)>
/**
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.app.Dialog: void <init>(Context,boolean,Message)>    ---->
Inconsistency (Non-Documentation):<android.net.SntpClient: boolean requestTime(String,int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\SntpClient.java
<android.net.SntpClient: boolean requestTime(String,int)>

====>[PUBLIC]<android.net.SntpClient: boolean requestTime(String,int)>    ---->
<java.util.Date: void setMinutes(int)>
/**
 * Sets the minutes of this <tt>Date</tt> object to the specified value.
 * This <tt>Date</tt> object is modified so that it represents a point
 * in time within the specified minute of the hour, with the year, month,
 * date, hour, and second the same as before, as interpreted in the
 * local time zone.
 *
 * @param   minutes   the value of the minutes.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.MINUTE, int minutes)</code>.
 */
====>[PUBLIC]<java.util.Date: void setMinutes(int)>    ---->
<androidx.core.view.ViewCompat: int getOverScrollMode(View)>
/**
 * Returns the over-scroll mode for this view. The result will be
 * one of {@link #OVER_SCROLL_ALWAYS} (default), {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}
 * (allow over-scrolling only if the view content is larger than the container),
 * or {@link #OVER_SCROLL_NEVER}.
 *
 * @param v The View against which to invoke the method.
 * @return This view's over-scroll mode.
 * @deprecated Call {@link View#getOverScrollMode()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int getOverScrollMode(View)>    ---->    View#getOverScrollMode()
<androidx.legacy.app.FragmentStatePagerAdapter: void startUpdate(ViewGroup)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void startUpdate(ViewGroup)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.webkit.WebSettings: void setNavDump(boolean)>
/**
 * Enables dumping the pages navigation cache to a text file. The default
 * is {@code false}.
 *
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setNavDump(boolean)>    ---->
<android.os.UserManager: boolean isLinkedUser()>
/**
 * @hide
 * @deprecated Use {@link #isRestrictedProfile()}
 */
====>[HIDDEN]<android.os.UserManager: boolean isLinkedUser()>    ---->    #isRestrictedProfile()
<android.os.Debug: void resetGlobalFreedSize()>
/**
 * Clears the global size of objects freed.
 * @see #getGlobalFreedSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalFreedSize()>    ---->
<android.app.Activity: boolean showDialog(int,Bundle)>
/**
 * Show a dialog managed by this activity.  A call to {@link #onCreateDialog(int, Bundle)}
 * will be made with the same id the first time this is called for a given
 * id.  From thereafter, the dialog will be automatically saved and restored.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using a {@link DialogFragment} instead.</em>
 *
 * <p>Each time a dialog is shown, {@link #onPrepareDialog(int, Dialog, Bundle)} will
 * be made to provide an opportunity to do any timely preparation.
 *
 * @param id The id of the managed dialog.
 * @param args Arguments to pass through to the dialog.  These will be saved
 * and restored for you.  Note that if the dialog is already created,
 * {@link #onCreateDialog(int, Bundle)} will not be called with the new
 * arguments but {@link #onPrepareDialog(int, Dialog, Bundle)} will be.
 * If you need to rebuild the dialog, call {@link #removeDialog(int)} first.
 * @return Returns true if the Dialog was created; false is returned if
 * it is not created because {@link #onCreateDialog(int, Bundle)} returns false.
 *
 * @see Dialog
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #dismissDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: boolean showDialog(int,Bundle)>    ---->    DialogFragment
<android.os.Debug: void changeDebugPort(int)>
/**
 * Change the JDWP port.
 *
 * @deprecated no longer needed or useful
 */
====>[PUBLIC]<android.os.Debug: void changeDebugPort(int)>    ---->
<android.renderscript.RSTextureView: void pause()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is paused. The owner of this view must
 * call this method when the activity is paused. Calling this method will
 * pause the rendering thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void pause()>    ---->
<androidx.navigation.NavOptions.Builder: Builder setLaunchDocument(boolean)>
/**
 * Launch a navigation target as a document if you want it to appear as its own
 * entry in the system Overview screen. If the same document is launched multiple times
 * it will not create a new task, it will bring the existing document task to the front.
 *
 * <p>If the user presses the system Back key from a new document task they will land
 * on their previous task. If the user reached the document task from the system Overview
 * screen they will be taken to their home screen.</p>
 *
 * @param launchDocument true to launch a new document task
 * @deprecated As per the {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}
 * documentation, it is recommended to use {@link android.R.attr#documentLaunchMode} on an
 * Activity you wish to launch as a new document.
 */
====>[PUBLIC]<androidx.navigation.NavOptions.Builder: Builder setLaunchDocument(boolean)>    ---->    android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
<android.hardware.radio.RadioTuner: void setAnalogForced(boolean)>
/**
 * Forces the analog playback for the supporting radio technology.
 *
 * User may disable digital playback for FM HD Radio or hybrid FM/DAB with
 * this option. This is purely user choice, ie. does not reflect digital-
 * analog handover managed from the HAL implementation side.
 *
 * Some radio technologies may not support this, ie. DAB.
 *
 * @param isForced {@code true} to force analog, {@code false} for a default behaviour.
 * @throws IllegalStateException if the switch is not supported at current
 * configuration.
 * @deprecated Use {@link setConfigFlag(int, boolean)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: void setAnalogForced(boolean)>    ---->    setConfigFlag(int, boolean)
<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)>
/**
 * Deprecated
 * returns false
 * @hide
 * @deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: boolean setEnableAutoJoinWhenAssociated(boolean)>    ---->
<android.webkit.Plugin: void setPath(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setPath(String)>    ---->
<android.os.Debug: void resetGlobalExternalAllocCount()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalAllocCount()>    ---->
<java.lang.String: void <init>(byte[],int,int,int)>
/**
 * Allocates a new {@code String} constructed from a subarray of an array
 * of 8-bit integer values.
 *
 * <p> The {@code offset} argument is the index of the first byte of the
 * subarray, and the {@code count} argument specifies the length of the
 * subarray.
 *
 * <p> Each {@code byte} in the subarray is converted to a {@code char} as
 * specified in the method above.
 *
 * @deprecated This method does not properly convert bytes into characters.
 * As of JDK&nbsp;1.1, the preferred way to do this is via the
 * {@code String} constructors that take a {@link
 * java.nio.charset.Charset}, charset name, or that use the platform's
 * default charset.
 *
 * @param  ascii
 * The bytes to be converted to characters
 *
 * @param  hibyte
 * The top 8 bits of each 16-bit Unicode code unit
 *
 * @param  offset
 * The initial offset
 * @param  count
 * The length
 *
 * @throws  IndexOutOfBoundsException
 * If the {@code offset} or {@code count} argument is invalid
 *
 * @see  #String(byte[], int)
 * @see  #String(byte[], int, int, java.lang.String)
 * @see  #String(byte[], int, int, java.nio.charset.Charset)
 * @see  #String(byte[], int, int)
 * @see  #String(byte[], java.lang.String)
 * @see  #String(byte[], java.nio.charset.Charset)
 * @see  #String(byte[])
 */
====>[PUBLIC]<java.lang.String: void <init>(byte[],int,int,int)>    ---->    the platform's  default charset.   @param  ascii  The bytes to be converted to characters   @param  hibyte  The top 8 bits of each 16-bit Unicode code unit   @param  offset  The initial offset  @param  count  The length   @throws  IndexOutOfBoundsException  If the {@code offset} or {@code count} argument is invalid   @see  #String(byte[], int)  @see  #String(byte[], int, int, java.lang.String)  @see  #String(byte[], int, int, java.nio.charset.Charset)  @see  #String(byte[], int, int)  @see  #String(byte[], java.lang.String)  @see  #String(byte[], java.nio.charset.Charset)  @see  #String(byte[]) /@Deprecatedpublic String(byte[] ascii, int hibyte, int offset, int count) {    // Android-changed: Constructor unsupported as all calls are intercepted by the runtime.    throw new UnsupportedOperationException("Use StringFactory
Inconsistency (Non-Documentation):<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\StorageManagerService.java
<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)>
/**
 * MediaProvider has a ton of code that makes assumptions about storage
 * paths never changing, so we outright kill them to pick up new state.
 */
====>[PUBLIC]<com.android.server.StorageManagerService: void killMediaProvider(List<UserInfo>)>    ---->
<com.android.setupwizardlib.GlifListLayout: void setDividerInset(int)>
/**
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.GlifListLayout: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(UUID[],LeScanCallback)>
/**
 * Starts a scan for Bluetooth LE devices, looking for devices that
 * advertise given services.
 *
 * <p>Devices which advertise all specified services are reported using the
 * {@link LeScanCallback#onLeScan} callback.
 *
 * @param serviceUuids Array of services to look for
 * @param callback the callback LE scan results are delivered
 * @return true, if the scan was started successfully
 * @deprecated use {@link BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)}
 * instead.
 */
====>[PUBLIC]<android.bluetooth.BluetoothAdapter: boolean startLeScan(UUID[],LeScanCallback)>    ---->    BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)
<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster: ProgramRaster CULL_FRONT(RenderScript)>    ---->
<android.provider.Contacts.Intents.Insert: void <init>()>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Intents.Insert: void <init>()>    ---->    android.provider.ContactsContract
<android.app.usage.StorageStatsManager: StorageStats queryStatsForUser(String,UserHandle)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: StorageStats queryStatsForUser(String,UserHandle)>    ---->
<android.widget.TimePicker: Integer getCurrentMinute()>
/**
 * @return the currently selected minute, in the range (0-59)
 * @deprecated Use {@link #getMinute()}
 */
====>[PUBLIC]<android.widget.TimePicker: Integer getCurrentMinute()>    ---->    #getMinute()
<android.view.inputmethod.InputMethodManager: void updateCursor(View,int,int,int,int)>
/**
 * Report the current cursor location in its window.
 *
 * @deprecated Use {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void updateCursor(View,int,int,int,int)>    ---->    #updateCursorAnchorInfo(View, CursorAnchorInfo)
Inconsistency (Non-Documentation):<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\Plugin.java
<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)>

====>[PUBLIC]<android.webkit.Plugin.DefaultClickHandler: void handleClickEvent(Context)>    ---->
<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)>
/**
 * Remove a page for the given position.  The adapter is responsible
 * for removing the view from its container, although it only must ensure
 * this is done by the time it returns from {@link #finishUpdate(android.view.View)}.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position to be removed.
 * @param object The same object that was returned by
 * {@link #instantiateItem(android.view.View, int)}.
 *
 * @deprecated Use {@link #destroyItem(android.view.ViewGroup, int, Object)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: void destroyItem(View,int,Object)>    ---->    #destroyItem(android.view.ViewGroup, int, Object)
<android.content.pm.PackageManager: void getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)>
/**
 * Retrieve the size information for a package.
 * Since this may take a little while, the result will
 * be posted back to the given observer.  The calling context
 * should have the {@link android.Manifest.permission#GET_PACKAGE_SIZE} permission.
 *
 * @param packageName The name of the package whose size information is to be retrieved
 * @param userId The user whose size information should be retrieved.
 * @param observer An observer callback to get notified when the operation
 * is complete.
 * {@link android.content.pm.IPackageStatsObserver#onGetStatsCompleted(PackageStats, boolean)}
 * The observer's callback is invoked with a PackageStats object(containing the
 * code, data and cache sizes of the package) and a boolean value representing
 * the status of the operation. observer may be null to indicate that
 * no callback is desired.
 *
 * @deprecated use {@link StorageStatsManager} instead.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void getPackageSizeInfoAsUser(String,int,IPackageStatsObserver)>    ---->    StorageStatsManager
<android.service.voice.VoiceInteractionSession.ConfirmationRequest: CharSequence getPrompt()>
/**
 * Return the prompt informing the user of what will happen, as per
 * {@link android.app.VoiceInteractor.ConfirmationRequest
 * VoiceInteractor.ConfirmationRequest}.
 * @deprecated Prefer {@link #getVoicePrompt()} which allows multiple voice prompts.
 */
====>[PUBLIC]<android.service.voice.VoiceInteractionSession.ConfirmationRequest: CharSequence getPrompt()>    ---->    #getVoicePrompt()
<android.os.Parcel: FileDescriptor dupFileDescriptor(FileDescriptor)>
/**
 * @deprecated use {@link android.system.Os#dup(FileDescriptor)}
 */
====>[PUBLIC]<android.os.Parcel: FileDescriptor dupFileDescriptor(FileDescriptor)>    ---->    android.system.Os#dup(FileDescriptor)
<android.hardware.location.NanoApp: void <init>(int,byte[])>
/**
 * Initialize a NanoApp with the given id and binary.
 *
 * While this sets defaults for other fields, users will want to provide
 * other values for those fields in most cases.
 *
 * @see #setPublisher(String)
 * @see #setName(String)
 * @see #setAppVersion(int)
 * @see #setNeededReadMemBytes(int)
 * @see #setNeededWriteMemBytes(int)
 * @see #setNeededExecMemBytes(int)
 * @see #setNeededSensors(int[])
 * @see #setOutputEvents(int[])
 *
 * @deprecated Use NanoApp(long, byte[]) instead
 */
====>[PUBLIC]<android.hardware.location.NanoApp: void <init>(int,byte[])>    ---->    NanoApp(long, byte[])
<java.lang.System: void runFinalizersOnExit(boolean)>
/**
 * Enable or disable finalization on exit; doing so specifies that the
 * finalizers of all objects that have finalizers that have not yet been
 * automatically invoked are to be run before the Java runtime exits.
 * By default, finalization on exit is disabled.
 *
 * <p>If there is a security manager,
 * its <code>checkExit</code> method is first called
 * with 0 as its argument to ensure the exit is allowed.
 * This could result in a SecurityException.
 *
 * @deprecated  This method is inherently unsafe.  It may result in
 * finalizers being called on live objects while other threads are
 * concurrently manipulating those objects, resulting in erratic
 * behavior or deadlock.
 * @param value indicating enabling or disabling of finalization
 * @throws  SecurityException
 * if a security manager exists and its <code>checkExit</code>
 * method doesn't allow the exit.
 *
 * @see     java.lang.Runtime#exit(int)
 * @see     java.lang.Runtime#gc()
 * @see     java.lang.SecurityManager#checkExit(int)
 * @since   JDK1.1
 */
====>[PUBLIC]<java.lang.System: void runFinalizersOnExit(boolean)>    ---->    java.lang.Runtime#exit(int)
<androidx.core.view.VelocityTrackerCompat: float getXVelocity(VelocityTracker,int)>
/**
 * Call {@link VelocityTracker#getXVelocity(int)}.
 * If running on a pre-{@link android.os.Build.VERSION_CODES#HONEYCOMB} device,
 * returns {@link VelocityTracker#getXVelocity()}.
 *
 * @deprecated Use {@link VelocityTracker#getXVelocity(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.VelocityTrackerCompat: float getXVelocity(VelocityTracker,int)>    ---->    VelocityTracker#getXVelocity(int)
<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(PackageInfo)>
/**
 * Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatus}.
 * @deprecated Please use {@link UiccProfile#getCarrierPrivilegeStatus(PackageInfo)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(PackageInfo)>    ---->    UiccProfile#getCarrierPrivilegeStatus(PackageInfo)
<com.android.internal.telephony.test.SimulatedCommands: void getLastPdpFailCause(Message)>
/**
 * @deprecated
 */
====>[PUBLIC]<com.android.internal.telephony.test.SimulatedCommands: void getLastPdpFailCause(Message)>    ---->
<android.app.KeyguardManager: void dismissKeyguard(Activity,KeyguardDismissCallback,Handler)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.KeyguardManager: void dismissKeyguard(Activity,KeyguardDismissCallback,Handler)>    ---->
<android.location.GnssMeasurement: void setCarrierCycles(long)>
/**
 * Sets the number of full carrier cycles between the satellite and the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void setCarrierCycles(long)>    ---->    #setAccumulatedDeltaRangeMeters(double)
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>
/**
 * Set a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link #addPage}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>    ---->
<androidx.core.view.ViewCompat: void setX(View,float)>
/**
 * Sets the visual x position of this view, in pixels. This is equivalent to setting the
 * {@link #setTranslationX(View, float) translationX} property to be the difference between
 * the x value passed in and the current left property of the view as determined
 * by the layout bounds.
 *
 * @param value The visual x position of this view, in pixels.
 *
 * @deprecated Use {@link View#setX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setX(View,float)>    ---->    View#setX(float)
<android.provider.Settings.Secure: boolean setLocationModeForUser(ContentResolver,int,int)>
/**
 * Thread-safe method for setting the location mode to one of
 * {@link #LOCATION_MODE_HIGH_ACCURACY}, {@link #LOCATION_MODE_SENSORS_ONLY},
 * {@link #LOCATION_MODE_BATTERY_SAVING}, or {@link #LOCATION_MODE_OFF}.
 * Necessary because the mode is a composite of the underlying location provider
 * settings.
 *
 * @param cr the content resolver to use
 * @param mode such as {@link #LOCATION_MODE_HIGH_ACCURACY}
 * @param userId the userId for which to change mode
 * @return true if the value was set, false on database errors
 *
 * @throws IllegalArgumentException if mode is not one of the supported values
 *
 * @deprecated To enable/disable location, use
 * {@link LocationManager#setLocationEnabledForUser(boolean, int)}.
 * To enable/disable a specific location provider, use
 * {@link LocationManager#setProviderEnabledForUser(String, boolean, int)}.
 */
====>[PUBLIC]<android.provider.Settings.Secure: boolean setLocationModeForUser(ContentResolver,int,int)>    ---->    LocationManager#setLocationEnabledForUser(boolean, int)
<android.view.View: void destroyDrawingCache()>
/**
 * <p>Frees the resources used by the drawing cache. If you call
 * {@link #buildDrawingCache()} manually without calling
 * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you
 * should cleanup the cache with this method afterwards.</p>
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #buildDrawingCache()
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void destroyDrawingCache()>    ---->    #setLayerType(int, Paint)
<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>
/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 * @param attributes {@link AudioAttributes} corresponding to the vibration. For example,
 * specify {@link AudioAttributes#USAGE_ALARM} for alarm vibrations or
 * {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE} for
 * vibrations associated with incoming calls.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long[],int,AudioAttributes)>    ---->    #vibrate(VibrationEffect, AudioAttributes)
<androidx.room.RxRoom: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.room.RxRoom: void <init>()>    ---->
<java.util.Date: int getDay()>
/**
 * Returns the day of the week represented by this date. The
 * returned value (<tt>0</tt> = Sunday, <tt>1</tt> = Monday,
 * <tt>2</tt> = Tuesday, <tt>3</tt> = Wednesday, <tt>4</tt> =
 * Thursday, <tt>5</tt> = Friday, <tt>6</tt> = Saturday)
 * represents the day of the week that contains or begins with
 * the instant in time represented by this <tt>Date</tt> object,
 * as interpreted in the local time zone.
 *
 * @return  the day of the week represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.DAY_OF_WEEK)</code>.
 */
====>[PUBLIC]<java.util.Date: int getDay()>    ---->
<android.app.Activity: boolean isBackgroundVisibleBehind()>
/**
 * Translucent activities may call this to determine if there is an activity below them that
 * is currently set to be visible in the background.
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 *
 * @return true if an activity below is set to visible according to the most recent call to
 * {@link #requestVisibleBehind(boolean)}, false otherwise.
 *
 * @see #requestVisibleBehind(boolean)
 * @see #onVisibleBehindCanceled()
 * @see #onBackgroundVisibleBehindChanged(boolean)
 * @hide
 */
====>[HIDDEN]<android.app.Activity: boolean isBackgroundVisibleBehind()>    ---->    #requestVisibleBehind(boolean)
<android.app.Notification.Builder: void <init>(Context)>
/**
 * @deprecated use {@link Notification.Builder#Notification.Builder(Context, String)}
 * instead. All posted Notifications must specify a NotificationChannel Id.
 */
====>[PUBLIC]<android.app.Notification.Builder: void <init>(Context)>    ---->    Notification.Builder#Notification.Builder(Context, String)
<com.android.internal.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>
/**
 * @deprecated use {@link #findViewHolderForLayoutPosition(int)} or
 * {@link #findViewHolderForAdapterPosition(int)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: ViewHolder findViewHolderForPosition(int)>    ---->    #findViewHolderForLayoutPosition(int)
<android.content.pm.VersionedPackage: int getVersionCode()>
/**
 * @deprecated use {@link #getLongVersionCode()} instead.
 */
====>[PUBLIC]<android.content.pm.VersionedPackage: int getVersionCode()>    ---->    #getLongVersionCode()
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\IpConfigStore.java
<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)>
/**
 * @Deprecated use {@link #readIpConfigurations(String)}
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(String)>    ---->
<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,ResultReceiver)>
/**
 * This method is still kept for a while until android.support.v7.widget.SearchView ver. 26.0
 * is publicly released because previous implementations of that class had relied on this method
 * via reflection.
 *
 * @deprecated This is a hidden API. You should never use this.
 * @hide
 */
====>[HIDDEN]<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,ResultReceiver)>    ---->
Inconsistency (Non-Documentation):<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getPDPContextList(Message)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\telephony\imsphone\ImsPhoneCommandInterface.java
<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getPDPContextList(Message)>

====>[PUBLIC]<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getPDPContextList(Message)>    ---->
<androidx.leanback.app.BrowseFragment: void enableRowScaling(boolean)>
/**
 * @deprecated use {@link BrowseFragment#enableMainFragmentScaling(boolean)} instead.
 *
 * @param enable true to enable row scaling
 */
====>[PUBLIC]<androidx.leanback.app.BrowseFragment: void enableRowScaling(boolean)>    ---->    BrowseFragment#enableMainFragmentScaling(boolean)
<androidx.core.view.ViewCompat: void setRotationX(View,float)>
/**
 * Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
 * Increasing values result in clockwise rotation from the viewpoint of looking down the
 * x axis.
 *
 * @param value The degrees of X rotation.
 *
 * @deprecated Use {@link View#setRotationX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setRotationX(View,float)>    ---->    View#setRotationX(float)
<java.net.Socket: void <init>(String,int,boolean)>
/**
 * Creates a stream socket and connects it to the specified port
 * number on the named host.
 * <p>
 * If the specified host is {@code null} it is the equivalent of
 * specifying the address as
 * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.
 * In other words, it is equivalent to specifying an address of the
 * loopback interface. </p>
 * <p>
 * If the stream argument is {@code true}, this creates a
 * stream socket. If the stream argument is {@code false}, it
 * creates a datagram socket.
 * <p>
 * If the application has specified a server socket factory, that
 * factory's {@code createSocketImpl} method is called to create
 * the actual socket implementation. Otherwise a "plain" socket is created.
 * <p>
 * If there is a security manager, its
 * {@code checkConnect} method is called
 * with the host address and {@code port}
 * as its arguments. This could result in a SecurityException.
 * <p>
 * If a UDP socket is used, TCP/IP related socket options will not apply.
 *
 * @param      host     the host name, or {@code null} for the loopback address.
 * @param      port     the port number.
 * @param      stream   a {@code boolean} indicating whether this is
 * a stream socket or a datagram socket.
 * @exception  IOException  if an I/O error occurs when creating the socket.
 * @exception  SecurityException  if a security manager exists and its
 * {@code checkConnect} method doesn't allow the operation.
 * @exception  IllegalArgumentException if the port parameter is outside
 * the specified range of valid port values, which is between
 * 0 and 65535, inclusive.
 * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
 * @see        java.net.SocketImpl
 * @see        java.net.SocketImplFactory#createSocketImpl()
 * @see        SecurityManager#checkConnect
 * @deprecated Use DatagramSocket instead for UDP transport.
 */
====>[PUBLIC]<java.net.Socket: void <init>(String,int,boolean)>    ---->    DatagramSocket
<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(IBinder)>
/**
 * Returns true if the current IME needs to offer the users ways to switch to a next input
 * method (e.g. a globe key.).
 * When an IME sets supportsSwitchingToNextInputMethod and this method returns true,
 * the IME has to offer ways to to invoke {@link #switchToNextInputMethod} accordingly.
 * <p> Note that the system determines the most appropriate next input method
 * and subtype in order to provide the consistent user experience in switching
 * between IMEs and subtypes.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @deprecated Use {@link InputMethodService#shouldOfferSwitchingToNextInputMethod()}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(IBinder)>    ---->    InputMethodService#shouldOfferSwitchingToNextInputMethod()
<java.sql.Time: void <init>(int,int,int)>
/**
 * Constructs a <code>Time</code> object initialized with the
 * given values for the hour, minute, and second.
 * The driver sets the date components to January 1, 1970.
 * Any method that attempts to access the date components of a
 * <code>Time</code> object will throw a
 * <code>java.lang.IllegalArgumentException</code>.
 * <P>
 * The result is undefined if a given argument is out of bounds.
 *
 * @param hour 0 to 23
 * @param minute 0 to 59
 * @param second 0 to 59
 *
 * @deprecated Use the constructor that takes a milliseconds value
 * in place of this constructor
 */
====>[PUBLIC]<java.sql.Time: void <init>(int,int,int)>    ---->
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>
/**
 * Sets audio routing to the wired headset on or off.
 *
 * @param on set <var>true</var> to route audio to/from wired
 * headset; <var>false</var> disable wired headset audio
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.media.AudioManager: void setWiredHeadsetOn(boolean)>    ---->
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)>
/**
 * @deprecated
 * Use the version that takes a ByteBuffer as the last argument, or the versions that return a String.
 */
====>[PUBLIC]<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,IntBuffer,IntBuffer,IntBuffer,byte)>    ---->
<android.renderscript.ScriptIntrinsicColorMatrix: ScriptIntrinsicColorMatrix create(RenderScript,Element)>
/**
 * Create an intrinsic for applying a color matrix to an
 * allocation.
 *
 * @param rs The RenderScript context
 * @param e Element type for inputs and outputs, As of API 19,
 * this parameter is ignored. The Element type check is
 * performed in the kernel launch.
 *
 * @deprecated Use the single argument version as Element is now
 * ignored.
 *
 * @return ScriptIntrinsicColorMatrix
 */
====>[PUBLIC]<android.renderscript.ScriptIntrinsicColorMatrix: ScriptIntrinsicColorMatrix create(RenderScript,Element)>    ---->
<android.renderscript.ProgramRaster.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: void <init>(RenderScript)>    ---->
<com.android.internal.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>    ---->    #onDraw(Canvas, RecyclerView, RecyclerView.State)
<androidx.legacy.widget.Space: void <init>(Context)>
/**
 * @deprecated Use framework {@link android.widget.Space} class instead.
 */
====>[PUBLIC]<androidx.legacy.widget.Space: void <init>(Context)>    ---->    android.widget.Space
<android.app.Fragment: void onMultiWindowModeChanged(boolean)>
/**
 * Called when the Fragment's activity changes from fullscreen mode to multi-window mode and
 * visa-versa. This is generally tied to {@link Activity#onMultiWindowModeChanged} of the
 * containing Activity.
 *
 * @param isInMultiWindowMode True if the activity is in multi-window mode.
 *
 * @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onMultiWindowModeChanged(boolean)>    ---->    #onMultiWindowModeChanged(boolean, Configuration)
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()>
/**
 * Get the label to display to cancel the action.
 * This is usually an imperative verb like "Cancel".
 *
 * @return the label to display to cancel the action
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: CharSequence getCancelLabel()>    ---->
<android.os.Debug: void resetGlobalGcInvocationCount()>
/**
 * Clears the count of non-concurrent GC invocations.
 * @see #getGlobalGcInvocationCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalGcInvocationCount()>    ---->
<android.net.TrafficStats: long getUidUdpTxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpTxBytes(int)>    ---->    #getUidTxBytes(int)
<android.widget.TimePicker: void setCurrentHour(Integer)>
/**
 * Sets the currently selected hour using 24-hour time.
 *
 * @param currentHour the hour to set, in the range (0-23)
 * @deprecated Use {@link #setHour(int)}
 */
====>[PUBLIC]<android.widget.TimePicker: void setCurrentHour(Integer)>    ---->    #setHour(int)
<android.webkit.Plugin.DefaultClickHandler: void onClick(DialogInterface,int)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin.DefaultClickHandler: void onClick(DialogInterface,int)>    ---->
<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo[],int,boolean)>
/**
 * A batch process of getSuggestions
 * @param textInfos an array of text metadata for a spell checker
 * @param suggestionsLimit the maximum number of suggestions that will be returned
 * @param sequentialWords true if textInfos can be treated as sequential words.
 * @deprecated use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo[],int,boolean)>    ---->    SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)
<android.hardware.SensorManager: boolean registerListener(SensorListener,int)>
/**
 * Registers a listener for given sensors.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
 * instead.
 *
 * @param listener
 * sensor listener object
 *
 * @param sensors
 * a bit masks of the sensors to register to
 *
 * @return <code>true</code> if the sensor is supported and successfully
 * enabled
 */
====>[PUBLIC]<android.hardware.SensorManager: boolean registerListener(SensorListener,int)>    ---->    SensorManager#registerListener(SensorEventListener, Sensor, int)
Inconsistency (Non-Documentation):<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\slice\builders\GridBuilder.java
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon)>
/**
 * Adds an image to the cell that should be displayed as large as the cell allows.
 * There can be at most one image, the first one added will be used, others will be ignored.
 *
 * @param image the image to display in the cell.
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addLargeImage(Icon)>    ---->
<android.os.Debug: int getGlobalClassInitCount()>
/**
 * Returns the number of classes successfully initialized (ie those that executed without
 * throwing an exception) between a {@link #startAllocCounting() start} and
 * {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalClassInitCount()>    ---->
<androidx.core.view.MotionEventCompat: int findPointerIndex(MotionEvent,int)>
/**
 * Call {@link MotionEvent#findPointerIndex(int)}.
 *
 * @deprecated Call {@link MotionEvent#findPointerIndex(int)} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int findPointerIndex(MotionEvent,int)>    ---->    MotionEvent#findPointerIndex(int)
<android.speech.tts.SynthesisRequest: String getText()>
/**
 * Gets the text which should be synthesized.
 * @deprecated As of API level 21, replaced by {@link #getCharSequenceText}.
 */
====>[PUBLIC]<android.speech.tts.SynthesisRequest: String getText()>    ---->    #getCharSequenceText
<androidx.cursoradapter.widget.CursorAdapter: void init(Context,Cursor,boolean)>
/**
 * @deprecated Don't use this, use the normal constructor.  This will
 * be removed in the future.
 */
====>[PUBLIC]<androidx.cursoradapter.widget.CursorAdapter: void init(Context,Cursor,boolean)>    ---->
<android.net.NetworkStatsHistory: void generateRandom(long,long,long)>
/**
 * @deprecated only for temporary testing
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void generateRandom(long,long,long)>    ---->
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)>
/**
 * @deprecated in API 16
 * Specifies whether the varying color passed from the vertex
 * program or the constant color set on the fragment program is
 * used in the final color calculation in the fixed function
 * fragment shader
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setVaryingColor(boolean)>    ---->
<android.media.AudioManager: boolean shouldVibrate(int)>
/**
 * Returns whether a particular type should vibrate according to user
 * settings and the current ringer mode.
 * <p>
 * This shouldn't be needed by most clients that use notifications to
 * vibrate. The notification manager will not vibrate if the policy doesn't
 * allow it, so the client should always set a vibrate pattern and let the
 * notification manager control whether or not to actually vibrate.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @return Whether the type should vibrate at the instant this method is
 * called.
 * @see #setVibrateSetting(int, int)
 * @see #getVibrateSetting(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: boolean shouldVibrate(int)>    ---->    #getRingerMode()
<com.android.ims.ImsManager: boolean isWfcEnabledByUser(Context)>
/**
 * Returns the user configuration of WFC setting
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isWfcEnabledByUser()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isWfcEnabledByUser(Context)>    ---->    #isWfcEnabledByUser()
<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgress(int)>
/**
 * Sets the buffered progress for the playback controls row.
 * If this row is bound to a view, the view will automatically
 * be updated to reflect the new value.
 * @deprecated Use {@link #setBufferedPosition(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgress(int)>    ---->    #setBufferedPosition(long)
<androidx.fragment.app.Fragment: LayoutInflater getLayoutInflater(Bundle)>
/**
 * Override {@link #onGetLayoutInflater(Bundle)} when you need to change the
 * LayoutInflater or call {@link #getLayoutInflater()} when you want to
 * retrieve the current LayoutInflater.
 *
 * @hide
 * @deprecated Override {@link #onGetLayoutInflater(Bundle)} or call
 * {@link #getLayoutInflater()} instead of this method.
 */
====>[HIDDEN]<androidx.fragment.app.Fragment: LayoutInflater getLayoutInflater(Bundle)>    ---->    #onGetLayoutInflater(Bundle)
<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed64(long,long)>
/**
 * Write a single repeated proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSFixed64(long,long)>    ---->    #write
<androidx.drawerlayout.widget.DrawerLayout: void setDrawerListener(DrawerListener)>
/**
 * Set a listener to be notified of drawer events. Note that this method is deprecated
 * and you should use {@link #addDrawerListener(DrawerListener)} to add a listener and
 * {@link #removeDrawerListener(DrawerListener)} to remove a registered listener.
 *
 * @param listener Listener to notify when drawer events occur
 * @deprecated Use {@link #addDrawerListener(DrawerListener)}
 * @see DrawerListener
 * @see #addDrawerListener(DrawerListener)
 * @see #removeDrawerListener(DrawerListener)
 */
====>[PUBLIC]<androidx.drawerlayout.widget.DrawerLayout: void setDrawerListener(DrawerListener)>    ---->    DrawerListener
<com.android.setupwizardlib.SetupWizardListLayout: void setDividerInset(int)>
/**
 * Sets the start inset of the divider. This will use the default divider drawable set in the
 * theme and inset it {@code inset} pixels to the right (or left in RTL layouts).
 *
 * @param inset The number of pixels to inset on the "start" side of the list divider. Typically
 * this will be either {@code @dimen/suw_items_icon_divider_inset} or
 * {@code @dimen/suw_items_text_divider_inset}.
 *
 * @see ListMixin#setDividerInset(int)
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardListLayout: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<com.android.internal.telephony.RIL: void pullLceData(Message)>
/**
 * This will only be called if the LCE service is started in PULL mode, which is
 * only enabled when using Radio HAL versions 1.1 and earlier.
 *
 * It is still possible for vendors to override this behavior and use the 1.1 version
 * of LCE; however, this is strongly discouraged and this functionality will be removed
 * when HAL 1.x support is dropped.
 *
 * @deprecated HAL 1.2 and later use an always-on LCE that relies on indications.
 */
====>[PUBLIC]<com.android.internal.telephony.RIL: void pullLceData(Message)>    ---->
<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasDrawnLw()>
/**
 * Returns true if this window has been shown on screen at some time in
 * the past.  Must be called with the window manager lock held.
 *
 * @deprecated Use {@link #isDrawnLw} or any of the other drawn/visibility methods.
 */
====>[PUBLIC]<com.android.server.policy.WindowManagerPolicy.WindowState: boolean hasDrawnLw()>    ---->    #isDrawnLw
Inconsistency (Non-Documentation):<com.android.server.NativeDaemonEvent: String getRawEvent()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\NativeDaemonEvent.java
<com.android.server.NativeDaemonEvent: String getRawEvent()>

====>[PUBLIC]<com.android.server.NativeDaemonEvent: String getRawEvent()>    ---->
<android.test.mock.MockPackageManager: String getDefaultBrowserPackageName(int)>
/**
 * {@removed}
 */
====>[HIDDEN]<android.test.mock.MockPackageManager: String getDefaultBrowserPackageName(int)>    ---->
<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()>
/**
 * Gets if the collection item is a heading. For example, section
 * heading, table header, etc.
 *
 * @return If the item is a heading.
 * @deprecated Use {@link AccessibilityNodeInfo#isHeading()}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo: boolean isHeading()>    ---->    AccessibilityNodeInfo#isHeading()
<android.webkit.PluginList: void addPlugin(Plugin)>
/**
 * Adds a plugin to the list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void addPlugin(Plugin)>    ---->
<android.view.ViewDebug: void startHierarchyTracing(String,View)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void startHierarchyTracing(String,View)>    ---->
<android.nfc.NdefRecord: void <init>(byte[])>
/**
 * Construct an NDEF Record from raw bytes.<p>
 * This method is deprecated, use {@link NdefMessage#NdefMessage(byte[])}
 * instead. This is because it does not make sense to parse a record:
 * the NDEF binary format is only defined for a message, and the
 * record flags MB and ME do not make sense outside of the context of
 * an entire message.<p>
 * This implementation will attempt to parse a single record by ignoring
 * the MB and ME flags, and otherwise following the rules of
 * {@link NdefMessage#NdefMessage(byte[])}.<p>
 *
 * @param data raw bytes to parse
 * @throws FormatException if the data cannot be parsed into a valid record
 * @deprecated use {@link NdefMessage#NdefMessage(byte[])} instead.
 */
====>[PUBLIC]<android.nfc.NdefRecord: void <init>(byte[])>    ---->    NdefMessage#NdefMessage(byte[])
<androidx.core.view.ViewCompat: void setOverScrollMode(View,int)>
/**
 * Set the over-scroll mode for this view. Valid over-scroll modes are
 * {@link #OVER_SCROLL_ALWAYS} (default), {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}
 * (allow over-scrolling only if the view content is larger than the container),
 * or {@link #OVER_SCROLL_NEVER}.
 *
 * Setting the over-scroll mode of a view will have an effect only if the
 * view is capable of scrolling.
 *
 * @param v The View against which to invoke the method.
 * @param overScrollMode The new over-scroll mode for this view.
 * @deprecated Call {@link View#setOverScrollMode(int)} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setOverScrollMode(View,int)>    ---->    View#setOverScrollMode(int)
<android.app.Activity: FragmentManager getFragmentManager()>
/**
 * Return the FragmentManager for interacting with fragments associated
 * with this activity.
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#getSupportFragmentManager()}
 */
====>[PUBLIC]<android.app.Activity: FragmentManager getFragmentManager()>    ---->    android.support.v4.app.FragmentActivity#getSupportFragmentManager()
<android.telecom.Conference: AudioState getAudioState()>
/**
 * @return The audio state of the conference, describing how its audio is currently
 * being routed by the system. This is {@code null} if this Conference
 * does not directly know about its audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Conference: AudioState getAudioState()>    ---->    #getCallAudioState()
<androidx.lifecycle.ViewModelProviders: void <init>()>
/**
 * @deprecated This class should not be directly instantiated
 */
====>[PUBLIC]<androidx.lifecycle.ViewModelProviders: void <init>()>    ---->
<androidx.legacy.app.FragmentStatePagerAdapter: Fragment getItem(int)>
/**
 * Return the Fragment associated with a specified position.
 *
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: Fragment getItem(int)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<androidx.fragment.app.Fragment: LoaderManager getLoaderManager()>
/**
 * Return the LoaderManager for this fragment.
 *
 * @deprecated Use
 * {@link LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)}.
 */
====>[PUBLIC]<androidx.fragment.app.Fragment: LoaderManager getLoaderManager()>    ---->    LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>
/**
 * Set a visual hint that only the background image of this notification should be
 * displayed, and other semantic content should be hidden. This hint is only applicable
 * to sub-pages added using {@link #addPage}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintShowBackgroundOnly(boolean)>    ---->
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)>
/**
 * Send a multi-part text based SMS.  The callee should have already
 * divided the message into correctly sized parts by calling
 * <code>divideMessage</code>.
 *
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to use
 * the current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,
 * comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of
 * <code>PendingIntent</code>s (one for each message part) that is
 * broadcast when the corresponding message part has been sent.
 * The result code will be <code>Activity.RESULT_OK<code> for success,
 * or one of these errors:
 * <code>RESULT_ERROR_GENERIC_FAILURE</code>
 * <code>RESULT_ERROR_RADIO_OFF</code>
 * <code>RESULT_ERROR_NULL_PDU</code>.
 * The per-application based SMS control checks sentIntent. If sentIntent
 * is NULL the caller will be checked against all unknown applicaitons,
 * which cause smaller number of SMS to be sent in checking period.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of
 * <code>PendingIntent</code>s (one for each message part) that is
 * broadcast when the corresponding message part has been delivered
 * to the recipient.  The raw pdu of the status report is in the
 * extended data ("pdu").
 *
 * @throws IllegalArgumentException if destinationAddress or data are empty
 * @deprecated Use android.telephony.SmsManager.
 */
====>[PUBLIC]<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)>    ---->
Inconsistency (Non-Documentation):<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\provider\Contacts.java
<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)>
/**
 * This API is no longer supported as of O.
 */
====>[PUBLIC]<android.provider.Contacts.People: void markAsContacted(ContentResolver,long)>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void removeStickyBroadcast(Intent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void removeStickyBroadcast(Intent)>

====>[PUBLIC]<android.content.ContextWrapper: void removeStickyBroadcast(Intent)>    ---->
<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
/**
 * Return true iff the message is a SMS-STATUS-REPORT message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>    ---->
<com.android.internal.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>
/**
 * @deprecated
 * override {@link #onDetachedFromWindow(RecyclerView, Recycler)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: void onDetachedFromWindow(RecyclerView)>    ---->    #onDetachedFromWindow(RecyclerView, Recycler)
<com.android.internal.telephony.dataconnection.ApnSetting: void <init>(int,String,String,String,String,String,String,String,String,String,String,int,String[],String,String,boolean,int,int,int,boolean,int,int,int,int,String,String)>
/**
 * @deprecated this constructor is no longer supported. Use the other constructor which takes
 * a network type bitmask instead of the deprecated bearer bitmask and bearer field.
 */
====>[PUBLIC]<com.android.internal.telephony.dataconnection.ApnSetting: void <init>(int,String,String,String,String,String,String,String,String,String,String,int,String[],String,String,boolean,int,int,int,boolean,int,int,int,int,String,String)>    ---->
<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(int)>
/**
 * Returns connection status information about a particular
 * network type.
 *
 * @param networkType integer specifying which networkType in
 * which you're interested.
 * @return a {@link NetworkInfo} object for the requested
 * network type or {@code null} if the type is not
 * supported by the device. If {@code networkType} is
 * TYPE_VPN and a VPN is active for the calling app,
 * then this method will try to return one of the
 * underlying networks for the VPN or null if the
 * VPN agent didn't specify any.
 *
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo getNetworkInfo(int)>    ---->    #getAllNetworks
<java.sql.Date: void setSeconds(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #getSeconds
 */
====>[PUBLIC]<java.sql.Date: void setSeconds(int)>    ---->    #getSeconds
<android.provider.ContactsContract.StreamItemPhotos: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItemPhotos: void <init>()>    ---->
<androidx.core.widget.ScrollerCompat: void startScroll(int,int,int,int,int)>
/**
 * Start scrolling by providing a starting point and the distance to travel.
 *
 * @param startX Starting horizontal scroll offset in pixels. Positive
 * numbers will scroll the content to the left.
 * @param startY Starting vertical scroll offset in pixels. Positive numbers
 * will scroll the content up.
 * @param dx Horizontal distance to travel. Positive numbers will scroll the
 * content to the left.
 * @param dy Vertical distance to travel. Positive numbers will scroll the
 * content up.
 * @param duration Duration of the scroll in milliseconds.
 *
 * @deprecated Use {@link OverScroller#startScroll(int, int, int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void startScroll(int,int,int,int,int)>    ---->    OverScroller#startScroll(int, int, int, int, int)
<android.content.res.AssetManager: int addOverlayPath(String)>
/**
 * @deprecated Use {@link #setApkAssets(ApkAssets[], boolean)}
 * @hide
 */
====>[HIDDEN]<android.content.res.AssetManager: int addOverlayPath(String)>    ---->    #setApkAssets(ApkAssets[], boolean)
<com.android.ims.ImsManager: void setWfcMode(Context,int,boolean)>
/**
 * Change persistent WFC preference setting
 *
 * @param roaming {@code false} for home network setting, {@code true} for roaming setting
 *
 * @deprecated Doesn't support MSIM devices. Please use {@link #setWfcMode(int, boolean)}
 * instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void setWfcMode(Context,int,boolean)>    ---->    #setWfcMode(int, boolean)
<androidx.core.widget.ScrollerCompat: void fling(int,int,int,int,int,int,int,int,int,int)>
/**
 * Start scrolling based on a fling gesture. The distance travelled will
 * depend on the initial velocity of the fling.
 *
 * @param startX Starting point of the scroll (X)
 * @param startY Starting point of the scroll (Y)
 * @param velocityX Initial velocity of the fling (X) measured in pixels per
 * second.
 * @param velocityY Initial velocity of the fling (Y) measured in pixels per
 * second
 * @param minX Minimum X value. The scroller will not scroll past this
 * point.
 * @param maxX Maximum X value. The scroller will not scroll past this
 * point.
 * @param minY Minimum Y value. The scroller will not scroll past this
 * point.
 * @param maxY Maximum Y value. The scroller will not scroll past this
 * point.
 * @param overX Overfling range. If > 0, horizontal overfling in either
 * direction will be possible.
 * @param overY Overfling range. If > 0, vertical overfling in either
 * direction will be possible.
 *
 * @deprecated Use {@link OverScroller#fling(int, int, int, int, int, int, int, int, int, int)}
 * directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void fling(int,int,int,int,int,int,int,int,int,int)>    ---->    OverScroller#fling(int, int, int, int, int, int, int, int, int, int)
<android.provider.Contacts.ContactMethods: String encodeCustomImProtocol(String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: String encodeCustomImProtocol(String)>    ---->    android.provider.ContactsContract
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertexFixedFunction from the current state of
 * the builder
 *
 * @return  ProgramVertexFixedFunction
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: ProgramVertexFixedFunction create()>    ---->
<android.view.textclassifier.TextClassification.Builder: Builder setOnClickListener(OnClickListener)>
/**
 * Sets the OnClickListener for the <i>primary</i> action that may be triggered to act on
 * the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable. If read from a parcel, the
 * returned OnClickListener represents the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setOnClickListener(OnClickListener)>    ---->    #addAction(RemoteAction)
<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(SurfaceTexture,int,int)>    ---->
<android.provider.Contacts.Presence: void setPresenceIcon(ImageView,int)>
/**
 * Sets a presence icon to the proper graphic
 *
 * @param icon the icon to to set
 * @param serverStatus that status
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Presence: void setPresenceIcon(ImageView,int)>    ---->    android.provider.ContactsContract
<android.renderscript.ScriptGroup: void execute()>
/**
 * Execute the ScriptGroup.  This will run all the kernels in
 * the ScriptGroup.  No internal connection results will be visible
 * after execution of the ScriptGroup.
 *
 * @deprecated Use {@link #execute} instead.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void execute()>    ---->    #execute
<android.renderscript.RSSurfaceView: void resume()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is resumed. The owner of this view must
 * call this method when the activity is resumed. Calling this method will
 * recreate the OpenGL display and resume the rendering
 * thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void resume()>    ---->
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
/**
 * Sets whether the WebView should enable plugins. The default is {@code false}.
 *
 * @param flag {@code true} if plugins should be enabled
 * @deprecated This method has been deprecated in favor of
 * {@link #setPluginState}
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setPluginsEnabled(boolean)>    ---->    #setPluginState
<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)>
/**
 * @deprecated in API 16
 * Set a new RenderScriptGL object.  This also will attach the
 * new object to the TextureView if present.
 *
 * @param rs The new RS object.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void setRenderScriptGL(RenderScriptGL)>    ---->
<android.net.ConnectivityManager: Network getProcessDefaultNetwork()>
/**
 * Returns the {@link Network} currently bound to this process via
 * {@link #bindProcessToNetwork}, or {@code null} if no {@link Network} is explicitly bound.
 *
 * @return {@code Network} to which this process is bound, or {@code null}.
 * @deprecated Using this function can lead to other functions throwing
 * {@link IllegalStateException}.  Use {@link #getBoundNetworkForProcess} instead.
 * {@code getBoundNetworkForProcess} is a direct replacement.
 */
====>[PUBLIC]<android.net.ConnectivityManager: Network getProcessDefaultNetwork()>    ---->    #getBoundNetworkForProcess
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getMaxScrollY()>
/**
 * Gets the max scroll offset of the source top edge in pixels.
 *
 * @return The max scroll.
 *
 * @deprecated Use {@link #getMaxScrollY(AccessibilityRecord)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getMaxScrollY()>    ---->    #getMaxScrollY(AccessibilityRecord)
Inconsistency (Non-Documentation):<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\graphics\BaseCanvas.java
<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>

====>[PUBLIC]<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->
<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)>
/**
 * Sets the per-account voicemail ringtone.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}, or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the
 * voicemail ringtone.
 * @param uri The URI for the ringtone to play when receiving a voicemail from a specific
 * PhoneAccount.
 *
 * @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}
 * instead.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)>    ---->    android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS
<androidx.fragment.app.FragmentController: SimpleArrayMap<String, LoaderManager> retainLoaderNonConfig()>
/**
 * Returns a list of LoaderManagers that have opted to retain their instance across
 * configuration changes.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: SimpleArrayMap<String, LoaderManager> retainLoaderNonConfig()>    ---->
<android.support.v4.media.session.MediaSessionCompat.Callback: void onRemoveQueueItemAt(int)>
/**
 * Called when a {@link MediaControllerCompat} wants to remove a {@link QueueItem} at the
 * specified position in the play queue.
 *
 * @param index The index of the element to be removed.
 * @deprecated {@link #onRemoveQueueItem} will be called instead.
 */
====>[PUBLIC]<android.support.v4.media.session.MediaSessionCompat.Callback: void onRemoveQueueItemAt(int)>    ---->    led
<android.os.Debug: void resetGlobalAllocCount()>
/**
 * Clears the global count of objects allocated.
 * @see #getGlobalAllocCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalAllocCount()>    ---->
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOff()>
/**
 * Called when the screen has been turned off.
 *
 * @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOff()>    ---->    com.android.systemui.keyguard.ScreenLifecycle
<android.content.pm.ShortcutInfo.Builder: Builder setTitle(CharSequence)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setTitle(CharSequence)>    ---->
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)>
/**
 * @deprecated in API 16
 * Sets the color for the vertices that are added after this method call.
 *
 * @param r red component
 * @param g green component
 * @param b blue component
 * @param a alpha component
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setColor(float,float,float,float)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setCurrentItemIndex(int)>
/**
 * Sets the index of the source in the list of items that can be visited.
 *
 * @param currentItemIndex The current item index.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setCurrentItemIndex(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setCurrentItemIndex(int)>    ---->    AccessibilityRecord#setCurrentItemIndex(int)
Inconsistency (Non-Documentation):<android.databinding.parser.XMLParser: String[] getTokenNames()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\databinding\parser\XMLParser.java
<android.databinding.parser.XMLParser: String[] getTokenNames()>

====>[PUBLIC]<android.databinding.parser.XMLParser: String[] getTokenNames()>    ---->
<androidx.loader.app.LoaderManager: void dump(String,FileDescriptor,PrintWriter,String[])>
/**
 * Print the LoaderManager's state into the given stream.
 *
 * @param prefix Text to print at the front of each line.
 * @param fd The raw file descriptor that the dump is being sent to.
 * @param writer A PrintWriter to which the dump is to be set.
 * @param args Additional arguments to the dump request.
 * @deprecated Use {@link #enableDebugLogging(boolean)} to understand the series of operations
 * performed by LoaderManager.
 */
====>[PUBLIC]<androidx.loader.app.LoaderManager: void dump(String,FileDescriptor,PrintWriter,String[])>    ---->    #enableDebugLogging(boolean)
<androidx.cursoradapter.widget.CursorAdapter: void <init>(Context,Cursor)>
/**
 * Constructor that always enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 *
 * @param c The cursor from which to get the data.
 * @param context The context
 */
====>[PUBLIC]<androidx.cursoradapter.widget.CursorAdapter: void <init>(Context,Cursor)>    ---->    android.app.LoaderManager
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getFromIndex()>
/**
 * Gets the index of the first character of the changed sequence,
 * or the beginning of a text selection or the index of the first
 * visible item when scrolling.
 *
 * @return The index of the first character or selection
 * start or the first visible item.
 *
 * @deprecated Use {@link AccessibilityRecord#getFromIndex()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getFromIndex()>    ---->    AccessibilityRecord#getFromIndex()
<com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(String,String,int)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(String,String,int)>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedInt64(long,long)>
/**
 * Write a single repeated proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedInt64(long,long)>    ---->    #write
<androidx.core.view.MenuItemCompat: boolean expandActionView(MenuItem)>
/**
 * Expand the action view associated with this menu item.
 * The menu item must have an action view set, as well as
 * the showAsAction flag {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.
 * If a listener has been set using
 * {@link #setOnActionExpandListener(MenuItem, OnActionExpandListener)}
 * it will have its {@link OnActionExpandListener#onMenuItemActionExpand(MenuItem)}
 * method invoked. The listener may return false from this method to prevent expanding
 * the action view.
 *
 * @return true if the action view was expanded, false otherwise.
 *
 * @deprecated Use {@link MenuItem#expandActionView()} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: boolean expandActionView(MenuItem)>    ---->    MenuItem#expandActionView()
<androidx.leanback.widget.BaseCardView: void setExtraVisibility(int)>
/**
 * Sets the visibility of the extra region of the card.
 *
 * @param visibility The region visibility to use for the extra region. Must
 * be one of {@link #CARD_REGION_VISIBLE_ALWAYS},
 * {@link #CARD_REGION_VISIBLE_SELECTED}, or
 * {@link #CARD_REGION_VISIBLE_ACTIVATED}.
 * @deprecated Extra view's visibility is controlled by {@link #setInfoVisibility(int)}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseCardView: void setExtraVisibility(int)>    ---->    #setInfoVisibility(int)
<android.util.proto.ProtoOutputStream: void writeString(long,String)>
/**
 * Write a single proto "string" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeString(long,String)>    ---->    #write
<androidx.legacy.app.FragmentCompat: void <init>()>
/**
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework fragment.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: void <init>()>    ---->    androidx.fragment.app.Fragment
<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
/**
 * Returns true iff the <code>TP-Reply-Path</code> bit is set in
 * this message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>    ---->
<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo,int)>
/**
 * Get candidate strings for a substring of the specified text.
 * @param textInfo text metadata for a spell checker
 * @param suggestionsLimit the maximum number of suggestions that will be returned
 * @deprecated use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead
 */
====>[PUBLIC]<android.view.textservice.SpellCheckerSession: void getSuggestions(TextInfo,int)>    ---->    SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)
<com.android.setupwizardlib.SetupWizardRecyclerLayout: void setDividerInset(int)>
/**
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardRecyclerLayout: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<android.hardware.radio.ProgramSelector: int getProgramType()>
/**
 * Type of a radio technology.
 *
 * @return program type.
 * @deprecated use {@link getPrimaryId} instead
 */
====>[PUBLIC]<android.hardware.radio.ProgramSelector: int getProgramType()>    ---->    getPrimaryId
<android.view.inputmethod.InputMethodManager: void showStatusIcon(IBinder,String,int)>
/**
 * @deprecated Use {@link InputMethodService#showStatusIcon(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void showStatusIcon(IBinder,String,int)>    ---->    InputMethodService#showStatusIcon(int)
<android.os.UserHandle: boolean isOwner()>
/**
 * Returns true if this UserHandle refers to the owner user; false otherwise.
 * @return true if this UserHandle refers to the owner user; false otherwise.
 * @hide
 * @deprecated please use {@link #isSystem()} or check for
 * {@link android.content.pm.UserInfo#isPrimary()}
 * {@link android.content.pm.UserInfo#isAdmin()} based on your particular use case.
 */
====>[HIDDEN]<android.os.UserHandle: boolean isOwner()>    ---->    #isSystem()
<android.app.ActionBar: void removeAllTabs()>
/**
 * Remove all tabs from the action bar and deselect the current tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeAllTabs()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollX(int)>
/**
 * Sets the scroll offset of the source left edge in pixels.
 *
 * @param scrollX The scroll.
 *
 * @deprecated Use {@link AccessibilityRecord#setScrollX(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setScrollX(int)>    ---->    AccessibilityRecord#setScrollX(int)
<android.webkit.CookieSyncManager: void resetSync()>
/**
 * resetSync() resets sync manager's timer.
 * @deprecated Calling resetSync is no longer necessary as the WebView automatically
 * syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void resetSync()>    ---->
<android.webkit.PluginList: void clear()>
/**
 * Clears the plugin list.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void clear()>    ---->
<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],Message)>
/**
 * Invokes RIL_REQUEST_OEM_HOOK_RAW on RIL implementation.
 *
 * @param data The data for the request.
 * @param response <strong>On success</strong>,
 * (byte[])(((AsyncResult)response.obj).result)
 * <strong>On failure</strong>,
 * (((AsyncResult)response.obj).result) == null and
 * (((AsyncResult)response.obj).exception) being an instance of
 * com.android.internal.telephony.gsm.CommandException
 *
 * @see #invokeOemRilRequestRaw(byte[], android.os.Message)
 * @deprecated OEM needs a vendor-extension hal and their apps should use that instead
 */
====>[PUBLIC]<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],Message)>    ---->    that
<android.app.admin.DevicePolicyManager: void clearProfileOwner(ComponentName)>
/**
 * Clears the active profile owner. The caller must be the profile owner of this user, otherwise
 * a SecurityException will be thrown. This method is not available to managed profile owners.
 * <p>
 * While some policies previously set by the profile owner will be cleared by this method, it is
 * a best-effort process and some other policies will still remain in place after the profile
 * owner is cleared.
 *
 * @param admin The component to remove as the profile owner.
 * @throws SecurityException if {@code admin} is not an active profile owner, or the method is
 * being called from a managed profile.
 *
 * @deprecated This method is expected to be used for testing purposes only. The profile owner
 * will lose control of the user and its data after calling it. In order to protect any
 * sensitive data that remains on this user, it is advised that the profile owner deletes it
 * instead of calling this method. See {@link #wipeData(int)}.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void clearProfileOwner(ComponentName)>    ---->    #wipeData(int)
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
/**
 * Sets the visibility of the indeterminate progress bar in the title.
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param visible Whether to show the progress bars in the title.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>    ---->
<android.app.KeyguardManager: void exitKeyguardSecurely(OnKeyguardExitResult)>
/**
 * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}
 * and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * instead; this allows you to seamlessly hide the keyguard as your application
 * moves in and out of the foreground and does not require that any special
 * permissions be requested.
 *
 * Exit the keyguard securely.  The use case for this api is that, after
 * disabling the keyguard, your app, which was granted permission to
 * disable the keyguard and show a limited amount of information deemed
 * safe without the user getting past the keyguard, needs to navigate to
 * something that is not safe to view without getting past the keyguard.
 *
 * This will, if the keyguard is secure, bring up the unlock screen of
 * the keyguard.
 *
 * @param callback Let's you know whether the operation was succesful and
 * it is safe to launch anything that would normally be considered safe
 * once the user has gotten past the keyguard.
 */
====>[PUBLIC]<android.app.KeyguardManager: void exitKeyguardSecurely(OnKeyguardExitResult)>    ---->    LayoutParams#FLAG_DISMISS_KEYGUARD
<android.os.Vibrator: void vibrate(long)>
/**
 * Vibrate constantly for the specified period of time.
 *
 * @param milliseconds The number of milliseconds to vibrate.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long)>    ---->    #vibrate(VibrationEffect)
<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last vertex buffer type added to
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: int getCurrentVertexTypeIndex()>    ---->
<androidx.palette.graphics.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Builder} to generate the Palette.
 */
====>[PUBLIC]<androidx.palette.graphics.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>    ---->    Builder
<android.app.ActionBar: void removeTabAt(int)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param position Position of the tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeTabAt(int)>    ---->
<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap)>
/**
 * Creates the TaskDescription to the specified values.
 *
 * @param label A label and description of the current state of this activity.
 * @param icon An icon that represents the current state of this activity.
 * @deprecated use TaskDescription constructor with icon resource instead
 */
====>[PUBLIC]<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap)>    ---->    TaskDescription constructor with icon resource
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setMaxScrollY(int)>
/**
 * Sets the max scroll offset of the source top edge in pixels.
 *
 * @param maxScrollY The max scroll.
 *
 * @deprecated Use {@link #setMaxScrollY(AccessibilityRecord, int)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setMaxScrollY(int)>    ---->    #setMaxScrollY(AccessibilityRecord, int)
<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()>
/**
 * @deprecated in API 16
 * @return internal index of the last index set added to the
 * builder
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: int getCurrentIndexSetIndex()>    ---->
<android.app.admin.DevicePolicyManager: String getApplicationRestrictionsManagingPackage(ComponentName)>
/**
 * Called by a profile owner or device owner to retrieve the application restrictions managing
 * package for the current user, or {@code null} if none is set. If there are multiple
 * delegates this function will return one of them.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name allowed to manage application restrictions on the current user, or
 * {@code null} if none is set.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatePackages}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: String getApplicationRestrictionsManagingPackage(ComponentName)>    ---->
<android.util.proto.ProtoOutputStream: void writeObject(long,byte[])>
/**
 * Write an object that has already been flattend.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeObject(long,byte[])>    ---->    #write
<android.speech.tts.TextToSpeech: int addEarcon(String,String)>
/**
 * Adds a mapping between a string of text and a sound file.
 * Use this to add custom earcons.
 *
 * @see #playEarcon(String, int, HashMap)
 *
 * @param earcon
 * The name of the earcon.
 * Example: <code>"[tick]"</code>
 * @param filename
 * The full path to the sound file (for example:
 * "/sdcard/mysounds/tick.wav")
 *
 * @return Code indicating success or failure. See {@link #ERROR} and {@link #SUCCESS}.
 *
 * @deprecated As of API level 21, replaced by
 * {@link #addEarcon(String, File)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int addEarcon(String,String)>    ---->    #addEarcon(String, File)
<androidx.core.database.DatabaseUtilsCompat: String concatenateWhere(String,String)>
/**
 * Concatenates two SQL WHERE clauses, handling empty or null values.
 *
 * @deprecated Use {@link android.database.DatabaseUtils#concatenateWhere(String, String)}
 * directly.
 */
====>[PUBLIC]<androidx.core.database.DatabaseUtilsCompat: String concatenateWhere(String,String)>    ---->    android.database.DatabaseUtils#concatenateWhere(String, String)
<android.media.AudioTrack: void removeOnRoutingChangedListener(OnRoutingChangedListener)>
/**
 * Removes an {@link OnRoutingChangedListener} which has been previously added
 * to receive rerouting notifications.
 * @param listener The previously added {@link OnRoutingChangedListener} interface to remove.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioTrack: void removeOnRoutingChangedListener(OnRoutingChangedListener)>    ---->    AudioRouting.OnRoutingChangedListener
<android.app.job.JobWorkItem: long getEstimatedNetworkBytes()>
/**
 * @deprecated replaced by {@link #getEstimatedNetworkDownloadBytes()} and
 * {@link #getEstimatedNetworkUploadBytes()}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobWorkItem: long getEstimatedNetworkBytes()>    ---->    #getEstimatedNetworkDownloadBytes()
<java.net.MulticastSocket: void send(DatagramPacket,byte)>
/**
 * Sends a datagram packet to the destination, with a TTL (time-
 * to-live) other than the default for the socket.  This method
 * need only be used in instances where a particular TTL is desired;
 * otherwise it is preferable to set a TTL once on the socket, and
 * use that default TTL for all packets.  This method does <B>not
 * </B> alter the default TTL for the socket. Its behavior may be
 * affected by {@code setInterface}.
 *
 * <p>If there is a security manager, this method first performs some
 * security checks. First, if {@code p.getAddress().isMulticastAddress()}
 * is true, this method calls the
 * security manager's {@code checkMulticast} method
 * with {@code p.getAddress()} and {@code ttl} as its arguments.
 * If the evaluation of that expression is false,
 * this method instead calls the security manager's
 * {@code checkConnect} method with arguments
 * {@code p.getAddress().getHostAddress()} and
 * {@code p.getPort()}. Each call to a security manager method
 * could result in a SecurityException if the operation is not allowed.
 *
 * @param p is the packet to be sent. The packet should contain
 * the destination multicast ip address and the data to be sent.
 * One does not need to be the member of the group to send
 * packets to a destination multicast address.
 * @param ttl optional time to live for multicast packet.
 * default ttl is 1.
 *
 * @exception IOException is raised if an error occurs i.e
 * error while setting ttl.
 * @exception  SecurityException  if a security manager exists and its
 * {@code checkMulticast} or {@code checkConnect}
 * method doesn't allow the send.
 *
 * @deprecated Use the following code or its equivalent instead:
 * ......
 * int ttl = mcastSocket.getTimeToLive();
 * mcastSocket.setTimeToLive(newttl);
 * mcastSocket.send(p);
 * mcastSocket.setTimeToLive(ttl);
 * ......
 *
 * @see DatagramSocket#send
 * @see DatagramSocket#receive
 * @see SecurityManager#checkMulticast(java.net.InetAddress, byte)
 * @see SecurityManager#checkConnect
 */
====>[PUBLIC]<java.net.MulticastSocket: void send(DatagramPacket,byte)>    ---->    the following code or its equivalent
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon)>
/**
 * @deprecated TO BE REMOVED.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon)>    ---->
<androidx.core.view.ViewCompat: void setTranslationX(View,float)>
/**
 * Sets the horizontal location of this view relative to its left position.
 * This effectively positions the object post-layout, in addition to wherever the object's
 * layout placed it.
 *
 * @param value The horizontal position of this view relative to its left position,
 * in pixels.
 *
 * @deprecated Use {@link View#setTranslationX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setTranslationX(View,float)>    ---->    View#setTranslationX(float)
<android.util.proto.ProtoOutputStream: void writeRepeatedFloat(long,float)>
/**
 * Write a single repeated proto "float" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFloat(long,float)>    ---->    #write
<android.location.Location: void removeSpeed()>
/**
 * Remove the speed from this location.
 *
 * <p>Following this call {@link #hasSpeed} will return false,
 * and {@link #getSpeed} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 */
====>[PUBLIC]<android.location.Location: void removeSpeed()>    ---->
<android.hardware.radio.RadioTuner.Callback: void onConfigurationChanged(BandConfig)>
/**
 * onConfigurationChanged() is called upon successful completion of
 * {@link RadioManager#openTuner(int, RadioManager.BandConfig, boolean, Callback, Handler)}
 * or {@link RadioTuner#setConfiguration(RadioManager.BandConfig)}
 *
 * @deprecated Only applicable for HAL 1.x.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onConfigurationChanged(BandConfig)>    ---->
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String)>
/**
 * Mark this table as syncable. When an update occurs in this table the
 * _sync_dirty field will be set to ensure proper syncing operation.
 *
 * @param table the table to mark as syncable
 * @param deletedTable The deleted table that corresponds to the
 * syncable table
 * @deprecated This method no longer serves any useful purpose and has been deprecated.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: void markTableSyncable(String,String)>    ---->
<android.app.ActionBar: void addTab(Tab,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 *
 * @param tab Tab to add
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,boolean)>    ---->
<android.provider.Contacts.People: Uri addToMyContactsGroup(ContentResolver,long)>
/**
 * Adds a person to the My Contacts group.
 *
 * @param resolver the resolver to use
 * @param personId the person to add to the group
 * @return the URI of the group membership row
 * @throws IllegalStateException if the My Contacts group can't be found
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri addToMyContactsGroup(ContentResolver,long)>    ---->    android.provider.ContactsContract
<com.android.ims.ImsConnectionStateListener: void onImsSuspended()>
/**
 * Called when its current IMS connection is suspended, meaning there is no data throughput.
 * @deprecated not used in newer IMS provider implementations.
 */
====>[PUBLIC]<com.android.ims.ImsConnectionStateListener: void onImsSuspended()>    ---->
<androidx.core.view.MenuItemCompat: boolean isActionViewExpanded(MenuItem)>
/**
 * Returns true if this menu item's action view has been expanded.
 *
 * @return true if the item's action view is expanded, false otherwise.
 * @see #expandActionView(MenuItem)
 * @see #collapseActionView(MenuItem)
 * @see #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
 * @see androidx.core.view.MenuItemCompat.OnActionExpandListener
 *
 * @deprecated Use {@link MenuItem#isActionViewExpanded()} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: boolean isActionViewExpanded(MenuItem)>    ---->    MenuItem#isActionViewExpanded()
<com.android.internal.telephony.uicc.UiccCard: int getNumApplications()>
/**
 * Returns number of applications on this card
 * @deprecated Please use {@link UiccProfile#getNumApplications()} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: int getNumApplications()>    ---->    UiccProfile#getNumApplications()
<android.webkit.PluginData: int getStatusCode()>
/**
 * Returns the HTTP status code for the response.
 *
 * @return The HTTP statue code, e.g 200.
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginData: int getStatusCode()>    ---->
<android.telephony.gsm.SmsMessage: void <init>()>
/**
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: void <init>()>    ---->
<android.database.AbstractWindowedCursor: boolean isBlob(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isBlob(int)>    ---->    #getType
<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()>
/**
 * @deprecated in API 16
 * Returns the previously set RenderScriptGL object.
 *
 * @return RenderScriptGL
 */
====>[PUBLIC]<android.renderscript.RSTextureView: RenderScriptGL getRenderScriptGL()>    ---->
<java.lang.ThreadGroup: void stop()>
/**
 * Stops all threads in this thread group.
 * <p>
 * First, the <code>checkAccess</code> method of this thread group is
 * called with no arguments; this may result in a security exception.
 * <p>
 * This method then calls the <code>stop</code> method on all the
 * threads in this thread group and in all of its subgroups.
 *
 * @exception  SecurityException  if the current thread is not allowed
 * to access this thread group or any of the threads in
 * the thread group.
 * @see        java.lang.SecurityException
 * @see        java.lang.Thread#stop()
 * @see        java.lang.ThreadGroup#checkAccess()
 * @since      JDK1.0
 * @deprecated    This method is inherently unsafe.  See
 * {@link Thread#stop} for details.
 */
====>[PUBLIC]<java.lang.ThreadGroup: void stop()>    ---->    Thread#stop
<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean,byte[])>
/**
 * Get an SMS-SUBMIT PDU for a destination address and a message
 *
 * @param scAddress Service Centre address.  Null means use default.
 * @return a <code>SubmitPdu</code> containing the encoded SC
 * address, if applicable, and the encoded message.
 * Returns null on encode error.
 * @deprecated Use android.telephony.SmsMessage.
 * @hide
 */
====>[HIDDEN]<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean,byte[])>    ---->
<android.telephony.euicc.DownloadableSubscription: void setAccessRules(UiccAccessRule[])>
/**
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.euicc.DownloadableSubscription: void setAccessRules(UiccAccessRule[])>    ---->
<androidx.core.widget.EdgeEffectCompat: boolean draw(Canvas)>
/**
 * Draw into the provided canvas. Assumes that the canvas has been rotated
 * accordingly and the size has been set. The effect will be drawn the full
 * width of X=0 to X=width, beginning from Y=0 and extending to some factor <
 * 1.f of height.
 *
 * @param canvas Canvas to draw into
 * @return true if drawing should continue beyond this frame to continue the
 * animation
 *
 * @deprecated Use {@link EdgeEffect#draw(Canvas)} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean draw(Canvas)>    ---->    EdgeEffect#draw(Canvas)
<android.os.Environment: File getUserSystemDirectory(int)>
/**
 * Return the system directory for a user. This is for use by system
 * services to store files relating to the user. This directory will be
 * automatically deleted when the user is removed.
 *
 * @deprecated This directory is valid and still exists, but callers should
 * <em>strongly</em> consider switching to
 * {@link #getDataSystemCeDirectory(int)} which is protected
 * with user credentials or
 * {@link #getDataSystemDeDirectory(int)} which supports fast
 * user wipe.
 * @hide
 */
====>[HIDDEN]<android.os.Environment: File getUserSystemDirectory(int)>    ---->    #getDataSystemCeDirectory(int)
<androidx.core.app.NotificationCompat.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>
/**
 * Adds a message for display by this notification. Convenience call for a simple
 * {@link Message} in {@link #addMessage(Message)}
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived in ms since Unix epoch
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link #getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @see Message#Message(CharSequence, long, CharSequence)
 *
 * @return this object for method chaining
 *
 * @deprecated Use {@link #addMessage(CharSequence, long, Person)} or
 * {@link #addMessage(Message)}
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.MessagingStyle: MessagingStyle addMessage(CharSequence,long,CharSequence)>    ---->    #addMessage(CharSequence, long, Person)
<android.view.inputmethod.InputMethodManager: void hideStatusIcon(IBinder)>
/**
 * @deprecated Use {@link InputMethodService#hideStatusIcon()} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in
 * this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void hideStatusIcon(IBinder)>    ---->    InputMethodService#hideStatusIcon()
<android.test.TouchUtils: int dragViewBy(ActivityInstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it by the specified amount.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param deltaX Amount to drag horizontally in pixels
 * @param deltaY Amount to drag vertically in pixels
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewBy(ActivityInstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.webkit.WebSettings: int getUserAgent()>
/**
 * Gets the user-agent as an integer code.
 * <ul>
 * <li>-1 means the WebView is using a custom user-agent string set with
 * {@link #setUserAgentString}</li>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 *
 * @return the integer code for the user-agent string
 * @see #setUserAgent
 * @deprecated Please use {@link #getUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: int getUserAgent()>    ---->    #getUserAgentString
<android.content.ContentResolver: void startSync(Uri,Bundle)>
/**
 * Start an asynchronous sync operation. If you want to monitor the progress
 * of the sync you may register a SyncObserver. Only values of the following
 * types may be used in the extras bundle:
 * <ul>
 * <li>Integer</li>
 * <li>Long</li>
 * <li>Boolean</li>
 * <li>Float</li>
 * <li>Double</li>
 * <li>String</li>
 * <li>Account</li>
 * <li>null</li>
 * </ul>
 *
 * @param uri the uri of the provider to sync or null to sync all providers.
 * @param extras any extras to pass to the SyncAdapter.
 * @deprecated instead use
 * {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}
 */
====>[PUBLIC]<android.content.ContentResolver: void startSync(Uri,Bundle)>    ---->    #requestSync(android.accounts.Account, String, android.os.Bundle)
<android.content.ClipboardManager: boolean hasText()>
/**
 * @deprecated Use {@link #hasPrimaryClip()} instead.
 */
====>[PUBLIC]<android.content.ClipboardManager: boolean hasText()>    ---->    #hasPrimaryClip()
<android.view.ViewConfiguration: int getFadingEdgeLength()>
/**
 * @return the length of the fading edges in dips
 *
 * @deprecated Use {@link #getScaledFadingEdgeLength()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getFadingEdgeLength()>    ---->    #getScaledFadingEdgeLength()
<android.util.proto.ProtoOutputStream: void writeRepeatedSInt64(long,long)>
/**
 * Write a single repeated proto "sint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedSInt64(long,long)>    ---->    #write
<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()>

====>[PUBLIC]<android.graphics.drawable.DrawableContainer.DrawableContainerState: Drawable[] getChildren()>    ---->    #getChild
<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(IBinder,boolean)>
/**
 * Force switch to the next input method and subtype. If there is no IME enabled except
 * current IME and subtype, do nothing.
 * @param imeToken Supplies the identifying token given to an input method when it was started,
 * which allows it to perform this operation on itself.
 * @param onlyCurrentIme if true, the framework will find the next subtype which
 * belongs to the current IME
 * @return true if the current input method and subtype was successfully switched to the next
 * input method and subtype.
 * @deprecated Use {@link InputMethodService#switchToNextInputMethod(boolean)} instead. This
 * method was intended for IME developers who should be accessing APIs through the service.
 * APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(IBinder,boolean)>    ---->    InputMethodService#switchToNextInputMethod(boolean)
<android.app.Activity: void onPrepareDialog(int,Dialog)>
/**
 * @deprecated Old no-arguments version of
 * {@link #onPrepareDialog(int, Dialog, Bundle)}.
 */
====>[PUBLIC]<android.app.Activity: void onPrepareDialog(int,Dialog)>    ---->    #onPrepareDialog(int, Dialog, Bundle)
<android.view.Display: int getHeight()>
/**
 * @deprecated Use {@link #getSize(Point)} instead.
 */
====>[PUBLIC]<android.view.Display: int getHeight()>    ---->    #getSize(Point)
<android.view.KeyEvent: int getKeyboardDevice()>
/**
 * Renamed to {@link #getDeviceId}.
 *
 * @hide
 * @deprecated use {@link #getDeviceId()} instead.
 */
====>[HIDDEN]<android.view.KeyEvent: int getKeyboardDevice()>    ---->    #getDeviceId()
<android.media.AudioManager: void registerMediaButtonEventReceiver(PendingIntent)>
/**
 * Register a component to be the sole receiver of MEDIA_BUTTON intents.  This is like
 * {@link #registerMediaButtonEventReceiver(android.content.ComponentName)}, but allows
 * the buttons to go to any PendingIntent.  Note that you should only use this form if
 * you know you will continue running for the full time until unregistering the
 * PendingIntent.
 * @param eventReceiver target that will receive media button intents.  The PendingIntent
 * will be sent an {@link Intent#ACTION_MEDIA_BUTTON} event when a media button action
 * occurs, with {@link Intent#EXTRA_KEY_EVENT} added and holding the key code of the
 * media button that was pressed.
 * @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerMediaButtonEventReceiver(PendingIntent)>    ---->    MediaSession#setMediaButtonReceiver(PendingIntent)
<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>()>
/**
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>()>    ---->
<com.android.internal.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>
/**
 * @deprecated
 * Use {@link #getItemOffsets(Rect, View, RecyclerView, State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>    ---->    #getItemOffsets(Rect, View, RecyclerView, State)
<android.app.admin.DevicePolicyManager: UserHandle createAndInitializeUser(ComponentName,String,String,ComponentName,Bundle)>
/**
 * Called by a device owner to create a user with the specified name. The UserHandle returned
 * by this method should not be persisted as user handles are recycled as users are removed and
 * created. If you need to persist an identifier for this user, use
 * {@link UserManager#getSerialNumberForUser}.  The new user will be started in the background
 * immediately.
 *
 * <p> profileOwnerComponent is the {@link DeviceAdminReceiver} to be the profile owner as well
 * as registered as an active admin on the new user.  The profile owner package will be
 * installed on the new user if it already is installed on the device.
 *
 * <p>If the optionalInitializeData is not null, then the extras will be passed to the
 * profileOwnerComponent when onEnable is called.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param name the user's name
 * @param ownerName the human readable name of the organisation associated with this DPM.
 * @param profileOwnerComponent The {@link DeviceAdminReceiver} that will be an active admin on
 * the user.
 * @param adminExtras Extras that will be passed to onEnable of the admin receiver
 * on the new user.
 * @see UserHandle
 * @return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
 * user could not be created.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#M}
 * @removed From {@link android.os.Build.VERSION_CODES#N}
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: UserHandle createAndInitializeUser(ComponentName,String,String,ComponentName,Bundle)>    ---->
<java.util.Date: String toGMTString()>
/**
 * Creates a string representation of this <tt>Date</tt> object of
 * the form:
 * <blockquote><pre>
 * d mon yyyy hh:mm:ss GMT</pre></blockquote>
 * where:<ul>
 * <li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>),
 * as one or two decimal digits.
 * <li><i>mon</i> is the month (<tt>Jan, Feb, Mar, Apr, May, Jun, Jul,
 * Aug, Sep, Oct, Nov, Dec</tt>).
 * <li><i>yyyy</i> is the year, as four decimal digits.
 * <li><i>hh</i> is the hour of the day (<tt>00</tt> through <tt>23</tt>),
 * as two decimal digits.
 * <li><i>mm</i> is the minute within the hour (<tt>00</tt> through
 * <tt>59</tt>), as two decimal digits.
 * <li><i>ss</i> is the second within the minute (<tt>00</tt> through
 * <tt>61</tt>), as two decimal digits.
 * <li><i>GMT</i> is exactly the ASCII letters "<tt>GMT</tt>" to indicate
 * Greenwich Mean Time.
 * </ul><p>
 * The result does not depend on the local time zone.
 *
 * @return  a string representation of this date, using the Internet GMT
 * conventions.
 * @see     java.text.DateFormat
 * @see     java.util.Date#toString()
 * @see     java.util.Date#toLocaleString()
 * @deprecated As of JDK version 1.1,
 * replaced by <code>DateFormat.format(Date date)</code>, using a
 * GMT <code>TimeZone</code>.
 */
====>[PUBLIC]<java.util.Date: String toGMTString()>    ---->
<androidx.core.view.ViewCompat: boolean canScrollHorizontally(View,int)>
/**
 * Check if this view can be scrolled horizontally in a certain direction.
 *
 * @param view The View against which to invoke the method.
 * @param direction Negative to check scrolling left, positive to check scrolling right.
 * @return true if this view can be scrolled in the specified direction, false otherwise.
 *
 * @deprecated Use {@link View#canScrollHorizontally(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: boolean canScrollHorizontally(View,int)>    ---->    View#canScrollHorizontally(int)
<androidx.legacy.app.FragmentCompat: void setMenuVisibility(Fragment,boolean)>
/**
 * Call {@link Fragment#setMenuVisibility(boolean) Fragment.setMenuVisibility(boolean)}
 * if running on an appropriate version of the platform.
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: void setMenuVisibility(Fragment,boolean)>    ---->    androidx.fragment.app.Fragment
Inconsistency (Non-Documentation):<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\pm\PackageManagerService.java
<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)>

====>[PUBLIC]<com.android.server.pm.PackageManagerService: boolean isPermissionEnforced(String)>    ---->
<android.content.res.Configuration: void makeDefault()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.res.Configuration: void makeDefault()>    ---->
<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)>
/**
 * @deprecated in API 16
 * Takes a specific file name as an argument
 */
====>[PUBLIC]<android.renderscript.Font: Font createFromFile(RenderScript,Resources,String,float)>    ---->
<android.app.Activity: Cursor managedQuery(Uri,String[],String,String[],String)>
/**
 * Wrapper around
 * {@link ContentResolver#query(android.net.Uri , String[], String, String[], String)}
 * that gives the resulting {@link Cursor} to call
 * {@link #startManagingCursor} so that the activity will manage its
 * lifecycle for you.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on a cursor obtained using
 * this method, because the activity will do that for you at the appropriate time. However, if
 * you call {@link #stopManagingCursor} on a cursor from a managed query, the system <em>will
 * not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param uri The URI of the content provider to query.
 * @param projection List of columns to return.
 * @param selection SQL WHERE clause.
 * @param selectionArgs The arguments to selection, if any ?s are pesent
 * @param sortOrder SQL ORDER BY clause.
 *
 * @return The Cursor that was returned by query().
 *
 * @see ContentResolver#query(android.net.Uri , String[], String, String[], String)
 * @see #startManagingCursor
 *
 * @deprecated Use {@link CursorLoader} instead.
 */
====>[PUBLIC]<android.app.Activity: Cursor managedQuery(Uri,String[],String,String[],String)>    ---->    CursorLoader
<androidx.work.Configuration.Builder: Builder withExecutor(Executor)>
/**
 * Specifies a custom {@link Executor} for WorkManager.
 *
 * @param executor An {@link Executor} for processing work
 * @return This {@link Builder} instance
 * @deprecated Use the {@link Configuration.Builder#setExecutor(Executor)} method instead
 */
====>[PUBLIC]<androidx.work.Configuration.Builder: Builder withExecutor(Executor)>    ---->    Configuration.Builder#setExecutor(Executor)
<androidx.legacy.app.FragmentTabHost: void setOnTabChangedListener(OnTabChangeListener)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void setOnTabChangedListener(OnTabChangeListener)>    ---->    androidx.fragment.app.FragmentTabHost
<com.android.internal.telephony.uicc.UiccCard: void iccOpenLogicalChannel(String,int,Message)>
/**
 * Exposes {@link CommandsInterface#iccOpenLogicalChannel}
 * @deprecated Please use
 * {@link UiccProfile#iccOpenLogicalChannel(String, int, Message)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void iccOpenLogicalChannel(String,int,Message)>    ---->    UiccProfile#iccOpenLogicalChannel(String, int, Message)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.content.ContextWrapper: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed64(long,long)>
/**
 * Write a single repeated proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFixed64(long,long)>    ---->    #write
<android.location.GnssMeasurement: long getCarrierCycles()>
/**
 * The number of full carrier cycles between the satellite and the receiver.
 *
 * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.
 *
 * <p>The value is only available if {@link #hasCarrierCycles()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: long getCarrierCycles()>    ---->    #getAccumulatedDeltaRangeMeters()
<android.os.WorkSource: WorkSource addReturningNewbs(WorkSource)>
/**
 * Legacy API: DO NOT USE. Only in use from unit tests.
 *
 * @hide
 * @deprecated meant for unit testing use only. Will be removed in a future API revision.
 */
====>[HIDDEN]<android.os.WorkSource: WorkSource addReturningNewbs(WorkSource)>    ---->
<android.app.Activity: void onAttachFragment(Fragment)>
/**
 * Called when a Fragment is being attached to this activity, immediately
 * after the call to its {@link Fragment#onAttach Fragment.onAttach()}
 * method and before {@link Fragment#onCreate Fragment.onCreate()}.
 *
 * @deprecated Use {@link
 * android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)}
 */
====>[PUBLIC]<android.app.Activity: void onAttachFragment(Fragment)>    ---->    android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)
<android.telecom.StatusHints: ComponentName getPackageName()>
/**
 * @return A package used to load the icon.
 *
 * @hide
 */
====>[HIDDEN]<android.telecom.StatusHints: ComponentName getPackageName()>    ---->
<androidx.core.widget.ListPopupWindowCompat: OnTouchListener createDragToOpenListener(Object,View)>
/**
 * On API {@link android.os.Build.VERSION_CODES#KITKAT} and higher, returns
 * an {@link OnTouchListener} that can be added to the source view to
 * implement drag-to-open behavior. Generally, the source view should be the
 * same view that was passed to ListPopupWindow.setAnchorView(View).
 * <p>
 * When the listener is set on a view, touching that view and dragging
 * outside of its bounds will open the popup window. Lifting will select the
 * currently touched list item.
 * <p>
 * Example usage:
 *
 * <pre>
 * ListPopupWindow myPopup = new ListPopupWindow(context);
 * myPopup.setAnchor(myAnchor);
 * OnTouchListener dragListener = myPopup.createDragToOpenListener(myAnchor);
 * myAnchor.setOnTouchListener(dragListener);
 * </pre>
 *
 * @param listPopupWindow the ListPopupWindow against which to invoke the
 * method
 * @param src the view on which the resulting listener will be set
 * @return a touch listener that controls drag-to-open behavior, or {@code null} on
 * unsupported APIs
 *
 * @deprecated Use {@link #createDragToOpenListener(ListPopupWindow, View)} that takes in
 * {@link ListPopupWindow} instead of {@link Object}.
 */
====>[PUBLIC]<androidx.core.widget.ListPopupWindowCompat: OnTouchListener createDragToOpenListener(Object,View)>    ---->    #createDragToOpenListener(ListPopupWindow, View)
<android.graphics.Canvas: boolean clipPath(Path,Op)>
/**
 * Modify the current clip with the specified path.
 *
 * @param path The path to operate on the current clip
 * @param op   How the clip is modified
 * @return     true if the resulting is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipPath(Path)} and
 * {@link #clipOutPath(Path)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipPath(Path,Op)>    ---->    Region.Op#INTERSECT
<com.android.internal.logging.MetricsLogger: void visibility(Context,int,int)>
/**
 * @deprecated use {@link #visibility(int, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visibility(Context,int,int)>    ---->    #visibility(int, int)
<androidx.leanback.widget.GuidedAction.Builder: void <init>()>
/**
 * @deprecated Use {@link GuidedAction.Builder#GuidedAction.Builder(Context)}.
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedAction.Builder: void <init>()>    ---->    GuidedAction.Builder#GuidedAction.Builder(Context)
<android.widget.OverScroller: void setFinalX(int)>
/**
 * Sets the final position (X) for this scroller.
 *
 * @param newX The new X offset as an absolute distance from the origin.
 * @see #extendDuration(int)
 * @see #setFinalY(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScroller's final position may change during an animation.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void setFinalX(int)>    ---->
<android.webkit.WebSettings: boolean getUseDoubleTree()>
/**
 * Controlled a rendering optimization that is no longer present. Setting
 * it now has no effect.
 *
 * @deprecated This setting now has no effect.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getUseDoubleTree()>    ---->
<android.renderscript.RSTextureView: void destroyRenderScriptGL()>
/**
 * @deprecated in API 16
 * Destroy the RenderScriptGL object associated with this
 * TextureView.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void destroyRenderScriptGL()>    ---->
<android.database.ContentObservable: void dispatchChange(boolean)>
/**
 * Invokes {@link ContentObserver#dispatchChange(boolean)} on each observer.
 * <p>
 * If <code>selfChange</code> is true, only delivers the notification
 * to the observer if it has indicated that it wants to receive self-change
 * notifications by implementing {@link ContentObserver#deliverSelfNotifications}
 * to return true.
 * </p>
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange(boolean, Uri)} instead.
 */
====>[PUBLIC]<android.database.ContentObservable: void dispatchChange(boolean)>    ---->    #dispatchChange(boolean, Uri)
<com.android.internal.telephony.uicc.UiccCard: boolean resetAppWithAid(String)>
/**
 * Resets the application with the input AID. Returns true if any changes were made.
 *
 * A null aid implies a card level reset - all applications must be reset.
 *
 * @deprecated Please use {@link UiccProfile#resetAppWithAid(String)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: boolean resetAppWithAid(String)>    ---->    UiccProfile#resetAppWithAid(String)
<androidx.core.view.MenuItemCompat: MenuItem setActionView(MenuItem,int)>
/**
 * Set an action view for this menu item. An action view will be displayed in place
 * of an automatically generated menu item element in the UI when this item is shown
 * as an action within a parent.
 * <p>
 * <strong>Note:</strong> Setting an action view overrides the action provider
 * set via {@link #setActionProvider(MenuItem, ActionProvider)}.
 * </p>
 *
 * @param item the item to change
 * @param resId Layout resource to use for presenting this item to the user.
 * @return This Item so additional setters can be called.
 *
 * @see #setShowAsAction(MenuItem, int)
 *
 * @deprecated Use {@link MenuItem#setActionView(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: MenuItem setActionView(MenuItem,int)>    ---->    MenuItem#setActionView(int)
<android.os.Debug: void resetThreadAllocSize()>
/**
 * Clears the thread-local count of objects allocated.
 * @see #getThreadAllocSize()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadAllocSize()>    ---->
<android.telephony.TelephonyManager: boolean endCall()>
/**
 * @deprecated Use {@link android.telecom.TelecomManager#endCall()} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean endCall()>    ---->    android.telecom.TelecomManager#endCall()
<com.android.setupwizardlib.template.RecyclerMixin: void setDividerInset(int)>
/**
 * @deprecated Use {@link #setDividerInsets(int, int)} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.template.RecyclerMixin: void setDividerInset(int)>    ---->    #setDividerInsets(int, int)
<android.support.v8.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>
/**
 * Sets an input of the ScriptGroup. This specifies an
 * Allocation to be used for kernels that require an input
 * Allocation provided from outside of the ScriptGroup.
 *
 * @deprecated Set arguments to {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.support.v8.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>    ---->    #execute(Object...)
<android.util.proto.ProtoOutputStream: void writeUInt64(long,long)>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeUInt64(long,long)>    ---->    #write
<android.app.Activity: void stopManagingCursor(Cursor)>
/**
 * Given a Cursor that was previously given to
 * {@link #startManagingCursor}, stop the activity's management of that
 * cursor.
 *
 * <p><strong>Warning:</strong> After calling this method on a cursor from a managed query,
 * the system <em>will not</em> automatically close the cursor and you must call
 * {@link Cursor#close()}.</p>
 *
 * @param c The Cursor that was being managed.
 *
 * @see #startManagingCursor
 *
 * @deprecated Use the new {@link android.content.CursorLoader} class with
 * {@link LoaderManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void stopManagingCursor(Cursor)>    ---->    android.content.CursorLoader
<android.net.NetworkInfo: void setType(int)>
/**
 * @deprecated Use {@link NetworkCapabilities} instead
 * @hide
 */
====>[HIDDEN]<android.net.NetworkInfo: void setType(int)>    ---->    NetworkCapabilities
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
/**
 * Ensure that a network route exists to deliver traffic to the specified
 * host via the specified network interface. An attempt to add a route that
 * already exists is ignored, but treated as successful.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType the type of the network over which traffic to the specified
 * host is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 *
 * @deprecated Deprecated in favor of the
 * {@link #requestNetwork(NetworkRequest, NetworkCallback)},
 * {@link #bindProcessToNetwork} and {@link Network#getSocketFactory} API.
 * In {@link VERSION_CODES#M}, and above, this method is unsupported and will
 * throw {@code UnsupportedOperationException} if called.
 * @removed
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>    ---->    #requestNetwork(NetworkRequest, NetworkCallback)
<android.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>
/**
 * Sets the alert dialog to use the inverse background, regardless of
 * what the contents is.
 *
 * @param useInverseBackground whether to use the inverse background
 * @return this Builder object to allow for chaining of calls to set methods
 * @deprecated This flag is only used for pre-Material themes. Instead,
 * specify the window background using on the alert dialog
 * theme.
 */
====>[PUBLIC]<android.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>    ---->    d for pre-Material themes.
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setToIndex(int)>
/**
 * Sets the index of text selection end or the index of the last
 * visible item when scrolling.
 *
 * @param toIndex The index of selection end or last item index.
 *
 * @deprecated Use {@link AccessibilityRecord#setToIndex(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setToIndex(int)>    ---->    AccessibilityRecord#setToIndex(int)
<android.location.LocationManager: void removeGpsNavigationMessageListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #unregisterGnssNavigationMessageCallback} instead.
 * @hide
 * @deprecated use
 * {@link #unregisterGnssNavigationMessageCallback(GnssNavigationMessage.Callback)}
 * instead
 */
====>[HIDDEN]<android.location.LocationManager: void removeGpsNavigationMessageListener(Listener)>    ---->    #unregisterGnssNavigationMessageCallback(GnssNavigationMessage.Callback)
<androidx.fragment.app.FragmentController: void dumpLoaders(String,FileDescriptor,PrintWriter,String[])>
/**
 * Dumps the current state of the loaders.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void dumpLoaders(String,FileDescriptor,PrintWriter,String[])>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setEnabled(boolean)>
/**
 * Sets if the source is enabled.
 *
 * @param isEnabled True if the view is enabled, false otherwise.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#isEnabled()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setEnabled(boolean)>    ---->    AccessibilityRecord#isEnabled()
<android.renderscript.ProgramVertex: Element getInput(int)>
/**
 * @deprecated in API 16
 * @param slot location of the input to return
 * @return input attribute element
 */
====>[PUBLIC]<android.renderscript.ProgramVertex: Element getInput(int)>    ---->
<android.net.NetworkInfo: State getState()>
/**
 * Reports the current coarse-grained state of the network.
 * @return the coarse-grained state
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: State getState()>    ---->    android.net.ConnectivityManager.NetworkCallback
<androidx.legacy.app.FragmentCompat: void setUserVisibleHint(Fragment,boolean)>
/**
 * Call {@link Fragment#setUserVisibleHint(boolean) setUserVisibleHint(boolean)}
 * if running on an appropriate version of the platform.
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: void setUserVisibleHint(Fragment,boolean)>    ---->    androidx.fragment.app.Fragment
<android.os.Bundle: IBinder getIBinder(String)>
/**
 * Returns the value associated with the given key, or null if
 * no mapping of the desired type exists for the given key or a null
 * value is explicitly associated with the key.
 *
 * @param key a String, or null
 * @return an IBinder value, or null
 *
 * @deprecated
 * @hide This is the old name of the function.
 */
====>[HIDDEN]<android.os.Bundle: IBinder getIBinder(String)>    ---->
<android.net.ConnectivityManager: ConnectivityManager getInstance()>
/**
 * @deprecated - use getSystemService. This is a kludge to support static access in certain
 * situations where a Context pointer is unavailable.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: ConnectivityManager getInstance()>    ---->
<android.util.proto.ProtoOutputStream: void writePackedBool(long,boolean[])>
/**
 * Write a list of packed proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedBool(long,boolean[])>    ---->    #write
<android.animation.LayoutTransition: void hideChild(ViewGroup,View)>
/**
 * @deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.
 */
====>[PUBLIC]<android.animation.LayoutTransition: void hideChild(ViewGroup,View)>    ---->    #hideChild(android.view.ViewGroup, android.view.View, int)
<androidx.car.drawer.CarDrawerActivity: CarDrawerAdapter getRootAdapter()>
/**
 * @return Adapter for root content of the Drawer.
 * @deprecated Do not implement this, instead call {@link #getDrawerController}.
 * {@link CarDrawerController#setRootAdapter(CarDrawerAdapter)} directly.
 */
====>[PUBLIC]<androidx.car.drawer.CarDrawerActivity: CarDrawerAdapter getRootAdapter()>    ---->    #getDrawerController
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,int)>
/**
 * @deprecated TO BE REMOVED.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,int)>    ---->
<android.widget.RemoteViews: RemoteViews clone()>
/**
 * Returns a deep copy of the RemoteViews object. The RemoteView may not be
 * attached to another RemoteView -- it must be the root of a hierarchy.
 *
 * @deprecated use {@link #RemoteViews(RemoteViews)} instead.
 * @throws IllegalStateException if this is not the root of a RemoteView
 * hierarchy
 */
====>[PUBLIC]<android.widget.RemoteViews: RemoteViews clone()>    ---->    #RemoteViews(RemoteViews)
<androidx.core.widget.ScrollerCompat: boolean computeScrollOffset()>
/**
 * Call this when you want to know the new location.  If it returns true,
 * the animation is not yet finished.  loc will be altered to provide the
 * new location.
 *
 * @deprecated Use {@link OverScroller#computeScrollOffset()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: boolean computeScrollOffset()>    ---->    OverScroller#computeScrollOffset()
<androidx.leanback.widget.PlaybackControlsRow: long getTotalTimeLong()>
/**
 * Returns the total time in milliseconds of long type for the playback controls row.
 * @deprecated use {@link #getDuration()}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: long getTotalTimeLong()>    ---->    #getDuration()
<android.util.proto.ProtoOutputStream: void writeRepeatedFixed32(long,int)>
/**
 * Write a single repeated proto "fixed32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedFixed32(long,int)>    ---->    #write
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve resolve info for instant applications immediately.
 *
 * @param digestPrefix The hash prefix of the instant app's domain.
 * @deprecated should implement {@link #onGetInstantAppResolveInfo(Intent, int[], String,
 * InstantAppResolutionCallback)}
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppResolveInfo(Intent, int[], String,  InstantAppResolutionCallback)
<androidx.core.view.ViewCompat: void setPivotY(View,float)>
/**
 * Sets the y location of the point around which the view is
 * {@link #setRotation(View, float) rotated} and {@link #setScaleY(View, float) scaled}.
 * By default, the pivot point is centered on the object.
 * Setting this property disables this behavior and causes the view to use only the
 * explicitly set pivotX and pivotY values.
 *
 * @param value The y location of the pivot point.
 *
 * @deprecated Use {@link View#setPivotX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setPivotY(View,float)>    ---->    View#setPivotX(float)
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)>
/**
 * Request audio focus.
 * Send a request to obtain the audio focus
 * @param l the listener to be notified of audio focus changes
 * @param streamType the main audio stream type affected by the focus request
 * @param durationHint use {@link #AUDIOFOCUS_GAIN_TRANSIENT} to indicate this focus request
 * is temporary, and focus will be abandonned shortly. Examples of transient requests are
 * for the playback of driving directions, or notifications sounds.
 * Use {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} to indicate also that it's ok for
 * the previous focus owner to keep playing if it ducks its audio output.
 * Alternatively use {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} for a temporary request
 * that benefits from the system not playing disruptive sounds like notifications, for
 * usecases such as voice memo recording, or speech recognition.
 * Use {@link #AUDIOFOCUS_GAIN} for a focus request of unknown duration such
 * as the playback of a song or a video.
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #requestAudioFocus(AudioFocusRequest)}
 */
====>[PUBLIC]<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,int,int)>    ---->    #requestAudioFocus(AudioFocusRequest)
<android.renderscript.Element: Element MATRIX4X4(RenderScript)>
/**
 * @deprecated use MATRIX_4X4
 */
====>[PUBLIC]<android.renderscript.Element: Element MATRIX4X4(RenderScript)>    ---->
<android.security.keystore.recovery.RecoverySession: Map<String, byte[]> recoverKeys(byte[],List<WrappedApplicationKey>)>
/**
 * @deprecated Use {@link #recoverKeyChainSnapshot(byte[], List)} instead.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoverySession: Map<String, byte[]> recoverKeys(byte[],List<WrappedApplicationKey>)>    ---->    #recoverKeyChainSnapshot(byte[], List)
<com.android.internal.telephony.uicc.UiccCard: void iccTransmitApduBasicChannel(int,int,int,int,int,String,Message)>
/**
 * Exposes {@link CommandsInterface#iccTransmitApduBasicChannel}
 * @deprecated Please use
 * {@link UiccProfile#iccTransmitApduBasicChannel(int, int, int, int, int, String, Message)}
 * instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void iccTransmitApduBasicChannel(int,int,int,int,int,String,Message)>    ---->    UiccProfile#iccTransmitApduBasicChannel(int, int, int, int, int, String, Message)
<java.util.Date: int getHours()>
/**
 * Returns the hour represented by this <tt>Date</tt> object. The
 * returned value is a number (<tt>0</tt> through <tt>23</tt>)
 * representing the hour within the day that contains or begins
 * with the instant in time represented by this <tt>Date</tt>
 * object, as interpreted in the local time zone.
 *
 * @return  the hour represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.HOUR_OF_DAY)</code>.
 */
====>[PUBLIC]<java.util.Date: int getHours()>    ---->
<android.view.ViewConfiguration: int getWindowTouchSlop()>
/**
 * @return Distance in dips a touch must be outside the bounds of a window for it
 * to be counted as outside the window for purposes of dismissing that
 * window.
 *
 * @deprecated Use {@link #getScaledWindowTouchSlop()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getWindowTouchSlop()>    ---->    #getScaledWindowTouchSlop()
<com.android.ims.ImsConnectionStateListener: void onFeatureCapabilityChanged(int,int[],int[])>
/**
 * Called when its current IMS connection feature capability changes.
 * @deprecated Not used in newer IMS provider implementations.
 */
====>[PUBLIC]<com.android.ims.ImsConnectionStateListener: void onFeatureCapabilityChanged(int,int[],int[])>    ---->
<android.os.storage.StorageManager: void enableUsbMassStorage()>
/**
 * Enables USB Mass Storage (UMS) on the device.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: void enableUsbMassStorage()>    ---->
<java.lang.SecurityManager: ClassLoader currentClassLoader()>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: ClassLoader currentClassLoader()>    ---->    #checkPermission
<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)>
/**
 * set the flag to control whether url intercept is enabled or disabled
 *
 * @param disabled {@code true} to disable the cache
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)>    ---->
<android.graphics.Paint: Rasterizer getRasterizer()>
/**
 * Get the paint's rasterizer (or null).
 * <p />
 * The raster controls/modifies how paths/text are turned into alpha masks.
 *
 * @return         the paint's rasterizer (or null)
 *
 * @deprecated Rasterizer is not supported by either the HW or PDF backends.
 * @removed
 */
====>[HIDDEN]<android.graphics.Paint: Rasterizer getRasterizer()>    ---->
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,boolean)>
/**
 * @deprecated TO BE REMOVED.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,boolean)>    ---->
<java.net.Socket: void <init>(InetAddress,int,boolean)>
/**
 * Creates a socket and connects it to the specified port number at
 * the specified IP address.
 * <p>
 * If the stream argument is {@code true}, this creates a
 * stream socket. If the stream argument is {@code false}, it
 * creates a datagram socket.
 * <p>
 * If the application has specified a server socket factory, that
 * factory's {@code createSocketImpl} method is called to create
 * the actual socket implementation. Otherwise a "plain" socket is created.
 *
 * <p>If there is a security manager, its
 * {@code checkConnect} method is called
 * with {@code host.getHostAddress()} and {@code port}
 * as its arguments. This could result in a SecurityException.
 * <p>
 * If UDP socket is used, TCP/IP related socket options will not apply.
 *
 * @param      host     the IP address.
 * @param      port      the port number.
 * @param      stream    if {@code true}, create a stream socket;
 * otherwise, create a datagram socket.
 * @exception  IOException  if an I/O error occurs when creating the socket.
 * @exception  SecurityException  if a security manager exists and its
 * {@code checkConnect} method doesn't allow the operation.
 * @exception  IllegalArgumentException if the port parameter is outside
 * the specified range of valid port values, which is between
 * 0 and 65535, inclusive.
 * @exception  NullPointerException if {@code host} is null.
 * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)
 * @see        java.net.SocketImpl
 * @see        java.net.SocketImplFactory#createSocketImpl()
 * @see        SecurityManager#checkConnect
 * @deprecated Use DatagramSocket instead for UDP transport.
 */
====>[PUBLIC]<java.net.Socket: void <init>(InetAddress,int,boolean)>    ---->    DatagramSocket
<java.lang.Runtime: InputStream getLocalizedInputStream(InputStream)>
/**
 * Creates a localized version of an input stream. This method takes
 * an <code>InputStream</code> and returns an <code>InputStream</code>
 * equivalent to the argument in all respects except that it is
 * localized: as characters in the local character set are read from
 * the stream, they are automatically converted from the local
 * character set to Unicode.
 * <p>
 * If the argument is already a localized stream, it may be returned
 * as the result.
 *
 * @param      in InputStream to localize
 * @return     a localized input stream
 * @see        java.io.InputStream
 * @see        java.io.BufferedReader#BufferedReader(java.io.Reader)
 * @see        java.io.InputStreamReader#InputStreamReader(java.io.InputStream)
 * @deprecated As of JDK&nbsp;1.1, the preferred way to translate a byte
 * stream in the local encoding into a character stream in Unicode is via
 * the <code>InputStreamReader</code> and <code>BufferedReader</code>
 * classes.
 */
====>[PUBLIC]<java.lang.Runtime: InputStream getLocalizedInputStream(InputStream)>    ---->
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
/**
 * Checks whether a Bluetooth A2DP audio peripheral is connected or not.
 *
 * @return true if a Bluetooth A2DP peripheral is connected
 * false if otherwise
 * @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.
 */
====>[PUBLIC]<android.media.AudioManager: boolean isBluetoothA2dpOn()>    ---->    AudioManager#getDevices(int)
<com.android.internal.graphics.palette.Palette.Builder: Builder resizeBitmapSize(int)>
/**
 * Set the resize value when using a {@link android.graphics.Bitmap} as the source.
 * If the bitmap's largest dimension is greater than the value specified, then the bitmap
 * will be resized so that its largest dimension matches {@code maxDimension}. If the
 * bitmap is smaller or equal, the original is used as-is.
 *
 * @deprecated Using {@link #resizeBitmapArea(int)} is preferred since it can handle
 * abnormal aspect ratios more gracefully.
 *
 * @param maxDimension the number of pixels that the max dimension should be scaled down to,
 * or any value <= 0 to disable resizing.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette.Builder: Builder resizeBitmapSize(int)>    ---->    #resizeBitmapArea(int)
Inconsistency (Non-Documentation):<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)>

====>[PUBLIC]<android.app.ContextImpl: void removeStickyBroadcastAsUser(Intent,UserHandle)>    ---->
<android.location.Location: void removeVerticalAccuracy()>
/**
 * Remove the vertical accuracy from this location.
 *
 * <p>Following this call {@link #hasVerticalAccuracy} will return false, and
 * {@link #getVerticalAccuracyMeters} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeVerticalAccuracy()>    ---->
<com.android.internal.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>
/**
 * Calculate a MeasureSpec value for measuring a child view in one dimension.
 *
 * @param parentSize Size of the parent view where the child will be placed
 * @param padding Total space currently consumed by other elements of the parent
 * @param childDimension Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.
 * Generally obtained from the child view's LayoutParams
 * @param canScroll true if the parent RecyclerView can scroll in this dimension
 *
 * @return a MeasureSpec value for the child view
 * @deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutManager: int getChildMeasureSpec(int,int,int,boolean)>    ---->    #getChildMeasureSpec(int, int, int, int, boolean)
<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(VerticalGridView)>
/**
 * Sets up default focus highlight behavior of a focused item in header list. It would scale
 * the focused item and update
 * {@link RowHeaderPresenter#onSelectLevelChanged(RowHeaderPresenter.ViewHolder)}.
 * Equivalent to call setupHeaderItemFocusHighlight(gridView, true).
 *
 * @param gridView  The header list.
 * @deprecated Use {@link #setupHeaderItemFocusHighlight(ItemBridgeAdapter)}
 */
====>[PUBLIC]<androidx.leanback.widget.FocusHighlightHelper: void setupHeaderItemFocusHighlight(VerticalGridView)>    ---->    #setupHeaderItemFocusHighlight(ItemBridgeAdapter)
<android.hardware.location.ContextHubManager: int registerCallback(ICallback)>
/**
 * @deprecated Use {@link #registerCallback(Callback)} instead.
 * @hide
 */
====>[HIDDEN]<android.hardware.location.ContextHubManager: int registerCallback(ICallback)>    ---->    #registerCallback(Callback)
<android.app.ActionBar: void selectTab(Tab)>
/**
 * Select the specified tab. If it is not a child of this action bar it will be added.
 *
 * <p>Note: If you want to select by index, use {@link #setSelectedNavigationItem(int)}.</p>
 *
 * @param tab Tab to select
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void selectTab(Tab)>    ---->
<java.io.File: URL toURL()>
/**
 * Converts this abstract pathname into a <code>file:</code> URL.  The
 * exact form of the URL is system-dependent.  If it can be determined that
 * the file denoted by this abstract pathname is a directory, then the
 * resulting URL will end with a slash.
 *
 * @return  A URL object representing the equivalent file URL
 *
 * @throws  MalformedURLException
 * If the path cannot be parsed as a URL
 *
 * @see     #toURI()
 * @see     java.net.URI
 * @see     java.net.URI#toURL()
 * @see     java.net.URL
 * @since   1.2
 *
 * @deprecated This method does not automatically escape characters that
 * are illegal in URLs.  It is recommended that new code convert an
 * abstract pathname into a URL by first converting it into a URI, via the
 * {@link #toURI() toURI} method, and then converting the URI into a URL
 * via the {@link java.net.URI#toURL() URI.toURL} method.
 */
====>[PUBLIC]<java.io.File: URL toURL()>    ---->    #toURI() toURI
<android.media.AudioTrack: void setState(int)>
/**
 * Sets the initialization state of the instance. This method was originally intended to be used
 * in an AudioTrack subclass constructor to set a subclass-specific post-initialization state.
 * However, subclasses of AudioTrack are no longer recommended, so this method is obsolete.
 * @param state the state of the AudioTrack instance
 * @deprecated Only accessible by subclasses, which are not recommended for AudioTrack.
 */
====>[PUBLIC]<android.media.AudioTrack: void setState(int)>    ---->
<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.InternalBuilder: InternalBuilder addInput(Element)>    ---->
<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: Builder setPointSpriteEnabled(boolean)>    ---->
<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreAction(PendingIntent)>
/**
 * If all content in a slice cannot be shown, a "see more" affordance may be displayed where
 * the content is cut off. The action added here should take the user to an activity to see
 * all of the content, and will be invoked when the "see more" affordance is tapped.
 * <p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridRowBuilder: GridRowBuilder addSeeMoreAction(PendingIntent)>    ---->
<java.sql.CallableStatement: BigDecimal getBigDecimal(int,int)>
/**
 * Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a
 * <code>java.math.BigDecimal</code> object with <i>scale</i> digits to
 * the right of the decimal point.
 * @param parameterIndex the first parameter is 1, the second is 2,
 * and so on
 * @param scale the number of digits to the right of the decimal point
 * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
 * is <code>null</code>.
 * @exception SQLException if the parameterIndex is not valid;
 * if a database access error occurs or
 * this method is called on a closed <code>CallableStatement</code>
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated use <code>getBigDecimal(int parameterIndex)</code>
 * or <code>getBigDecimal(String parameterName)</code>
 * @see #setBigDecimal
 */
====>[PUBLIC]<java.sql.CallableStatement: BigDecimal getBigDecimal(int,int)>    ---->    #setBigDecimal
<android.provider.Contacts.ContactMethods: String encodePredefinedImProtocol(int)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: String encodePredefinedImProtocol(int)>    ---->    android.provider.ContactsContract
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setPassword(boolean)>
/**
 * Sets if the source is a password field.
 *
 * @param isPassword True if the view is a password field, false otherwise.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setPassword(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setPassword(boolean)>    ---->    AccessibilityRecord#setPassword(boolean)
<android.telephony.gsm.SmsMessage: String getOriginatingAddress()>
/**
 * Returns the originating address (sender) of this SMS message in String
 * form or null if unavailable
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getOriginatingAddress()>    ---->
<android.telephony.SmsMessage: SmsMessage createFromPdu(byte[])>
/**
 * Create an SmsMessage from a raw PDU. Guess format based on Voice
 * technology first, if it fails use other format.
 * All applications which handle
 * incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast
 * intent <b>must</b> now pass the new {@code format} String extra from the intent
 * into the new method {@code createFromPdu(byte[], String)} which takes an
 * extra format parameter. This is required in order to correctly decode the PDU on
 * devices that require support for both 3GPP and 3GPP2 formats at the same time,
 * such as dual-mode GSM/CDMA and CDMA/LTE phones.
 * @deprecated Use {@link #createFromPdu(byte[], String)} instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: SmsMessage createFromPdu(byte[])>    ---->    #createFromPdu(byte[], String)
<androidx.leanback.app.GuidedStepSupportFragment: void onGuidedActionEdited(GuidedAction)>
/**
 * Callback invoked when an action's title or description has been edited, this happens either
 * when user clicks confirm button in IME or user closes IME window by BACK key.
 * @deprecated Override {@link #onGuidedActionEditedAndProceed(GuidedAction)} and/or
 * {@link #onGuidedActionEditCanceled(GuidedAction)}.
 */
====>[PUBLIC]<androidx.leanback.app.GuidedStepSupportFragment: void onGuidedActionEdited(GuidedAction)>    ---->    #onGuidedActionEditedAndProceed(GuidedAction)
<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()>
/**
 * Retrieve the set of output buffers.  Call this after start()
 * returns and whenever dequeueOutputBuffer signals an output
 * buffer change by returning {@link
 * #INFO_OUTPUT_BUFFERS_CHANGED}. After calling this method, any
 * ByteBuffers previously returned by an earlier call to this
 * method MUST no longer be used.
 *
 * @deprecated Use the new {@link #getOutputBuffer} method instead
 * each time an output buffer is dequeued.  This method is not
 * supported if codec is configured in asynchronous mode.
 *
 * <b>Note:</b> As of API 21, the position and limit of output
 * buffers that are dequeued will be set to the valid data
 * range.
 *
 * <em>Do not use this method if using an output surface.</em>
 *
 * @throws IllegalStateException if not in the Executing state,
 * or codec is configured in asynchronous mode.
 * @throws MediaCodec.CodecException upon codec error.
 */
====>[PUBLIC]<android.media.MediaCodec: ByteBuffer[] getOutputBuffers()>    ---->    #getOutputBuffer
<com.android.internal.telephony.uicc.UiccCard: void registerForCarrierPrivilegeRulesLoaded(Handler,int,Object)>
/**
 * Notifies handler when carrier privilege rules are loaded.
 * @deprecated Please use
 * {@link UiccProfile#registerForCarrierPrivilegeRulesLoaded(Handler, int, Object)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void registerForCarrierPrivilegeRulesLoaded(Handler,int,Object)>    ---->    UiccProfile#registerForCarrierPrivilegeRulesLoaded(Handler, int, Object)
<android.net.Proxy: int getDefaultPort()>
/**
 * Return the default proxy port specified by the carrier.
 * @return The port number to be used with the proxy host or -1 if there is
 * no proxy for this carrier.
 * @deprecated Use standard java vm proxy values to find the host, port and
 * exclusion list.  This call ignores the exclusion list and no
 * longer reports only mobile-data apn-based proxy values.
 */
====>[PUBLIC]<android.net.Proxy: int getDefaultPort()>    ---->
<android.drm.DrmStore.DrmObjectType: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.DrmObjectType: void <init>()>    ---->
<androidx.core.net.TrafficStatsCompat: void incrementOperationCount(int,int)>
/**
 * Increment count of network operations performed under the given
 * accounting tag. This can be used to derive bytes-per-operation.
 *
 * @param tag Accounting tag used in {@link #setThreadStatsTag(int)}.
 * @param operationCount Number of operations to increment count by.
 *
 * @deprecated Use {@link TrafficStats#incrementOperationCount(int, int)} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void incrementOperationCount(int,int)>    ---->    TrafficStats#incrementOperationCount(int, int)
<android.app.ActivityManager: int getMaxNumPictureInPictureActions()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.ActivityManager: int getMaxNumPictureInPictureActions()>    ---->
<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>
/**
 * @hide
 * @deprecated use {@link #setDataEnabled(boolean)} instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>    ---->    #setDataEnabled(boolean)
<com.android.internal.logging.MetricsLogger: void visibility(Context,int,boolean)>
/**
 * @deprecated use {@link #visibility(int, boolean)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visibility(Context,int,boolean)>    ---->    #visibility(int, boolean)
<android.widget.CalendarView: int getFocusedMonthDateColor()>
/**
 * Gets the color for the dates in the focused month.
 *
 * @return The focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_focusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getFocusedMonthDateColor()>    ---->
<androidx.palette.graphics.Palette: Palette generate(Bitmap)>
/**
 * @deprecated Use {@link Builder} to generate the Palette.
 */
====>[PUBLIC]<androidx.palette.graphics.Palette: Palette generate(Bitmap)>    ---->    Builder
<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)>
/**
 * Given a legacy type (TYPE_WIFI, ...) returns a NetworkCapabilities
 * instance suitable for registering a request or callback.  Throws an
 * IllegalArgumentException if no mapping from the legacy type to
 * NetworkCapabilities is known.
 *
 * @deprecated Types are deprecated. Use {@link NetworkCallback} or {@link NetworkRequest}
 * to find the network instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: NetworkCapabilities networkCapabilitiesForType(int)>    ---->    NetworkCallback
<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)>
/**
 * WPS suport has been deprecated from Client mode and this method will immediately trigger
 * {@link WpsCallback#onFailed(int)} with a generic error.
 *
 * @param config WPS configuration (does not support {@link WpsInfo#LABEL})
 * @param listener for callbacks on success or failure. Can be null.
 * @throws IllegalStateException if the WifiManager instance needs to be initialized again
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager: void startWps(WpsInfo,WpsCallback)>    ---->
<android.hardware.SensorManager: int configureDirectChannel(SensorDirectChannel,Sensor,int)>
/**
 * @removed
 */
====>[HIDDEN]<android.hardware.SensorManager: int configureDirectChannel(SensorDirectChannel,Sensor,int)>    ---->
<android.speech.tts.UtteranceProgressListener: void onError(String)>
/**
 * Called when an error has occurred during processing. This can be called
 * at any point in the synthesis process. Note that there might be calls
 * to {@link #onStart(String)} for specified utteranceId but there will never
 * be a call to both {@link #onDone(String)} and {@link #onError(String)} for
 * the same utterance.
 *
 * @param utteranceId The utterance ID of the utterance.
 * @deprecated Use {@link #onError(String,int)} instead
 */
====>[PUBLIC]<android.speech.tts.UtteranceProgressListener: void onError(String)>    ---->    #onError(String,int)
<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()>
/**
 * @deprecated in API 16
 * Returns the type of a renderscript object the index entry
 * describes
 * @return type of a renderscript object the index entry
 * describes
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: EntryType getEntryType()>    ---->
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,String,int,ResultCallback<SendSmsResult>)>
/**
 * Override this method to intercept binary SMSs sent from the device.
 * @deprecated Override {@link #onSendDataSms} below instead.
 *
 * @param data the binary content
 * @param subId SMS subscription ID of the SIM
 * @param destAddress phone number of the recipient of the message
 * @param destPort the destination port
 * @param callback result callback. Call with a {@link SendSmsResult}.
 */
====>[PUBLIC]<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,String,int,ResultCallback<SendSmsResult>)>    ---->    #onSendDataSms
<android.net.Proxy: String getHost(Context)>
/**
 * Return the proxy host set by the user.
 * @param ctx A Context used to get the settings for the proxy host.
 * @return String containing the host name. If the user did not set a host
 * name it returns the default host. A null value means that no
 * host is to be used.
 * @deprecated Use standard java vm proxy values to find the host, port
 * and exclusion list.  This call ignores the exclusion list.
 */
====>[PUBLIC]<android.net.Proxy: String getHost(Context)>    ---->
<android.net.NetworkStatsHistory: void generateRandom(long,long,long,long,long,long,long,Random)>
/**
 * @deprecated only for temporary testing
 */
====>[PUBLIC]<android.net.NetworkStatsHistory: void generateRandom(long,long,long,long,long,long,long,Random)>    ---->
<androidx.core.app.NotificationCompat.MessagingStyle.Message: CharSequence getSender()>
/**
 * Get the text used to display the contact's name in the messaging experience
 *
 * @deprecated Use {@link #getPerson()}
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.MessagingStyle.Message: CharSequence getSender()>    ---->    #getPerson()
<android.util.proto.ProtoOutputStream: void writePackedSFixed64(long,long[])>
/**
 * Write a list of packed proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSFixed64(long,long[])>    ---->    #write
<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)>
/**
 * @deprecated use ActivityManager.broadcastStickyIntent instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void broadcastStickyIntent(Intent,String,int)>    ---->    ActivityManager.broadcastStickyIntent
<android.database.ContentObserver: void dispatchChange(boolean)>
/**
 * Dispatches a change notification to the observer.
 * <p>
 * If a {@link Handler} was supplied to the {@link ContentObserver} constructor,
 * then a call to the {@link #onChange} method is posted to the handler's message queue.
 * Otherwise, the {@link #onChange} method is invoked immediately on this thread.
 * </p>
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange(boolean, Uri)} instead.
 */
====>[PUBLIC]<android.database.ContentObserver: void dispatchChange(boolean)>    ---->    #dispatchChange(boolean, Uri)
<com.android.internal.logging.MetricsLogger: void histogram(Context,String,int)>
/**
 * Increment the bucket with the integer label on the histogram with the given name.
 * @deprecated use {@link #histogram(String, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void histogram(Context,String,int)>    ---->    #histogram(String, int)
<com.android.setupwizardlib.template.RecyclerMixin: int getDividerInset()>
/**
 * @return The number of pixels inset on the start side of the divider.
 * @deprecated This is the same as {@link #getDividerInsetStart()}. Use that instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.template.RecyclerMixin: int getDividerInset()>    ---->    that
<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTimeLong(long)>
/**
 * Sets the current time in milliseconds for playback controls row in long type.
 * @param ms Current time in milliseconds of long type.
 * @deprecated use {@link #setCurrentPosition(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTimeLong(long)>    ---->    #setCurrentPosition(long)
<android.view.textclassifier.TextClassification.Builder: Builder setLabel(String)>
/**
 * Sets the label for the <i>primary</i> action that may be rendered on a widget used to
 * act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the
 * returned label represents the label of the first {@link RemoteAction} (if one exists).
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setLabel(String)>    ---->    #addAction(RemoteAction)
<android.security.keystore.recovery.RecoveryController: List<String> getAliases(String)>
/**
 * @deprecated Use {@link #getAliases()}.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: List<String> getAliases(String)>    ---->    #getAliases()
<android.telecom.Phone: AudioState getAudioState()>
/**
 * Obtains the current phone call audio state of the {@code Phone}.
 *
 * @return An object encapsulating the audio state.
 * @deprecated Use {@link #getCallAudioState()} instead.
 */
====>[PUBLIC]<android.telecom.Phone: AudioState getAudioState()>    ---->    #getCallAudioState()
<android.app.Notification.Builder: Builder setLights(int,int,int)>
/**
 * Set the desired color for the indicator LED on the device, as well as the
 * blink duty cycle (specified in milliseconds).
 *
 * Not all devices will honor all (or even any) of these values.
 *
 * @deprecated use {@link NotificationChannel#enableLights(boolean)} instead.
 * @see Notification#ledARGB
 * @see Notification#ledOnMS
 * @see Notification#ledOffMS
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setLights(int,int,int)>    ---->    NotificationChannel#enableLights(boolean)
<android.content.pm.PackageInstaller: void removeSessionCallback(SessionCallback)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void removeSessionCallback(SessionCallback)>    ---->
<androidx.appcompat.app.ActionBar: void addTab(Tab,int,boolean)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be inserted at
 * <code>position</code>.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 * @param setSelected True if the added tab should become the selected tab.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void addTab(Tab,int,boolean)>    ---->
<android.content.ContentResolver: void cancelSync(Uri)>
/**
 * Cancel any active or pending syncs that match the Uri. If the uri is null then
 * all syncs will be canceled.
 *
 * @param uri the uri of the provider to sync or null to sync all providers.
 * @deprecated instead use {@link #cancelSync(android.accounts.Account, String)}
 */
====>[PUBLIC]<android.content.ContentResolver: void cancelSync(Uri)>    ---->    #cancelSync(android.accounts.Account, String)
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
/**
 * Enables or disables the drawing cache for each child of this view group.
 *
 * @param enabled true to enable the cache, false to dispose of it
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>    ---->    #setLayerType(int, Paint)
<androidx.core.view.VelocityTrackerCompat: float getYVelocity(VelocityTracker,int)>
/**
 * Call {@link VelocityTracker#getYVelocity(int)}.
 * If running on a pre-{@link android.os.Build.VERSION_CODES#HONEYCOMB} device,
 * returns {@link VelocityTracker#getYVelocity()}.
 *
 * @deprecated Use {@link VelocityTracker#getYVelocity(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.VelocityTrackerCompat: float getYVelocity(VelocityTracker,int)>    ---->    VelocityTracker#getYVelocity(int)
<android.renderscript.RenderScriptGL: int getWidth()>
/**
 * @deprecated in API 16
 * return the width of the last set surface.
 *
 * @return int
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: int getWidth()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setSource(View,int)>
/**
 * Sets the source to be a virtual descendant of the given <code>root</code>.
 * If <code>virtualDescendantId</code> equals to {@link View#NO_ID} the root
 * is set as the source.
 * <p>
 * A virtual descendant is an imaginary View that is reported as a part of the view
 * hierarchy for accessibility purposes. This enables custom views that draw complex
 * content to report them selves as a tree of virtual views, thus conveying their
 * logical structure.
 * </p>
 *
 * @param root The root of the virtual subtree.
 * @param virtualDescendantId The id of the virtual descendant.
 *
 * @deprecated Use {@link #setSource(AccessibilityRecord, View, int)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setSource(View,int)>    ---->    #setSource(AccessibilityRecord, View, int)
<androidx.legacy.app.FragmentPagerAdapter: boolean isViewFromObject(View,Object)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: boolean isViewFromObject(View,Object)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<androidx.core.view.ViewCompat: int getLayerType(View)>
/**
 * Indicates what type of layer is currently associated with this view. By default
 * a view does not have a layer, and the layer type is {@link View#LAYER_TYPE_NONE}.
 * Refer to the documentation of
 * {@link #setLayerType(android.view.View, int, android.graphics.Paint)}
 * for more information on the different types of layers.
 *
 * @param view The view to fetch the layer type from
 * @return {@link View#LAYER_TYPE_NONE}, {@link View#LAYER_TYPE_SOFTWARE} or
 * {@link View#LAYER_TYPE_HARDWARE}
 *
 * @see #setLayerType(android.view.View, int, android.graphics.Paint)
 * @see View#LAYER_TYPE_NONE
 * @see View#LAYER_TYPE_SOFTWARE
 * @see View#LAYER_TYPE_HARDWARE
 *
 * @deprecated Use {@link View#getLayerType()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int getLayerType(View)>    ---->    View#getLayerType()
<android.telecom.Conference: void onAudioStateChanged(AudioState)>
/**
 * Notifies the {@link Conference} that the {@link #getAudioState()} property has a new value.
 *
 * @param state The new call audio state.
 * @deprecated Use {@link #onCallAudioStateChanged(CallAudioState)} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.Conference: void onAudioStateChanged(AudioState)>    ---->    #onCallAudioStateChanged(CallAudioState)
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(PendingIntent)>
/**
 * Unregister the receiver of MEDIA_BUTTON intents.
 * @param eventReceiver same PendingIntent that was registed with
 * {@link #registerMediaButtonEventReceiver(PendingIntent)}.
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterMediaButtonEventReceiver(PendingIntent)>    ---->    MediaSession
<android.provider.ContactsContract.StreamItems.StreamItemPhotos: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.StreamItems.StreamItemPhotos: void <init>()>    ---->
<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()>
/**
 * @deprecated in API 16
 * Used to load the object described by the index entry
 * @return base renderscript object described by the entry
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: BaseObj getObject()>    ---->
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedPreScroll(CoordinatorLayout,V,View,int,int,int[])>
/**
 * @deprecated You should now override
 * {@link #onNestedPreScroll(CoordinatorLayout, View, View, int, int, int[], int)}.
 * This method will still continue to be called if the type is
 * {@link ViewCompat#TYPE_TOUCH}.
 */
====>[PUBLIC]<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedPreScroll(CoordinatorLayout,V,View,int,int,int[])>    ---->    #onNestedPreScroll(CoordinatorLayout, View, View, int, int, int[], int)
<android.widget.DatePicker: void setCalendarViewShown(boolean)>
/**
 * Sets whether the {@link CalendarView} is shown.
 * <p>
 * <strong>Note:</strong> Calling this method has no effect when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @param shown {@code true} to show the calendar view, {@code false} to
 * hide it
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: void setCalendarViewShown(boolean)>    ---->
<android.renderscript.Mesh: int getVertexAllocationCount()>
/**
 * @deprecated in API 16
 * @return number of allocations containing vertex data
 */
====>[PUBLIC]<android.renderscript.Mesh: int getVertexAllocationCount()>    ---->
<java.security.Security: String getAlgorithmProperty(String,String)>
/**
 * Gets a specified property for an algorithm. The algorithm name
 * should be a standard name. See the <a href=
 * "{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html">
 * Java Cryptography Architecture Standard Algorithm Name Documentation</a>
 * for information about standard algorithm names.
 *
 * One possible use is by specialized algorithm parsers, which may map
 * classes to algorithms which they understand (much like Key parsers
 * do).
 *
 * @param algName the algorithm name.
 *
 * @param propName the name of the property to get.
 *
 * @return the value of the specified property.
 *
 * @deprecated This method used to return the value of a proprietary
 * property in the master file of the "SUN" Cryptographic Service
 * Provider in order to determine how to parse algorithm-specific
 * parameters. Use the new provider-based and algorithm-independent
 * {@code AlgorithmParameters} and {@code KeyFactory} engine
 * classes (introduced in the J2SE version 1.2 platform) instead.
 */
====>[PUBLIC]<java.security.Security: String getAlgorithmProperty(String,String)>    ---->
<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)>
/**
 * @deprecated in API 16
 * Adds an index set data type to the builder object
 *
 * @param t type of the index set data, could be null
 * @param p primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addIndexSetType(Type,Primitive)>    ---->
<androidx.tvprovider.media.tv.ChannelLogoUtils: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.tvprovider.media.tv.ChannelLogoUtils: void <init>()>    ---->
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)>
/**
 * @deprecated in API 16
 * Adds an allocation containing index buffer data and index type
 * to the builder
 *
 * @param a index set data allocation, could be null
 * @param p index set primitive type
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addIndexSetAllocation(Allocation,Primitive)>    ---->
<androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>
/**
 * Set a listener that will be notified of any changes in scroll state or position.
 *
 * @param listener Listener to set or null to clear
 *
 * @deprecated Use {@link #addOnScrollListener(OnScrollListener)} and
 * {@link #removeOnScrollListener(OnScrollListener)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(OnScrollListener)>    ---->    #addOnScrollListener(OnScrollListener)
<android.preference.PreferenceActivity: PreferenceManager getPreferenceManager()>
/**
 * Returns the {@link PreferenceManager} used by this activity.
 * @return The {@link PreferenceManager}.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: PreferenceManager getPreferenceManager()>    ---->
<android.opengl.EGLObjectHandle: int getHandle()>
/**
 * @deprecated Use {@link #getNativeHandle()} instead. Handles on
 * 64 bit platforms will be wider than java ints.
 */
====>[PUBLIC]<android.opengl.EGLObjectHandle: int getHandle()>    ---->    #getNativeHandle()
<android.text.format.DateUtils: String getAMPMString(int)>
/**
 * Return a localized string for AM or PM.
 * @param ampm Either {@link Calendar#AM Calendar.AM} or {@link Calendar#PM Calendar.PM}.
 * @throws IndexOutOfBoundsException if the ampm is out of bounds.
 * @return Localized version of "AM" or "PM".
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getAMPMString(int)>    ---->    java.text.SimpleDateFormat
<androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat: boolean isHeading()>
/**
 * Gets if the collection item is a heading. For example, section
 * heading, table header, etc.
 *
 * @return If the item is a heading.
 * @deprecated Use {@link AccessibilityNodeInfoCompat#isHeading()}
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat: boolean isHeading()>    ---->    AccessibilityNodeInfoCompat#isHeading()
<androidx.core.view.MotionEventCompat: int getPointerId(MotionEvent,int)>
/**
 * Call {@link MotionEvent#getPointerId(int)}.
 *
 * @deprecated Call {@link MotionEvent#getPointerId(int)} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getPointerId(MotionEvent,int)>    ---->    MotionEvent#getPointerId(int)
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedScrollAccepted(CoordinatorLayout,V,View,View,int)>
/**
 * @deprecated You should now override
 * {@link #onNestedScrollAccepted(CoordinatorLayout, View, View, View, int, int)}. This
 * method will still continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.
 */
====>[PUBLIC]<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedScrollAccepted(CoordinatorLayout,V,View,View,int)>    ---->    #onNestedScrollAccepted(CoordinatorLayout, View, View, View, int, int)
Inconsistency (Non-Documentation):<android.test.mock.MockCursor: boolean requery()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\test\mock\MockCursor.java
<android.test.mock.MockCursor: boolean requery()>

====>[PUBLIC]<android.test.mock.MockCursor: boolean requery()>    ---->
<android.provider.Contacts.People: Uri createPersonInMyContactsGroup(ContentResolver,ContentValues)>
/**
 * Creates a new contacts and adds it to the "My Contacts" group.
 *
 * @param resolver the ContentResolver to use
 * @param values the values to use when creating the contact
 * @return the URI of the contact, or null if the operation fails
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: Uri createPersonInMyContactsGroup(ContentResolver,ContentValues)>    ---->    android.provider.ContactsContract
<androidx.core.view.ViewCompat: int combineMeasuredStates(int,int)>
/**
 * Merge two states as returned by {@link #getMeasuredState(View)}.
 * @param curState The current state as returned from a view or the result
 * of combining multiple views.
 * @param newState The new view state to combine.
 * @return Returns a new integer reflecting the combination of the two
 * states.
 *
 * @deprecated Use {@link View#combineMeasuredStates(int, int)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int combineMeasuredStates(int,int)>    ---->    View#combineMeasuredStates(int, int)
<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>
/**
 * Checks if a given type uses the cellular data connection.
 * This should be replaced in the future by a network property.
 * @param networkType the type to check
 * @return a boolean - {@code true} if uses cellular network, else {@code false}
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>    ---->    NetworkCapabilities
<androidx.leanback.widget.picker.Picker: CharSequence getSeparator()>
/**
 * Gets separator string between columns.
 *
 * @return The separator that will be populated between all the Picker columns.
 * @deprecated Use {@link #getSeparators()}
 */
====>[PUBLIC]<androidx.leanback.widget.picker.Picker: CharSequence getSeparator()>    ---->    #getSeparators()
<androidx.core.view.ViewCompat: void jumpDrawablesToCurrentState(View)>
/**
 * On API 11 devices and above, call <code>Drawable.jumpToCurrentState()</code>
 * on all Drawable objects associated with this view.
 * <p>
 * On API 21 and above, also calls <code>StateListAnimator#jumpToCurrentState()</code>
 * if there is a StateListAnimator attached to this view.
 *
 * @deprecated Use {@link View#jumpDrawablesToCurrentState()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void jumpDrawablesToCurrentState(View)>    ---->    View#jumpDrawablesToCurrentState()
<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)>
/**
 * @deprecated in API 16
 * Set the default ProgramFragment object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramFragment(ProgramFragment)>    ---->
<android.webkit.WebStorage: void setQuotaForOrigin(String,long)>
/**
 * Sets the storage quota for the Web SQL Database API for the given origin.
 * The quota is specified in bytes and the origin is specified using its string
 * representation. Note that a quota is not enforced on a per-origin basis
 * for the Application Cache API.
 * @deprecated Controlling quota per-origin will not be supported in future.
 */
====>[PUBLIC]<android.webkit.WebStorage: void setQuotaForOrigin(String,long)>    ---->
<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(Context,Intent)>
/**
 * Called during provisioning of a managed device to allow the device initializer to perform
 * user setup steps.
 *
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 * @deprecated Do not use
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(Context,Intent)>    ---->
<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(Context,int,boolean)>
/**
 * @deprecated use {@link #action(VisibilityLoggerMixin, int, boolean)}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.MetricsFeatureProvider: void action(Context,int,boolean)>    ---->    #action(VisibilityLoggerMixin, int, boolean)
<android.database.AbstractWindowedCursor: boolean isString(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isString(int)>    ---->    #getType
<com.android.settingslib.core.instrumentation.EventLogWriter: void action(Context,int,int)>
/**
 * @deprecated use {@link #action(int, int, Pair[])}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.EventLogWriter: void action(Context,int,int)>    ---->    #action(int, int, Pair[])
<android.webkit.WebSettings: boolean getNavDump()>
/**
 * Gets whether dumping the navigation cache is enabled.
 *
 * @return whether dumping the navigation cache is enabled
 * @see #setNavDump
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getNavDump()>    ---->
<android.telephony.gsm.SmsManager: ArrayList<String> divideMessage(String)>
/**
 * Divide a text message into several messages, none bigger than
 * the maximum SMS message size.
 *
 * @param text the original message.  Must not be null.
 * @return an <code>ArrayList</code> of strings that, in order,
 * comprise the original message
 * @deprecated Use android.telephony.SmsManager.
 */
====>[PUBLIC]<android.telephony.gsm.SmsManager: ArrayList<String> divideMessage(String)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setGravity(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setGravity(int)>
/**
 * Set the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setGravity(int)>    ---->
<android.app.Activity: void onVisibleBehindCanceled()>
/**
 * Called when a translucent activity over this activity is becoming opaque or another
 * activity is being launched. Activities that override this method must call
 * <code>super.onVisibleBehindCanceled()</code> or a SuperNotCalledException will be thrown.
 *
 * <p>When this method is called the activity has 500 msec to release any resources it may be
 * using while visible in the background.
 * If the activity has not returned from this method in 500 msec the system will destroy
 * the activity and kill the process in order to recover the resources for another
 * process. Otherwise {@link #onStop()} will be called following return.
 *
 * @see #requestVisibleBehind(boolean)
 *
 * @deprecated This method's functionality is no longer supported as of
 * {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.
 */
====>[PUBLIC]<android.app.Activity: void onVisibleBehindCanceled()>    ---->
<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,NanoAppFilter)>
/**
 * Find a specified nano app on the system
 *
 * @param hubHandle handle of hub to search for nano app
 * @param filter filter specifying the search criteria for app
 *
 * @see NanoAppFilter
 *
 * @return int[] Array of handles to any found nano apps
 *
 * @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub
 * for loaded nanoapps.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,NanoAppFilter)>    ---->    #queryNanoApps(ContextHubInfo)
<android.content.Context: Drawable peekWallpaper()>
/**
 * @deprecated Use {@link android.app.WallpaperManager#peekDrawable
 * WallpaperManager.peek()} instead.
 */
====>[PUBLIC]<android.content.Context: Drawable peekWallpaper()>    ---->    android.app.WallpaperManager#peekDrawable  WallpaperManager.peek()
<android.os.WorkSource: WorkSource[] setReturningDiffs(WorkSource)>
/**
 * Legacy API, DO NOT USE: Only deals with flat UIDs and tags. No chains are transferred, and no
 * differences in chains are returned. This will be removed once its callers have been
 * rewritten.
 *
 * NOTE: This is currently only used in GnssLocationProvider.
 *
 * @hide
 * @deprecated for internal use only. WorkSources are opaque and no external callers should need
 * to be aware of internal differences.
 */
====>[HIDDEN]<android.os.WorkSource: WorkSource[] setReturningDiffs(WorkSource)>    ---->
<android.view.ViewGroup: void invalidateChild(View,Rect)>
/**
 * Don't call or override this method. It is used for the implementation of
 * the view hierarchy.
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead to observe updates to
 * draw state in descendants.
 */
====>[PUBLIC]<android.view.ViewGroup: void invalidateChild(View,Rect)>    ---->    #onDescendantInvalidated(View, View)
<androidx.fragment.app.FragmentController: void doLoaderStop(boolean)>
/**
 * Stops the loaders, optionally retaining their state. This is useful for keeping the
 * loader state across configuration changes.
 *
 * @param retain When {@code true}, the loaders aren't stopped, but, their instances
 * are retained in a started state
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void doLoaderStop(boolean)>    ---->
<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()>
/**
 * WPS has been deprecated from Client mode operation.
 *
 * @return null
 * @hide
 * @deprecated This API is deprecated
 */
====>[HIDDEN]<android.net.wifi.WifiManager: String getCurrentNetworkWpsNfcConfigurationToken()>    ---->
<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTime(int)>
/**
 * Sets the current time in milliseconds for the playback controls row.
 * If this row is bound to a view, the view will automatically
 * be updated to reflect the new value.
 * @deprecated use {@link #setCurrentPosition(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setCurrentTime(int)>    ---->    #setCurrentPosition(long)
<android.telephony.gsm.SmsMessage: MessageClass getMessageClass()>
/**
 * Returns the class of this message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: MessageClass getMessageClass()>    ---->
<android.app.Instrumentation: void stopAllocCounting()>

====>[PUBLIC]<android.app.Instrumentation: void stopAllocCounting()>    ---->
<android.text.Html: Spanned fromHtml(String)>
/**
 * Returns displayable styled text from the provided HTML string with the legacy flags
 * {@link #FROM_HTML_MODE_LEGACY}.
 *
 * @deprecated use {@link #fromHtml(String, int)} instead.
 */
====>[PUBLIC]<android.text.Html: Spanned fromHtml(String)>    ---->    #fromHtml(String, int)
<com.android.setupwizardlib.SetupWizardLayout: void showProgressBar()>
/**
 * @deprecated Use {@link #setProgressBarShown(boolean)}
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardLayout: void showProgressBar()>    ---->    #setProgressBarShown(boolean)
<androidx.core.widget.ScrollerCompat: float getCurrVelocity()>
/**
 * Returns the current velocity on platform versions that support it.
 *
 * <p> This method should only be used as input for nonessential visual effects such as
 * {@link EdgeEffectCompat}.</p>
 *
 * @return The original velocity less the deceleration. Result may be
 * negative.
 *
 * @deprecated Use {@link OverScroller#getCurrVelocity()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: float getCurrVelocity()>    ---->    OverScroller#getCurrVelocity()
<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(SurfaceTexture)>    ---->
<android.app.job.JobInfo: int getNetworkType()>
/**
 * Return the basic description of the kind of network this job requires.
 *
 * @deprecated This method attempts to map {@link #getRequiredNetwork()}
 * into the set of simple constants, which results in a loss of
 * fidelity. Callers should move to using
 * {@link #getRequiredNetwork()} directly.
 * @see Builder#setRequiredNetworkType(int)
 */
====>[PUBLIC]<android.app.job.JobInfo: int getNetworkType()>    ---->    Builder#setRequiredNetworkType(int)
<com.android.internal.telephony.uicc.UiccCard: boolean setOperatorBrandOverride(String)>
/**
 * @deprecated Please use {@link UiccProfile#setOperatorBrandOverride(String)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: boolean setOperatorBrandOverride(String)>    ---->    UiccProfile#setOperatorBrandOverride(String)
Inconsistency (Non-Documentation):<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\LockPatternUtils.java
<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)>

====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: void setLegacyLockPatternEnabled(int)>    ---->
<androidx.slidingpanelayout.widget.SlidingPaneLayout: void setShadowDrawable(Drawable)>
/**
 * @deprecated Renamed to {@link #setShadowDrawableLeft(Drawable d)} to support LTR (left to
 * right language) and {@link #setShadowDrawableRight(Drawable d)} to support RTL (right to left
 * language) during opening/closing.
 *
 * @param d drawable to use as a shadow
 */
====>[PUBLIC]<androidx.slidingpanelayout.widget.SlidingPaneLayout: void setShadowDrawable(Drawable)>    ---->    #setShadowDrawableLeft(Drawable d)
<android.util.proto.ProtoOutputStream: void writeInt32(long,int)>
/**
 * Write a single proto "int32" type field value.
 *
 * Note that these are stored in memory as signed values and written as unsigned
 * varints, which if negative, are 10 bytes long. If you know the data is likely
 * to be negative, use "sint32".
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeInt32(long,int)>    ---->    #write
<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller: void addSessionCallback(SessionCallback)>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->
<android.webkit.Plugin: String getFileName()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getFileName()>    ---->
<android.telecom.InCallService: AudioState getAudioState()>
/**
 * Obtains the current phone call audio state.
 *
 * @return An object encapsulating the audio state. Returns null if the service is not
 * fully initialized.
 * @deprecated Use {@link #getCallAudioState()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.InCallService: AudioState getAudioState()>    ---->    #getCallAudioState()
<androidx.swiperefreshlayout.widget.SwipeRefreshLayout: void setProgressBackgroundColor(int)>
/**
 * @deprecated Use {@link #setProgressBackgroundColorSchemeResource(int)}
 */
====>[PUBLIC]<androidx.swiperefreshlayout.widget.SwipeRefreshLayout: void setProgressBackgroundColor(int)>    ---->    #setProgressBackgroundColorSchemeResource(int)
<androidx.slice.widget.SliceView: void setTint(int)>
/**
 * @deprecated TO BE REMOVED; use {@link #setAccentColor(int)} instead.
 */
====>[PUBLIC]<androidx.slice.widget.SliceView: void setTint(int)>    ---->    #setAccentColor(int)
<com.android.internal.logging.MetricsLogger: void visible(Context,int)>
/**
 * @deprecated use {@link #visible(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void visible(Context,int)>    ---->    #visible(int)
<java.net.DatagramSocketImpl: void setTTL(byte)>
/**
 * Set the TTL (time-to-live) option.
 * @param ttl a byte specifying the TTL value
 *
 * @deprecated use setTimeToLive instead.
 * @exception IOException if an I/O exception occurs while setting
 * the time-to-live option.
 * @see #getTTL()
 */
====>[PUBLIC]<java.net.DatagramSocketImpl: void setTTL(byte)>    ---->    setTimeToLive
<android.util.proto.ProtoOutputStream: void writePackedFixed64(long,long[])>
/**
 * Write a list of packed proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedFixed64(long,long[])>    ---->    #write
<android.webkit.WebSettings: void setSavePassword(boolean)>
/**
 * Sets whether the WebView should save passwords. The default is {@code true}.
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setSavePassword(boolean)>    ---->
<android.app.Activity: void showDialog(int)>
/**
 * Simple version of {@link #showDialog(int, Bundle)} that does not
 * take any arguments.  Simply calls {@link #showDialog(int, Bundle)}
 * with null arguments.
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void showDialog(int)>    ---->    DialogFragment
<android.app.Activity: Dialog onCreateDialog(int)>
/**
 * @deprecated Old no-arguments version of {@link #onCreateDialog(int, Bundle)}.
 */
====>[PUBLIC]<android.app.Activity: Dialog onCreateDialog(int)>    ---->    #onCreateDialog(int, Bundle)
<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)>
/**
 * Sets the per-account preference whether vibration is enabled for voicemail notifications.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}, or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the
 * voicemail vibration setting.
 * @param enabled Whether to enable or disable vibration for voicemail notifications from a
 * specific PhoneAccount.
 *
 * @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}
 * instead.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)>    ---->    android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS
<android.app.Activity: void removeDialog(int)>
/**
 * Removes any internal references to a dialog managed by this Activity.
 * If the dialog is showing, it will dismiss it as part of the clean up.
 *
 * <p>This can be useful if you know that you will never show a dialog again and
 * want to avoid the overhead of saving and restoring it in the future.
 *
 * <p>As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}, this function
 * will not throw an exception if you try to remove an ID that does not
 * currently have an associated dialog.</p>
 *
 * @param id The id of the managed dialog.
 *
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int)
 * @see #dismissDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void removeDialog(int)>    ---->    DialogFragment
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,int,Icon)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and HdmiDeviceInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.
 * @param parentId The ID of this TV input's parent input. {@code null} if none exists.
 * @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0},
 * {@code service} label will be loaded.
 * @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is
 * {@code null}, the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,int,Icon)>    ---->    Builder
<android.media.MediaDrm: void releaseAllSecureStops()>
/**
 * Remove all secure stops without requiring a secure stop release message from
 * the license server.
 *
 * @deprecated Remove all secure stops using {@link #removeAllSecureStops} instead.
 */
====>[PUBLIC]<android.media.MediaDrm: void releaseAllSecureStops()>    ---->    #removeAllSecureStops
<android.provider.Contacts.Presence: int getPresenceIconResourceId(int)>
/**
 * Gets the resource ID for the proper presence icon.
 *
 * @param status the status to get the icon for
 * @return the resource ID for the proper presence icon
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Presence: int getPresenceIconResourceId(int)>    ---->    android.provider.ContactsContract
<java.util.Date: void setDate(int)>
/**
 * Sets the day of the month of this <tt>Date</tt> object to the
 * specified value. This <tt>Date</tt> object is modified so that
 * it represents a point in time within the specified day of the
 * month, with the year, month, hour, minute, and second the same
 * as before, as interpreted in the local time zone. If the date
 * was April 30, for example, and the date is set to 31, then it
 * will be treated as if it were on May 1, because April has only
 * 30 days.
 *
 * @param   date   the day of the month value between 1-31.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.DAY_OF_MONTH, int date)</code>.
 */
====>[PUBLIC]<java.util.Date: void setDate(int)>    ---->
<androidx.lifecycle.ViewModelStores: ViewModelStore of(FragmentActivity)>
/**
 * Returns the {@link ViewModelStore} of the given activity.
 *
 * @param activity an activity whose {@code ViewModelStore} is requested
 * @return a {@code ViewModelStore}
 * @deprecated Use {@link FragmentActivity#getViewModelStore()}
 */
====>[PUBLIC]<androidx.lifecycle.ViewModelStores: ViewModelStore of(FragmentActivity)>    ---->    FragmentActivity#getViewModelStore()
<androidx.core.view.MotionEventCompat: int getSource(MotionEvent)>
/**
 * Gets the source of the event.
 *
 * @return The event source or {@link InputDeviceCompat#SOURCE_UNKNOWN} if unknown.
 * @deprecated Call {@link MotionEvent#getSource()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getSource(MotionEvent)>    ---->    MotionEvent#getSource()
Inconsistency (Non-Documentation):<android.util.RecurrenceRule: boolean isMonthly()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\util\RecurrenceRule.java
<android.util.RecurrenceRule: boolean isMonthly()>

====>[PUBLIC]<android.util.RecurrenceRule: boolean isMonthly()>    ---->
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)>
/**
 * Delete the specified message from the SIM.
 *
 * @param messageIndex is the record index of the message on SIM
 * @return true for success
 * @deprecated Use android.telephony.SmsManager.
 * {@hide}
 */
====>[HIDDEN]<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getToIndex()>
/**
 * Gets the index of text selection end or the index of the last
 * visible item when scrolling.
 *
 * @return The index of selection end or last item index.
 *
 * @deprecated Use {@link AccessibilityRecord#getToIndex()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getToIndex()>    ---->    AccessibilityRecord#getToIndex()
<android.util.TypedValue: float complexToDimensionNoisy(int,DisplayMetrics)>
/**
 * @hide Was accidentally exposed in API level 1 for debugging purposes.
 * Kept for compatibility just in case although the debugging code has been removed.
 */
====>[HIDDEN]<android.util.TypedValue: float complexToDimensionNoisy(int,DisplayMetrics)>    ---->
<android.text.style.SuggestionSpan: String getLocale()>
/**
 * @deprecated use {@link #getLocaleObject()} instead.
 * @return the locale of the suggestions. An empty string is returned if no locale is specified.
 */
====>[PUBLIC]<android.text.style.SuggestionSpan: String getLocale()>    ---->    #getLocaleObject()
<android.webkit.CacheManager: CacheResult getCacheFile(String,Map<String, String>)>
/**
 * Gets the cache entry for the specified URL, or {@code null} if none is found.
 * If a non-null value is provided for the HTTP headers map, and the cache
 * entry needs validation, appropriate headers will be added to the map.
 * The input stream of the CacheEntry object should be closed by the caller
 * when access to the underlying file is no longer required.
 *
 * @param url the URL for which a cache entry is requested
 * @param headers a map from HTTP header name to value, to be populated
 * for the returned cache entry
 * @return the cache entry for the specified URL
 * @deprecated This method no longer has any effect and always returns {@code null}.
 */
====>[PUBLIC]<android.webkit.CacheManager: CacheResult getCacheFile(String,Map<String, String>)>    ---->
<android.net.ConnectivityManager: NetworkQuotaInfo getActiveNetworkQuotaInfo()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.net.ConnectivityManager: NetworkQuotaInfo getActiveNetworkQuotaInfo()>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void clearWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void clearWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: void clearWallpaper()>    ---->
<android.webkit.Plugin: String toString()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String toString()>    ---->
<android.telephony.PhoneNumberUtils: void ttsSpanAsPhoneNumber(Spannable,int,int)>
/**
 * Attach a {@link TtsSpan} to the supplied {@code Spannable} at the indicated location,
 * annotating that location as containing a phone number.
 *
 * @param s A {@code Spannable} to annotate.
 * @param start The starting character position of the phone number in {@code s}.
 * @param end The ending character position of the phone number in {@code s}.
 *
 * @deprecated Renamed {@link #addTtsSpan}.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: void ttsSpanAsPhoneNumber(Spannable,int,int)>    ---->    #addTtsSpan
<android.app.Notification.InboxStyle: void <init>(Builder)>
/**
 * @deprecated use {@code InboxStyle()}.
 */
====>[PUBLIC]<android.app.Notification.InboxStyle: void <init>(Builder)>    ---->
<androidx.core.view.ViewGroupCompat: void setMotionEventSplittingEnabled(ViewGroup,boolean)>
/**
 * Enable or disable the splitting of MotionEvents to multiple children during touch event
 * dispatch. This behavior is enabled by default for applications that target an
 * SDK version of 11 (Honeycomb) or newer. On earlier platform versions this feature
 * was not supported and this method is a no-op.
 *
 * <p>When this option is enabled MotionEvents may be split and dispatched to different child
 * views depending on where each pointer initially went down. This allows for user interactions
 * such as scrolling two panes of content independently, chording of buttons, and performing
 * independent gestures on different pieces of content.
 *
 * @param group ViewGroup to modify
 * @param split <code>true</code> to allow MotionEvents to be split and dispatched to multiple
 * child views. <code>false</code> to only allow one child view to be the target of
 * any MotionEvent received by this ViewGroup.
 *
 * @deprecated Use {@link ViewGroup#setMotionEventSplittingEnabled(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewGroupCompat: void setMotionEventSplittingEnabled(ViewGroup,boolean)>    ---->    ViewGroup#setMotionEventSplittingEnabled(boolean)
<android.database.sqlite.SQLiteCursor: void <init>(SQLiteDatabase,SQLiteCursorDriver,String,SQLiteQuery)>
/**
 * Execute a query and provide access to its result set through a Cursor
 * interface. For a query such as: {@code SELECT name, birth, phone FROM
 * myTable WHERE ... LIMIT 1,20 ORDER BY...} the column names (name, birth,
 * phone) would be in the projection argument and everything from
 * {@code FROM} onward would be in the params argument.
 *
 * @param db a reference to a Database object that is already constructed
 * and opened. This param is not used any longer
 * @param editTable the name of the table used for this query
 * @param query the rest of the query terms
 * cursor is finalized
 * @deprecated use {@link #SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)} instead
 */
====>[PUBLIC]<android.database.sqlite.SQLiteCursor: void <init>(SQLiteDatabase,SQLiteCursorDriver,String,SQLiteQuery)>    ---->    #SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery)
<androidx.loader.content.Loader: void dump(String,FileDescriptor,PrintWriter,String[])>
/**
 * Print the Loader's state into the given stream.
 *
 * @param prefix Text to print at the front of each line.
 * @param fd The raw file descriptor that the dump is being sent to.
 * @param writer A PrintWriter to which the dump is to be set.
 * @param args Additional arguments to the dump request.
 * @deprecated Consider using {@link LoaderManager#enableDebugLogging(boolean)} to understand
 * the series of operations performed by LoaderManager.
 */
====>[PUBLIC]<androidx.loader.content.Loader: void dump(String,FileDescriptor,PrintWriter,String[])>    ---->    LoaderManager#enableDebugLogging(boolean)
<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice(Context)>
/**
 * Indicates whether VT is provisioned on device
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isVtProvisionedOnDevice()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice(Context)>    ---->    #isVtProvisionedOnDevice()
<android.app.ActionBar: void setNavigationMode(int)>
/**
 * Set the current navigation mode.
 *
 * @param mode The new mode to set.
 * @see #NAVIGATION_MODE_STANDARD
 * @see #NAVIGATION_MODE_LIST
 * @see #NAVIGATION_MODE_TABS
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setNavigationMode(int)>    ---->
<android.os.Debug: int getGlobalClassInitTime()>
/**
 * Returns the time spent successfully initializing classes between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalClassInitTime()>    ---->
<android.app.admin.DevicePolicyManager: String getCertInstallerPackage(ComponentName)>
/**
 * Called by a profile owner or device owner to retrieve the certificate installer for the user,
 * or {@code null} if none is set. If there are multiple delegates this function will return one
 * of them.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name of the current delegated certificate installer, or {@code null} if
 * none is set.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatePackages}
 * with the {@link #DELEGATION_CERT_INSTALL} scope instead.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: String getCertInstallerPackage(ComponentName)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setClassName(CharSequence)>
/**
 * Sets the class name of the source.
 *
 * @param className The lass name.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setClassName(CharSequence)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setClassName(CharSequence)>    ---->    AccessibilityRecord#setClassName(CharSequence)
<junit.runner.BaseTestRunner: boolean inVAJava()>
/**
 * @deprecated not present in JUnit4.10
 */
====>[PUBLIC]<junit.runner.BaseTestRunner: boolean inVAJava()>    ---->
<java.util.jar.Pack200.Unpacker: void addPropertyChangeListener(PropertyChangeListener)>
/**
 * Registers a listener for PropertyChange events on the properties map.
 * This is typically used by applications to update a progress bar.
 *
 * <p> The default implementation of this method does nothing and has
 * no side-effects.</p>
 *
 * <p><b>WARNING:</b> This method is omitted from the interface
 * declaration in all subset Profiles of Java SE that do not include
 * the {@code java.beans} package. </p>
 *
 * @see #properties
 * @see #PROGRESS
 * @param listener  An object to be invoked when a property is changed.
 * @deprecated The dependency on {@code PropertyChangeListener} creates
 * a significant impediment to future modularization of the
 * Java platform. This method will be removed in a future
 * release.
 * Applications that need to monitor progress of the
 * unpacker can poll the value of the {@link #PROGRESS
 * PROGRESS} property instead.
 */
====>[PUBLIC]<java.util.jar.Pack200.Unpacker: void addPropertyChangeListener(PropertyChangeListener)>    ---->    #PROGRESS  PROGRESS} property instead. /@Deprecateddefault void addPropertyChangeListener(PropertyChangeListener listener)
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: boolean isQuotaSupported(String)>    ---->
<android.app.PendingIntent: String getTargetPackage()>
/**
 * @deprecated Renamed to {@link #getCreatorPackage()}.
 */
====>[PUBLIC]<android.app.PendingIntent: String getTargetPackage()>    ---->    #getCreatorPackage()
<java.lang.Thread: void stop()>
/**
 * Forces the thread to stop executing.
 * <p>
 * If there is a security manager installed, its <code>checkAccess</code>
 * method is called with <code>this</code>
 * as its argument. This may result in a
 * <code>SecurityException</code> being raised (in the current thread).
 * <p>
 * If this thread is different from the current thread (that is, the current
 * thread is trying to stop a thread other than itself), the
 * security manager's <code>checkPermission</code> method (with a
 * <code>RuntimePermission("stopThread")</code> argument) is called in
 * addition.
 * Again, this may result in throwing a
 * <code>SecurityException</code> (in the current thread).
 * <p>
 * The thread represented by this thread is forced to stop whatever
 * it is doing abnormally and to throw a newly created
 * <code>ThreadDeath</code> object as an exception.
 * <p>
 * It is permitted to stop a thread that has not yet been started.
 * If the thread is eventually started, it immediately terminates.
 * <p>
 * An application should not normally try to catch
 * <code>ThreadDeath</code> unless it must do some extraordinary
 * cleanup operation (note that the throwing of
 * <code>ThreadDeath</code> causes <code>finally</code> clauses of
 * <code>try</code> statements to be executed before the thread
 * officially dies).  If a <code>catch</code> clause catches a
 * <code>ThreadDeath</code> object, it is important to rethrow the
 * object so that the thread actually dies.
 * <p>
 * The top-level error handler that reacts to otherwise uncaught
 * exceptions does not print out a message or otherwise notify the
 * application if the uncaught exception is an instance of
 * <code>ThreadDeath</code>.
 *
 * @exception  SecurityException  if the current thread cannot
 * modify this thread.
 * @see        #interrupt()
 * @see        #checkAccess()
 * @see        #run()
 * @see        #start()
 * @see        ThreadDeath
 * @see        ThreadGroup#uncaughtException(Thread,Throwable)
 * @see        SecurityManager#checkAccess(Thread)
 * @see        SecurityManager#checkPermission
 * @deprecated This method is inherently unsafe.  Stopping a thread with
 * Thread.stop causes it to unlock all of the monitors that it
 * has locked (as a natural consequence of the unchecked
 * <code>ThreadDeath</code> exception propagating up the stack).  If
 * any of the objects previously protected by these monitors were in
 * an inconsistent state, the damaged objects become visible to
 * other threads, potentially resulting in arbitrary behavior.  Many
 * uses of <code>stop</code> should be replaced by code that simply
 * modifies some variable to indicate that the target thread should
 * stop running.  The target thread should check this variable
 * regularly, and return from its run method in an orderly fashion
 * if the variable indicates that it is to stop running.  If the
 * target thread waits for long periods (on a condition variable,
 * for example), the <code>interrupt</code> method should be used to
 * interrupt the wait.
 * For more information, see
 * <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
 * are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
 */
====>[PUBLIC]<java.lang.Thread: void stop()>    ---->
<android.app.StatsManager: byte[] getData(long)>
/**
 * @deprecated Use {@link #getReports(long)}
 */
====>[PUBLIC]<android.app.StatsManager: byte[] getData(long)>    ---->    #getReports(long)
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)>
/**
 * Force switch to a new input method and subtype. This can only be called
 * from an application or a service which has a token of the currently active input method.
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param id The unique identifier for the new input method to be switched to.
 * @param subtype The new subtype of the new input method to be switched to.
 * @deprecated Use
 * {@link InputMethodService#switchInputMethod(String, InputMethodSubtype)}
 * instead. This method was intended for IME developers who should be accessing APIs through
 * the service. APIs in this class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)>    ---->    InputMethodService#switchInputMethod(String, InputMethodSubtype)
<com.android.internal.widget.RecyclerView: int getChildPosition(View)>
/**
 * @deprecated use {@link #getChildAdapterPosition(View)} or
 * {@link #getChildLayoutPosition(View)}.
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView: int getChildPosition(View)>    ---->    #getChildAdapterPosition(View)
<android.telephony.TelephonyManager: boolean getDataEnabled()>
/**
 * @deprecated use {@link #isDataEnabled()} instead.
 * @hide
 */
====>[HIDDEN]<android.telephony.TelephonyManager: boolean getDataEnabled()>    ---->    #isDataEnabled()
<android.preference.PreferenceActivity: void addPreferencesFromIntent(Intent)>
/**
 * Adds preferences from activities that match the given {@link Intent}.
 *
 * @param intent The {@link Intent} to query activities.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void addPreferencesFromIntent(Intent)>    ---->
<android.app.backup.BackupManager: String selectBackupTransport(String)>
/**
 * Specify the current backup transport.
 *
 * @param transport The name of the transport to select.  This should be one
 * of the names returned by {@link #listAllTransports()}. This is the String returned by
 * {@link BackupTransport#name()} for the particular transport.
 * @return The name of the previously selected transport.  If the given transport
 * name is not one of the currently available transports, no change is made to
 * the current transport setting and the method returns null.
 *
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: String selectBackupTransport(String)>    ---->
<android.drm.DrmSupportInfo: String getDescriprition()>
/**
 * Retrieves the DRM plug-in (agent) description.
 *
 * @return The plug-in description.
 * @deprecated The method name is mis-spelled, and it is replaced by
 * {@link #getDescription()}.
 */
====>[PUBLIC]<android.drm.DrmSupportInfo: String getDescriprition()>    ---->    #getDescription()
<android.telecom.Phone.Listener: void onAudioStateChanged(Phone,AudioState)>
/**
 * Called when the audio state changes.
 *
 * @param phone The {@code Phone} calling this method.
 * @param audioState The new {@link AudioState}.
 *
 * @deprecated Use {@link #onCallAudioStateChanged(Phone, CallAudioState)} instead.
 */
====>[PUBLIC]<android.telecom.Phone.Listener: void onAudioStateChanged(Phone,AudioState)>    ---->    #onCallAudioStateChanged(Phone, CallAudioState)
<java.sql.Date: void setHours(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #getHours
 */
====>[PUBLIC]<java.sql.Date: void setHours(int)>    ---->    #getHours
<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.InternalBuilder: void <init>(RenderScript)>    ---->
<androidx.leanback.widget.PlaybackControlsRow: void setTotalTimeLong(long)>
/**
 * Sets the total time in milliseconds (long type) for the playback controls row.
 * @param ms Total time in milliseconds of long type.
 * @deprecated Use {@link #setDuration(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setTotalTimeLong(long)>    ---->    #setDuration(long)
<android.content.Context: void setWallpaper(InputStream)>
/**
 * @deprecated Use {@link android.app.WallpaperManager#setStream(InputStream)
 * WallpaperManager.set()} instead.
 * <p>This method requires the caller to hold the permission
 * {@link android.Manifest.permission#SET_WALLPAPER}.
 */
====>[PUBLIC]<android.content.Context: void setWallpaper(InputStream)>    ---->    android.app.WallpaperManager#setStream(InputStream)  WallpaperManager.set()
<android.webkit.WebSettings: void setPluginState(PluginState)>
/**
 * Tells the WebView to enable, disable, or have plugins on demand. On
 * demand mode means that if a plugin exists that can handle the embedded
 * content, a placeholder icon will be shown instead of the plugin. When
 * the placeholder is clicked, the plugin will be enabled. The default is
 * {@link PluginState#OFF}.
 *
 * @param state a PluginState value
 * @deprecated Plugins will not be supported in future, and should not be used.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setPluginState(PluginState)>    ---->
<android.app.PictureInPictureArgs: void setAspectRatio(float)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setAspectRatio(float)>    ---->
<com.android.setupwizardlib.SetupWizardListLayout: int getDividerInset()>
/**
 * @deprecated Use {@link #getDividerInsetStart()} instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.SetupWizardListLayout: int getDividerInset()>    ---->    #getDividerInsetStart()
<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)>
/**
 * WPS start succeeded
 * @deprecated This API is deprecated
 */
====>[PUBLIC]<android.net.wifi.WifiManager.WpsCallback: void onStarted(String)>    ---->
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>
/**
 * Inflates the given XML resource and adds the preference hierarchy to the current
 * preference hierarchy.
 *
 * @param preferencesResId The XML resource ID to inflate.
 *
 * @deprecated This function is not relevant for a modern fragment-based
 * PreferenceActivity.
 */
====>[PUBLIC]<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>    ---->
<android.os.UserManager: int getUserRestrictionSource(String,UserHandle)>
/**
 * @hide
 *
 * Returns who set a user restriction on a user.
 * @param restrictionKey the string key representing the restriction
 * @param userHandle the UserHandle of the user for whom to retrieve the restrictions.
 * @return The source of user restriction. Any combination of {@link #RESTRICTION_NOT_SET},
 * {@link #RESTRICTION_SOURCE_SYSTEM}, {@link #RESTRICTION_SOURCE_DEVICE_OWNER}
 * and {@link #RESTRICTION_SOURCE_PROFILE_OWNER}
 * @deprecated use {@link #getUserRestrictionSources(String, int)} instead.
 */
====>[HIDDEN]<android.os.UserManager: int getUserRestrictionSource(String,UserHandle)>    ---->    #getUserRestrictionSources(String, int)
<android.support.v4.media.session.PlaybackStateCompat.Builder: Builder setErrorMessage(CharSequence)>
/**
 * Set a user readable error message. This should be set when the state
 * is {@link PlaybackStateCompat#STATE_ERROR}.
 *
 * @return this
 * @deprecated Use {@link #setErrorMessage(int, CharSequence)} instead.
 */
====>[PUBLIC]<android.support.v4.media.session.PlaybackStateCompat.Builder: Builder setErrorMessage(CharSequence)>    ---->    #setErrorMessage(int, CharSequence)
<android.content.res.ColorStateList: ColorStateList createFromXml(Resources,XmlPullParser)>
/**
 * Creates a ColorStateList from an XML document.
 *
 * @param r Resources against which the ColorStateList should be inflated.
 * @param parser Parser for the XML document defining the ColorStateList.
 * @return A new color state list.
 *
 * @deprecated Use #createFromXml(Resources, XmlPullParser parser, Theme)
 */
====>[PUBLIC]<android.content.res.ColorStateList: ColorStateList createFromXml(Resources,XmlPullParser)>    ---->
<android.view.ViewParent: void invalidateChild(View,Rect)>
/**
 * All or part of a child is dirty and needs to be redrawn.
 *
 * @param child The child which is dirty
 * @param r The area within the child that is invalid
 *
 * @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.
 */
====>[PUBLIC]<android.view.ViewParent: void invalidateChild(View,Rect)>    ---->    #onDescendantInvalidated(View, View)
<android.hardware.radio.RadioTuner.Callback: void onError(int)>
/**
 * onError() is called when an error occured while performing an asynchronous
 * operation of when the hardware or system service experiences a problem.
 * status is one of {@link #ERROR_HARDWARE_FAILURE}, {@link #ERROR_SERVER_DIED},
 * {@link #ERROR_CANCELLED}, {@link #ERROR_SCAN_TIMEOUT},
 * {@link #ERROR_CONFIG}
 *
 * @deprecated Use {@link onTuneFailed} for tune, scan and step;
 * other use cases (configuration, background scan) are already deprecated.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onError(int)>    ---->    onTuneFailed
<android.drm.DrmStore.Playback: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.Playback: void <init>()>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: Drawable getWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: Drawable getWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: Drawable getWallpaper()>    ---->
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
/**
 * Temporarily end the transaction to let other threads run. The transaction is assumed to be
 * successful so far. Do not call setTransactionSuccessful before calling this. When this
 * returns a new transaction will have been created but not marked as successful.
 * @return true if the transaction was yielded
 * @deprecated if the db is locked more than once (becuase of nested transactions) then the lock
 * will not be yielded. Use yieldIfContendedSafely instead.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>    ---->    yieldIfContendedSafely
Inconsistency (Non-Documentation):<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\util\XmlUtils.java
<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)>

====>[PUBLIC]<com.android.internal.util.XmlUtils: void writeBitmapAttribute(XmlSerializer,String,Bitmap)>    ---->
<android.graphics.ColorFilter: void <init>()>
/**
 * @deprecated Use subclass constructors directly instead.
 */
====>[PUBLIC]<android.graphics.ColorFilter: void <init>()>    ---->    subclass constructors directly
<androidx.core.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>
/**
 * Called back on change in the accessibility state.
 *
 * @param enabled Whether accessibility is enabled.
 *
 * @deprecated Use {@link AccessibilityManager.AccessibilityStateChangeListener} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>    ---->    AccessibilityManager.AccessibilityStateChangeListener
<android.app.Activity: void onPictureInPictureModeChanged(boolean)>
/**
 * Called by the system when the activity changes to and from picture-in-picture mode.
 *
 * @see android.R.attr#supportsPictureInPicture
 *
 * @param isInPictureInPictureMode True if the activity is in picture-in-picture mode.
 *
 * @deprecated Use {@link #onPictureInPictureModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Activity: void onPictureInPictureModeChanged(boolean)>    ---->    #onPictureInPictureModeChanged(boolean, Configuration)
<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: Builder setCullMode(CullMode)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityNodeInfoCompat getSource()>
/**
 * Gets the {@link android.view.accessibility.AccessibilityNodeInfo} of
 * the event source.
 * <p>
 * <strong>Note:</strong> It is a client responsibility to recycle the
 * received info by calling
 * {@link android.view.accessibility.AccessibilityNodeInfo#recycle()
 * AccessibilityNodeInfo#recycle()} to avoid creating of multiple instances.
 * </p>
 *
 * @return The info of the source.
 *
 * @deprecated Use {@link AccessibilityRecord#getSource()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: AccessibilityNodeInfoCompat getSource()>    ---->    AccessibilityRecord#getSource()
<java.security.Signature: void setParameter(String,Object)>
/**
 * Sets the specified algorithm parameter to the specified value.
 * This method supplies a general-purpose mechanism through
 * which it is possible to set the various parameters of this object.
 * A parameter may be any settable parameter for the algorithm, such as
 * a parameter size, or a source of random bits for signature generation
 * (if appropriate), or an indication of whether or not to perform
 * a specific but optional computation. A uniform algorithm-specific
 * naming scheme for each parameter is desirable but left unspecified
 * at this time.
 *
 * @param param the string identifier of the parameter.
 * @param value the parameter value.
 *
 * @exception InvalidParameterException if {@code param} is an
 * invalid parameter for this signature algorithm engine,
 * the parameter is already set
 * and cannot be set again, a security exception occurs, and so on.
 *
 * @see #getParameter
 *
 * @deprecated Use
 * {@link #setParameter(java.security.spec.AlgorithmParameterSpec)
 * setParameter}.
 */
====>[PUBLIC]<java.security.Signature: void setParameter(String,Object)>    ---->    #setParameter(java.security.spec.AlgorithmParameterSpec)  setParameter
<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)>
/**
 * @deprecated in API 16
 * This method is part of the SurfaceHolder.Callback interface, and is
 * not normally called or subclassed by clients of RSSurfaceView.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void surfaceCreated(SurfaceHolder)>    ---->
<java.lang.ClassLoader: Class<?> defineClass(byte[],int,int)>
/**
 * Converts an array of bytes into an instance of class <tt>Class</tt>.
 * Before the <tt>Class</tt> can be used it must be resolved.  This method
 * is deprecated in favor of the version that takes a <a
 * href="#name">binary name</a> as its first argument, and is more secure.
 *
 * @param  b
 * The bytes that make up the class data.  The bytes in positions
 * <tt>off</tt> through <tt>off+len-1</tt> should have the format
 * of a valid class file as defined by
 * <cite>The Java&trade; Virtual Machine Specification</cite>.
 *
 * @param  off
 * The start offset in <tt>b</tt> of the class data
 *
 * @param  len
 * The length of the class data
 *
 * @return  The <tt>Class</tt> object that was created from the specified
 * class data
 *
 * @throws  ClassFormatError
 * If the data did not contain a valid class
 *
 * @throws  IndexOutOfBoundsException
 * If either <tt>off</tt> or <tt>len</tt> is negative, or if
 * <tt>off+len</tt> is greater than <tt>b.length</tt>.
 *
 * @throws  SecurityException
 * If an attempt is made to add this class to a package that
 * contains classes that were signed by a different set of
 * certificates than this class, or if an attempt is made
 * to define a class in a package with a fully-qualified name
 * that starts with "{@code java.}".
 *
 * @see  #loadClass(String, boolean)
 * @see  #resolveClass(Class)
 *
 * @deprecated  Replaced by {@link #defineClass(String, byte[], int, int)
 * defineClass(String, byte[], int, int)}
 */
====>[PUBLIC]<java.lang.ClassLoader: Class<?> defineClass(byte[],int,int)>    ---->    #defineClass(String, byte[], int, int)  defineClass(String, byte[], int, int)
<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)>
/**
 * Enables or disables the visual voicemail client for a phone account.
 *
 * <p>Requires that the calling app is the default dialer, or has carrier privileges (see
 * {@link #hasCarrierPrivileges}), or has permission
 * {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.
 *
 * @param phoneAccountHandle the phone account to change the client state
 * @param enabled the new state of the client
 * @hide
 * @deprecated Visual voicemail no longer in telephony. {@link VisualVoicemailService} should
 * be implemented instead.
 */
====>[HIDDEN]<android.telephony.TelephonyManager: void setVisualVoicemailEnabled(PhoneAccountHandle,boolean)>    ---->    VisualVoicemailService
<android.app.Activity: void startManagingCursor(Cursor)>
/**
 * This method allows the activity to take care of managing the given
 * {@link Cursor}'s lifecycle for you based on the activity's lifecycle.
 * That is, when the activity is stopped it will automatically call
 * {@link Cursor#deactivate} on the given Cursor, and when it is later restarted
 * it will call {@link Cursor#requery} for you.  When the activity is
 * destroyed, all managed Cursors will be closed automatically.
 *
 * <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later, consider instead using {@link LoaderManager} instead, available
 * via {@link #getLoaderManager()}.</em>
 *
 * <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on cursor obtained from
 * {@link #managedQuery}, because the activity will do that for you at the appropriate time.
 * However, if you call {@link #stopManagingCursor} on a cursor from a managed query, the system
 * <em>will not</em> automatically close the cursor and, in that case, you must call
 * {@link Cursor#close()}.</p>
 *
 * @param c The Cursor to be managed.
 *
 * @see #managedQuery(android.net.Uri , String[], String, String[], String)
 * @see #stopManagingCursor
 *
 * @deprecated Use the new {@link android.content.CursorLoader} class with
 * {@link LoaderManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void startManagingCursor(Cursor)>    ---->    android.content.CursorLoader
<com.android.internal.telephony.uicc.UiccCard: void iccCloseLogicalChannel(int,Message)>
/**
 * Exposes {@link CommandsInterface#iccCloseLogicalChannel}
 * @deprecated Please use
 * {@link UiccProfile#iccCloseLogicalChannel(int, Message)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void iccCloseLogicalChannel(int,Message)>    ---->    UiccProfile#iccCloseLogicalChannel(int, Message)
<android.view.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>
/**
 * @deprecated checkstyle
 */
====>[PUBLIC]<android.view.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,Paint)>    ---->
<com.android.ims.ImsManager: void factoryReset(Context)>
/**
 * Resets ImsManager settings back to factory defaults.
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #factoryReset()} instead.
 *
 * @hide
 */
====>[HIDDEN]<com.android.ims.ImsManager: void factoryReset(Context)>    ---->    #factoryReset()
<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)>
/**
 * @deprecated in API 16
 * Sets the texture coordinate for the vertices that are added after this method call.
 *
 * @param s texture coordinate s
 * @param t texture coordinate t
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: TriangleMeshBuilder setTexture(float,float)>    ---->
<androidx.core.view.ViewCompat: void setActivated(View,boolean)>
/**
 * Changes the activated state of this view. A view can be activated or not.
 * Note that activation is not the same as selection.  Selection is
 * a transient property, representing the view (hierarchy) the user is
 * currently interacting with.  Activation is a longer-term state that the
 * user can move views in and out of.
 *
 * @param activated true if the view must be activated, false otherwise
 *
 * @deprecated Use {@link View#setActivated(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setActivated(View,boolean)>    ---->    View#setActivated(boolean)
<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>
/**
 * Called by the system when the activity changes to and from picture-in-picture mode. This is
 * generally tied to {@link Activity#onPictureInPictureModeChanged} of the containing Activity.
 *
 * @param isInPictureInPictureMode True if the activity is in picture-in-picture mode.
 *
 * @deprecated Use {@link #onPictureInPictureModeChanged(boolean, Configuration)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>    ---->    #onPictureInPictureModeChanged(boolean, Configuration)
<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(Message)>
/**
 * Reason for last PDP context deactivate or failure to activate
 * cause code returned as int[0] in Message.obj.response
 * returns an integer cause code defined in TS 24.008
 * section 6.1.3.1.3 or close approximation
 * @deprecated Do not use.
 */
====>[PUBLIC]<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(Message)>    ---->
<androidx.legacy.widget.Space: void draw(Canvas)>
/**
 * Draw nothing.
 *
 * @param canvas an unused parameter.
 *
 * @deprecated Use framework {@link android.widget.Space} class instead.
 */
====>[PUBLIC]<androidx.legacy.widget.Space: void draw(Canvas)>    ---->    android.widget.Space
Inconsistency (Non-Documentation):<android.app.Fragment: void performPictureInPictureModeChanged(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Fragment.java
<android.app.Fragment: void performPictureInPictureModeChanged(boolean)>

====>[PUBLIC]<android.app.Fragment: void performPictureInPictureModeChanged(boolean)>    ---->
<android.database.CursorWindow: boolean isNull(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_NULL}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_NULL}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isNull(int,int)>    ---->    #getType(int, int)
<android.os.UserManager: boolean setRestrictionsChallenge(String)>
/**
 * Sets a new challenge PIN for restrictions. This is only for use by pre-installed
 * apps and requires the MANAGE_USERS permission.
 * @param newPin the PIN to use for challenge dialogs.
 * @return Returns true if the challenge PIN was set successfully.
 * @deprecated The restrictions PIN functionality is no longer provided by the system.
 * This method is preserved for backwards compatibility reasons and always returns false.
 */
====>[PUBLIC]<android.os.UserManager: boolean setRestrictionsChallenge(String)>    ---->
<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from a file stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,File)>    ---->
<android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>
/**
 * Binds host resolutions performed by this process to the network designated by {@code netId}.
 * {@link #bindProcessToNetwork} takes precedence over this setting.  Passing NETID_UNSET clears
 * the binding.
 *
 * @deprecated This is strictly for legacy usage to support startUsingNetworkFeature().
 */
====>[PUBLIC]<android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>    ---->
<android.os.Debug: void stopAllocCounting()>
/**
 * Stop counting the number and aggregate size of memory allocations.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void stopAllocCounting()>    ---->
<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(PackageManager,String)>
/**
 * Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatus}.
 * @deprecated Please use
 * {@link UiccProfile#getCarrierPrivilegeStatus(PackageManager, String)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: int getCarrierPrivilegeStatus(PackageManager,String)>    ---->    UiccProfile#getCarrierPrivilegeStatus(PackageManager, String)
<android.util.proto.ProtoOutputStream: void writePackedInt64(long,long[])>
/**
 * Write a list of packed proto "int64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedInt64(long,long[])>    ---->    #write
<android.hardware.location.ContextHubManager: ContextHubInfo getContextHubInfo(int)>
/**
 * Get more information about a specific hub.
 *
 * @param hubHandle Handle (system-wide unique identifier) of a context hub.
 * @return ContextHubInfo Information about the requested context hub.
 *
 * @see ContextHubInfo
 *
 * @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the
 * new APIs.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: ContextHubInfo getContextHubInfo(int)>    ---->    #getContextHubs()
<android.security.keystore.recovery.KeyChainSnapshot.Builder: Builder setTrustedHardwarePublicKey(byte[])>
/**
 * Sets public key used to encrypt recovery blob.
 *
 * @param publicKey The public key
 * @return This builder.
 * @removed Use {@link #setTrustedHardwareCertPath} instead.
 */
====>[HIDDEN]<android.security.keystore.recovery.KeyChainSnapshot.Builder: Builder setTrustedHardwarePublicKey(byte[])>    ---->
<android.telephony.gsm.SmsMessage: String getEmailFrom()>
/**
 * @return if isEmail() is true, email from address of email sent through
 * the gateway. null otherwise
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getEmailFrom()>    ---->
<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgressLong(long)>
/**
 * Sets the buffered progress for the playback controls row.
 * @param ms Buffered progress in milliseconds of long type.
 * @deprecated Use {@link #setBufferedPosition(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setBufferedProgressLong(long)>    ---->    #setBufferedPosition(long)
Inconsistency (Non-Documentation):<com.android.internal.telephony.sip.SipCommandInterface: void getPDPContextList(Message)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\telephony\sip\SipCommandInterface.java
<com.android.internal.telephony.sip.SipCommandInterface: void getPDPContextList(Message)>

====>[PUBLIC]<com.android.internal.telephony.sip.SipCommandInterface: void getPDPContextList(Message)>    ---->
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiScanner.java
<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)>
/**
 * remove tracking of interesting access points
 * @param listener same object provided in {@link #startTrackingBssids}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void stopTrackingBssids(BssidListener)>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomContentHeight(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomContentHeight(int)>
/**
 * Set the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link NotificationCompat.WearableExtender#setDisplayIntent}. See also
 * {@link NotificationCompat.WearableExtender#setCustomSizePreset} and
 * {@link #getCustomContentHeight}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomContentHeight(int)>    ---->
<com.android.internal.telephony.uicc.UiccCard: boolean isApplicationOnIcc(AppType)>
/**
 * @deprecated Please use {@link UiccProfile#isApplicationOnIcc(AppType)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: boolean isApplicationOnIcc(AppType)>    ---->    UiccProfile#isApplicationOnIcc(AppType)
<androidx.fragment.app.FragmentController: void doLoaderDestroy()>
/**
 * Destroys the loaders and, if their state is not being retained, removes them.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void doLoaderDestroy()>    ---->
<android.view.Display: int getOrientation()>
/**
 * @deprecated use {@link #getRotation}
 * @return orientation of this display.
 */
====>[PUBLIC]<android.view.Display: int getOrientation()>    ---->    #getRotation
<com.android.ims.ImsConnectionStateListener: void onImsResumed()>
/**
 * Called when its suspended IMS connection is resumed, meaning the connection
 * now allows throughput.
 * @deprecated not used in newer IMS provider implementations.
 */
====>[PUBLIC]<com.android.ims.ImsConnectionStateListener: void onImsResumed()>    ---->
Inconsistency (Non-Documentation):<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\NetworkStatsCollection.java
<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)>

====>[PUBLIC]<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(File)>    ---->
<androidx.leanback.widget.BaseGridView: int getVerticalMargin()>
/**
 * Returns the spacing in pixels between two child items vertically.
 * @deprecated Use {@link #getVerticalSpacing()}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseGridView: int getVerticalMargin()>    ---->    #getVerticalSpacing()
<android.media.SoundPool: void <init>(int,int,int)>
/**
 * Constructor. Constructs a SoundPool object with the following
 * characteristics:
 *
 * @param maxStreams the maximum number of simultaneous streams for this
 * SoundPool object
 * @param streamType the audio stream type as described in AudioManager
 * For example, game applications will normally use
 * {@link AudioManager#STREAM_MUSIC}.
 * @param srcQuality the sample-rate converter quality. Currently has no
 * effect. Use 0 for the default.
 * @return a SoundPool object, or null if creation failed
 * @deprecated use {@link SoundPool.Builder} instead to create and configure a
 * SoundPool instance
 */
====>[PUBLIC]<android.media.SoundPool: void <init>(int,int,int)>    ---->    SoundPool.Builder
<android.location.GnssMeasurement: void resetCarrierPhase()>
/**
 * Resets the RF phase detected by the receiver.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierPhase()>    ---->    #setAccumulatedDeltaRangeMeters(double)
Inconsistency (Non-Documentation):<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>
/**
 * Set a label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @param label the label to confirm the action should be executed
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>    ---->
<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)>
/**
 * Currently not implemented. It does nothing.
 * @deprecated Time lapse mode video recording using camera still image capture
 * is not desirable, and will not be supported.
 * @hide
 */
====>[HIDDEN]<android.media.MediaRecorder: void setAuxiliaryOutputFile(FileDescriptor)>    ---->
<androidx.core.view.ViewCompat: float getTranslationX(View)>
/**
 * The horizontal location of this view relative to its {@link View#getLeft() left} position.
 * This position is post-layout, in addition to wherever the object's
 * layout placed it.
 *
 * @return The horizontal position of this view relative to its left position, in pixels.
 *
 * @deprecated Use {@link View#getTranslationX()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getTranslationX(View)>    ---->    View#getTranslationX()
<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()>
/**
 * @deprecated in API 16
 * Used to load the mesh described by the index entry, object
 * described by the index entry must be a renderscript mesh
 *
 * @return renderscript mesh object described by the entry
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: Mesh getMesh()>    ---->
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\settingslib\NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: void setPolicyCycleDay(NetworkTemplate,int,String)>    ---->
<android.content.res.Resources: Drawable getDrawableForDensity(int,int)>
/**
 * Return a drawable object associated with a particular resource ID for the
 * given screen density in DPI. This will set the drawable's density to be
 * the device's density multiplied by the ratio of actual drawable density
 * to requested density. This allows the drawable to be scaled up to the
 * correct size if needed. Various types of objects will be returned
 * depending on the underlying resource -- for example, a solid color, PNG
 * image, scalable image, etc. The Drawable API hides these implementation
 * details.
 *
 * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
 * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
 * or {@link #getDrawableForDensity(int, int, Theme)} passing the desired
 * theme.</p>
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 * This integer encodes the package, type, and resource entry.
 * The value 0 is an invalid identifier.
 * @param density the desired screen density indicated by the resource as
 * found in {@link DisplayMetrics}. A value of 0 means to use the
 * density returned from {@link #getConfiguration()}.
 * This is equivalent to calling {@link #getDrawable(int)}.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 * @see #getDrawableForDensity(int, int, Theme)
 * @deprecated Use {@link #getDrawableForDensity(int, int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: Drawable getDrawableForDensity(int,int)>    ---->    #getDrawableForDensity(int, int, Theme)
<android.renderscript.ProgramFragment.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Create a builder object.
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramFragment.Builder: void <init>(RenderScript)>    ---->
<android.os.Debug: int getThreadExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int getThreadExternalAllocSize()>    ---->
<android.content.ContentProviderClient: boolean release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.content.ContentProviderClient: boolean release()>    ---->    #close()
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedScroll(CoordinatorLayout,V,View,int,int,int,int)>
/**
 * @deprecated You should now override
 * {@link #onNestedScroll(CoordinatorLayout, View, View, int, int, int, int, int)}.
 * This method will still continue to be called if the type is
 * {@link ViewCompat#TYPE_TOUCH}.
 */
====>[PUBLIC]<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: void onNestedScroll(CoordinatorLayout,V,View,int,int,int,int)>    ---->    #onNestedScroll(CoordinatorLayout, View, View, int, int, int, int, int)
<android.provider.Settings.System: void setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)>
/**
 * @hide
 * @deprecated - Do not use
 */
====>[HIDDEN]<android.provider.Settings.System: void setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)>    ---->
<android.content.pm.PackageInstaller.Session: void setProgress(float)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.Session: void setProgress(float)>    ---->
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(Context,Intent)>
/**
 * Called after the user has failed at entering their device or profile challenge password,
 * as a result of receiving {@link #ACTION_PASSWORD_FAILED}.  At this point you can use
 * {@link DevicePolicyManager#getCurrentFailedPasswordAttempts()} to retrieve the number of
 * failed password attempts.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordFailed(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(Context,Intent)>    ---->    #onPasswordFailed(Context, Intent, UserHandle)
<android.telephony.gsm.SmsManager: void sendTextMessage(String,String,String,PendingIntent,PendingIntent)>
/**
 * Send a text based SMS.
 *
 * @param destinationAddress the address to send the message to
 * @param scAddress is the service center address or null to use
 * the current default SMSC
 * @param text the body of the message to send
 * @param sentIntent if not NULL this <code>PendingIntent</code> is
 * broadcast when the message is successfully sent, or failed.
 * The result code will be <code>Activity.RESULT_OK<code> for success,
 * or one of these errors:
 * <code>RESULT_ERROR_GENERIC_FAILURE</code>
 * <code>RESULT_ERROR_RADIO_OFF</code>
 * <code>RESULT_ERROR_NULL_PDU</code>.
 * The per-application based SMS control checks sentIntent. If sentIntent
 * is NULL the caller will be checked against all unknown applications,
 * which cause smaller number of SMS to be sent in checking period.
 * @param deliveryIntent if not NULL this <code>PendingIntent</code> is
 * broadcast when the message is delivered to the recipient.  The
 * raw pdu of the status report is in the extended data ("pdu").
 *
 * @throws IllegalArgumentException if destinationAddress or text are empty
 * @deprecated Use android.telephony.SmsManager.
 */
====>[PUBLIC]<android.telephony.gsm.SmsManager: void sendTextMessage(String,String,String,PendingIntent,PendingIntent)>    ---->
<android.app.AlertDialog: void setButton(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_POSITIVE}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<java.util.jar.Pack200.Packer: void addPropertyChangeListener(PropertyChangeListener)>
/**
 * Registers a listener for PropertyChange events on the properties map.
 * This is typically used by applications to update a progress bar.
 *
 * <p> The default implementation of this method does nothing and has
 * no side-effects.</p>
 *
 * <p><b>WARNING:</b> This method is omitted from the interface
 * declaration in all subset Profiles of Java SE that do not include
 * the {@code java.beans} package. </p>
 *
 * @see #properties
 * @see #PROGRESS
 * @param listener  An object to be invoked when a property is changed.
 * @deprecated The dependency on {@code PropertyChangeListener} creates
 * a significant impediment to future modularization of the
 * Java platform. This method will be removed in a future
 * release.
 * Applications that need to monitor progress of the packer
 * can poll the value of the {@link #PROGRESS PROGRESS}
 * property instead.
 */
====>[PUBLIC]<java.util.jar.Pack200.Packer: void addPropertyChangeListener(PropertyChangeListener)>    ---->    #PROGRESS PROGRESS}  property instead. /@Deprecateddefault void addPropertyChangeListener(PropertyChangeListener listener)
Inconsistency (Non-Documentation):<androidx.loader.content.AsyncTaskLoader: void dump(String,FileDescriptor,PrintWriter,String[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\loader\content\AsyncTaskLoader.java
<androidx.loader.content.AsyncTaskLoader: void dump(String,FileDescriptor,PrintWriter,String[])>

====>[PUBLIC]<androidx.loader.content.AsyncTaskLoader: void dump(String,FileDescriptor,PrintWriter,String[])>    ---->
<android.content.ContentValues: void putStringArrayList(String,ArrayList<String>)>
/**
 * Unsupported, here until we get proper bulk insert APIs.
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentValues: void putStringArrayList(String,ArrayList<String>)>    ---->
<androidx.core.app.NotificationCompat.Builder: void <init>(Context)>
/**
 * @deprecated use {@link #NotificationCompat.Builder(Context,String)} instead.
 * All posted Notifications must specify a NotificationChannel Id.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Builder: void <init>(Context)>    ---->    #NotificationCompat.Builder(Context,String)
<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarVisibility(boolean)>
/**
 * @deprecated Progress bars are no longer provided in AppCompat.
 */
====>[PUBLIC]<androidx.appcompat.app.AppCompatActivity: void setSupportProgressBarVisibility(boolean)>    ---->
<android.text.format.Formatter: String formatIpAddress(int)>
/**
 * Returns a string in the canonical IPv4 format ###.###.###.### from a packed integer
 * containing the IP address. The IPv4 address is expected to be in little-endian
 * format (LSB first). That is, 0x01020304 will return "4.3.2.1".
 *
 * @deprecated Use {@link java.net.InetAddress#getHostAddress()}, which supports both IPv4 and
 * IPv6 addresses. This method does not support IPv6 addresses.
 */
====>[PUBLIC]<android.text.format.Formatter: String formatIpAddress(int)>    ---->    java.net.InetAddress#getHostAddress()
<android.app.usage.StorageStatsManager: long getFreeBytes(String)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStatsManager: long getFreeBytes(String)>    ---->
<android.webkit.Plugin: String getName()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getName()>    ---->
<java.io.DataInputStream: String readLine()>
/**
 * See the general contract of the <code>readLine</code>
 * method of <code>DataInput</code>.
 * <p>
 * Bytes
 * for this operation are read from the contained
 * input stream.
 *
 * @deprecated This method does not properly convert bytes to characters.
 * As of JDK&nbsp;1.1, the preferred way to read lines of text is via the
 * <code>BufferedReader.readLine()</code> method.  Programs that use the
 * <code>DataInputStream</code> class to read lines can be converted to use
 * the <code>BufferedReader</code> class by replacing code of the form:
 * <blockquote><pre>
 * DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
 * </pre></blockquote>
 * with:
 * <blockquote><pre>
 * BufferedReader d
 * =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
 * </pre></blockquote>
 *
 * @return     the next line of text from this input stream.
 * @exception  IOException  if an I/O error occurs.
 * @see        java.io.BufferedReader#readLine()
 * @see        java.io.FilterInputStream#in
 */
====>[PUBLIC]<java.io.DataInputStream: String readLine()>    ---->    java.io.BufferedReader#readLine()
<androidx.core.view.ViewCompat: void onInitializeAccessibilityEvent(View,AccessibilityEvent)>
/**
 * Initializes an {@link AccessibilityEvent} with information about
 * this View which is the event source. In other words, the source of
 * an accessibility event is the view whose state change triggered firing
 * the event.
 * <p>
 * Example: Setting the password property of an event in addition
 * to properties set by the super implementation:
 * <pre> public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
 * super.onInitializeAccessibilityEvent(event);
 * event.setPassword(true);
 * }</pre>
 * <p>
 * If an {@link AccessibilityDelegateCompat} has been specified via calling
 * {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)}, its
 * {@link AccessibilityDelegateCompat#onInitializeAccessibilityEvent(View, AccessibilityEvent)}
 * is responsible for handling this call.
 *
 * @param v The View against which to invoke the method.
 * @param event The event to initialize.
 *
 * @see View#sendAccessibilityEvent(int)
 * @see View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)
 *
 * @deprecated Call {@link View#onInitializeAccessibilityEvent(AccessibilityEvent)} directly.
 * This method will be removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void onInitializeAccessibilityEvent(View,AccessibilityEvent)>    ---->    View#onInitializeAccessibilityEvent(AccessibilityEvent)
<android.telephony.PhoneNumberUtils: String calledPartyBCDToString(byte[],int,int)>
/**
 * 3GPP TS 24.008 10.5.4.7
 * Called Party BCD Number
 *
 * See Also TS 51.011 10.5.1 "dialing number/ssc string"
 * and TS 11.11 "10.3.1 EF adn (Abbreviated dialing numbers)"
 *
 * @param bytes the data buffer
 * @param offset should point to the TOA (aka. TON/NPI) octet after the length byte
 * @param length is the number of bytes including TOA byte
 * and must be at least 2
 *
 * @return partial string on invalid decode
 *
 * @deprecated use {@link #calledPartyBCDToString(byte[], int, int, int)} instead. Calling this
 * method is equivalent to calling {@link #calledPartyBCDToString(byte[], int, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String calledPartyBCDToString(byte[],int,int)>    ---->    #calledPartyBCDToString(byte[], int, int, int)
<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.StaticLayout: void <init>(CharSequence,int,int,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<android.test.mock.MockPackageManager: boolean setDefaultBrowserPackageName(String,int)>
/**
 * {@removed}
 */
====>[HIDDEN]<android.test.mock.MockPackageManager: boolean setDefaultBrowserPackageName(String,int)>    ---->
<android.app.ActivityManagerNative: boolean isSystemReady()>
/**
 * Convenience for checking whether the system is ready.  For internal use only.
 *
 * @deprecated use ActivityManagerInternal.isSystemReady instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: boolean isSystemReady()>    ---->    ActivityManagerInternal.isSystemReady
<android.webkit.Plugin: String getPath()>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: String getPath()>    ---->
<androidx.leanback.app.PlaybackSupportFragment: boolean isFadingEnabled()>
/**
 * @deprecated Uses {@link #isControlsOverlayAutoHideEnabled()}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackSupportFragment: boolean isFadingEnabled()>    ---->    #isControlsOverlayAutoHideEnabled()
<androidx.leanback.widget.DetailsOverviewRow: List<Action> getActions()>
/**
 * Returns a read-only view of the list of Actions of this details overview. It will throw
 * ClassCastException if current actions adapter is not {@link ArrayObjectAdapter}. Must be
 * called on UI thread.
 *
 * @return An unmodifiable view of the list of Actions.
 * @deprecated Use {@link #setActionsAdapter(ObjectAdapter)} and {@link #getActionsAdapter()}
 */
====>[PUBLIC]<androidx.leanback.widget.DetailsOverviewRow: List<Action> getActions()>    ---->    #setActionsAdapter(ObjectAdapter)
<com.android.internal.logging.MetricsLogger: void action(LogMaker)>
/**
 * @deprecated use {@link #write(LogMaker)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(LogMaker)>    ---->    #write(LogMaker)
<android.hardware.location.ContextHubManager: int sendMessage(int,int,ContextHubMessage)>
/**
 * Send a message to a specific nano app instance on a context hub.
 *
 * Note that the return value of this method only speaks of success
 * up to the point of sending this to the Context Hub.  It is not
 * an assurance that the Context Hub successfully sent this message
 * on to the nanoapp.  If assurance is desired, a protocol should be
 * established between your code and the nanoapp, with the nanoapp
 * sending a confirmation message (which will be reported via
 * Callback.onMessageReceipt).
 *
 * @param hubHandle handle of the hub to send the message to
 * @param nanoAppHandle  handle of the nano app to send to
 * @param message Message to be sent
 *
 * @see ContextHubMessage
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link android.hardware.location.ContextHubClient#sendMessageToNanoApp(
 * NanoAppMessage)} instead, after creating a
 * {@link android.hardware.location.ContextHubClient} with
 * {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int sendMessage(int,int,ContextHubMessage)>    ---->    android.hardware.location.ContextHubClient#sendMessageToNanoApp(  NanoAppMessage)
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOn()>
/**
 * Called when the screen has been turned on.
 *
 * @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onScreenTurnedOn()>    ---->    com.android.systemui.keyguard.ScreenLifecycle
<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)>
/**
 * Constructs a <code>Timestamp</code> object initialized
 * with the given values.
 *
 * @param year the year minus 1900
 * @param month 0 to 11
 * @param date 1 to 31
 * @param hour 0 to 23
 * @param minute 0 to 59
 * @param second 0 to 59
 * @param nano 0 to 999,999,999
 * @deprecated instead use the constructor <code>Timestamp(long millis)</code>
 * @exception IllegalArgumentException if the nano argument is out of bounds
 */
====>[PUBLIC]<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)>    ---->
<androidx.slice.builders.ListBuilder: ListBuilder addGrid(GridBuilder)>
/**
 * Add a grid row to the list builder.
 *
 * @deprecated TO BE REMOVED; use {@link #addGridRow(GridRowBuilder)} instead
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder addGrid(GridBuilder)>    ---->    #addGridRow(GridRowBuilder)
<androidx.core.view.MotionEventCompat: float getX(MotionEvent,int)>
/**
 * Call {@link MotionEvent#getX(int)}.
 *
 * @deprecated Call {@link MotionEvent#getX()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: float getX(MotionEvent,int)>    ---->    MotionEvent#getX()
<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>
/**
 * Removes an action that can be performed on the node. If the action was
 * not already added to the node, calling this method has no effect.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param action The action to be removed.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @deprecated Use {@link #removeAction(AccessibilityAction)}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>    ---->    #removeAction(AccessibilityAction)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>
/**
 * @hide
 * @deprecated Talk to TelephonyManager directly
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean getMobileDataEnabled()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: Parcelable getParcelableData()>
/**
 * Gets the {@link Parcelable} data.
 *
 * @return The parcelable data.
 *
 * @deprecated Use {@link AccessibilityRecord#getParcelableData()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: Parcelable getParcelableData()>    ---->    AccessibilityRecord#getParcelableData()
<androidx.core.view.MenuItemCompat: MenuItem setOnActionExpandListener(MenuItem,OnActionExpandListener)>
/**
 * Set an {@link OnActionExpandListener} on this menu
 * item to be notified when the associated action view is expanded or collapsed.
 * The menu item must be configured to expand or collapse its action view using the flag
 * {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.
 *
 * @param listener Listener that will respond to expand/collapse events
 * @return This menu item instance for call chaining
 *
 * @deprecated Use {@link MenuItem#setOnActionExpandListener(MenuItem.OnActionExpandListener)}
 * directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: MenuItem setOnActionExpandListener(MenuItem,OnActionExpandListener)>    ---->    MenuItem#setOnActionExpandListener(MenuItem.OnActionExpandListener)
<androidx.car.widget.SeekbarListItem: void setSupplementalIcon(Drawable,boolean,OnClickListener)>
/**
 * Sets {@code Supplemental Action} to be represented by an {@code Supplemental Icon}.
 *
 * @deprecated use either {@link #setSupplementalIcon(Drawable, boolean)} or
 * {@link #setSupplementalIcon(int, boolean)} and
 * {@link #setSupplementalIconListener(android.view.View.OnClickListener)}.
 */
====>[PUBLIC]<androidx.car.widget.SeekbarListItem: void setSupplementalIcon(Drawable,boolean,OnClickListener)>    ---->    #setSupplementalIcon(Drawable, boolean)
<android.location.GnssMeasurement: boolean hasCarrierPhase()>
/**
 * Returns {@code true} if {@link #getCarrierPhase()} is available, {@code false} otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierPhase()>    ---->    #getAccumulatedDeltaRangeState()
<android.renderscript.RenderScriptGL: void <init>(Context,SurfaceConfig)>
/**
 * @deprecated in API 16
 * Construct a new RenderScriptGL context.
 *
 * @param ctx The context.
 * @param sc The desired format of the primary rendering surface.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void <init>(Context,SurfaceConfig)>    ---->
<androidx.legacy.app.FragmentPagerAdapter: long getItemId(int)>
/**
 * Return a unique identifier for the item at the given position.
 *
 * <p>The default implementation returns the given position.
 * Subclasses should override this method if the positions of items can change.</p>
 *
 * @param position Position within this adapter
 * @return Unique identifier for the item at position
 *
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: long getItemId(int)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<java.util.logging.Logger: void logrb(Level,String,String,String,String,Object[])>
/**
 * Log a message, specifying source class, method, and resource bundle name,
 * with an array of object arguments.
 * <p>
 * If the logger is currently enabled for the given message
 * level then a corresponding LogRecord is created and forwarded
 * to all the registered output Handler objects.
 * <p>
 * The msg string is localized using the named resource bundle.  If the
 * resource bundle name is null, or an empty String or invalid
 * then the msg string is not localized.
 * <p>
 * @param   level   One of the message level identifiers, e.g., SEVERE
 * @param   sourceClass    name of class that issued the logging request
 * @param   sourceMethod   name of method that issued the logging request
 * @param   bundleName     name of resource bundle to localize msg,
 * can be null.
 * @param   msg     The string message (or a key in the message catalog)
 * @param   params  Array of parameters to the message
 * @deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
 * java.lang.String, java.util.ResourceBundle, java.lang.String,
 * java.lang.Object...)} instead.
 */
====>[PUBLIC]<java.util.logging.Logger: void logrb(Level,String,String,String,String,Object[])>    ---->    #logrb(java.util.logging.Level, java.lang.String,  java.lang.String, java.util.ResourceBundle, java.lang.String,  java.lang.Object...)
<android.app.Service: void onStart(Intent,int)>
/**
 * @deprecated Implement {@link #onStartCommand(Intent, int, int)} instead.
 */
====>[PUBLIC]<android.app.Service: void onStart(Intent,int)>    ---->    #onStartCommand(Intent, int, int)
<android.os.MemoryFile: boolean isPurgingAllowed()>
/**
 * Is memory file purging enabled?
 *
 * @return true if the file may be purged.
 *
 * @deprecated Purgable is considered generally fragile and hard to use safely. Applications
 * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}
 * to react to memory events and release shared memory regions as appropriate.
 */
====>[PUBLIC]<android.os.MemoryFile: boolean isPurgingAllowed()>    ---->    android.content.ComponentCallbacks2#onTrimMemory(int)
<android.media.Ringtone: void setStreamType(int)>
/**
 * Sets the stream type where this ringtone will be played.
 *
 * @param streamType The stream, see {@link AudioManager}.
 * @deprecated use {@link #setAudioAttributes(AudioAttributes)}
 */
====>[PUBLIC]<android.media.Ringtone: void setStreamType(int)>    ---->    #setAudioAttributes(AudioAttributes)
<android.printservice.recommendation.RecommendationInfo: void <init>(CharSequence,CharSequence,int,boolean)>
/**
 * Create a new recommendation.
 *
 * @param packageName                  Package name of the print service
 * @param name                         Display name of the print service
 * @param numDiscoveredPrinters        Number of printers the print service would discover if
 * installed
 * @param recommendsMultiVendorService If the service detects printer from multiple vendor
 *
 * @deprecated Use {@link RecommendationInfo(String, String, List<InetAddress>, boolean)}
 * instead
 */
====>[PUBLIC]<android.printservice.recommendation.RecommendationInfo: void <init>(CharSequence,CharSequence,int,boolean)>    ---->    RecommendationInfo(String, String, List<InetAddress>, boolean)
<android.app.ActionBar: void addTab(Tab)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.
 * If this is the first tab to be added it will become the selected tab.
 *
 * @param tab Tab to add
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab)>    ---->
<androidx.legacy.app.FragmentPagerAdapter: Object instantiateItem(ViewGroup,int)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: Object instantiateItem(ViewGroup,int)>    ---->    androidx.fragment.app.FragmentPagerAdapter
Inconsistency (Non-Documentation):<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\NetworkStatsCollection.java
<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)>

====>[PUBLIC]<com.android.server.net.NetworkStatsCollection: void readLegacyUid(File,boolean)>    ---->
<android.view.textclassifier.TextClassification.Builder: Builder setIntent(Intent)>
/**
 * Sets the intent for the <i>primary</i> action that may be fired to act on the classified
 * text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelled.
 *
 * @deprecated Use {@link #addAction(RemoteAction)} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification.Builder: Builder setIntent(Intent)>    ---->    #addAction(RemoteAction)
<androidx.core.view.ViewCompat: void setSaveFromParentEnabled(View,boolean)>
/**
 * Controls whether the entire hierarchy under this view will save its
 * state when a state saving traversal occurs from its parent.
 *
 * @param enabled Set to false to <em>disable</em> state saving, or true
 * (the default) to allow it.
 *
 * @deprecated Use {@link View#setSaveFromParentEnabled(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setSaveFromParentEnabled(View,boolean)>    ---->    View#setSaveFromParentEnabled(boolean)
<android.app.ActivityManager: void restartPackage(String)>
/**
 * @deprecated This is now just a wrapper for
 * {@link #killBackgroundProcesses(String)}; the previous behavior here
 * is no longer available to applications because it allows them to
 * break other applications by removing their alarms, stopping their
 * services, etc.
 */
====>[PUBLIC]<android.app.ActivityManager: void restartPackage(String)>    ---->    #killBackgroundProcesses(String)
<androidx.appcompat.app.ActionBar: Tab getSelectedTab()>
/**
 * Returns the currently selected tab if in tabbed navigation mode and there is at least
 * one tab present.
 *
 * @return The currently selected tab or null
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: Tab getSelectedTab()>    ---->
Inconsistency (Non-Documentation):<com.android.systemui.recents.events.EventBus: void post(InterprocessEvent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\systemui\recents\events\EventBus.java
<com.android.systemui.recents.events.EventBus: void post(InterprocessEvent)>
/**
 * Prevent post()ing an InterprocessEvent
 */
====>[PUBLIC]<com.android.systemui.recents.events.EventBus: void post(InterprocessEvent)>    ---->
<com.android.systemui.statusbar.phone.UserAvatarView: void setBitmap(Bitmap)>
/**
 * @deprecated use {@link #setAvatar(Bitmap)} instead.
 */
====>[PUBLIC]<com.android.systemui.statusbar.phone.UserAvatarView: void setBitmap(Bitmap)>    ---->    #setAvatar(Bitmap)
<android.graphics.Picture: void writeToStream(OutputStream)>
/**
 * Write the picture contents to a stream. The data can be used to recreate
 * the picture in this or another process by calling createFromStream(...)
 * The resulting stream is NOT to be persisted across device restarts as
 * there is no guarantee that the Picture can be successfully reconstructed.
 *
 * @see #createFromStream(java.io.InputStream)
 * @deprecated The recommended alternative is to draw the picture into a
 * Bitmap from which you can persist it as raw or compressed pixels.
 */
====>[PUBLIC]<android.graphics.Picture: void writeToStream(OutputStream)>    ---->
<androidx.leanback.widget.ImageCardView: void <init>(Context,int)>
/**
 * Create an ImageCardView using a given theme for customization.
 *
 * @param context
 * The Context the view is running in, through which it can
 * access the current theme, resources, etc.
 * @param themeResId
 * The resourceId of the theme you want to apply to the ImageCardView. The theme
 * includes attributes "imageCardViewStyle", "imageCardViewTitleStyle",
 * "imageCardViewContentStyle" etc. to customize individual part of ImageCardView.
 * @deprecated Calling this constructor inefficiently creates one ContextThemeWrapper per card,
 * you should share it in card Presenter: wrapper = new ContextThemeWrapper(context, themResId);
 * return new ImageCardView(wrapper);
 */
====>[PUBLIC]<androidx.leanback.widget.ImageCardView: void <init>(Context,int)>    ---->
<androidx.core.app.TaskStackBuilder: TaskStackBuilder from(Context)>
/**
 * Return a new TaskStackBuilder for launching a fresh task stack consisting
 * of a series of activities.
 *
 * @param context The context that will launch the new task stack or generate a PendingIntent
 * @return A new TaskStackBuilder
 *
 * @deprecated use {@link #create(Context)} instead
 */
====>[PUBLIC]<androidx.core.app.TaskStackBuilder: TaskStackBuilder from(Context)>    ---->    #create(Context)
<android.security.keystore.recovery.RecoveryController: int getRecoveryStatus(String,String)>
/**
 * @deprecated Use {@link #getRecoveryStatus(String)}.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: int getRecoveryStatus(String,String)>    ---->    #getRecoveryStatus(String)
<android.app.usage.StorageStats: long getCodeBytes()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.usage.StorageStats: long getCodeBytes()>    ---->
<android.util.proto.ProtoOutputStream: void writeFixed64(long,long)>
/**
 * Write a single proto "fixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeFixed64(long,long)>    ---->    #write
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)>
/**
 * Set an icon that goes with the content of this notification.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setContentIcon(int)>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: void setWallpaper(Bitmap)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void setWallpaper(Bitmap)>

====>[PUBLIC]<android.app.ContextImpl: void setWallpaper(Bitmap)>    ---->
<android.widget.CursorAdapter: void init(Context,Cursor,boolean)>
/**
 * @deprecated Don't use this, use the normal constructor.  This will
 * be removed in the future.
 */
====>[PUBLIC]<android.widget.CursorAdapter: void init(Context,Cursor,boolean)>    ---->
<android.widget.DatePicker: boolean getSpinnersShown()>
/**
 * Returns whether the spinners are shown.
 * <p>
 * <strong>Note:</strong> his method returns {@code false} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return {@code true} if the spinners are shown
 * @deprecated Not supported by Material-style {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: boolean getSpinnersShown()>    ---->
<android.view.View: void setWillNotCacheDrawing(boolean)>
/**
 * When a View's drawing cache is enabled, drawing is redirected to an
 * offscreen bitmap. Some views, like an ImageView, must be able to
 * bypass this mechanism if they already draw a single bitmap, to avoid
 * unnecessary usage of the memory.
 *
 * @param willNotCacheDrawing true if this view does not cache its
 * drawing, false otherwise
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void setWillNotCacheDrawing(boolean)>    ---->    #setLayerType(int, Paint)
Inconsistency (Non-Documentation):<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\NetworkPolicyManagerService.java
<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)>

====>[PUBLIC]<com.android.server.net.NetworkPolicyManagerService: NetworkQuotaInfo getNetworkQuotaInfo(NetworkState)>    ---->
<android.net.ConnectivityManager: ConnectivityManager getInstanceOrNull()>
/**
 * @deprecated - use getSystemService. This is a kludge to support static access in certain
 * situations where a Context pointer is unavailable.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: ConnectivityManager getInstanceOrNull()>    ---->
<androidx.leanback.widget.ShadowOverlayContainer: void initialize(boolean,boolean)>
/**
 * Initialize shadows, color overlay.
 * @deprecated use {@link ShadowOverlayHelper#createShadowOverlayContainer(Context)} instead.
 */
====>[PUBLIC]<androidx.leanback.widget.ShadowOverlayContainer: void initialize(boolean,boolean)>    ---->    ShadowOverlayHelper#createShadowOverlayContainer(Context)
<android.media.AudioManager: void registerMediaButtonEventReceiver(ComponentName)>
/**
 * Register a component to be the sole receiver of MEDIA_BUTTON intents.
 * @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}
 * that will receive the media button intent. This broadcast receiver must be declared
 * in the application manifest. The package of the component must match that of
 * the context you're registering from.
 * @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void registerMediaButtonEventReceiver(ComponentName)>    ---->    MediaSession#setMediaButtonReceiver(PendingIntent)
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,int,boolean)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,int,boolean)>    ---->
<androidx.swiperefreshlayout.widget.SwipeRefreshLayout: void setColorScheme(int)>
/**
 * @deprecated Use {@link #setColorSchemeResources(int...)}
 */
====>[PUBLIC]<androidx.swiperefreshlayout.widget.SwipeRefreshLayout: void setColorScheme(int)>    ---->    #setColorSchemeResources(int...)
<android.view.View: boolean isDrawingCacheEnabled()>
/**
 * <p>Indicates whether the drawing cache is enabled for this view.</p>
 *
 * @return true if the drawing cache is enabled
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #getDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: boolean isDrawingCacheEnabled()>    ---->    #setLayerType(int, Paint)
<java.util.Date: void <init>(int,int,int,int,int,int)>
/**
 * Allocates a <code>Date</code> object and initializes it so that
 * it represents the instant at the start of the second specified
 * by the <code>year</code>, <code>month</code>, <code>date</code>,
 * <code>hrs</code>, <code>min</code>, and <code>sec</code> arguments,
 * in the local time zone.
 *
 * @param   year    the year minus 1900.
 * @param   month   the month between 0-11.
 * @param   date    the day of the month between 1-31.
 * @param   hrs     the hours between 0-23.
 * @param   min     the minutes between 0-59.
 * @param   sec     the seconds between 0-59.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(year + 1900, month, date,
 * hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900,
 * month, date, hrs, min, sec)</code>.
 */
====>[PUBLIC]<java.util.Date: void <init>(int,int,int,int,int,int)>    ---->
<android.net.http.SslCertificate: void <init>(String,String,String,String)>
/**
 * Creates a new SSL certificate object
 * @param issuedTo The entity this certificate is issued to
 * @param issuedBy The entity that issued this certificate
 * @param validNotBefore The not-before date from the certificate
 * validity period in ISO 8601 format
 * @param validNotAfter The not-after date from the certificate
 * validity period in ISO 8601 format
 * @deprecated Use {@link #SslCertificate(X509Certificate)}
 */
====>[PUBLIC]<android.net.http.SslCertificate: void <init>(String,String,String,String)>    ---->    #SslCertificate(X509Certificate)
<android.webkit.UrlInterceptHandler: CacheResult service(String,Map<String, String>)>
/**
 * Given an URL, returns the CacheResult which contains the
 * surrogate response for the request, or {@code null} if the handler is
 * not interested.
 *
 * @param url URL string.
 * @param headers The headers associated with the request.
 * @return The CacheResult containing the surrogate response.
 *
 * @hide
 * @deprecated Do not use, this interface is deprecated.
 */
====>[HIDDEN]<android.webkit.UrlInterceptHandler: CacheResult service(String,Map<String, String>)>    ---->
<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)>
/**
 * @deprecated in API 16
 * Set the default ProgramRaster object seen as the parent state by the
 * root rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramRaster(ProgramRaster)>    ---->
<android.drm.DrmStore.Action: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore.Action: void <init>()>    ---->
<android.content.pm.PackageManager: List<ResolveInfo> queryBroadcastReceivers(Intent,int,int)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageManager: List<ResolveInfo> queryBroadcastReceivers(Intent,int,int)>    ---->
<android.os.MemoryFile: boolean allowPurging(boolean)>
/**
 * Enables or disables purging of the memory file.
 *
 * @param allowPurging true if the operating system can purge the contents
 * of the file in low memory situations
 * @return previous value of allowPurging
 *
 * @deprecated Purgable is considered generally fragile and hard to use safely. Applications
 * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}
 * to react to memory events and release shared memory regions as appropriate.
 */
====>[PUBLIC]<android.os.MemoryFile: boolean allowPurging(boolean)>    ---->    android.content.ComponentCallbacks2#onTrimMemory(int)
<android.telephony.CellIdentityWcdma: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityWcdma: int getMnc()>    ---->    #getMncString
<android.hardware.usb.UsbManager: boolean isFunctionEnabled(String)>
/**
 * Returns true if the specified USB function is currently enabled when in device mode.
 * <p>
 * USB functions represent interfaces which are published to the host to access
 * services offered by the device.
 * </p>
 *
 * @deprecated use getCurrentFunctions() instead.
 * @param function name of the USB function
 * @return true if the USB function is enabled
 *
 * {@hide}
 */
====>[HIDDEN]<android.hardware.usb.UsbManager: boolean isFunctionEnabled(String)>    ---->    getCurrentFunctions()
<androidx.core.os.ParcelableCompat: Creator<T> newCreator(ParcelableCompatCreatorCallbacks<T>)>
/**
 * Factory method for {@link Parcelable.Creator}.
 *
 * @param callbacks Creator callbacks implementation.
 * @return New creator.
 *
 * @deprecated Use {@link android.os.Parcelable.ClassLoaderCreator} directly.
 */
====>[PUBLIC]<androidx.core.os.ParcelableCompat: Creator<T> newCreator(ParcelableCompatCreatorCallbacks<T>)>    ---->    android.os.Parcelable.ClassLoaderCreator
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcastAsUser(Intent,UserHandle,Bundle)>    ---->
<android.webkit.Plugin: void setClickHandler(PreferencesClickHandler)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setClickHandler(PreferencesClickHandler)>    ---->
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(OnGlobalLayoutListener)>
/**
 * Remove a previously installed global layout callback
 *
 * @param victim The callback to remove
 *
 * @throws IllegalStateException If {@link #isAlive()} returns false
 *
 * @deprecated Use #removeOnGlobalLayoutListener instead
 *
 * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)
 */
====>[PUBLIC]<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(OnGlobalLayoutListener)>    ---->    #removeOnGlobalLayoutListener
<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)>
/**
 * Cast a Binder object into an activity manager interface, generating
 * a proxy if needed.
 *
 * @deprecated use IActivityManager.Stub.asInterface instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: IActivityManager asInterface(IBinder)>    ---->    IActivityManager.Stub.asInterface
<android.opengl.EGLObjectHandle: void <init>(int)>
/**
 * @deprecated Use {@link #EGLObjectHandle(long)} instead. Handles
 * on 64 bit platforms will be wider than java ints.
 */
====>[PUBLIC]<android.opengl.EGLObjectHandle: void <init>(int)>    ---->    #EGLObjectHandle(long)
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiScanner.java
<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)>
/**
 * stop tracking changes in wifi environment
 * @param listener object that was provided to report events on {@link
 * #stopTrackingWifiChange}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void stopTrackingWifiChange(WifiChangeListener)>    ---->
<androidx.palette.graphics.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Builder} to generate the Palette.
 */
====>[PUBLIC]<androidx.palette.graphics.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,int,PaletteAsyncListener)>    ---->    Builder
<android.text.method.DateKeyListener: void <init>()>
/**
 * @deprecated Use {@link #DateKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateKeyListener: void <init>()>    ---->    #DateKeyListener(Locale)
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getWindowId()>
/**
 * Gets the id of the window from which the event comes from.
 *
 * @return The window id.
 *
 * @deprecated Use {@link AccessibilityRecord#getWindowId()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getWindowId()>    ---->    AccessibilityRecord#getWindowId()
<android.app.StatsManager: byte[] getMetadata()>
/**
 * @deprecated Use {@link #getStatsMetadata()}
 */
====>[PUBLIC]<android.app.StatsManager: byte[] getMetadata()>    ---->    #getStatsMetadata()
<android.os.Debug: int getGlobalFreedSize()>
/**
 * Returns the global size, in bytes, of objects freed by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalFreedSize()>    ---->
Inconsistency (Non-Documentation):<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\NetworkPolicyManagerService.java
<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)>

====>[PUBLIC]<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(NetworkTemplate,long,long)>    ---->
<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,NetworkScanCallback)>
/**
 * @deprecated
 * Use {@link
 * #requestNetworkScan(NetworkScanRequest, Executor, TelephonyScanManager.NetworkScanCallback)}
 * @removed
 */
====>[HIDDEN]<android.telephony.TelephonyManager: NetworkScan requestNetworkScan(NetworkScanRequest,NetworkScanCallback)>    ---->    #requestNetworkScan(NetworkScanRequest, Executor, TelephonyScanManager.NetworkScanCallback)
Inconsistency (Non-Documentation):<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getLastPdpFailCause(Message)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\telephony\imsphone\ImsPhoneCommandInterface.java
<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getLastPdpFailCause(Message)>

====>[PUBLIC]<com.android.internal.telephony.imsphone.ImsPhoneCommandInterface: void getLastPdpFailCause(Message)>    ---->
<com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(String,String)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(String,String)>    ---->
<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()>
/**
 * Returns the OnClickListener that may be triggered to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the first
 * {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: OnClickListener getOnClickListener()>    ---->    #getActions()
<androidx.core.view.ViewCompat: boolean canScrollVertically(View,int)>
/**
 * Check if this view can be scrolled vertically in a certain direction.
 *
 * @param view The View against which to invoke the method.
 * @param direction Negative to check scrolling up, positive to check scrolling down.
 * @return true if this view can be scrolled in the specified direction, false otherwise.
 *
 * @deprecated Use {@link View#canScrollVertically(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: boolean canScrollVertically(View,int)>    ---->    View#canScrollVertically(int)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: Drawable peekWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: Drawable peekWallpaper()>

====>[PUBLIC]<android.content.ContextWrapper: Drawable peekWallpaper()>    ---->
<android.telephony.gsm.SmsMessage: int[] calculateLength(CharSequence,boolean)>
/**
 * Calculates the number of SMS's required to encode the message body and
 * the number of characters remaining until the next message, given the
 * current encoding.
 *
 * @param messageBody the message to encode
 * @param use7bitOnly if true, characters that are not part of the GSM
 * alphabet are counted as a single space char.  If false, a
 * messageBody containing non-GSM alphabet characters is calculated
 * for 16-bit encoding.
 * @return an int[4] with int[0] being the number of SMS's required, int[1]
 * the number of code units used, and int[2] is the number of code
 * units remaining until the next message. int[3] is the encoding
 * type that should be used for the message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int[] calculateLength(CharSequence,boolean)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getHintScreenTimeout()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getHintScreenTimeout()>
/**
 * Get the duration, in milliseconds, that the screen should remain on for
 * when this notification is displayed.
 * @return the duration in milliseconds if > 0, or either one of the sentinel values
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getHintScreenTimeout()>    ---->
<android.net.NetworkInfo: boolean isFailover()>
/**
 * Indicates whether the current attempt to connect to the network
 * resulted from the ConnectivityManager trying to fail over to this
 * network following a disconnect from another network.
 * @return {@code true} if this is a failover attempt, {@code false}
 * otherwise.
 * @deprecated This field is not populated in recent Android releases,
 * and does not make a lot of sense in a multi-network world.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isFailover()>    ---->
<androidx.leanback.app.PlaybackFragment: boolean isFadingEnabled()>
/**
 * @deprecated Uses {@link #isControlsOverlayAutoHideEnabled()}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackFragment: boolean isFadingEnabled()>    ---->    #isControlsOverlayAutoHideEnabled()
<java.io.ByteArrayOutputStream: String toString(int)>
/**
 * Creates a newly allocated string. Its size is the current size of
 * the output stream and the valid contents of the buffer have been
 * copied into it. Each character <i>c</i> in the resulting string is
 * constructed from the corresponding element <i>b</i> in the byte
 * array such that:
 * <blockquote><pre>
 * c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
 * </pre></blockquote>
 *
 * @deprecated This method does not properly convert bytes into characters.
 * As of JDK&nbsp;1.1, the preferred way to do this is via the
 * <code>toString(String enc)</code> method, which takes an encoding-name
 * argument, or the <code>toString()</code> method, which uses the
 * platform's default character encoding.
 *
 * @param      hibyte    the high byte of each resulting Unicode character.
 * @return     the current contents of the output stream, as a string.
 * @see        java.io.ByteArrayOutputStream#size()
 * @see        java.io.ByteArrayOutputStream#toString(String)
 * @see        java.io.ByteArrayOutputStream#toString()
 */
====>[PUBLIC]<java.io.ByteArrayOutputStream: String toString(int)>    ---->    java.io.ByteArrayOutputStream#size()
<android.test.TouchUtils: int dragViewToX(ActivityInstrumentationTestCase,View,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location. Only moves horizontally.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toX Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewToX(ActivityInstrumentationTestCase,View,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.renderscript.ProgramVertexFixedFunction.Constants: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Creates a buffer to store fixed function emulation matrices
 *
 * @param rs Context to which the allocation will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void <init>(RenderScript)>    ---->
<android.app.Notification.Builder: Builder setContentInfo(CharSequence)>
/**
 * A small piece of additional information pertaining to this notification.
 *
 * The platform template will draw this on the last line of the notification, at the far
 * right (to the right of a smallIcon if it has been placed there).
 *
 * @deprecated use {@link #setSubText(CharSequence)} instead to set a text in the header.
 * For legacy apps targeting a version below {@link android.os.Build.VERSION_CODES#N} this
 * field will still show up, but the subtext will take precedence.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setContentInfo(CharSequence)>    ---->    #setSubText(CharSequence)
<androidx.leanback.app.RowsFragment: void enableRowScaling(boolean)>
/**
 * @deprecated use {@link BrowseFragment#enableRowScaling(boolean)} instead.
 *
 * @param enable true to enable row scaling
 */
====>[PUBLIC]<androidx.leanback.app.RowsFragment: void enableRowScaling(boolean)>    ---->    BrowseFragment#enableRowScaling(boolean)
<android.app.job.JobWorkItem: void <init>(Intent,long)>
/**
 * @deprecated replaced by {@link #JobWorkItem(Intent, long, long)}
 * @removed
 */
====>[HIDDEN]<android.app.job.JobWorkItem: void <init>(Intent,long)>    ---->    #JobWorkItem(Intent, long, long)
<androidx.core.view.accessibility.AccessibilityEventCompat: AccessibilityRecordCompat getRecord(AccessibilityEvent,int)>
/**
 * Gets the record at a given index.
 *
 * @param index The index.
 * @return The record at the specified index.
 *
 * @deprecated Use {@link AccessibilityEvent#getRecord(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityEventCompat: AccessibilityRecordCompat getRecord(AccessibilityEvent,int)>    ---->    AccessibilityEvent#getRecord(int)
<android.graphics.drawable.BitmapDrawable: void <init>(Bitmap)>
/**
 * Create drawable from a bitmap, not dealing with density.
 * @deprecated Use {@link #BitmapDrawable(Resources, Bitmap)} to ensure
 * that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.BitmapDrawable: void <init>(Bitmap)>    ---->    #BitmapDrawable(Resources, Bitmap)
<android.telephony.PhoneNumberUtils: void formatNumber(Editable,int)>
/**
 * Formats a phone number in-place. Currently {@link #FORMAT_JAPAN} and {@link #FORMAT_NANP}
 * is supported as a second argument.
 *
 * @param text The number to be formatted, will be modified with the formatting
 * @param defaultFormattingType The default formatting rules to apply if the number does
 * not begin with +[country_code]
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatNumber(Editable,int)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->
<android.graphics.Picture: Picture createFromStream(InputStream)>
/**
 * Create a new picture (already recorded) from the data in the stream. This
 * data was generated by a previous call to writeToStream(). Pictures that
 * have been persisted across device restarts are not guaranteed to decode
 * properly and are highly discouraged.
 *
 * @see #writeToStream(java.io.OutputStream)
 * @deprecated The recommended alternative is to not use writeToStream and
 * instead draw the picture into a Bitmap from which you can persist it as
 * raw or compressed pixels.
 */
====>[PUBLIC]<android.graphics.Picture: Picture createFromStream(InputStream)>    ---->
<android.telephony.gsm.SmsMessage: String getDisplayMessageBody()>
/**
 * Returns the message body, or email message body if this message was from
 * an email gateway. Returns null if message body unavailable.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: String getDisplayMessageBody()>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setId(String)>
/**
 * Used with the old style constructor, kept for unit tests.
 * @hide
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setId(String)>    ---->
<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice(Context)>
/**
 * Indicates whether VoLTE is provisioned on device.
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isVolteProvisionedOnDevice()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice(Context)>    ---->    #isVolteProvisionedOnDevice()
<android.service.autofill.FillEventHistory: Bundle getClientState()>
/**
 * Returns the client state set in the previous {@link FillResponse}.
 *
 * <p><b>Note: </b>the state is associated with the app that was autofilled in the previous
 * {@link AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)}
 * , which is not necessary the same app being autofilled now.
 *
 * @deprecated use {@link #getEvents()} then {@link Event#getClientState()} instead.
 */
====>[PUBLIC]<android.service.autofill.FillEventHistory: Bundle getClientState()>    ---->    #getEvents()
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
/**
 * The maximum drawing cache size expressed in bytes.
 *
 * @return the maximum size of View's drawing cache expressed in bytes
 *
 * @deprecated Use {@link #getScaledMaximumDrawingCacheSize()} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>    ---->    #getScaledMaximumDrawingCacheSize()
<java.lang.Thread: void suspend()>
/**
 * Suspends this thread.
 * <p>
 * First, the <code>checkAccess</code> method of this thread is called
 * with no arguments. This may result in throwing a
 * <code>SecurityException </code>(in the current thread).
 * <p>
 * If the thread is alive, it is suspended and makes no further
 * progress unless and until it is resumed.
 *
 * @exception  SecurityException  if the current thread cannot modify
 * this thread.
 * @see #checkAccess
 * @deprecated   This method has been deprecated, as it is
 * inherently deadlock-prone.  If the target thread holds a lock on the
 * monitor protecting a critical system resource when it is suspended, no
 * thread can access this resource until the target thread is resumed. If
 * the thread that would resume the target thread attempts to lock this
 * monitor prior to calling <code>resume</code>, deadlock results.  Such
 * deadlocks typically manifest themselves as "frozen" processes.
 * For more information, see
 * <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
 * are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
 */
====>[PUBLIC]<java.lang.Thread: void suspend()>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getContentIconGravity()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getContentIconGravity()>
/**
 * Get the gravity that the content icon should have within the notification display.
 * Supported values include {@link android.view.Gravity#START} and
 * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.
 * @see #getContentIcon
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getContentIconGravity()>    ---->
<androidx.legacy.widget.Space: void <init>(Context,AttributeSet,int)>
/**
 * @deprecated Use framework {@link android.widget.Space} class instead.
 */
====>[PUBLIC]<androidx.legacy.widget.Space: void <init>(Context,AttributeSet,int)>    ---->    android.widget.Space
<android.graphics.Canvas: boolean clipRect(Rect,Op)>
/**
 * Modify the current clip with the specified rectangle, which is
 * expressed in local coordinates.
 *
 * @param rect The rectangle to intersect with the current clip.
 * @param op How the clip is modified
 * @return true if the resulting clip is non-empty
 *
 * @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs
 * are intended to only expand the clip as a result of a restore operation. This enables a view
 * parent to clip a canvas to clearly define the maximal drawing area of its children. The
 * recommended alternative calls are {@link #clipRect(Rect)} and {@link #clipOutRect(Rect)};
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and
 * {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.
 */
====>[PUBLIC]<android.graphics.Canvas: boolean clipRect(Rect,Op)>    ---->    Region.Op#INTERSECT
<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,boolean)>
/**
 * Call to grant trust on the device.
 *
 * @param message describes why the device is trusted, e.g. "Trusted by location".
 * @param durationMs amount of time in milliseconds to keep the device in a trusted state.
 * Trust for this agent will automatically be revoked when the timeout expires unless
 * extended by a subsequent call to this function. The timeout is measured from the
 * invocation of this function as dictated by {@link SystemClock#elapsedRealtime())}.
 * For security reasons, the value should be no larger than necessary.
 * The value may be adjusted by the system as necessary to comply with a policy controlled
 * by the system or {@link DevicePolicyManager} restrictions. See {@link #onTrustTimeout()}
 * for determining when trust expires.
 * @param initiatedByUser this is a hint to the system that trust is being granted as the
 * direct result of user action - such as solving a security challenge. The hint is used
 * by the system to optimize the experience. Behavior may vary by device and release, so
 * one should only set this parameter if it meets the above criteria rather than relying on
 * the behavior of any particular device or release. Corresponds to
 * {@link #FLAG_GRANT_TRUST_INITIATED_BY_USER}.
 * @throws IllegalStateException if the agent is not currently managing trust.
 *
 * @deprecated use {@link #grantTrust(CharSequence, long, int)} instead.
 */
====>[PUBLIC]<android.service.trust.TrustAgentService: void grantTrust(CharSequence,long,boolean)>    ---->    #grantTrust(CharSequence, long, int)
<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)>
/**
 * @deprecated in API 16
 * Adds a texture to be fetched as part of the fixed function
 * fragment program
 *
 * @param env specifies how the texture is combined with the
 * current color
 * @param fmt specifies the format of the texture and how its
 * components will be used to combine with the
 * current color
 * @param slot index of the texture to apply the operations on
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.ProgramFragmentFixedFunction.Builder: Builder setTexture(EnvMode,Format,int)>    ---->
<android.database.CursorWindow: void <init>(boolean)>
/**
 * Creates a new empty cursor window.
 * <p>
 * The cursor initially has no rows or columns.  Call {@link #setNumColumns(int)} to
 * set the number of columns before adding any rows to the cursor.
 * </p>
 *
 * @param localWindow True if this window will be used in this process only,
 * false if it might be sent to another processes.  This argument is ignored.
 *
 * @deprecated There is no longer a distinction between local and remote
 * cursor windows.  Use the {@link #CursorWindow(String)} constructor instead.
 */
====>[PUBLIC]<android.database.CursorWindow: void <init>(boolean)>    ---->    #CursorWindow(String)
<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(String[],Message)>
/**
 * Invokes RIL_REQUEST_OEM_HOOK_Strings on RIL implementation.
 *
 * @param strings The strings to make available as the request data.
 * @param response <strong>On success</strong>, "response" bytes is
 * made available as:
 * (String[])(((AsyncResult)response.obj).result).
 * <strong>On failure</strong>,
 * (((AsyncResult)response.obj).result) == null and
 * (((AsyncResult)response.obj).exception) being an instance of
 * com.android.internal.telephony.gsm.CommandException
 *
 * @see #invokeOemRilRequestStrings(java.lang.String[], android.os.Message)
 * @deprecated OEM needs a vendor-extension hal and their apps should use that instead
 */
====>[PUBLIC]<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(String[],Message)>    ---->    that
<android.renderscript.Mesh.Builder: Mesh create()>
/**
 * @deprecated in API 16
 * Create a Mesh object from the current state of the builder
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Mesh create()>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: void sendStickyBroadcast(Intent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void sendStickyBroadcast(Intent)>

====>[PUBLIC]<android.app.ContextImpl: void sendStickyBroadcast(Intent)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)>
/**
 * Set a hint that the screen should remain on for at least this duration when
 * this notification is displayed on the screen.
 * @param timeout The requested screen timeout in milliseconds. Can also be either
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintScreenTimeout(int)>    ---->
<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>
/**
 * @deprecated Use {@link #getInstance(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.TimeKeyListener: TimeKeyListener getInstance()>    ---->    #getInstance(Locale)
Inconsistency (Non-Documentation):<android.webkit.WebViewDatabase: void clearFormData()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\webkit\WebViewDatabase.java
<android.webkit.WebViewDatabase: void clearFormData()>
/**
 * Clears any saved data for web forms.
 *
 * @see #hasFormData
 */
====>[PUBLIC]<android.webkit.WebViewDatabase: void clearFormData()>    ---->
<android.telephony.SubscriptionManager: SubscriptionManager from(Context)>
/**
 * @deprecated developers should always obtain references directly from
 * {@link Context#getSystemService(Class)}.
 */
====>[PUBLIC]<android.telephony.SubscriptionManager: SubscriptionManager from(Context)>    ---->    Context#getSystemService(Class)
<android.app.Activity: void dismissDialog(int)>
/**
 * Dismiss a dialog that was previously shown via {@link #showDialog(int)}.
 *
 * @param id The id of the managed dialog.
 *
 * @throws IllegalArgumentException if the id was not previously shown via
 * {@link #showDialog(int)}.
 *
 * @see #onCreateDialog(int, Bundle)
 * @see #onPrepareDialog(int, Dialog, Bundle)
 * @see #showDialog(int)
 * @see #removeDialog(int)
 *
 * @deprecated Use the new {@link DialogFragment} class with
 * {@link FragmentManager} instead; this is also
 * available on older platforms through the Android compatibility package.
 */
====>[PUBLIC]<android.app.Activity: void dismissDialog(int)>    ---->    DialogFragment
<androidx.core.widget.ScrollerCompat: ScrollerCompat create(Context,Interpolator)>
/**
 * @deprecated Use {@link OverScroller} constructor directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: ScrollerCompat create(Context,Interpolator)>    ---->    OverScroller
<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()>
/**
 * Returns the name to be displayed for any replies sent by the user
 *
 * @deprecated use {@link #getUser()} instead
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: CharSequence getUserDisplayName()>    ---->    #getUser()
<androidx.core.view.MenuItemCompat: boolean collapseActionView(MenuItem)>
/**
 * Collapse the action view associated with this menu item. The menu item must have an action
 * view set, as well as the showAsAction flag {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}. If a
 * listener has been set using {@link #setOnActionExpandListener(MenuItem,
 * androidx.core.view.MenuItemCompat.OnActionExpandListener)}
 * it will have its {@link
 * androidx.core.view.MenuItemCompat.OnActionExpandListener#onMenuItemActionCollapse(MenuItem)}
 * method invoked. The listener may return false from this method to prevent collapsing
 * the action view.
 *
 * @return true if the action view was collapsed, false otherwise.
 *
 * @deprecated Use {@link MenuItem#collapseActionView()} directly.
 */
====>[PUBLIC]<androidx.core.view.MenuItemCompat: boolean collapseActionView(MenuItem)>    ---->    MenuItem#collapseActionView()
<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplicationByType(int)>
/**
 * Returns the SIM application of the specified type.
 *
 * @param type ICC application type (@see com.android.internal.telephony.PhoneConstants#APPTYPE_xxx)
 * @return application corresponding to type or a null if no match found
 *
 * @deprecated Please use {@link UiccProfile#getApplicationByType(int)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplicationByType(int)>    ---->    UiccProfile#getApplicationByType(int)
<android.os.Debug: int getGlobalAllocSize()>
/**
 * Returns the global size, in bytes, of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getGlobalAllocSize()>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setShortLabelResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setShortLabelResId(int)>    ---->
<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])>
/**
 * Returns the result and response from RIL for oem request
 *
 * @param oemReq the data is sent to ril.
 * @param oemResp the respose data from RIL.
 * @return negative value request was not handled or get error
 * 0 request was handled succesfully, but no response data
 * positive value success, data length of response
 * @hide
 * @deprecated OEM needs a vendor-extension hal and their apps should use that instead
 */
====>[HIDDEN]<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])>    ---->    that
<androidx.leanback.app.RowsSupportFragment: void enableRowScaling(boolean)>
/**
 * @deprecated use {@link BrowseSupportFragment#enableRowScaling(boolean)} instead.
 *
 * @param enable true to enable row scaling
 */
====>[PUBLIC]<androidx.leanback.app.RowsSupportFragment: void enableRowScaling(boolean)>    ---->    BrowseSupportFragment#enableRowScaling(boolean)
<androidx.core.view.ViewCompat: void setLayerType(View,int,Paint)>
/**
 * <p>Specifies the type of layer backing this view. The layer can be
 * {@link View#LAYER_TYPE_NONE disabled}, {@link View#LAYER_TYPE_SOFTWARE software} or
 * {@link View#LAYER_TYPE_HARDWARE hardware}.</p>
 *
 * <p>A layer is associated with an optional {@link android.graphics.Paint}
 * instance that controls how the layer is composed on screen. The following
 * properties of the paint are taken into account when composing the layer:</p>
 * <ul>
 * <li>{@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li>
 * <li>{@link android.graphics.Paint#getXfermode() Blending mode}</li>
 * <li>{@link android.graphics.Paint#getColorFilter() Color filter}</li>
 * </ul>
 *
 * <p>If this view has an alpha value set to < 1.0 by calling
 * setAlpha(float), the alpha value of the layer's paint is replaced by
 * this view's alpha value. Calling setAlpha(float) is therefore
 * equivalent to setting a hardware layer on this view and providing a paint with
 * the desired alpha value.<p>
 *
 * <p>Refer to the documentation of {@link View#LAYER_TYPE_NONE disabled},
 * {@link View#LAYER_TYPE_SOFTWARE software} and {@link View#LAYER_TYPE_HARDWARE hardware}
 * for more information on when and how to use layers.</p>
 *
 * @param view View to set the layer type for
 * @param layerType The type of layer to use with this view, must be one of
 * {@link View#LAYER_TYPE_NONE}, {@link View#LAYER_TYPE_SOFTWARE} or
 * {@link View#LAYER_TYPE_HARDWARE}
 * @param paint The paint used to compose the layer. This argument is optional
 * and can be null. It is ignored when the layer type is
 * {@link View#LAYER_TYPE_NONE}
 *
 * @deprecated Use {@link View#setLayerType(int, Paint)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setLayerType(View,int,Paint)>    ---->    View#setLayerType(int, Paint)
<android.widget.OverScroller: void extendDuration(int)>
/**
 * Extend the scroll animation. This allows a running animation to scroll
 * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.
 *
 * @param extend Additional time to scroll in milliseconds.
 * @see #setFinalX(int)
 * @see #setFinalY(int)
 *
 * @hide Pending removal once nothing depends on it
 * @deprecated OverScrollers don't necessarily have a fixed duration.
 * Instead of setting a new final position and extending
 * the duration of an existing scroll, use startScroll
 * to begin a new animation.
 */
====>[HIDDEN]<android.widget.OverScroller: void extendDuration(int)>    ---->
<android.media.AudioManager: boolean isWiredHeadsetOn()>
/**
 * Checks whether a wired headset is connected or not.
 * <p>This is not a valid indication that audio playback is
 * actually over the wired headset as audio routing depends on other conditions.
 *
 * @return true if a wired headset is connected.
 * false if otherwise
 * @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.
 */
====>[PUBLIC]<android.media.AudioManager: boolean isWiredHeadsetOn()>    ---->    AudioManager#getDevices(int)
<android.hardware.radio.RadioTuner: ProgramInfo> getProgramList(Map<String, String>)>
/**
 * Get the list of discovered radio stations.
 *
 * To get the full list, set filter to null or empty map.
 * Keys must be prefixed with unique vendor Java-style namespace,
 * eg. 'com.somecompany.parameter1'.
 *
 * @param vendorFilter vendor-specific selector for radio stations.
 * @return a list of radio stations.
 * @throws IllegalStateException if the scan is in progress or has not been started,
 * startBackgroundScan() call may fix it.
 * @throws IllegalArgumentException if the vendorFilter argument is not valid.
 * @deprecated Use {@link getDynamicProgramList} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: ProgramInfo> getProgramList(Map<String, String>)>    ---->    getDynamicProgramList
<android.hardware.HardwareBuffer: boolean isDestroyed()>
/**
 * @removed replaced by {@link #isClosed()}
 */
====>[HIDDEN]<android.hardware.HardwareBuffer: boolean isDestroyed()>    ---->
<androidx.slice.SliceUtils: List<String> getSliceKeywords(Slice)>
/**
 * @return the list of keywords associated with the provided slice, null if no keywords were
 * specified or an empty list if the slice was specified to have no keywords.
 *
 * @deprecated TO BE REMOVED; use {@link SliceMetadata#getSliceKeywords()}
 */
====>[PUBLIC]<androidx.slice.SliceUtils: List<String> getSliceKeywords(Slice)>    ---->    SliceMetadata#getSliceKeywords()
<androidx.core.view.ViewCompat: boolean isOpaque(View)>
/**
 * Indicates whether this View is opaque. An opaque View guarantees that it will
 * draw all the pixels overlapping its bounds using a fully opaque color.
 *
 * @return True if this View is guaranteed to be fully opaque, false otherwise.
 * @deprecated Use {@link View#isOpaque()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: boolean isOpaque(View)>    ---->    View#isOpaque()
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>
/**
 * Treat the specified array of colors as a bitmap, and draw it. This gives the same result as
 * first creating a bitmap from the array, and then drawing it, but this method avoids
 * explicitly creating a bitmap object which can be more efficient if the colors are changing
 * often.
 *
 * @param colors Array of colors representing the pixels of the bitmap
 * @param offset Offset into the array of colors for the first pixel
 * @param stride The number of colors in the array between rows (must be >= width or <= -width).
 * @param x The X coordinate for where to draw the bitmap
 * @param y The Y coordinate for where to draw the bitmap
 * @param width The width of the bitmap
 * @param height The height of the bitmap
 * @param hasAlpha True if the alpha channel of the colors contains valid values. If false, the
 * alpha byte is ignored (assumed to be 0xFF for every pixel).
 * @param paint May be null. The paint used to draw the bitmap
 * @deprecated Usage with a {@link #isHardwareAccelerated() hardware accelerated} canvas
 * requires an internal copy of color buffer contents every time this method is
 * called. Using a Bitmap avoids this copy, and allows the application to more
 * explicitly control the lifetime and copies of pixel data.
 */
====>[PUBLIC]<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)>    ---->    #isHardwareAccelerated() hardware accelerated
<android.telephony.TelephonyManager: TelephonyManager getDefault()>
/**
 * @hide
 * /* @deprecated - use getSystemService as described above
 */
====>[HIDDEN]<android.telephony.TelephonyManager: TelephonyManager getDefault()>    ---->
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringMonthly(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringMonthly(ZonedDateTime)>    ---->
<android.renderscript.RSSurfaceView: void pause()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is paused. The owner of this view must
 * call this method when the activity is paused. Calling this method will
 * pause the rendering thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void pause()>    ---->
<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>
/**
 * Queries the engine for the set of features it supports for a given locale.
 * Features can either be framework defined, e.g.
 * {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.
 * Engine specific keys must be prefixed by the name of the engine they
 * are intended for. These keys can be used as parameters to
 * {@link TextToSpeech#speak(String, int, java.util.HashMap)} and
 * {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.
 *
 * Features values are strings and their values must meet restrictions described in their
 * documentation.
 *
 * @param locale The locale to query features for.
 * @return Set instance. May return {@code null} on error.
 * @deprecated As of API level 21, please use voices. In order to query features of the voice,
 * call {@link #getVoices()} to retrieve the list of available voices and
 * {@link Voice#getFeatures()} to retrieve the set of features.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Set<String> getFeatures(Locale)>    ---->    #getVoices()
<androidx.core.widget.ScrollerCompat: boolean springBack(int,int,int,int,int,int)>
/**
 * Call this when you want to 'spring back' into a valid coordinate range.
 *
 * @param startX Starting X coordinate
 * @param startY Starting Y coordinate
 * @param minX Minimum valid X value
 * @param maxX Maximum valid X value
 * @param minY Minimum valid Y value
 * @param maxY Maximum valid Y value
 * @return true if a springback was initiated, false if startX and startY were
 * already within the valid range.
 *
 * @deprecated Use {@link OverScroller#springBack(int, int, int, int, int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: boolean springBack(int,int,int,int,int,int)>    ---->    OverScroller#springBack(int, int, int, int, int, int)
<android.security.keystore.recovery.RecoveryController: void initRecoveryService(String,byte[])>
/**
 * @deprecated Use {@link #initRecoveryService(String, byte[], byte[])} instead.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: void initRecoveryService(String,byte[])>    ---->    #initRecoveryService(String, byte[], byte[])
<android.media.AudioManager: int getRouting(int)>
/**
 * Returns the current audio routing bit vector for a specified mode.
 *
 * @param mode audio mode to get route (e.g., MODE_RINGTONE)
 * @return an audio route bit vector that can be compared with ROUTE_xxx
 * bits
 * @deprecated   Do not query audio routing directly, use isSpeakerphoneOn(),
 * isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead.
 */
====>[PUBLIC]<android.media.AudioManager: int getRouting(int)>    ---->
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,InetAddress)>
/**
 * Ensure that a network route exists to deliver traffic to the specified
 * host via the specified network interface. An attempt to add a route that
 * already exists is ignored, but treated as successful.
 *
 * <p>This method requires the caller to hold either the
 * {@link android.Manifest.permission#CHANGE_NETWORK_STATE} permission
 * or the ability to modify system settings as determined by
 * {@link android.provider.Settings.System#canWrite}.</p>
 *
 * @param networkType the type of the network over which traffic to the specified
 * host is to be routed
 * @param hostAddress the IP address of the host to which the route is desired
 * @return {@code true} on success, {@code false} on failure
 * @hide
 * @deprecated Deprecated in favor of the {@link #requestNetwork} and
 * {@link #bindProcessToNetwork} API.
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,InetAddress)>    ---->    #requestNetwork
<android.app.AlertDialog: void setButton(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 1 of the dialog is pressed.
 *
 * @param text The text to display in button 1.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_POSITIVE}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(ComponentName)>
/**
 * Unregister the receiver of MEDIA_BUTTON intents.
 * @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}
 * that was registered with {@link #registerMediaButtonEventReceiver(ComponentName)}.
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterMediaButtonEventReceiver(ComponentName)>    ---->    MediaSession
<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean)>
/**
 * Get an SMS-SUBMIT PDU for a destination address and a message
 *
 * @param scAddress Service Centre address.  Null means use default.
 * @return a <code>SubmitPdu</code> containing the encoded SC
 * address, if applicable, and the encoded message.
 * Returns null on encode error.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean)>    ---->
<android.renderscript.RSTextureView: void resume()>
/**
 * @deprecated in API 16
 * Inform the view that the activity is resumed. The owner of this view must
 * call this method when the activity is resumed. Calling this method will
 * recreate the OpenGL display and resume the rendering
 * thread.
 * Must not be called before a renderer has been set.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void resume()>    ---->
<android.hardware.radio.RadioTuner.Callback: void onMetadataChanged(RadioMetadata)>
/**
 * Called when metadata is updated for the current program.
 *
 * @deprecated Use {@link #onProgramInfoChanged(RadioManager.ProgramInfo)} instead.
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner.Callback: void onMetadataChanged(RadioMetadata)>    ---->    #onProgramInfoChanged(RadioManager.ProgramInfo)
<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean removeAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)>
/**
 * Unregisters an {@link AccessibilityManager.AccessibilityStateChangeListener}.
 *
 * @param manager The accessibility manager.
 * @param listener The listener.
 * @return True if successfully unregistered.
 *
 * @deprecated Use {@link AccessibilityManager#removeAccessibilityStateChangeListener(
 * AccessibilityManager.AccessibilityStateChangeListener)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean removeAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)>    ---->    AccessibilityManager#removeAccessibilityStateChangeListener(  AccessibilityManager.AccessibilityStateChangeListener)
<android.os.PowerManager: boolean isScreenBrightnessBoosted()>
/**
 * Returns whether the screen brightness is currently boosted to maximum, caused by a call
 * to {@link #boostScreenBrightness(long)}.
 * @return {@code True} if the screen brightness is currently boosted. {@code False} otherwise.
 *
 * @deprecated This call is rarely used and will be phased out soon.
 * @hide
 * @removed
 */
====>[HIDDEN]<android.os.PowerManager: boolean isScreenBrightnessBoosted()>    ---->
<android.app.AlertDialog: void setButton2(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEGATIVE}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton2(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<android.content.Context: void removeStickyBroadcast(Intent)>
/**
 * <p>Remove the data previously sent with {@link #sendStickyBroadcast},
 * so that it is as if the sticky broadcast had never happened.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent that was previously broadcast.
 *
 * @see #sendStickyBroadcast
 */
====>[PUBLIC]<android.content.Context: void removeStickyBroadcast(Intent)>    ---->    #sendStickyBroadcast
<android.net.TrafficStats: long getUidTcpTxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidTxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpTxBytes(int)>    ---->    #getUidTxBytes(int)
<android.util.proto.ProtoOutputStream: void writeRepeatedBytes(long,byte[])>
/**
 * Write a single repeated proto "bytes" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedBytes(long,byte[])>    ---->    #write
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>
/**
 * Indicates whether network connectivity exists or is in the process
 * of being established. This is good for applications that need to
 * do anything related to the network other than read or write data.
 * For the latter, call {@link #isConnected()} instead, which guarantees
 * that the network is fully usable.
 * @return {@code true} if network connectivity exists or is in the process
 * of being established, {@code false} otherwise.
 * @deprecated Apps should instead use the
 * {@link android.net.ConnectivityManager.NetworkCallback} API to
 * learn about connectivity changes.
 * {@link ConnectivityManager#registerDefaultNetworkCallback} and
 * {@link ConnectivityManager#registerNetworkCallback}. These will
 * give a more accurate picture of the connectivity state of
 * the device and let apps react more easily and quickly to changes.
 */
====>[PUBLIC]<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    ---->    android.net.ConnectivityManager.NetworkCallback
<androidx.leanback.widget.BaseCardView: int getExtraVisibility()>
/**
 * Returns the visibility of the extra region of the card.
 * @deprecated Extra view's visibility is controlled by {@link #getInfoVisibility()}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseCardView: int getExtraVisibility()>    ---->    #getInfoVisibility()
<android.database.ContentObservable: void notifyChange(boolean)>
/**
 * Invokes {@link ContentObserver#onChange} on each observer.
 *
 * @param selfChange True if this is a self-change notification.
 *
 * @deprecated Use {@link #dispatchChange} instead.
 */
====>[PUBLIC]<android.database.ContentObservable: void notifyChange(boolean)>    ---->    #dispatchChange
<android.app.job.JobInfo.Builder: Builder setEstimatedNetworkBytes(long)>
/**
 * @deprecated replaced by
 * {@link #setEstimatedNetworkBytes(long, long)}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobInfo.Builder: Builder setEstimatedNetworkBytes(long)>    ---->    #setEstimatedNetworkBytes(long, long)
<androidx.core.view.ViewCompat: float getScaleX(View)>
/**
 * @deprecated Use {@link View#getScaleX()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getScaleX(View)>    ---->    View#getScaleX()
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>
/**
 * Returns true if the hardware supports the given network type
 * else it returns false.  This doesn't indicate we have coverage
 * or are authorized onto a network, just whether or not the
 * hardware supports it.  For example a GSM phone without a SIM
 * should still return {@code true} for mobile data, but a wifi only
 * tablet would return {@code false}.
 *
 * @param networkType The network type we'd like to check
 * @return {@code true} if supported, else {@code false}
 * @deprecated Types are deprecated. Use {@link NetworkCapabilities} instead.
 * @hide
 */
====>[HIDDEN]<android.net.ConnectivityManager: boolean isNetworkSupported(int)>    ---->    NetworkCapabilities
<android.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>
/**
 * Sets a custom view to be the contents of the alert dialog and
 * specifies additional padding around that view.
 * <p>
 * When using a pre-Holo theme, if the supplied view is an instance of
 * a {@link ListView} then the light background will be used.
 * <p>
 * <strong>Note:</strong> To ensure consistent styling, the custom view
 * should be inflated or constructed using the alert dialog's themed
 * context obtained via {@link #getContext()}.
 *
 * @param view the view to use as the contents of the alert dialog
 * @param viewSpacingLeft spacing between the left edge of the view and
 * the dialog frame
 * @param viewSpacingTop spacing between the top edge of the view and
 * the dialog frame
 * @param viewSpacingRight spacing between the right edge of the view
 * and the dialog frame
 * @param viewSpacingBottom spacing between the bottom edge of the view
 * and the dialog frame
 * @return this Builder object to allow for chaining of calls to set
 * methods
 *
 * @hide Remove once the framework usages have been replaced.
 * @deprecated Set the padding on the view itself.
 */
====>[HIDDEN]<android.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setContentDescription(CharSequence)>
/**
 * Sets the description of the source.
 *
 * @param contentDescription The description.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setContentDescription(CharSequence)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setContentDescription(CharSequence)>    ---->    AccessibilityRecord#setContentDescription(CharSequence)
<android.webkit.WebChromeClient: void onConsoleMessage(String,int,String)>
/**
 * Report a JavaScript error message to the host application. The ChromeClient
 * should override this to process the log message as they see fit.
 * @param message The error message to report.
 * @param lineNumber The line number of the error.
 * @param sourceID The name of the source file that caused the error.
 * @deprecated Use {@link #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)}
 * instead.
 */
====>[PUBLIC]<android.webkit.WebChromeClient: void onConsoleMessage(String,int,String)>    ---->    #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)
<androidx.legacy.app.FragmentPagerAdapter: void startUpdate(ViewGroup)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentPagerAdapter: void startUpdate(ViewGroup)>    ---->    androidx.fragment.app.FragmentPagerAdapter
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],Paint)>
/**
 * Draw the text in the array, with each character's origin specified by the pos array.
 *
 * @param text The text to be drawn
 * @param index The index of the first character to draw
 * @param count The number of characters to draw, starting from index.
 * @param pos Array of [x,y] positions, used to position each character
 * @param paint The paint used for the text (e.g. color, size, style)
 * @deprecated This method does not support glyph composition and decomposition and should
 * therefore not be used to render complex scripts. It also doesn't handle
 * supplementary characters (eg emoji).
 */
====>[PUBLIC]<android.graphics.Canvas: void drawPosText(char[],int,int,float[],Paint)>    ---->
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],String,InstantAppResolutionCallback)>
/**
 * Called to retrieve intent filters for instant applications from potentially expensive
 * sources.
 *
 * @param digestPrefix The hash prefix of the instant app's domain.
 * @deprecated should implement {@link #onGetInstantAppIntentFilter(Intent, int[], String,
 * InstantAppResolutionCallback)}
 */
====>[PUBLIC]<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],String,InstantAppResolutionCallback)>    ---->    #onGetInstantAppIntentFilter(Intent, int[], String,  InstantAppResolutionCallback)
<android.view.Display: int getPixelFormat()>
/**
 * Gets the pixel format of the display.
 * @return One of the constants defined in {@link android.graphics.PixelFormat}.
 *
 * @deprecated This method is no longer supported.
 * The result is always {@link PixelFormat#RGBA_8888}.
 */
====>[PUBLIC]<android.view.Display: int getPixelFormat()>    ---->    PixelFormat#RGBA_8888
<android.provider.Settings.Secure: void setLocationProviderEnabled(ContentResolver,String,boolean)>
/**
 * Thread-safe method for enabling or disabling a single location provider.
 * @param cr the content resolver to use
 * @param provider the location provider to enable or disable
 * @param enabled true if the provider should be enabled
 * @deprecated This API is deprecated. It requires WRITE_SECURE_SETTINGS permission to
 * change location settings.
 */
====>[PUBLIC]<android.provider.Settings.Secure: void setLocationProviderEnabled(ContentResolver,String,boolean)>    ---->
<android.webkit.PluginList: void <init>()>
/**
 * Public constructor. Initializes the list of plugins.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void <init>()>    ---->
<android.os.storage.StorageManager: String getVolumeState(String)>
/**
 * Gets the state of a volume via its mountpoint.
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: String getVolumeState(String)>    ---->
<androidx.appcompat.app.ActionBar: int getSelectedNavigationIndex()>
/**
 * Get the position of the selected navigation item in list or tabbed navigation modes.
 *
 * @return Position of the selected item.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: int getSelectedNavigationIndex()>    ---->
<android.util.AtomicFile: FileOutputStream openAppend()>
/**
 * @hide
 * @deprecated This is not safe.
 */
====>[HIDDEN]<android.util.AtomicFile: FileOutputStream openAppend()>    ---->
<android.app.Notification.Builder: Builder addPerson(String)>
/**
 * Add a person that is relevant to this notification.
 *
 * <P>
 * Depending on user preferences, this annotation may allow the notification to pass
 * through interruption filters, if this notification is of category {@link #CATEGORY_CALL}
 * or {@link #CATEGORY_MESSAGE}. The addition of people may also cause this notification to
 * appear more prominently in the user interface.
 * </P>
 *
 * <P>
 * The person should be specified by the {@code String} representation of a
 * {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI}.
 * </P>
 *
 * <P>The system will also attempt to resolve {@code mailto:} and {@code tel:} schema
 * URIs.  The path part of these URIs must exist in the contacts database, in the
 * appropriate column, or the reference will be discarded as invalid. Telephone schema
 * URIs will be resolved by {@link android.provider.ContactsContract.PhoneLookup}.
 * It is also possible to provide a URI with the schema {@code name:} in order to uniquely
 * identify a person without an entry in the contacts database.
 * </P>
 *
 * @param uri A URI for the person.
 * @see Notification#EXTRA_PEOPLE
 * @deprecated use {@link #addPerson(Person)}
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder addPerson(String)>    ---->    #addPerson(Person)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)>
/**
 * Set the custom size preset for the display of this notification out of the available
 * presets found in {@link android.app.Notification.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. Check the
 * documentation for the preset in question. See also
 * {@link #setCustomContentHeight} and {@link #getCustomSizePreset}.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setCustomSizePreset(int)>    ---->
<android.drm.DrmManagerClient: void release()>
/**
 * @deprecated replaced by {@link #close()}.
 */
====>[PUBLIC]<android.drm.DrmManagerClient: void release()>    ---->    #close()
<android.hardware.radio.RadioMetadata: Bitmap getBitmap(String)>
/**
 * Returns a {@link Bitmap} for the given key or null if the key is not found in the meta data.
 *
 * @param key The key the value is stored under
 * @return a {@link Bitmap} or null
 * @deprecated Use getBitmapId(String) instead
 */
====>[PUBLIC]<android.hardware.radio.RadioMetadata: Bitmap getBitmap(String)>    ---->    getBitmapId(String)
<android.renderscript.RenderScriptGL: void bindRootScript(Script)>
/**
 * @deprecated in API 16
 * Set the script to handle calls to render the primary surface.
 *
 * @param s Graphics script to process rendering requests.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindRootScript(Script)>    ---->
<java.lang.String: void <init>(byte[],int)>
/**
 * Allocates a new {@code String} containing characters constructed from
 * an array of 8-bit integer values. Each character <i>c</i>in the
 * resulting string is constructed from the corresponding component
 * <i>b</i> in the byte array such that:
 *
 * <blockquote><pre>
 * <b><i>c</i></b> == (char)(((hibyte &amp; 0xff) &lt;&lt; 8)
 * | (<b><i>b</i></b> &amp; 0xff))
 * </pre></blockquote>
 *
 * @deprecated  This method does not properly convert bytes into
 * characters.  As of JDK&nbsp;1.1, the preferred way to do this is via the
 * {@code String} constructors that take a {@link
 * java.nio.charset.Charset}, charset name, or that use the platform's
 * default charset.
 *
 * @param  ascii
 * The bytes to be converted to characters
 *
 * @param  hibyte
 * The top 8 bits of each 16-bit Unicode code unit
 *
 * @see  #String(byte[], int, int, java.lang.String)
 * @see  #String(byte[], int, int, java.nio.charset.Charset)
 * @see  #String(byte[], int, int)
 * @see  #String(byte[], java.lang.String)
 * @see  #String(byte[], java.nio.charset.Charset)
 * @see  #String(byte[])
 */
====>[PUBLIC]<java.lang.String: void <init>(byte[],int)>    ---->    the platform's  default charset.   @param  ascii  The bytes to be converted to characters   @param  hibyte  The top 8 bits of each 16-bit Unicode code unit   @see  #String(byte[], int, int, java.lang.String)  @see  #String(byte[], int, int, java.nio.charset.Charset)  @see  #String(byte[], int, int)  @see  #String(byte[], java.lang.String)  @see  #String(byte[], java.nio.charset.Charset)  @see  #String(byte[]) /@Deprecatedpublic String(byte[] ascii, int hibyte) {    // Android-changed: Constructor unsupported as all calls are intercepted by the runtime.    throw new UnsupportedOperationException("Use StringFactory
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>
/**
 * Set a label to display to cancel the action.
 * This is usually an imperative verb, like "Cancel".
 *
 * @param label the label to display to cancel the action
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setCancelLabel(CharSequence)>    ---->
<android.app.ActionBar: void addTab(Tab,int)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be inserted at
 * <code>position</code>. If this is the first tab to be added it will become
 * the selected tab.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void addTab(Tab,int)>    ---->
<android.hardware.location.ContextHubManager: int registerCallback(Callback,Handler)>
/**
 * Set a callback to receive messages from the context hub
 *
 * @param callback Callback object
 * @param handler Handler object
 *
 * @see Callback
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to
 * register a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int registerCallback(Callback,Handler)>    ---->    #createClient(ContextHubInfo, ContextHubClientCallback)
<android.util.proto.ProtoOutputStream: void writeSFixed64(long,long)>
/**
 * Write a single proto "sfixed64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeSFixed64(long,long)>    ---->    #write
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>
/**
 * Set a label to display to confirm that the action should be executed.
 * This is usually an imperative verb like "Send".
 *
 * @param label the label to confirm the action should be executed
 * @return this object for method chaining
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Action.WearableExtender: WearableExtender setConfirmLabel(CharSequence)>    ---->
<androidx.core.os.BuildCompat: boolean isAtLeastN()>
/**
 * Checks if the device is running on the Android N release or newer.
 *
 * @return {@code true} if N APIs are available for use
 * @deprecated Android N is a finalized release and this method is no longer necessary. It will
 * be removed in a future release of the Support Library. Instead, use
 * {@code Build.SDK_INT >= Build.VERSION_CODES.N}.
 */
====>[PUBLIC]<androidx.core.os.BuildCompat: boolean isAtLeastN()>    ---->
<androidx.appcompat.app.AppCompatActivity: void setSupportProgress(int)>
/**
 * @deprecated Progress bars are no longer provided in AppCompat.
 */
====>[PUBLIC]<androidx.appcompat.app.AppCompatActivity: void setSupportProgress(int)>    ---->
<com.android.ims.ImsUt: void queryCallBarring(int,Message)>
/**
 * Operations for the supplementary service configuration
 */
====>[PUBLIC]<com.android.ims.ImsUt: void queryCallBarring(int,Message)>    ---->    #queryCallBarring(int, Message, int)
<android.webkit.WebSettings: TextSize getTextSize()>
/**
 * Gets the text size of the page. If the text size was previously specified
 * in percent using {@link #setTextZoom}, this will return the closest
 * matching {@link TextSize}.
 *
 * @return the text size as a {@link TextSize} value
 * @see #setTextSize
 * @deprecated Use {@link #getTextZoom} instead.
 */
====>[PUBLIC]<android.webkit.WebSettings: TextSize getTextSize()>    ---->    #getTextZoom
Inconsistency (Non-Documentation):<android.app.Notification.Builder: Builder setContent(RemoteViews)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Builder: Builder setContent(RemoteViews)>
/**
 * Supply a custom RemoteViews to use instead of the platform template.
 *
 * Use {@link #setCustomContentView(RemoteViews)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setContent(RemoteViews)>    ---->
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
/**
 * Adds an action that can be performed on the node.
 * <p>
 * <strong>Note:</strong> Cannot be called from an
 * {@link android.accessibilityservice.AccessibilityService}.
 * This class is made immutable before being delivered to an AccessibilityService.
 * </p>
 *
 * @param action The action.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 * @throws IllegalArgumentException If the argument is not one of the standard actions.
 *
 * @deprecated This has been deprecated for {@link #addAction(AccessibilityAction)}
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>    ---->    #addAction(AccessibilityAction)
<android.database.CursorWindow: boolean isFloat(int,int)>
/**
 * Returns true if the field at the specified row and column index
 * has type {@link Cursor#FIELD_TYPE_FLOAT}.
 *
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return True if the field has type {@link Cursor#FIELD_TYPE_FLOAT}.
 * @deprecated Use {@link #getType(int, int)} instead.
 */
====>[PUBLIC]<android.database.CursorWindow: boolean isFloat(int,int)>    ---->    #getType(int, int)
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringDaily(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringDaily(ZonedDateTime)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setParcelableData(Parcelable)>
/**
 * Sets the {@link Parcelable} data of the event.
 *
 * @param parcelableData The parcelable data.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setParcelableData(Parcelable)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setParcelableData(Parcelable)>    ---->    AccessibilityRecord#setParcelableData(Parcelable)
<com.android.internal.telephony.uicc.UiccCard: void iccExchangeSimIO(int,int,int,int,int,String,Message)>
/**
 * Exposes {@link CommandsInterface#iccIO}
 * @deprecated Please use
 * {@link UiccProfile#iccExchangeSimIO(int, int, int, int, int, String, Message)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: void iccExchangeSimIO(int,int,int,int,int,String,Message)>    ---->    UiccProfile#iccExchangeSimIO(int, int, int, int, int, String, Message)
<android.net.TrafficStats: long getUidUdpRxBytes(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxBytes(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidUdpRxBytes(int)>    ---->    #getUidRxBytes(int)
<android.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>
/**
 * @deprecated Use {@link #onInflate(Context, AttributeSet, Bundle)} instead.
 */
====>[PUBLIC]<android.app.Fragment: void onInflate(Activity,AttributeSet,Bundle)>    ---->    #onInflate(Context, AttributeSet, Bundle)
<android.telephony.gsm.SmsMessage: int getStatusOnIcc()>
/**
 * Returns the status of the message on the ICC (read, unread, sent, unsent).
 *
 * @return the status of the message on the ICC.  These are:
 * SmsManager.STATUS_ON_ICC_FREE
 * SmsManager.STATUS_ON_ICC_READ
 * SmsManager.STATUS_ON_ICC_UNREAD
 * SmsManager.STATUS_ON_ICC_SEND
 * SmsManager.STATUS_ON_ICC_UNSENT
 * @deprecated Use android.telephony.SmsMessage.
 * @hide
 */
====>[HIDDEN]<android.telephony.gsm.SmsMessage: int getStatusOnIcc()>    ---->
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>
/**
 * Returns the value of the setting for background data usage. If false,
 * applications should not use the network if the application is not in the
 * foreground. Developers should respect this setting, and check the value
 * of this before performing any background data operations.
 * <p>
 * All applications that have background services that use the network
 * should listen to {@link #ACTION_BACKGROUND_DATA_SETTING_CHANGED}.
 * <p>
 * @deprecated As of {@link VERSION_CODES#ICE_CREAM_SANDWICH}, availability of
 * background data depends on several combined factors, and this method will
 * always return {@code true}. Instead, when background data is unavailable,
 * {@link #getActiveNetworkInfo()} will now appear disconnected.
 *
 * @return Whether background data usage is allowed.
 */
====>[PUBLIC]<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>    ---->    VERSION_CODES#ICE_CREAM_SANDWICH
<androidx.fragment.app.FragmentActivity: LoaderManager getSupportLoaderManager()>
/**
 * @deprecated Use
 * {@link LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)}.
 */
====>[PUBLIC]<androidx.fragment.app.FragmentActivity: LoaderManager getSupportLoaderManager()>    ---->    LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)
<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)>
/**
 * @deprecated in API 16
 * Creates a FileA3D object from a file stored on disk
 *
 * @param rs Context to which the object will belong.
 * @param path location of the file to load
 *
 * @return a3d file containing renderscript objects
 */
====>[PUBLIC]<android.renderscript.FileA3D: FileA3D createFromFile(RenderScript,String)>    ---->
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
/**
 * <p>Change the width and height measure specs that are given to the
 * window manager by the popup.  By default these are 0, meaning that
 * the current width or height is requested as an explicit size from
 * the window manager.  You can supply
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT} or
 * {@link ViewGroup.LayoutParams#MATCH_PARENT} to have that measure
 * spec supplied instead, replacing the absolute width and height that
 * has been set in the popup.</p>
 *
 * <p>If the popup is showing, calling this method will take effect only
 * the next time the popup is shown.</p>
 *
 * @param widthSpec an explicit width measure spec mode, either
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT},
 * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute
 * width.
 * @param heightSpec an explicit height measure spec mode, either
 * {@link ViewGroup.LayoutParams#WRAP_CONTENT},
 * {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute
 * height.
 *
 * @deprecated Use {@link #setWidth(int)} and {@link #setHeight(int)}.
 */
====>[PUBLIC]<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>    ---->    #setWidth(int)
Inconsistency (Non-Documentation):<com.android.systemui.recents.events.EventBus: void send(InterprocessEvent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\systemui\recents\events\EventBus.java
<com.android.systemui.recents.events.EventBus: void send(InterprocessEvent)>
/**
 * Prevent send()ing an InterprocessEvent
 */
====>[PUBLIC]<com.android.systemui.recents.events.EventBus: void send(InterprocessEvent)>    ---->
<android.view.KeyEvent: boolean isDown()>
/**
 * Don't use in new code, instead explicitly check
 * {@link #getAction()}.
 *
 * @return If the action is ACTION_DOWN, returns true; else false.
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.view.KeyEvent: boolean isDown()>    ---->
<android.os.FileUtils: boolean copyFile(File,File)>
/**
 * @deprecated use {@link #copy(File, File)} instead.
 */
====>[PUBLIC]<android.os.FileUtils: boolean copyFile(File,File)>    ---->    #copy(File, File)
<android.media.AudioManager: void setVibrateSetting(int,int)>
/**
 * Sets the setting for when the vibrate type should vibrate.
 * <p>
 * This method should only be used by applications that replace the platform-wide
 * management of audio settings or the main telephony application.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @param vibrateSetting The vibrate setting, one of
 * {@link #VIBRATE_SETTING_ON},
 * {@link #VIBRATE_SETTING_OFF}, or
 * {@link #VIBRATE_SETTING_ONLY_SILENT}.
 * @see #getVibrateSetting(int)
 * @see #shouldVibrate(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: void setVibrateSetting(int,int)>    ---->    #getRingerMode()
<android.net.wifi.WifiScanner: void configureWifiChange(WifiChangeSettings)>
/**
 * @hide
 */
====>[HIDDEN]<android.net.wifi.WifiScanner: void configureWifiChange(WifiChangeSettings)>    ---->
<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)>
/**
 * Create a drawable from an inputstream, using the given resources and
 * value to determine density information.
 *
 * @deprecated Prefer the version without an Options object.
 */
====>[PUBLIC]<android.graphics.drawable.Drawable: Drawable createFromResourceStream(Resources,TypedValue,InputStream,String,Options)>    ---->
<android.view.GestureDetector: void <init>(OnGestureListener,Handler)>
/**
 * Creates a GestureDetector with the supplied listener.
 * This variant of the constructor should be used from a non-UI thread
 * (as it allows specifying the Handler).
 *
 * @param listener the listener invoked for all the callbacks, this must
 * not be null.
 * @param handler the handler to use
 *
 * @throws NullPointerException if either {@code listener} or
 * {@code handler} is null.
 *
 * @deprecated Use {@link #GestureDetector(android.content.Context,
 * android.view.GestureDetector.OnGestureListener, android.os.Handler)} instead.
 */
====>[PUBLIC]<android.view.GestureDetector: void <init>(OnGestureListener,Handler)>    ---->    #GestureDetector(android.content.Context,  android.view.GestureDetector.OnGestureListener, android.os.Handler)
<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()>    ---->
<android.app.ActionBar: void setSelectedNavigationItem(int)>
/**
 * Set the selected navigation item in list or tabbed navigation modes.
 *
 * @param position Position of the item to select.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void setSelectedNavigationItem(int)>    ---->
<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean addAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)>
/**
 * Registers an {@link AccessibilityManager.AccessibilityStateChangeListener} for changes in
 * the global accessibility state of the system.
 *
 * @param manager The accessibility manager.
 * @param listener The listener.
 * @return True if successfully registered.
 *
 * @deprecated Use {@link AccessibilityManager#addAccessibilityStateChangeListener(
 * AccessibilityManager.AccessibilityStateChangeListener)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat: boolean addAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)>    ---->    AccessibilityManager#addAccessibilityStateChangeListener(  AccessibilityManager.AccessibilityStateChangeListener)
<java.net.URLConnection: String getDefaultRequestProperty(String)>
/**
 * Returns the value of the default request property. Default request
 * properties are set for every connection.
 *
 * @param key the keyword by which the request is known (e.g., "Accept").
 * @return  the value of the default request property
 * for the specified key.
 *
 * @see java.net.URLConnection#getRequestProperty(java.lang.String)
 *
 * @deprecated The instance specific getRequestProperty method
 * should be used after an appropriate instance of URLConnection
 * is obtained.
 *
 * @see #setDefaultRequestProperty(java.lang.String, java.lang.String)
 */
====>[PUBLIC]<java.net.URLConnection: String getDefaultRequestProperty(String)>    ---->    #setDefaultRequestProperty(java.lang.String,
<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)>
/**
 * Abandon audio focus. Causes the previous focus owner, if any, to receive focus.
 * @param l the listener with which focus was requested.
 * @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}
 * @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)}
 */
====>[PUBLIC]<android.media.AudioManager: int abandonAudioFocus(OnAudioFocusChangeListener)>    ---->    #abandonAudioFocusRequest(AudioFocusRequest)
<androidx.slice.builders.ListBuilder: ListBuilder setColor(int)>
/**
 * @deprecated TO BE REMOVED; use {@link #setAccentColor(int)} instead.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder setColor(int)>    ---->    #setAccentColor(int)
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>
/**
 * @param on set <var>true</var> to route A2DP audio to/from Bluetooth
 * headset; <var>false</var> disable A2DP audio
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>    ---->
<android.app.ActionBar: Tab getSelectedTab()>
/**
 * Returns the currently selected tab if in tabbed navigation mode and there is at least
 * one tab present.
 *
 * @return The currently selected tab or null
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab getSelectedTab()>    ---->
<android.webkit.PluginList: List getList()>
/**
 * Returns the list of plugins as a java.util.List.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: List getList()>    ---->
<android.util.proto.ProtoOutputStream: long startRepeatedObject(long)>
/**
 * Start a repeated child object.
 *
 * Returns a token which should be passed to endObject.  Calls to endObject must be
 * nested properly.
 *
 * @deprecated Use #start() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: long startRepeatedObject(long)>    ---->    #start()
<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)>
/**
 * @deprecated in API 16
 * Add varying inputs to the program
 *
 * @param e element describing the layout of the varying input
 * structure
 * @return  self
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: Builder addInput(Element)>    ---->
<androidx.fragment.app.FragmentTabHost: void setup()>
/**
 * @deprecated Don't call the original TabHost setup, you must instead
 * call {@link #setup(Context, FragmentManager)} or
 * {@link #setup(Context, FragmentManager, int)}.
 */
====>[PUBLIC]<androidx.fragment.app.FragmentTabHost: void setup()>    ---->    l the original TabHost setup, you must
<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,int)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.GridBuilder.CellBuilder: CellBuilder addImage(Icon,int)>    ---->
<androidx.legacy.app.FragmentTabHost: void setup(Context,FragmentManager)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void setup(Context,FragmentManager)>    ---->    androidx.fragment.app.FragmentTabHost
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: int getContentIcon()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: int getContentIcon()>
/**
 * Get an icon that goes with the content of this notification.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: int getContentIcon()>    ---->
<android.provider.Contacts.ContactMethods: Object decodeImProtocol(String)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: Object decodeImProtocol(String)>    ---->    android.provider.ContactsContract
<android.view.ViewConfiguration: void <init>()>
/**
 * @deprecated Use {@link android.view.ViewConfiguration#get(android.content.Context)} instead.
 */
====>[PUBLIC]<android.view.ViewConfiguration: void <init>()>    ---->    android.view.ViewConfiguration#get(android.content.Context)
<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>
/**
 * You can call this to try to enable accelerated drawing for your IME. This must be set before
 * {@link #onCreate()}, so you will typically call it in your constructor.  It is not always
 * possible to use hardware accelerated drawing in an IME (for example on low-end devices that
 * do not have the resources to support this), so the call {@code true} if it succeeds otherwise
 * {@code false} if you will need to draw in software.  You must be able to handle either case.
 *
 * <p>In API 21 and later, system may automatically enable hardware accelerated drawing for your
 * IME on capable devices even if this method is not explicitly called. Make sure that your IME
 * is able to handle either case.</p>
 *
 * @return {@code true} if accelerated drawing is successfully enabled otherwise {@code false}.
 * On API 21 and later devices the return value is basically just a hint and your IME
 * does not need to change the behavior based on the it
 * @deprecated Starting in API 21, hardware acceleration is always enabled on capable devices
 */
====>[PUBLIC]<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>    ---->
<android.webkit.WebSettings: boolean getSavePassword()>
/**
 * Gets whether the WebView saves passwords.
 *
 * @return whether the WebView saves passwords
 * @see #setSavePassword
 * @deprecated Saving passwords in WebView will not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: boolean getSavePassword()>    ---->
<android.os.ParcelFileDescriptor: ParcelFileDescriptor fromData(byte[],String)>
/**
 * @hide Please use createPipe() or ContentProvider.openPipeHelper().
 * Gets a file descriptor for a read-only copy of the given data.
 *
 * @param data Data to copy.
 * @param name Name for the shared memory area that may back the file descriptor.
 * This is purely informative and may be {@code null}.
 * @return A ParcelFileDescriptor.
 * @throws IOException if there is an error while creating the shared memory area.
 */
====>[HIDDEN]<android.os.ParcelFileDescriptor: ParcelFileDescriptor fromData(byte[],String)>    ---->
<android.provider.ContactsContract.RawContacts.StreamItems: void <init>()>
/**
 * No public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.RawContacts.StreamItems: void <init>()>    ---->
<androidx.slice.builders.ListBuilder.InputRangeBuilder: InputRangeBuilder setThumb(Icon)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.InputRangeBuilder: InputRangeBuilder setThumb(Icon)>    ---->
<android.location.GnssMeasurement: void resetCarrierPhaseUncertainty()>
/**
 * Resets the Carrier-phase's uncertainty (1-Sigma) in cycles.
 *
 * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}
 * and {@link #setAccumulatedDeltaRangeState(int)} instead.
 *
 * @hide
 */
====>[HIDDEN]<android.location.GnssMeasurement: void resetCarrierPhaseUncertainty()>    ---->    #setAccumulatedDeltaRangeUncertaintyMeters(double)
<android.os.Process: boolean supportsProcesses()>
/**
 * Determine whether the current environment supports multiple processes.
 *
 * @return Returns true if the system can run in multiple processes, else
 * false if everything is running in a single process.
 *
 * @deprecated This method always returns true.  Do not use.
 */
====>[PUBLIC]<android.os.Process: boolean supportsProcesses()>    ---->
<androidx.core.content.SharedPreferencesCompat.EditorCompat: EditorCompat getInstance()>
/**
 * @deprecated This compatibility class is no longer required. Use
 * {@link SharedPreferences.Editor} directly.
 */
====>[PUBLIC]<androidx.core.content.SharedPreferencesCompat.EditorCompat: EditorCompat getInstance()>    ---->    SharedPreferences.Editor
<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>
/**
 * @deprecated Use {@link Palette.Builder} to generate the Palette.
 */
====>[PUBLIC]<com.android.internal.graphics.palette.Palette: AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)>    ---->    Palette.Builder
<androidx.recyclerview.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>
/**
 * @deprecated Use {@link #onRequestChildFocus(RecyclerView, State, View, View)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.LayoutManager: boolean onRequestChildFocus(RecyclerView,View,View)>    ---->    #onRequestChildFocus(RecyclerView, State, View, View)
<android.graphics.Canvas: void drawPosText(String,float[],Paint)>
/**
 * Draw the text in the array, with each character's origin specified by the pos array.
 *
 * @param text The text to be drawn
 * @param pos Array of [x,y] positions, used to position each character
 * @param paint The paint used for the text (e.g. color, size, style)
 * @deprecated This method does not support glyph composition and decomposition and should
 * therefore not be used to render complex scripts. It also doesn't handle
 * supplementary characters (eg emoji).
 */
====>[PUBLIC]<android.graphics.Canvas: void drawPosText(String,float[],Paint)>    ---->
<java.sql.ResultSet: BigDecimal getBigDecimal(String,int)>
/**
 * Retrieves the value of the designated column in the current row
 * of this <code>ResultSet</code> object as
 * a <code>java.math.BigDecimal</code> in the Java programming language.
 *
 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
 * @param scale the number of digits to the right of the decimal point
 * @return the column value; if the value is SQL <code>NULL</code>, the
 * value returned is <code>null</code>
 * @exception SQLException if the columnLabel is not valid;
 * if a database access error occurs or this method is
 * called on a closed result set
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated Use {@code getBigDecimal(int columnIndex)}
 * or {@code getBigDecimal(String columnLabel)}
 */
====>[PUBLIC]<java.sql.ResultSet: BigDecimal getBigDecimal(String,int)>    ---->
<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>(SubmitPduBase)>
/**
 * @deprecated Use android.telephony.SmsMessage.
 * {@hide}
 */
====>[HIDDEN]<android.telephony.gsm.SmsMessage.SubmitPdu: void <init>(SubmitPduBase)>    ---->
<android.view.View: void invalidate(Rect)>
/**
 * Mark the area defined by dirty as needing to be drawn. If the view is
 * visible, {@link #onDraw(android.graphics.Canvas)} will be called at some
 * point in the future.
 * <p>
 * This must be called from a UI thread. To call from a non-UI thread, call
 * {@link #postInvalidate()}.
 * <p>
 * <b>WARNING:</b> In API 19 and below, this method may be destructive to
 * {@code dirty}.
 *
 * @param dirty the rectangle representing the bounds of the dirty region
 *
 * @deprecated The switch to hardware accelerated rendering in API 14 reduced
 * the importance of the dirty rectangle. In API 21 the given rectangle is
 * ignored entirely in favor of an internally-calculated area instead.
 * Because of this, clients are encouraged to just call {@link #invalidate()}.
 */
====>[PUBLIC]<android.view.View: void invalidate(Rect)>    ---->    #invalidate()
<androidx.legacy.app.FragmentTabHost: Parcelable onSaveInstanceState()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: Parcelable onSaveInstanceState()>    ---->    androidx.fragment.app.FragmentTabHost
<android.text.DynamicLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>
/**
 * @deprecated Use {@link Builder} instead.
 */
====>[PUBLIC]<android.text.DynamicLayout: void <init>(CharSequence,TextPaint,int,Alignment,float,float,boolean)>    ---->    Builder
<androidx.legacy.app.FragmentTabHost: void setup(Context,FragmentManager,int)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void setup(Context,FragmentManager,int)>    ---->    androidx.fragment.app.FragmentTabHost
<android.app.Notification.Builder: Builder setSound(Uri)>
/**
 * Set the sound to play.
 *
 * It will be played using the {@link #AUDIO_ATTRIBUTES_DEFAULT default audio attributes}
 * for notifications.
 *
 * @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setSound(Uri)>    ---->    NotificationChannel#setSound(Uri, AudioAttributes)
Inconsistency (Non-Documentation):<android.database.CursorWrapper: void deactivate()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\database\CursorWrapper.java
<android.database.CursorWrapper: void deactivate()>

====>[PUBLIC]<android.database.CursorWrapper: void deactivate()>    ---->
<android.provider.ContactsContract.Contacts.StreamItems: void <init>()>
/**
 * no public constructor since this is a utility class
 *
 * @deprecated - Do not use. This will not be supported in the future. In the future,
 * cursors returned from related queries will be empty.
 */
====>[PUBLIC]<android.provider.ContactsContract.Contacts.StreamItems: void <init>()>    ---->
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
/**
 * Callback invoked when network signal strength changes.
 *
 * @see ServiceState#STATE_EMERGENCY_ONLY
 * @see ServiceState#STATE_IN_SERVICE
 * @see ServiceState#STATE_OUT_OF_SERVICE
 * @see ServiceState#STATE_POWER_OFF
 * @deprecated Use {@link #onSignalStrengthsChanged(SignalStrength)}
 */
====>[PUBLIC]<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>    ---->    #onSignalStrengthsChanged(SignalStrength)
<android.content.pm.LauncherApps: int getShortcutIconResId(ShortcutInfo)>
/**
 * @hide kept for testing.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: int getShortcutIconResId(ShortcutInfo)>    ---->
Inconsistency (Non-Documentation):<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\settingslib\NetworkPolicyEditor.java
<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)>

====>[PUBLIC]<com.android.settingslib.NetworkPolicyEditor: NetworkPolicy buildDefaultPolicy(NetworkTemplate)>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getContentIcon()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getContentIcon()>
/**
 * Get an icon that goes with the content of this notification.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getContentIcon()>    ---->
<android.util.proto.ProtoOutputStream: void writePackedSInt32(long,int[])>
/**
 * Write a list of packed proto "sint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedSInt32(long,int[])>    ---->    #write
<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)>
/**
 * @deprecated in API 16
 * @param slot locaton within the list of index set allocation
 * @return allocation containing primtive index data or null if
 * the index data is not specified explicitly
 */
====>[PUBLIC]<android.renderscript.Mesh: Allocation getIndexSetAllocation(int)>    ---->
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedGoingToSleep(int)>
/**
 * Called when the device has started going to sleep.
 * @param why see {@link #onFinishedGoingToSleep(int)}
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onStartedGoingToSleep(int)>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getBeforeText()>
/**
 * Sets the text before a change.
 *
 * @return The text before the change.
 *
 * @deprecated Use {@link AccessibilityRecord#getBeforeText()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getBeforeText()>    ---->    AccessibilityRecord#getBeforeText()
<android.app.ActivityManagerNative: IActivityManager getDefault()>
/**
 * Retrieve the system's default/global activity manager.
 *
 * @deprecated use ActivityManager.getService instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: IActivityManager getDefault()>    ---->    ActivityManager.getService
<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)>
/**
 * @deprecated in API 16
 * Adds an allocation containing vertex buffer data to the
 * builder
 *
 * @param a vertex data allocation
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.AllocationBuilder: AllocationBuilder addVertexAllocation(Allocation)>    ---->
<androidx.legacy.app.FragmentCompat.OnRequestPermissionsResultCallback: void onRequestPermissionsResult(int,String[],int[])>
/**
 * Callback for the result from requesting permissions. This method
 * is invoked for every call on {@link #requestPermissions(android.app.Fragment,
 * String[], int)}
 *
 * @param requestCode The request code passed in {@link #requestPermissions(
 * android.app.Fragment, String[], int)}
 * @param permissions The requested permissions. Never null.
 * @param grantResults The grant results for the corresponding permissions
 * which is either {@link android.content.pm.PackageManager#PERMISSION_GRANTED}
 * or {@link android.content.pm.PackageManager#PERMISSION_DENIED}. Never null.
 *
 * @see #requestPermissions(android.app.Fragment, String[], int)
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat.OnRequestPermissionsResultCallback: void onRequestPermissionsResult(int,String[],int[])>    ---->    androidx.fragment.app.Fragment
<java.lang.SecurityManager: Class<?> currentLoadedClass()>
/**
 * @deprecated Use {@link #checkPermission} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: Class<?> currentLoadedClass()>    ---->    #checkPermission
<android.webkit.WebSettings: void setUserAgent(int)>
/**
 * Sets the user-agent string using an integer code.
 * <ul>
 * <li>0 means the WebView should use an Android user-agent string</li>
 * <li>1 means the WebView should use a desktop user-agent string</li>
 * </ul>
 * Other values are ignored. The default is an Android user-agent string,
 * i.e. code value 0.
 *
 * @param ua the integer code for the user-agent string
 * @deprecated Please use {@link #setUserAgentString} instead.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: void setUserAgent(int)>    ---->    #setUserAgentString
Inconsistency (Non-Documentation):<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\net\wifi\WifiScanner.java
<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)>
/**
 * track changes in wifi environment
 * @param listener object to report events on; this object must be unique and must also be
 * provided on {@link #stopTrackingWifiChange}
 */
====>[PUBLIC]<android.net.wifi.WifiScanner: void startTrackingWifiChange(WifiChangeListener)>    ---->
<android.content.Intent: Object getExtra(String,Object)>
/**
 * Retrieve extended data from the intent.
 *
 * @param name The name of the desired item.
 * @param defaultValue The default value to return in case no item is
 * associated with the key 'name'
 *
 * @return the value of an item previously added with putExtra(),
 * or defaultValue if none was found.
 *
 * @see #putExtra
 *
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.content.Intent: Object getExtra(String,Object)>    ---->
<android.media.AudioManager: void setStreamSolo(int,boolean)>
/**
 * Solo or unsolo a particular stream.
 * <p>
 * Do not use. This method has been deprecated and is now a no-op.
 * {@link #requestAudioFocus} should be used for exclusive audio playback.
 *
 * @param streamType The stream to be soloed/unsoloed.
 * @param state The required solo state: true for solo ON, false for solo
 * OFF
 * @see #isVolumeFixed()
 * @deprecated Do not use. If you need exclusive audio playback use
 * {@link #requestAudioFocus}.
 */
====>[PUBLIC]<android.media.AudioManager: void setStreamSolo(int,boolean)>    ---->    #requestAudioFocus
<androidx.leanback.app.DetailsSupportFragment: View inflateTitle(LayoutInflater,ViewGroup,Bundle)>
/**
 * @deprecated override {@link #onInflateTitleView(LayoutInflater,ViewGroup,Bundle)} instead.
 */
====>[PUBLIC]<androidx.leanback.app.DetailsSupportFragment: View inflateTitle(LayoutInflater,ViewGroup,Bundle)>    ---->    #onInflateTitleView(LayoutInflater,ViewGroup,Bundle)
<com.android.internal.logging.MetricsLogger: void action(Context,int)>
/**
 * @deprecated use {@link #action(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int)>    ---->    #action(int)
<android.widget.OverScroller: void <init>(Context,Interpolator,float,float,boolean)>
/**
 * Creates an OverScroller.
 * @param context The context of this application.
 * @param interpolator The scroll interpolator. If null, a default (viscous) interpolator will
 * be used.
 * @param bounceCoefficientX A value between 0 and 1 that will determine the proportion of the
 * velocity which is preserved in the bounce when the horizontal edge is reached. A null value
 * means no bounce. This behavior is no longer supported and this coefficient has no effect.
 * @param bounceCoefficientY Same as bounceCoefficientX but for the vertical direction. This
 * behavior is no longer supported and this coefficient has no effect.
 * @param flywheel If true, successive fling motions will keep on increasing scroll speed.
 * @deprecated Use {@link #OverScroller(Context, Interpolator)} instead.
 */
====>[PUBLIC]<android.widget.OverScroller: void <init>(Context,Interpolator,float,float,boolean)>    ---->    #OverScroller(Context, Interpolator)
<android.content.pm.PackageInstaller.SessionInfo: boolean isOpen()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionInfo: boolean isOpen()>    ---->
<android.telephony.gsm.SmsMessage: int[] calculateLength(String,boolean)>
/**
 * Calculates the number of SMS's required to encode the message body and
 * the number of characters remaining until the next message, given the
 * current encoding.
 *
 * @param messageBody the message to encode
 * @param use7bitOnly if true, characters that are not part of the GSM
 * alphabet are counted as a single space char.  If false, a
 * messageBody containing non-GSM alphabet characters is calculated
 * for 16-bit encoding.
 * @return an int[4] with int[0] being the number of SMS's required, int[1]
 * the number of code units used, and int[2] is the number of code
 * units remaining until the next message. int[3] is the encoding
 * type that should be used for the message.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int[] calculateLength(String,boolean)>    ---->
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(String)>
/**
 * Clears the current device owner. The caller must be the device owner. This function should be
 * used cautiously as once it is called it cannot be undone. The device owner can only be set as
 * a part of device setup, before it completes.
 * <p>
 * While some policies previously set by the device owner will be cleared by this method, it is
 * a best-effort process and some other policies will still remain in place after the device
 * owner is cleared.
 *
 * @param packageName The package name of the device owner.
 * @throws SecurityException if the caller is not in {@code packageName} or {@code packageName}
 * does not own the current device owner component.
 *
 * @deprecated This method is expected to be used for testing purposes only. The device owner
 * will lose control of the device and its data after calling it. In order to protect any
 * sensitive data that remains on the device, it is advised that the device owner factory resets
 * the device instead of calling this method. See {@link #wipeData(int)}.
 */
====>[PUBLIC]<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(String)>    ---->    #wipeData(int)
<android.os.Environment: String getStorageState(File)>
/**
 * @deprecated use {@link #getExternalStorageState(File)}
 */
====>[PUBLIC]<android.os.Environment: String getStorageState(File)>    ---->    #getExternalStorageState(File)
<android.view.KeyEvent: boolean getKeyData(KeyData)>
/**
 * Get the character conversion data for a given key code.
 *
 * @param results A {@link KeyCharacterMap.KeyData} instance that will be
 * filled with the results.
 * @return True if the key was mapped.  If the key was not mapped, results is not modified.
 *
 * @deprecated instead use {@link #getDisplayLabel()},
 * {@link #getNumber()} or {@link #getUnicodeChar(int)}.
 */
====>[PUBLIC]<android.view.KeyEvent: boolean getKeyData(KeyData)>    ---->    #getDisplayLabel()
<android.provider.Browser: String[] getVisitedHistory(ContentResolver)>
/**
 * Returns all the URLs in the history.
 *
 * @param cr   The ContentResolver used to access the database.
 * @hide pending API council approval
 */
====>[HIDDEN]<android.provider.Browser: String[] getVisitedHistory(ContentResolver)>    ---->
<android.app.PictureInPictureArgs: void setSourceRectHint(Rect)>
/**
 * @hide
 */
====>[HIDDEN]<android.app.PictureInPictureArgs: void setSourceRectHint(Rect)>    ---->
<androidx.core.app.NotificationCompat: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat: void <init>()>    ---->
<android.telephony.SubscriptionPlan.Builder: Builder createRecurringWeekly(ZonedDateTime)>
/**
 * {@hide}
 */
====>[HIDDEN]<android.telephony.SubscriptionPlan.Builder: Builder createRecurringWeekly(ZonedDateTime)>    ---->
<android.speech.tts.TextToSpeech: Locale getDefaultLanguage()>
/**
 * Returns a Locale instance describing the language currently being used as the default
 * Text-to-speech language.
 *
 * The locale object returned by this method is NOT a valid one. It has identical form to the
 * one in {@link #getLanguage()}. Please refer to {@link #getLanguage()} for more information.
 *
 * @return language, country (if any) and variant (if any) used by the client stored in a
 * Locale instance, or {@code null} on error.
 * @deprecated As of API level 21, use <code>getDefaultVoice().getLocale()</code> ({@link
 * #getDefaultVoice()})
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: Locale getDefaultLanguage()>    ---->    #getDefaultVoice()
<android.renderscript.Mesh.Builder: Builder addVertexType(Type)>
/**
 * @deprecated in API 16
 * Adds a vertex data type to the builder object
 *
 * @param t type of the vertex data allocation to be created
 *
 * @return this
 */
====>[PUBLIC]<android.renderscript.Mesh.Builder: Builder addVertexType(Type)>    ---->
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(IconCompat,boolean)>
/**
 * Adds an icon to be displayed at the end of the row. A mixture of icons and actions
 * is not permitted. If an action has already been added this will throw
 * {@link IllegalArgumentException}.
 * <p>
 * Use this method to specify content that will appear in the template once it's been
 * loaded.
 * </p>
 * @param isLoading indicates whether the app is doing work to load the added content in the
 * background or not.
 *
 * @deprecated use ListBuilder{@link #addEndItem(Icon, int, boolean)} instead.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(IconCompat,boolean)>    ---->    #addEndItem(Icon, int, boolean)
<android.app.ActivityManager: List<RunningServiceInfo> getRunningServices(int)>
/**
 * Return a list of the services that are currently running.
 *
 * <p><b>Note: this method is only intended for debugging or implementing
 * service management type user interfaces.</b></p>
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#O}, this method
 * is no longer available to third party applications.  For backwards compatibility,
 * it will still return the caller's own services.
 *
 * @param maxNum The maximum number of entries to return in the list.  The
 * actual number returned may be smaller, depending on how many services
 * are running.
 *
 * @return Returns a list of RunningServiceInfo records describing each of
 * the running tasks.
 */
====>[PUBLIC]<android.app.ActivityManager: List<RunningServiceInfo> getRunningServices(int)>    ---->
<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,String,Uri)>
/**
 * Create a new instance of the TvInputInfo class, instantiating it from the given Context,
 * ResolveInfo, and HdmiDeviceInfo.
 *
 * @param service The ResolveInfo returned from the package manager about this TV input service.
 * @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device.
 * @param parentId The ID of this TV input's parent input. {@code null} if none exists.
 * @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service}
 * label will be loaded.
 * @param iconUri The {@link android.net.Uri} to load the icon image. See
 * {@link android.content.ContentResolver#openInputStream}. If it is {@code null},
 * the application icon of {@code service} will be loaded.
 * @hide
 * @deprecated Use {@link Builder} instead.
 */
====>[HIDDEN]<android.media.tv.TvInputInfo: TvInputInfo createTvInputInfo(Context,ResolveInfo,HdmiDeviceInfo,String,String,Uri)>    ---->    Builder
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
/**
 * Always returns false.
 * <p>
 * There is no longer the concept of a database lock, so this method always returns false.
 * </p>
 *
 * @return False.
 * @deprecated Always returns false.  Do not use this method.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>    ---->
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>
/**
 * @deprecated Use {@link #isKeyguardLocked()} instead.
 *
 * If keyguard screen is showing or in restricted key input mode (i.e. in
 * keyguard password emergency screen). When in such mode, certain keys,
 * such as the Home key and the right soft keys, don't work.
 *
 * @return true if in keyguard restricted input mode.
 */
====>[PUBLIC]<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>    ---->    #isKeyguardLocked()
<android.widget.CalendarView: int getShownWeekCount()>
/**
 * Gets the number of weeks to be shown.
 *
 * @return The shown week count.
 *
 * @attr ref android.R.styleable#CalendarView_shownWeekCount
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getShownWeekCount()>    ---->
<androidx.core.view.accessibility.AccessibilityEventCompat: AccessibilityRecordCompat asRecord(AccessibilityEvent)>
/**
 * Creates an {@link AccessibilityRecordCompat} from an {@link AccessibilityEvent}
 * that can be used to manipulate the event properties defined in
 * {@link android.view.accessibility.AccessibilityRecord}.
 * <p>
 * <strong>Note:</strong> Do not call {@link AccessibilityRecordCompat#recycle()} on the
 * returned {@link AccessibilityRecordCompat}. Call {@link AccessibilityEvent#recycle()}
 * in case you want to recycle the event.
 * </p>
 *
 * @param event The from which to create a record.
 * @return An {@link AccessibilityRecordCompat}.
 *
 * @deprecated Use the {@link AccessibilityEvent} directly as {@link AccessibilityRecord}.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityEventCompat: AccessibilityRecordCompat asRecord(AccessibilityEvent)>    ---->    AccessibilityEvent
<android.net.ConnectivityManager: void setProvisioningNotificationVisible(boolean,int,String)>
/**
 * Set sign in error notification to visible or in visible
 *
 * @param visible
 * @param networkType
 *
 * {@hide}
 * @deprecated Doesn't properly deal with multiple connected networks of the same type.
 */
====>[HIDDEN]<android.net.ConnectivityManager: void setProvisioningNotificationVisible(boolean,int,String)>    ---->
<androidx.legacy.app.FragmentStatePagerAdapter: void finishUpdate(ViewGroup)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: void finishUpdate(ViewGroup)>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<android.net.wifi.RttManager: Capabilities getCapabilities()>
/**
 * @deprecated Use the new {@link android.net.wifi.RttManager#getRttCapabilities()} API.
 */
====>[PUBLIC]<android.net.wifi.RttManager: Capabilities getCapabilities()>    ---->    android.net.wifi.RttManager#getRttCapabilities()
<android.os.Debug: int setGlobalAllocationLimit(int)>
/**
 * Establish a global object allocation limit.  This feature was
 * never enabled in release builds.  The allocation limits feature
 * was removed in Honeycomb.  This method exists for compatibility
 * and always returns -1 and has no effect.
 *
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int setGlobalAllocationLimit(int)>    ---->
<androidx.recyclerview.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>
/**
 * @see RecyclerView#scrollToPosition(int)
 * @deprecated Use {@link Action#jumpTo(int)}.
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>    ---->    Action#jumpTo(int)
<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>
/**
 * Sets an input of the ScriptGroup. This specifies an
 * Allocation to be used for kernels that require an input
 * Allocation provided from outside of the ScriptGroup.
 *
 * @deprecated Set arguments to {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void setInput(KernelID,Allocation)>    ---->    #execute(Object...)
<androidx.viewpager.widget.PagerAdapter: void startUpdate(View)>
/**
 * Called when a change in the shown pages is going to start being made.
 * @param container The containing View which is displaying this adapter's
 * page views.
 *
 * @deprecated Use {@link #startUpdate(ViewGroup)}
 */
====>[PUBLIC]<androidx.viewpager.widget.PagerAdapter: void startUpdate(View)>    ---->    #startUpdate(ViewGroup)
<android.util.proto.ProtoOutputStream: void writePackedUInt64(long,long[])>
/**
 * Write a single proto "uint64" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedUInt64(long,long[])>    ---->    #write
<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context,String)>
/**
 * Checks whether the given app is authorized to manage this subscription according to its
 * metadata. Only supported for embedded subscriptions (if {@link #isEmbedded} returns true).
 *
 * @param context Any context.
 * @param packageName Package name of the app to check.
 * @return whether the app is authorized to manage this subscription per its metadata.
 * @throws UnsupportedOperationException if this subscription is not embedded.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context,String)>    ---->
<android.app.Instrumentation: void startAllocCounting()>

====>[PUBLIC]<android.app.Instrumentation: void startAllocCounting()>    ---->
<java.util.Date: void <init>(int,int,int)>
/**
 * Allocates a <code>Date</code> object and initializes it so that
 * it represents midnight, local time, at the beginning of the day
 * specified by the <code>year</code>, <code>month</code>, and
 * <code>date</code> arguments.
 *
 * @param   year    the year minus 1900.
 * @param   month   the month between 0-11.
 * @param   date    the day of the month between 1-31.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(year + 1900, month, date)</code>
 * or <code>GregorianCalendar(year + 1900, month, date)</code>.
 */
====>[PUBLIC]<java.util.Date: void <init>(int,int,int)>    ---->
<android.net.ConnectivityManager: LinkProperties getLinkProperties(int)>
/**
 * Returns the IP information for a given network type.
 *
 * @param networkType the network type of interest.
 * @return a {@link LinkProperties} object describing the IP info
 * for the given networkType, or {@code null} if there is
 * no current default network.
 *
 * {@hide}
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks},
 * {@link #getNetworkInfo(android.net.Network)}, and
 * {@link #getLinkProperties(android.net.Network)} instead.
 */
====>[HIDDEN]<android.net.ConnectivityManager: LinkProperties getLinkProperties(int)>    ---->    #getAllNetworks
<android.test.TouchUtils: void longClickView(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view, holding until it is a long press, and then releasing.
 *
 * @param test The test case that is being run
 * @param v The view that should be clicked
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void longClickView(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
<com.android.internal.logging.MetricsLogger: void action(Context,int,String)>
/**
 * @deprecated use {@link #action(int, String)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,String)>    ---->    #action(int, String)
<android.media.AudioRecord: void removeOnRoutingChangedListener(OnRoutingChangedListener)>
/**
 * Removes an {@link OnRoutingChangedListener} which has been previously added
 * to receive rerouting notifications.
 * @param listener The previously added {@link OnRoutingChangedListener} interface to remove.
 * @deprecated users should switch to the general purpose
 * {@link AudioRouting.OnRoutingChangedListener} class instead.
 */
====>[PUBLIC]<android.media.AudioRecord: void removeOnRoutingChangedListener(OnRoutingChangedListener)>    ---->    AudioRouting.OnRoutingChangedListener
<android.telephony.PhoneNumberUtils: String calledPartyBCDFragmentToString(byte[],int,int)>
/**
 * Like calledPartyBCDToString, but field does not start with a
 * TOA byte. For example: SIM ADN extension fields
 *
 * @deprecated use {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} instead.
 * Calling this method is equivalent to calling
 * {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} with
 * {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: String calledPartyBCDFragmentToString(byte[],int,int)>    ---->    #calledPartyBCDFragmentToString(byte[], int, int, int)
<android.test.TouchUtils: void dragQuarterScreenUp(ActivityInstrumentationTestCase)>
/**
 * Simulate touching in the center of the screen and dragging one quarter of the way up
 * @param test The test case that is being run
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragQuarterScreenUp(ActivityInstrumentationTestCase)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.hardware.usb.UsbManager: void setCurrentFunction(String,boolean)>
/**
 * Sets the current USB functions when in device mode.
 *
 * @deprecated use setCurrentFunctions(long) instead.
 * @param functions the USB function(s) to set.
 * @param usbDataUnlocked unused
 *
 * {@hide}
 */
====>[HIDDEN]<android.hardware.usb.UsbManager: void setCurrentFunction(String,boolean)>    ---->    setCurrentFunctions(long)
<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)>
/**
 * @removed
 * @deprecated Replaced with setRepeatCount to match other APIs.
 */
====>[HIDDEN]<android.graphics.drawable.AnimatedImageDrawable: void setLoopCount(int)>    ---->
<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()>
/**
 * Returns connection status information about all network
 * types supported by the device.
 *
 * @return an array of {@link NetworkInfo} objects.  Check each
 * {@link NetworkInfo#getType} for which type each applies.
 *
 * @deprecated This method does not support multiple connected networks
 * of the same type. Use {@link #getAllNetworks} and
 * {@link #getNetworkInfo(android.net.Network)} instead.
 */
====>[PUBLIC]<android.net.ConnectivityManager: NetworkInfo[] getAllNetworkInfo()>    ---->    #getAllNetworks
<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View)>
/**
 * Simulate touching the center of a view and dragging to the bottom of the screen.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: void dragViewToBottom(ActivityInstrumentationTestCase,View)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
/**
 * Gets whether this WebView uses WebView's background instead of
 * internal pattern for over scroll background.
 *
 * @see #setUseWebViewBackgroundForOverscrollBackground
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>    ---->
<android.os.Debug: void resetGlobalExternalFreedSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalFreedSize()>    ---->
Inconsistency (Non-Documentation):<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\net\IpConfigStore.java
<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)>
/**
 * @Deprecated use {@link #readIpConfigurations(InputStream)}
 */
====>[PUBLIC]<com.android.server.net.IpConfigStore: SparseArray<IpConfiguration> readIpAndProxyConfigurations(InputStream)>    ---->
<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.RSSurfaceView: RenderScriptGL getRenderScriptGL()>    ---->
<android.text.TextUtils: CharSequence getReverse(CharSequence,int,int)>
/**
 * This function only reverses individual {@code char}s and not their associated
 * spans. It doesn't support surrogate pairs (that correspond to non-BMP code points), combining
 * sequences or conjuncts either.
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.text.TextUtils: CharSequence getReverse(CharSequence,int,int)>    ---->
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
/**
 * Releases a reference to the object that was owned by the container of the object,
 * closing the object if the last reference was released.
 *
 * @see #onAllReferencesReleasedFromContainer()
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setText(CharSequence)>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setText(CharSequence)>    ---->
<android.content.Context: void sendStickyBroadcast(Intent)>
/**
 * <p>Perform a {@link #sendBroadcast(Intent)} that is "sticky," meaning the
 * Intent you are sending stays around after the broadcast is complete,
 * so that others can quickly retrieve that data through the return
 * value of {@link #registerReceiver(BroadcastReceiver, IntentFilter)}.  In
 * all other ways, this behaves the same as
 * {@link #sendBroadcast(Intent)}.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast, and the Intent will be held to
 * be re-broadcast to future receivers.
 *
 * @see #sendBroadcast(Intent)
 * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)
 */
====>[PUBLIC]<android.content.Context: void sendStickyBroadcast(Intent)>    ---->    #sendBroadcast(Intent)
<android.media.MediaRecorder: void setCamera(Camera)>
/**
 * Sets a {@link android.hardware.Camera} to use for recording.
 *
 * <p>Use this function to switch quickly between preview and capture mode without a teardown of
 * the camera object. {@link android.hardware.Camera#unlock()} should be called before
 * this. Must call before {@link #prepare}.</p>
 *
 * @param c the Camera to use for recording
 * @deprecated Use {@link #getSurface} and the {@link android.hardware.camera2} API instead.
 */
====>[PUBLIC]<android.media.MediaRecorder: void setCamera(Camera)>    ---->    #getSurface
<android.content.ContentValues: ArrayList<String> getStringArrayList(String)>
/**
 * Unsupported, here until we get proper bulk insert APIs.
 * {@hide}
 */
====>[HIDDEN]<android.content.ContentValues: ArrayList<String> getStringArrayList(String)>    ---->
<android.widget.DatePicker: CalendarView getCalendarView()>
/**
 * Returns the {@link CalendarView} used by this picker.
 * <p>
 * <strong>Note:</strong> This method throws an
 * {@link UnsupportedOperationException} when the
 * {@link android.R.styleable#DatePicker_datePickerMode} attribute is set
 * to {@code calendar}.
 *
 * @return the calendar view
 * @see #getCalendarViewShown()
 * @deprecated Not supported by Material-style {@code calendar} mode
 * @throws UnsupportedOperationException if called when the picker is
 * displayed in {@code calendar} mode
 */
====>[PUBLIC]<android.widget.DatePicker: CalendarView getCalendarView()>    ---->
<androidx.core.view.MotionEventCompat: float getAxisValue(MotionEvent,int)>
/**
 * Get axis value for the first pointer index (may be an
 * arbitrary pointer identifier).
 *
 * @param axis The axis identifier for the axis value to retrieve.
 *
 * @see #AXIS_X
 * @see #AXIS_Y
 *
 * @deprecated Call {@link MotionEvent#getAxisValue(int)} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: float getAxisValue(MotionEvent,int)>    ---->    MotionEvent#getAxisValue(int)
<com.android.internal.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>    ---->    #onDrawOver(Canvas, RecyclerView, RecyclerView.State)
<androidx.slidingpanelayout.widget.SlidingPaneLayout: boolean canSlide()>
/**
 * @return true if content in this layout can be slid open and closed
 * @deprecated Renamed to {@link #isSlideable()} - this method is going away soon!
 */
====>[PUBLIC]<androidx.slidingpanelayout.widget.SlidingPaneLayout: boolean canSlide()>    ---->    #isSlideable()
<android.net.http.SslCertificate: String getValidNotBefore()>
/**
 * @return Not-before date from the certificate validity period in
 * ISO 8601 format or "" if none has been set
 *
 * @deprecated Use {@link #getValidNotBeforeDate()}
 */
====>[PUBLIC]<android.net.http.SslCertificate: String getValidNotBefore()>    ---->    #getValidNotBeforeDate()
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setMaxScrollX(int)>
/**
 * Sets the max scroll offset of the source left edge in pixels.
 *
 * @param maxScrollX The max scroll.
 *
 * @deprecated Use {@link #setMaxScrollX(AccessibilityRecord, int)} instead.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setMaxScrollX(int)>    ---->    #setMaxScrollX(AccessibilityRecord, int)
<android.hardware.SensorManager: void unregisterListener(SensorListener,int)>
/**
 * Unregisters a listener for the sensors with which it is registered.
 *
 * @deprecated This method is deprecated, use
 * {@link SensorManager#unregisterListener(SensorEventListener, Sensor)}
 * instead.
 *
 * @param listener
 * a SensorListener object
 *
 * @param sensors
 * a bit masks of the sensors to unregister from
 */
====>[PUBLIC]<android.hardware.SensorManager: void unregisterListener(SensorListener,int)>    ---->    SensorManager#unregisterListener(SensorEventListener, Sensor)
<android.provider.Contacts.People: InputStream openContactPhotoInputStream(ContentResolver,Uri)>
/**
 * Opens an InputStream for the person's photo and returns the photo as a Bitmap.
 * If the person's photo isn't present returns the placeholderImageResource instead.
 * @param person the person whose photo should be used
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.People: InputStream openContactPhotoInputStream(ContentResolver,Uri)>    ---->    android.provider.ContactsContract
<android.location.Location: void removeSpeedAccuracy()>
/**
 * Remove the speed accuracy from this location.
 *
 * <p>Following this call {@link #hasSpeedAccuracy} will return false, and
 * {@link #getSpeedAccuracyMetersPerSecond} will return 0.0.
 *
 * @deprecated use a new Location object for location updates.
 * @removed
 */
====>[HIDDEN]<android.location.Location: void removeSpeedAccuracy()>    ---->
<androidx.core.view.ViewCompat: float getTranslationY(View)>
/**
 * The vertical location of this view relative to its {@link View#getTop() top} position.
 * This position is post-layout, in addition to wherever the object's
 * layout placed it.
 *
 * @return The vertical position of this view relative to its top position, in pixels.
 *
 * @deprecated Use {@link View#getTranslationY()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getTranslationY(View)>    ---->    View#getTranslationY()
<android.location.GnssMeasurement: double getCarrierPhase()>
/**
 * Gets the RF phase detected by the receiver.
 *
 * <p>Range: [0.0, 1.0].
 *
 * <p>This is the fractional part of the complete carrier phase measurement.
 *
 * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.
 *
 * <p>The error estimate for this value is {@link #getCarrierPhaseUncertainty()}.
 *
 * <p>The value is only available if {@link #hasCarrierPhase()} is {@code true}.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: double getCarrierPhase()>    ---->    #getAccumulatedDeltaRangeMeters()
<android.app.Notification.Builder: Builder addAction(int,CharSequence,PendingIntent)>
/**
 * Add an action to this notification. Actions are typically displayed by
 * the system as a button adjacent to the notification content.
 * <p>
 * Every action must have an icon (32dp square and matching the
 * <a href="{@docRoot}design/style/iconography.html#action-bar">Holo
 * Dark action bar</a> visual style), a textual label, and a {@link PendingIntent}.
 * <p>
 * A notification in its expanded form can display up to 3 actions, from left to right in
 * the order they were added. Actions will not be displayed when the notification is
 * collapsed, however, so be sure that any essential functions may be accessed by the user
 * in some other way (for example, in the Activity pointed to by {@link #contentIntent}).
 *
 * @param icon Resource ID of a drawable that represents the action.
 * @param title Text describing the action.
 * @param intent PendingIntent to be fired when the action is invoked.
 *
 * @deprecated Use {@link #addAction(Action)} instead.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder addAction(int,CharSequence,PendingIntent)>    ---->    #addAction(Action)
<com.android.ims.ImsManager: void setVtSetting(Context,boolean)>
/**
 * Change persistent VT enabled setting
 *
 * @deprecated Does not support MSIM devices. Please use {@link #setVtSetting(boolean)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void setVtSetting(Context,boolean)>    ---->    #setVtSetting(boolean)
<android.service.autofill.ImageTransformation.Builder: void <init>(AutofillId,Pattern,int)>
/**
 * Creates a new builder for a autofill id and add a first option.
 *
 * @param id id of the screen field that will be used to evaluate whether the image should
 * be used.
 * @param regex regular expression defining what should be matched to use this image.
 * @param resId resource id of the image (in the autofill service's package). The
 * {@link RemoteViews presentation} must contain a {@link ImageView} child with that id.
 *
 * @deprecated use
 * {@link #ImageTransformation.Builder(AutofillId, Pattern, int, CharSequence)} instead.
 */
====>[PUBLIC]<android.service.autofill.ImageTransformation.Builder: void <init>(AutofillId,Pattern,int)>    ---->    #ImageTransformation.Builder(AutofillId, Pattern, int, CharSequence)
<androidx.mediarouter.media.MediaRouteDescriptor: boolean isConnecting()>
/**
 * Gets whether the route is connecting.
 * @deprecated Use {@link #getConnectionState} instead
 */
====>[PUBLIC]<androidx.mediarouter.media.MediaRouteDescriptor: boolean isConnecting()>    ---->    #getConnectionState
<com.android.ims.ImsManager: void addRegistrationListener(int,ImsConnectionStateListener)>
/**
 * Adds registration listener to the IMS service.
 *
 * @param serviceClass a service class specified in {@link ImsServiceClass}
 * For VoLTE service, it MUST be a {@link ImsServiceClass#MMTEL}.
 * @param listener To listen to IMS registration events; It cannot be null
 * @throws NullPointerException if {@code listener} is null
 * @throws ImsException if calling the IMS service results in an error
 *
 * @deprecated Use {@link #addRegistrationListener(ImsConnectionStateListener)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void addRegistrationListener(int,ImsConnectionStateListener)>    ---->    #addRegistrationListener(ImsConnectionStateListener)
<android.graphics.Canvas: Matrix getMatrix()>
/**
 * Return a new matrix with a copy of the canvas' current transformation
 * matrix.
 *
 * @deprecated {@link #isHardwareAccelerated() Hardware accelerated} canvases may have any
 * matrix when passed to a View or Drawable, as it is implementation defined where in the
 * hierarchy such canvases are created. It is recommended in such cases to either draw contents
 * irrespective of the current matrix, or to track relevant transform state outside of the
 * canvas.
 */
====>[PUBLIC]<android.graphics.Canvas: Matrix getMatrix()>    ---->    #isHardwareAccelerated() Hardware accelerated
<android.os.Debug: void resetAllCounts()>
/**
 * Clears all the global and thread-local memory allocation counters.
 * @see #startAllocCounting()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetAllCounts()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setChecked(boolean)>
/**
 * Sets if the source is checked.
 *
 * @param isChecked True if the view is checked, false otherwise.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setChecked(boolean)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setChecked(boolean)>    ---->    AccessibilityRecord#setChecked(boolean)
<android.telecom.Conference: long getConnectTimeMillis()>
/**
 * @hide
 * @deprecated Use {@link #getConnectionTime}.
 */
====>[HIDDEN]<android.telecom.Conference: long getConnectTimeMillis()>    ---->    #getConnectionTime
<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)>
/**
 * @deprecated in API 16
 * Sets the modelview matrix in the fixed function matrix buffer
 *
 * @param m modelview matrix
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void setModelview(Matrix4f)>    ---->
<androidx.core.os.BuildCompat: boolean isAtLeastO()>
/**
 * Checks if the device is running on a pre-release version of Android O or newer.
 * <p>
 * @return {@code true} if O APIs are available for use, {@code false} otherwise
 * @deprecated Android O is a finalized release and this method is no longer necessary. It will
 * be removed in a future release of the Support Library. Instead use
 * {@code Build.SDK_INT >= Build.VERSION_CODES.O}.
 */
====>[PUBLIC]<androidx.core.os.BuildCompat: boolean isAtLeastO()>    ---->
<androidx.fragment.app.FragmentController: void doLoaderStart()>
/**
 * Starts the loaders.
 *
 * @deprecated Loaders are managed separately from FragmentController
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void doLoaderStart()>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getContentDescription()>
/**
 * Gets the description of the source.
 *
 * @return The description.
 *
 * @deprecated Use {@link AccessibilityRecord#getContentDescription()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: CharSequence getContentDescription()>    ---->    AccessibilityRecord#getContentDescription()
<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()>
/**
 * Query if a USB Mass Storage (UMS) host is connected.
 * @return true if UMS host is connected.
 *
 * @hide
 */
====>[HIDDEN]<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()>    ---->
<android.telephony.CellIdentityGsm: int getMnc()>
/**
 * @return 2 or 3-digit Mobile Network Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMncString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityGsm: int getMnc()>    ---->    #getMncString
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getHintScreenTimeout()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getHintScreenTimeout()>
/**
 * Get the duration, in milliseconds, that the screen should remain on for
 * when this notification is displayed.
 * @return the duration in milliseconds if > 0, or either one of the sentinel values
 * {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getHintScreenTimeout()>    ---->
<android.content.pm.LauncherApps: List<ShortcutInfo> getShortcutInfo(String,List<String>,UserHandle)>
/**
 * @hide // No longer used.  Use getShortcuts() instead.  Kept for unit tests.
 */
====>[HIDDEN]<android.content.pm.LauncherApps: List<ShortcutInfo> getShortcutInfo(String,List<String>,UserHandle)>    ---->
<java.lang.SecurityManager: void checkMulticast(InetAddress,byte)>
/**
 * @deprecated use {@link #checkMulticast(java.net.InetAddress)} instead.
 */
====>[PUBLIC]<java.lang.SecurityManager: void checkMulticast(InetAddress,byte)>    ---->    #checkMulticast(java.net.InetAddress)
<android.os.Debug: int getThreadAllocSize()>
/**
 * Returns the thread-local size of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 * @return The allocated size in bytes.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadAllocSize()>    ---->
<androidx.browser.customtabs.CustomTabsSession: boolean setToolbarItem(int,Bitmap,String)>
/**
 * Updates the visuals for toolbar items. Will only succeed if a custom tab created using this
 * session is in the foreground in browser and the given id is valid.
 * @param id            The id for the item to update.
 * @param icon          The new icon of the toolbar item.
 * @param description   Content description of the toolbar item.
 * @return              Whether the update succeeded.
 * @deprecated Use
 * CustomTabsSession#setSecondaryToolbarViews(RemoteViews, int[], PendingIntent)
 */
====>[PUBLIC]<androidx.browser.customtabs.CustomTabsSession: boolean setToolbarItem(int,Bitmap,String)>    ---->
<android.webkit.CacheManager: boolean startCacheTransaction()>
/**
 * Starts a cache transaction. Returns {@code true} if this is the only running
 * transaction. Otherwise, this transaction is nested inside currently
 * running transactions and {@code false} is returned.
 *
 * @return {@code true} if this is the only running transaction
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean startCacheTransaction()>    ---->
<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: boolean onStartNestedScroll(CoordinatorLayout,V,View,View,int)>
/**
 * @deprecated You should now override
 * {@link #onStartNestedScroll(CoordinatorLayout, View, View, View, int, int)}. This
 * method will still continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.
 */
====>[PUBLIC]<androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior: boolean onStartNestedScroll(CoordinatorLayout,V,View,View,int)>    ---->    #onStartNestedScroll(CoordinatorLayout, View, View, View, int, int)
<android.hardware.location.ContextHubManager: int unregisterCallback(Callback)>
/**
 * Unregister a callback for receive messages from the context hub.
 *
 * @see Callback
 *
 * @param callback method to deregister
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link android.hardware.location.ContextHubClient#close()} to unregister
 * a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int unregisterCallback(Callback)>    ---->    android.hardware.location.ContextHubClient#close()
<androidx.percentlayout.widget.PercentLayoutHelper.PercentLayoutInfo: void fillMarginLayoutParams(MarginLayoutParams,int,int)>
/**
 * @deprecated Use
 * {@link #fillMarginLayoutParams(View, ViewGroup.MarginLayoutParams, int, int)}
 * for proper RTL support.
 */
====>[PUBLIC]<androidx.percentlayout.widget.PercentLayoutHelper.PercentLayoutInfo: void fillMarginLayoutParams(MarginLayoutParams,int,int)>    ---->    #fillMarginLayoutParams(View, ViewGroup.MarginLayoutParams, int, int)
<android.renderscript.RenderScriptGL: int getHeight()>
/**
 * @deprecated in API 16
 * return the height of the last set surface.
 *
 * @return int
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: int getHeight()>    ---->
<android.service.notification.StatusBarNotification: int getUserId()>
/**
 * Returns a userid for whom this notification is intended.
 *
 * @deprecated Use {@link #getUser()} instead.
 */
====>[PUBLIC]<android.service.notification.StatusBarNotification: int getUserId()>    ---->    #getUser()
<android.os.StatFs: int getBlockSize()>
/**
 * @deprecated Use {@link #getBlockSizeLong()} instead.
 */
====>[PUBLIC]<android.os.StatFs: int getBlockSize()>    ---->    #getBlockSizeLong()
<androidx.core.view.accessibility.AccessibilityManagerCompat: List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(AccessibilityManager,int)>
/**
 * Returns the {@link AccessibilityServiceInfo}s of the enabled accessibility services
 * for a given feedback type.
 *
 * @param manager The accessibility manager.
 * @param feedbackTypeFlags The feedback type flags.
 * @return An unmodifiable list with {@link AccessibilityServiceInfo}s.
 *
 * @see AccessibilityServiceInfo#FEEDBACK_AUDIBLE
 * @see AccessibilityServiceInfo#FEEDBACK_GENERIC
 * @see AccessibilityServiceInfo#FEEDBACK_HAPTIC
 * @see AccessibilityServiceInfo#FEEDBACK_SPOKEN
 * @see AccessibilityServiceInfo#FEEDBACK_VISUAL
 *
 * @deprecated Use {@link AccessibilityManager#getEnabledAccessibilityServiceList(int)}
 * directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityManagerCompat: List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(AccessibilityManager,int)>    ---->    AccessibilityManager#getEnabledAccessibilityServiceList(int)
<android.content.Intent: Intent getIntent(String)>
/**
 * Call {@link #parseUri} with 0 flags.
 * @deprecated Use {@link #parseUri} instead.
 */
====>[PUBLIC]<android.content.Intent: Intent getIntent(String)>    ---->    #parseUri
<androidx.leanback.widget.PlaybackControlsRow: void setTotalTime(int)>
/**
 * Sets the total time in milliseconds for the playback controls row.
 * <p>If set after the row has been bound to a view, the adapter must be notified that
 * this row has changed.</p>
 * @deprecated Use {@link #setDuration(long)}
 */
====>[PUBLIC]<androidx.leanback.widget.PlaybackControlsRow: void setTotalTime(int)>    ---->    #setDuration(long)
<androidx.core.view.ViewConfigurationCompat: int getScaledPagingTouchSlop(ViewConfiguration)>
/**
 * Call {@link ViewConfiguration#getScaledPagingTouchSlop()}.
 *
 * @deprecated Call {@link ViewConfiguration#getScaledPagingTouchSlop()} directly.
 * This method will be removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.ViewConfigurationCompat: int getScaledPagingTouchSlop(ViewConfiguration)>    ---->    ViewConfiguration#getScaledPagingTouchSlop()
<android.text.method.DateTimeKeyListener: void <init>()>
/**
 * @deprecated Use {@link #DateTimeKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.DateTimeKeyListener: void <init>()>    ---->    #DateTimeKeyListener(Locale)
<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)>
/**
 * Create the page for the given position.  The adapter is responsible
 * for adding the view to the container given here, although it only
 * must ensure this is done by the time it returns from
 * {@link #finishUpdate(android.view.ViewGroup)}.
 *
 * @param container The containing View in which the page will be shown.
 * @param position The page position to be instantiated.
 * @return Returns an Object representing the new page.  This does not
 * need to be a View, but can be some other container of the page.
 *
 * @deprecated Use {@link #instantiateItem(android.view.ViewGroup, int)}
 */
====>[PUBLIC]<com.android.internal.widget.PagerAdapter: Object instantiateItem(View,int)>    ---->    #instantiateItem(android.view.ViewGroup, int)
<android.database.AbstractWindowedCursor: boolean isLong(int)>
/**
 * @deprecated Use {@link #getType}
 */
====>[PUBLIC]<android.database.AbstractWindowedCursor: boolean isLong(int)>    ---->    #getType
<android.net.NetworkInfo: String getTypeName()>
/**
 * Return a human-readable name describe the type of the network,
 * for example "WIFI" or "MOBILE".
 * @return the name of the network type
 * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}
 * instead with one of the NetworkCapabilities#TRANSPORT_* constants :
 * {@link #getType} and {@link #getTypeName} cannot account for networks using
 * multiple transports. Note that generally apps should not care about transport;
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and
 * {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that
 * apps concerned with meteredness or bandwidth should be looking at, as they
 * offer this information with much better accuracy.
 */
====>[PUBLIC]<android.net.NetworkInfo: String getTypeName()>    ---->    NetworkCapabilities#hasTransport
<android.app.StatsManager: boolean setDataFetchOperation(long,PendingIntent)>
/**
 * @deprecated Use {@link #setFetchReportsOperation(PendingIntent, long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean setDataFetchOperation(long,PendingIntent)>    ---->    #setFetchReportsOperation(PendingIntent, long)
<android.telephony.TelephonyManager: String getDeviceId()>
/**
 * Returns the unique device ID, for example, the IMEI for GSM and the MEID
 * or ESN for CDMA phones. Return null if device ID is not available.
 *
 * <p>Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
 * or that the calling app has carrier privileges (see {@link #hasCarrierPrivileges}).
 *
 * @deprecated Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns
 * MEID for CDMA.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: String getDeviceId()>    ---->    getImei
<android.webkit.CacheManager: boolean cacheDisabled()>
/**
 * Gets whether the HTTP cache is disabled.
 *
 * @return {@code true} if the HTTP cache is disabled
 * @deprecated This method no longer has any effect and always returns {@code false}.
 */
====>[PUBLIC]<android.webkit.CacheManager: boolean cacheDisabled()>    ---->
<androidx.viewpager.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>
/**
 * Called to inform the adapter of which item is currently considered to
 * be the "primary", that is the one show to the user as the current page.
 *
 * @param container The containing View from which the page will be removed.
 * @param position The page position that is now the primary.
 * @param object The same object that was returned by
 * {@link #instantiateItem(View, int)}.
 *
 * @deprecated Use {@link #setPrimaryItem(ViewGroup, int, Object)}
 */
====>[PUBLIC]<androidx.viewpager.widget.PagerAdapter: void setPrimaryItem(View,int,Object)>    ---->    #setPrimaryItem(ViewGroup, int, Object)
<androidx.core.view.MotionEventCompat: int getActionIndex(MotionEvent)>
/**
 * Call {@link MotionEvent#getAction}, returning only the pointer index
 * portion.
 *
 * @deprecated Call {@link MotionEvent#getActionIndex()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: int getActionIndex(MotionEvent)>    ---->    MotionEvent#getActionIndex()
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getCurrentItemIndex()>
/**
 * Gets the index of the source in the list of items the can be visited.
 *
 * @return The current item index.
 *
 * @deprecated Use {@link AccessibilityRecord#getCurrentItemIndex()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getCurrentItemIndex()>    ---->    AccessibilityRecord#getCurrentItemIndex()
<androidx.leanback.app.BackgroundManager: Drawable getDimLayer()>
/**
 * Returns the drawable used as a dim layer.
 * @deprecated No longer support dim layer.
 */
====>[PUBLIC]<androidx.leanback.app.BackgroundManager: Drawable getDimLayer()>    ---->
<java.lang.ThreadGroup: void resume()>
/**
 * Resumes all threads in this thread group.
 * <p>
 * First, the <code>checkAccess</code> method of this thread group is
 * called with no arguments; this may result in a security exception.
 * <p>
 * This method then calls the <code>resume</code> method on all the
 * threads in this thread group and in all of its sub groups.
 *
 * @exception  SecurityException  if the current thread is not allowed to
 * access this thread group or any of the threads in the
 * thread group.
 * @see        java.lang.SecurityException
 * @see        java.lang.Thread#resume()
 * @see        java.lang.ThreadGroup#checkAccess()
 * @since      JDK1.0
 * @deprecated    This method is used solely in conjunction with
 * <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,
 * both of which have been deprecated, as they are inherently
 * deadlock-prone.  See {@link Thread#suspend} for details.
 */
====>[PUBLIC]<java.lang.ThreadGroup: void resume()>    ---->    Thread#suspend
<com.android.ims.ImsUt: void updateCallBarring(int,int,Message,String[])>
/**
 * Modifies the configuration of the call barring.
 * @deprecated Use {@link #updateCallBarring(int, int, Message, String[], int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsUt: void updateCallBarring(int,int,Message,String[])>    ---->    #updateCallBarring(int, int, Message, String[], int)
<android.content.pm.PackageManager: void replacePreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>
/**
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void replacePreferredActivityAsUser(IntentFilter,int,ComponentName[],ComponentName,int)>    ---->
<android.location.SettingInjectorService: String onGetSummary()>
/**
 * This method is no longer called, because status values are no longer shown for any injected
 * setting.
 *
 * @return ignored
 *
 * @deprecated not called any more
 */
====>[PUBLIC]<android.location.SettingInjectorService: String onGetSummary()>    ---->
<androidx.leanback.widget.BaseGridView: void setVerticalMargin(int)>
/**
 * Sets the spacing in pixels between two child items vertically.
 * @deprecated Use {@link #setVerticalSpacing(int)}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseGridView: void setVerticalMargin(int)>    ---->    #setVerticalSpacing(int)
<android.telephony.SmsMessage: int getStatusOnSim()>
/**
 * Returns the status of the message on the SIM (read, unread, sent, unsent).
 *
 * @return the status of the message on the SIM.  These are:
 * SmsManager.STATUS_ON_SIM_FREE
 * SmsManager.STATUS_ON_SIM_READ
 * SmsManager.STATUS_ON_SIM_UNREAD
 * SmsManager.STATUS_ON_SIM_SEND
 * SmsManager.STATUS_ON_SIM_UNSENT
 * @deprecated Use getStatusOnIcc instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: int getStatusOnSim()>    ---->    getStatusOnIcc
<android.graphics.Canvas: int save(int)>
/**
 * Based on saveFlags, can save the current matrix and clip onto a private
 * stack.
 * <p class="note"><strong>Note:</strong> if possible, use the
 * parameter-less save(). It is simpler and faster than individually
 * disabling the saving of matrix or clip with this method.
 * <p>
 * Subsequent calls to translate,scale,rotate,skew,concat or clipRect,
 * clipPath will all operate as usual, but when the balancing call to
 * restore() is made, those calls will be forgotten, and the settings that
 * existed before the save() will be reinstated.
 *
 * @removed
 * @deprecated Use {@link #save()} instead.
 * @param saveFlags flag bits that specify which parts of the Canvas state
 * to save/restore
 * @return The value to pass to restoreToCount() to balance this save()
 */
====>[HIDDEN]<android.graphics.Canvas: int save(int)>    ---->    #save()
<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
/**
 * Returns true for CPHS MWI toggle message.
 *
 * @return true if this is a CPHS MWI toggle message See CPHS 4.2 section B.4.2
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>    ---->
<android.content.Context: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>
/**
 * <p>Version of
 * {@link #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)}
 * that allows you to specify the
 * user the broadcast will be sent to.  This is not available to applications
 * that are not pre-installed on the system image.
 *
 * <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast.
 * @param user UserHandle to send the intent to.
 * @param resultReceiver Your own BroadcastReceiver to treat as the final
 * receiver of the broadcast.
 * @param scheduler A custom Handler with which to schedule the
 * resultReceiver callback; if null it will be
 * scheduled in the Context's main thread.
 * @param initialCode An initial value for the result code.  Often
 * Activity.RESULT_OK.
 * @param initialData An initial value for the result data.  Often
 * null.
 * @param initialExtras An initial value for the result extras.  Often
 * null.
 *
 * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)
 */
====>[PUBLIC]<android.content.Context: void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    #sendStickyOrderedBroadcast(Intent,
<androidx.core.view.accessibility.AccessibilityRecordCompat: int getRemovedCount()>
/**
 * Gets the number of removed characters.
 *
 * @return The number of removed characters.
 *
 * @deprecated Use {@link AccessibilityRecord#getRemovedCount()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: int getRemovedCount()>    ---->    AccessibilityRecord#getRemovedCount()
<android.content.pm.PackageInstaller.SessionInfo: Intent getDetailsIntent()>
/**
 * {@hide}
 */
====>[HIDDEN]<android.content.pm.PackageInstaller.SessionInfo: Intent getDetailsIntent()>    ---->
<android.telephony.gsm.SmsMessage: SmsMessage createFromPdu(byte[])>
/**
 * Create an SmsMessage from a raw PDU.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: SmsMessage createFromPdu(byte[])>    ---->
<androidx.core.view.ViewCompat: void setPivotX(View,float)>
/**
 * Sets the x location of the point around which the view is
 * {@link #setRotation(View, float) rotated} and {@link #setScaleX(View, float) scaled}.
 * By default, the pivot point is centered on the object.
 * Setting this property disables this behavior and causes the view to use only the
 * explicitly set pivotX and pivotY values.
 *
 * @param value The x location of the pivot point.
 *
 * @deprecated Use {@link View#setPivotX(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setPivotX(View,float)>    ---->    View#setPivotX(float)
<androidx.appcompat.app.ActionBar: void addTab(Tab,int)>
/**
 * Add a tab for use in tabbed navigation mode. The tab will be inserted at
 * <code>position</code>. If this is the first tab to be added it will become
 * the selected tab.
 *
 * @param tab The tab to add
 * @param position The new position of the tab
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void addTab(Tab,int)>    ---->
<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)>
/**
 * @deprecated use ActivityManager.noteAlarmStart instead.
 */
====>[PUBLIC]<android.app.ActivityManagerNative: void noteAlarmStart(PendingIntent,int,String)>    ---->    ActivityManager.noteAlarmStart
<android.provider.Settings.Secure: boolean setLocationProviderEnabledForUser(ContentResolver,String,boolean,int)>
/**
 * Thread-safe method for enabling or disabling a single location provider.
 *
 * @param cr the content resolver to use
 * @param provider the location provider to enable or disable
 * @param enabled true if the provider should be enabled
 * @param userId the userId for which to enable/disable providers
 * @return true if the value was set, false on database errors
 *
 * @deprecated use {@link LocationManager#setProviderEnabledForUser(String, boolean, int)}
 * @hide
 */
====>[HIDDEN]<android.provider.Settings.Secure: boolean setLocationProviderEnabledForUser(ContentResolver,String,boolean,int)>    ---->    LocationManager#setProviderEnabledForUser(String, boolean, int)
<androidx.core.app.AppLaunchChecker: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.core.app.AppLaunchChecker: void <init>()>    ---->
<androidx.customview.widget.ExploreByTouchHelper: int getFocusedVirtualView()>
/**
 * Returns the virtual view ID for the currently accessibility focused
 * item.
 *
 * @return the identifier of the virtual view that has accessibility focus
 * or {@link #INVALID_ID} if no virtual view has accessibility
 * focus
 * @deprecated Use {@link #getAccessibilityFocusedVirtualViewId()}.
 */
====>[PUBLIC]<androidx.customview.widget.ExploreByTouchHelper: int getFocusedVirtualView()>    ---->    #getAccessibilityFocusedVirtualViewId()
<android.content.pm.PackageParser.Package: void setApplicationInfoResourcePath(String)>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoResourcePath(String)>    ---->
<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()>
/**
 * @deprecated - Use {@link TelecomManager#getDefaultDialerPackage} to directly access
 * the default dialer's package name instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.TelecomManager: ComponentName getDefaultPhoneApp()>    ---->    TelecomManager#getDefaultDialerPackage
<android.drm.DrmStore: void <init>()>
/**
 * @deprecated This class should have been an interface instead.
 * The default constuctor should have not been exposed.
 */
====>[PUBLIC]<android.drm.DrmStore: void <init>()>    ---->
<android.renderscript.Mesh: int getPrimitiveCount()>
/**
 * @deprecated in API 16
 * @return number of primitives or index sets in the mesh
 */
====>[PUBLIC]<android.renderscript.Mesh: int getPrimitiveCount()>    ---->
<android.os.Debug: void resetThreadGcInvocationCount()>
/**
 * Clears the thread-local count of non-concurrent GC invocations.
 * @see #getThreadGcInvocationCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetThreadGcInvocationCount()>    ---->
<java.lang.Character: boolean isJavaLetter(char)>
/**
 * Determines if the specified character is permissible as the first
 * character in a Java identifier.
 * <p>
 * A character may start a Java identifier if and only if
 * one of the following is true:
 * <ul>
 * <li> {@link #isLetter(char) isLetter(ch)} returns {@code true}
 * <li> {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}
 * <li> {@code ch} is a currency symbol (such as {@code '$'})
 * <li> {@code ch} is a connecting punctuation character (such as {@code '_'}).
 * </ul>
 *
 * @param   ch the character to be tested.
 * @return  {@code true} if the character may start a Java
 * identifier; {@code false} otherwise.
 * @see     Character#isJavaLetterOrDigit(char)
 * @see     Character#isJavaIdentifierStart(char)
 * @see     Character#isJavaIdentifierPart(char)
 * @see     Character#isLetter(char)
 * @see     Character#isLetterOrDigit(char)
 * @see     Character#isUnicodeIdentifierStart(char)
 * @since   1.02
 * @deprecated Replaced by isJavaIdentifierStart(char).
 */
====>[PUBLIC]<java.lang.Character: boolean isJavaLetter(char)>    ---->
<android.net.SSLCertificateSocketFactory: SSLSocketFactory getHttpSocketFactory(int,SSLSessionCache)>
/**
 * Returns a socket factory (also named SSLSocketFactory, but in a different
 * namespace) for use with the Apache HTTP stack.
 *
 * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0
 * for none.  The socket timeout is reset to 0 after the handshake.
 * @param cache The {@link SSLSessionCache} to use, or null for no cache.
 * @return a new SocketFactory with the specified parameters
 *
 * @deprecated Use {@link #getDefault()} along with a {@link javax.net.ssl.HttpsURLConnection}
 * instead. The Apache HTTP client is no longer maintained and may be removed in a future
 * release. Please visit <a href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">this webpage</a>
 * for further details.
 *
 * @removed
 */
====>[HIDDEN]<android.net.SSLCertificateSocketFactory: SSLSocketFactory getHttpSocketFactory(int,SSLSessionCache)>    ---->    #getDefault()
<androidx.core.view.accessibility.AccessibilityRecordCompat: void setRemovedCount(int)>
/**
 * Sets the number of removed characters.
 *
 * @param removedCount The number of removed characters.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityRecord#setRemovedCount(int)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: void setRemovedCount(int)>    ---->    AccessibilityRecord#setRemovedCount(int)
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
/**
 * Tells the ViewGroup to draw its children using their drawing cache. This property
 * is ignored when {@link #isAlwaysDrawnWithCacheEnabled()} is true. A child's drawing cache
 * will be used only if it has been enabled.
 *
 * Subclasses should call this method to start and stop using the drawing cache when
 * they perform performance sensitive operations, like scrolling or animating.
 *
 * @param enabled true if children should be drawn with their cache, false otherwise
 *
 * @see #setAlwaysDrawnWithCacheEnabled(boolean)
 * @see #isChildrenDrawnWithCacheEnabled()
 *
 * @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.
 * Child views may no longer be forced to cache their rendering state by their parents.
 * Use {@link View#setLayerType(int, Paint)} on individual Views instead.
 */
====>[PUBLIC]<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>    ---->    View#setLayerType(int, Paint)
<android.speech.tts.TextToSpeech: int playSilence(long,int,HashMap<String, String>)>
/**
 * Plays silence for the specified amount of time using the specified
 * queue mode.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param durationInMs The duration of the silence.
 * @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_UTTERANCE_ID}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playSilence operation.
 * @deprecated As of API level 21, replaced by
 * {@link #playSilentUtterance(long, int, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int playSilence(long,int,HashMap<String, String>)>    ---->    #playSilentUtterance(long, int, String)
<android.telephony.gsm.SmsManager: SmsMessage> getAllMessagesFromSim()>
/**
 * Retrieves all messages currently stored on SIM.
 * @return <code>ArrayList</code> of <code>SmsMessage</code> objects
 * @deprecated Use android.telephony.SmsManager.
 * {@hide}
 */
====>[HIDDEN]<android.telephony.gsm.SmsManager: SmsMessage> getAllMessagesFromSim()>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)>
/**
 * Obsolete version of {@link #setTicker(CharSequence)}.
 */
====>[PUBLIC]<android.app.Notification.Builder: Builder setTicker(CharSequence,RemoteViews)>    ---->
<android.os.FileUtils: boolean copyToFile(InputStream,File)>
/**
 * @deprecated use {@link #copy(InputStream, OutputStream)} instead.
 */
====>[PUBLIC]<android.os.FileUtils: boolean copyToFile(InputStream,File)>    ---->    #copy(InputStream, OutputStream)
<java.util.logging.LogManager: void addPropertyChangeListener(PropertyChangeListener)>
/**
 * Adds an event listener to be invoked when the logging
 * properties are re-read. Adding multiple instances of
 * the same event Listener results in multiple entries
 * in the property event listener table.
 *
 * <p><b>WARNING:</b> This method is omitted from this class in all subset
 * Profiles of Java SE that do not include the {@code java.beans} package.
 * </p>
 *
 * @param l  event listener
 * @exception  SecurityException  if a security manager exists and if
 * the caller does not have LoggingPermission("control").
 * @exception NullPointerException if the PropertyChangeListener is null.
 * @deprecated The dependency on {@code PropertyChangeListener} creates a
 * significant impediment to future modularization of the Java
 * platform. This method will be removed in a future release.
 * The global {@code LogManager} can detect changes to the
 * logging configuration by overridding the {@link
 * #readConfiguration readConfiguration} method.
 */
====>[PUBLIC]<java.util.logging.LogManager: void addPropertyChangeListener(PropertyChangeListener)>    ---->    #readConfiguration readConfiguration} method. /@Deprecatedpublic void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException {    PropertyChangeListener listener = Objects.requireNonNull(l);    checkPermission();    synchronized (listenerMap) {        // increment the registration count if already registered        Integer value = listenerMap.get(listener);        value = (value == null) ? 1 : (value + 1);        listenerMap.put(listener, value)
<java.net.URLStreamHandler: void setURL(URL,String,String,int,String,String)>
/**
 * Sets the fields of the {@code URL} argument to the indicated values.
 * Only classes derived from URLStreamHandler are able
 * to use this method to set the values of the URL fields.
 *
 * @param   u         the URL to modify.
 * @param   protocol  the protocol name. This value is ignored since 1.2.
 * @param   host      the remote host value for the URL.
 * @param   port      the port on the remote machine.
 * @param   file      the file.
 * @param   ref       the reference.
 * @exception       SecurityException       if the protocol handler of the URL is
 * different from this one
 * @deprecated Use setURL(URL, String, String, int, String, String, String,
 * String);
 */
====>[PUBLIC]<java.net.URLStreamHandler: void setURL(URL,String,String,int,String,String)>    ---->
<android.view.View: void setBackgroundDrawable(Drawable)>
/**
 * @deprecated use {@link #setBackground(Drawable)} instead
 */
====>[PUBLIC]<android.view.View: void setBackgroundDrawable(Drawable)>    ---->    #setBackground(Drawable)
<android.webkit.WebHistoryItem: int getId()>
/**
 * Return an identifier for this history item. If an item is a copy of
 * another item, the identifiers will be the same even if they are not the
 * same object.
 * @return The id for this item.
 * @deprecated This method is now obsolete.
 * @hide Since API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}
 */
====>[HIDDEN]<android.webkit.WebHistoryItem: int getId()>    ---->
<android.webkit.CookieSyncManager: void sync()>
/**
 * sync() forces sync manager to sync now
 * @deprecated Use {@link CookieManager#flush} instead.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void sync()>    ---->    CookieManager#flush
<androidx.navigation.NavOptions: boolean shouldClearTask()>
/**
 * Whether this navigation action should clear the entire back stack
 * <p>
 * This functions similarly to how {@link android.content.Intent#FLAG_ACTIVITY_CLEAR_TASK}
 * works with activites.
 * @deprecated This is synonymous with {@link #getPopUpTo()} with the root of the graph and
 * using {@link #isPopUpToInclusive()}.
 */
====>[PUBLIC]<androidx.navigation.NavOptions: boolean shouldClearTask()>    ---->    #getPopUpTo()
<androidx.legacy.app.FragmentCompat: void requestPermissions(Fragment,String[],int)>
/**
 * Requests permissions to be granted to this application. These permissions
 * must be requested in your manifest, they should not be granted to your app,
 * and they should have protection level {@link android.content.pm.PermissionInfo
 * #PROTECTION_DANGEROUS dangerous}, regardless whether they are declared by
 * the platform or a third-party app.
 * <p>
 * Normal permissions {@link android.content.pm.PermissionInfo#PROTECTION_NORMAL}
 * are granted at install time if requested in the manifest. Signature permissions
 * {@link android.content.pm.PermissionInfo#PROTECTION_SIGNATURE} are granted at
 * install time if requested in the manifest and the signature of your app matches
 * the signature of the app declaring the permissions.
 * </p>
 * <p>
 * If your app does not have the requested permissions the user will be presented
 * with UI for accepting them. After the user has accepted or rejected the
 * requested permissions you will receive a callback reporting whether the
 * permissions were granted or not. Your fragment has to implement {@link
 * OnRequestPermissionsResultCallback}
 * and the results of permission requests will be delivered to its
 * {@link OnRequestPermissionsResultCallback#onRequestPermissionsResult(
 * int, String[], int[])}.
 * </p>
 * <p>
 * Note that requesting a permission does not guarantee it will be granted and
 * your app should be able to run without having this permission.
 * </p>
 * <p>
 * This method may start an activity allowing the user to choose which permissions
 * to grant and which to reject. Hence, you should be prepared that your activity
 * may be paused and resumed. Further, granting some permissions may require
 * a restart of you application. In such a case, the system will recreate the
 * activity stack before delivering the result to your onRequestPermissionsResult(
 * int, String[], int[]).
 * </p>
 * <p>
 * When checking whether you have a permission you should use {@link
 * androidx.core.content.ContextCompat#checkSelfPermission(
 * android.content.Context, String)}.
 * </p>
 *
 * @param fragment The target fragment.
 * @param permissions The requested permissions.
 * @param requestCode Application specific request code to match with a result
 * reported to {@link OnRequestPermissionsResultCallback#onRequestPermissionsResult(
 * int, String[], int[])}.
 *
 * @see androidx.core.content.ContextCompat#checkSelfPermission(
 * android.content.Context, String)
 * @see #shouldShowRequestPermissionRationale(android.app.Fragment, String)
 *
 * @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework
 * {@link Fragment}.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentCompat: void requestPermissions(Fragment,String[],int)>    ---->    androidx.fragment.app.Fragment
<androidx.core.view.accessibility.AccessibilityEventCompat: void appendRecord(AccessibilityEvent,AccessibilityRecordCompat)>
/**
 * Appends an {@link android.view.accessibility.AccessibilityRecord} to the end of
 * event records.
 *
 * @param record The record to append.
 *
 * @throws IllegalStateException If called from an AccessibilityService.
 *
 * @deprecated Use {@link AccessibilityEvent#appendRecord(AccessibilityRecord)} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityEventCompat: void appendRecord(AccessibilityEvent,AccessibilityRecordCompat)>    ---->    AccessibilityEvent#appendRecord(AccessibilityRecord)
<androidx.core.widget.EdgeEffectCompat: boolean onRelease()>
/**
 * Call when the object is released after being pulled.
 * This will begin the "decay" phase of the effect. After calling this method
 * the host view should {@link android.view.View#invalidate()} if this method
 * returns true and thereby draw the results accordingly.
 *
 * @return true if the host view should invalidate, false if it should not.
 *
 * @deprecated Use {@link EdgeEffect#onRelease()} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean onRelease()>    ---->    EdgeEffect#onRelease()
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(IconCompat)>
/**
 * Sets the title item to be the provided icon. There can only be one title item, this
 * will replace any other title items that may have been set.
 *
 * @deprecated TO BE REMOVED; use ListBuilder{@link #setTitleItem(Icon, int, boolean)}.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(IconCompat)>    ---->    #setTitleItem(Icon, int, boolean)
<android.speech.tts.TextToSpeech: int speak(String,int,HashMap<String, String>)>
/**
 * Speaks the string using the specified queuing strategy and speech parameters.
 * This method is asynchronous, i.e. the method just adds the request to the queue of TTS
 * requests and then returns. The synthesis might not have finished (or even started!) at the
 * time when this method returns. In order to reliably detect errors during synthesis,
 * we recommend setting an utterance progress listener (see
 * {@link #setOnUtteranceProgressListener}) and using the
 * {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.
 *
 * @param text The string of text to be spoken. No longer than
 * {@link #getMaxSpeechInputLength()} characters.
 * @param queueMode The queuing strategy to use, {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.
 * @param params Parameters for the request. Can be null.
 * Supported parameter names:
 * {@link Engine#KEY_PARAM_STREAM},
 * {@link Engine#KEY_PARAM_UTTERANCE_ID},
 * {@link Engine#KEY_PARAM_VOLUME},
 * {@link Engine#KEY_PARAM_PAN}.
 * Engine specific parameters may be passed in but the parameter keys
 * must be prefixed by the name of the engine they are intended for. For example
 * the keys "com.svox.pico_foo" and "com.svox.pico:bar" will be passed to the
 * engine named "com.svox.pico" if it is being used.
 *
 * @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the speak operation.
 * @deprecated As of API level 21, replaced by
 * {@link #speak(CharSequence, int, Bundle, String)}.
 */
====>[PUBLIC]<android.speech.tts.TextToSpeech: int speak(String,int,HashMap<String, String>)>    ---->    #speak(CharSequence, int, Bundle, String)
<java.sql.DriverManager: void setLogStream(PrintStream)>
/**
 * Sets the logging/tracing PrintStream that is used
 * by the <code>DriverManager</code>
 * and all drivers.
 * <P>
 * In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
 * to see that there is an <code>SQLPermission</code> object before setting
 * the logging stream.  If a <code>SecurityManager</code> exists and its
 * <code>checkPermission</code> method denies setting the log writer, this
 * method throws a <code>java.lang.SecurityException</code>.
 *
 * @param out the new logging/tracing PrintStream; to disable, set to <code>null</code>
 * @deprecated Use {@code setLogWriter} instead.
 * @throws SecurityException if a security manager exists and its
 * <code>checkPermission</code> method denies setting the log stream
 *
 * @see SecurityManager#checkPermission
 * @see #getLogStream
 */
====>[PUBLIC]<java.sql.DriverManager: void setLogStream(PrintStream)>    ---->    {@code setLogWriter}
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,int,boolean)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,int,boolean)>    ---->
<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)>
/**
 * Sets the color for the dates of a not focused month.
 *
 * @param color A not focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_unfocusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)>    ---->
<androidx.car.drawer.CarDrawerController: void <init>(Toolbar,DrawerLayout,ActionBarDrawerToggle)>
/**
 * @deprecated Use {@link #CarDrawerController(DrawerLayout, ActionBarDrawerToggle)} instead.
 * The {@code Toolbar} is no longer needed and will be ignored.
 */
====>[PUBLIC]<androidx.car.drawer.CarDrawerController: void <init>(Toolbar,DrawerLayout,ActionBarDrawerToggle)>    ---->    #CarDrawerController(DrawerLayout, ActionBarDrawerToggle)
<android.renderscript.ProgramRaster.Builder: ProgramRaster create()>
/**
 * @deprecated in API 16
 */
====>[PUBLIC]<android.renderscript.ProgramRaster.Builder: ProgramRaster create()>    ---->
<androidx.leanback.widget.GuidedActionsStylist: void setExpandedViewHolder(ViewHolder)>
/**
 * Expands or collapse the sub actions list view with transition animation
 * @param avh When not null, fill sub actions list of this ViewHolder into sub actions list and
 * hide the other items in main list.  When null, collapse the sub actions list.
 * @deprecated use {@link #expandAction(GuidedAction, boolean)} and
 * {@link #collapseAction(boolean)}
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedActionsStylist: void setExpandedViewHolder(ViewHolder)>    ---->    #expandAction(GuidedAction, boolean)
<android.view.textclassifier.TextClassification: CharSequence getLabel()>
/**
 * Returns a label that may be rendered on a widget used to act on the classified text.
 *
 * <p><strong>NOTE: </strong>This field is not parcelable and only represents the label of the
 * first {@link RemoteAction} (if one exists) when this object is read from a parcel.
 *
 * @deprecated Use {@link #getActions()} instead.
 */
====>[PUBLIC]<android.view.textclassifier.TextClassification: CharSequence getLabel()>    ---->    #getActions()
<android.os.Vibrator: void vibrate(long[],int)>
/**
 * Vibrate with a given pattern.
 *
 * <p>
 * Pass in an array of ints that are the durations for which to turn on or off
 * the vibrator in milliseconds.  The first value indicates the number of milliseconds
 * to wait before turning the vibrator on.  The next value indicates the number of milliseconds
 * for which to keep the vibrator on before turning it off.  Subsequent values alternate
 * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
 * </p><p>
 * To cause the pattern to repeat, pass the index into the pattern array at which
 * to start the repeat, or -1 to disable repeating.
 * </p>
 *
 * @param pattern an array of longs of times for which to turn the vibrator on or off.
 * @param repeat the index into pattern at which to repeat, or -1 if
 * you don't want to repeat.
 *
 * @deprecated Use {@link #vibrate(VibrationEffect)} instead.
 */
====>[PUBLIC]<android.os.Vibrator: void vibrate(long[],int)>    ---->    #vibrate(VibrationEffect)
<android.app.Notification.MessagingStyle: void <init>(CharSequence)>
/**
 * @param userDisplayName Required - the name to be displayed for any replies sent by the
 * user before the posting app reposts the notification with those messages after they've
 * been actually sent and in previous messages sent by the user added in
 * {@link #addMessage(Notification.MessagingStyle.Message)}
 *
 * @deprecated use {@code MessagingStyle(Person)}
 */
====>[PUBLIC]<android.app.Notification.MessagingStyle: void <init>(CharSequence)>    ---->
<android.hardware.HardwareBuffer: void destroy()>
/**
 * @removed replaced by {@link #close()}
 */
====>[HIDDEN]<android.hardware.HardwareBuffer: void destroy()>    ---->
<android.location.GnssMeasurement: boolean hasCarrierCycles()>
/**
 * Returns {@code true} if {@link #getCarrierCycles()} is available, {@code false} otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierCycles()>    ---->    #getAccumulatedDeltaRangeState()
<androidx.leanback.media.PlaybackGlueHost: void setFadingEnabled(boolean)>
/**
 * Enables or disables view fading.  If enabled, the view will be faded in when the
 * fragment starts and will fade out after a time period.
 * @deprecated Use {@link #setControlsOverlayAutoHideEnabled(boolean)}
 */
====>[PUBLIC]<androidx.leanback.media.PlaybackGlueHost: void setFadingEnabled(boolean)>    ---->    #setControlsOverlayAutoHideEnabled(boolean)
<java.util.Date: void <init>(String)>
/**
 * Allocates a <code>Date</code> object and initializes it so that
 * it represents the date and time indicated by the string
 * <code>s</code>, which is interpreted as if by the
 * {@link Date#parse} method.
 *
 * @param   s   a string representation of the date.
 * @see     java.text.DateFormat
 * @see     java.util.Date#parse(java.lang.String)
 * @deprecated As of JDK version 1.1,
 * replaced by <code>DateFormat.parse(String s)</code>.
 */
====>[PUBLIC]<java.util.Date: void <init>(String)>    ---->
<android.os.Debug: void startAllocCounting()>
/**
 * Start counting the number and aggregate size of memory allocations.
 *
 * <p>The {@link #startAllocCounting() start} method resets the counts and enables counting.
 * The {@link #stopAllocCounting() stop} method disables the counting so that the analysis
 * code doesn't cause additional allocations.  The various <code>get</code> methods return
 * the specified value. And the various <code>reset</code> methods reset the specified
 * count.</p>
 *
 * <p>Counts are kept for the system as a whole (global) and for each thread.
 * The per-thread counts for threads other than the current thread
 * are not cleared by the "reset" or "start" calls.</p>
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void startAllocCounting()>    ---->
<android.os.Debug: void resetGlobalExternalAllocSize()>
/**
 * This method exists for compatibility and has no effect.
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalExternalAllocSize()>    ---->
<android.location.LocationManager: boolean addGpsMeasurementListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #registerGnssMeasurementsCallback} instead.
 * @hide
 * @deprecated Not supported anymore.
 */
====>[HIDDEN]<android.location.LocationManager: boolean addGpsMeasurementListener(Listener)>    ---->
<android.app.slice.SliceItem: long getTimestamp()>
/**
 * @deprecated replaced by {@link #getLong()}
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceItem: long getTimestamp()>    ---->    #getLong()
<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context)>
/**
 * Checks whether the app with the given context is authorized to manage this subscription
 * according to its metadata. Only supported for embedded subscriptions (if {@link #isEmbedded}
 * returns true).
 *
 * @param context Context of the application to check.
 * @return whether the app is authorized to manage this subscription per its metadata.
 * @throws UnsupportedOperationException if this subscription is not embedded.
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.telephony.SubscriptionInfo: boolean canManageSubscription(Context)>    ---->
Inconsistency (Non-Documentation):<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\content\PackageHelper.java
<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)>

====>[PUBLIC]<com.android.internal.content.PackageHelper: long calculateInstalledSize(PackageLite,boolean,String)>    ---->
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: int getCustomContentHeight()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: int getCustomContentHeight()>
/**
 * Get the custom height in pixels for the display of this notification's content.
 * <p>This option is only available for custom display notifications created
 * using {@link #setDisplayIntent}. See also {@link #setCustomSizePreset} and
 * {@link #setCustomContentHeight}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: int getCustomContentHeight()>    ---->
<android.net.wifi.WifiManager: boolean startScan()>
/**
 * Request a scan for access points. Returns immediately. The availability
 * of the results is made known later by means of an asynchronous event sent
 * on completion of the scan.
 * <p>
 * To initiate a Wi-Fi scan, declare the
 * {@link android.Manifest.permission#CHANGE_WIFI_STATE}
 * permission in the manifest, and perform these steps:
 * </p>
 * <ol style="1">
 * <li>Invoke the following method:
 * {@code ((WifiManager) getSystemService(WIFI_SERVICE)).startScan()}</li>
 * <li>
 * Register a BroadcastReceiver to listen to
 * {@code SCAN_RESULTS_AVAILABLE_ACTION}.</li>
 * <li>When a broadcast is received, call:
 * {@code ((WifiManager) getSystemService(WIFI_SERVICE)).getScanResults()}</li>
 * </ol>
 * @return {@code true} if the operation succeeded, i.e., the scan was initiated.
 * @deprecated The ability for apps to trigger scan requests will be removed in a future
 * release.
 */
====>[PUBLIC]<android.net.wifi.WifiManager: boolean startScan()>    ---->
Inconsistency (Non-Documentation):<com.android.server.backup.BackupManagerService: String selectBackupTransport(String)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\backup\BackupManagerService.java
<com.android.server.backup.BackupManagerService: String selectBackupTransport(String)>
/**
 * Selects transport {@code transportName} and returns previous selected transport.
 */
====>[PUBLIC]<com.android.server.backup.BackupManagerService: String selectBackupTransport(String)>    ---->
<androidx.core.view.accessibility.AccessibilityEventCompat: int getRecordCount(AccessibilityEvent)>
/**
 * Gets the number of records contained in the event.
 *
 * @return The number of records.
 *
 * @deprecated Use {@link AccessibilityEvent#getRecordCount()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityEventCompat: int getRecordCount(AccessibilityEvent)>    ---->    AccessibilityEvent#getRecordCount()
<androidx.leanback.widget.BaseGridView: void setHorizontalMargin(int)>
/**
 * Sets the spacing in pixels between two child items horizontally.
 * @deprecated Use {@link #setHorizontalSpacing(int)}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseGridView: void setHorizontalMargin(int)>    ---->    #setHorizontalSpacing(int)
<java.net.MulticastSocket: byte getTTL()>
/**
 * Get the default time-to-live for multicast packets sent out on
 * the socket.
 *
 * @exception IOException if an I/O exception occurs
 * while getting the default time-to-live value
 * @return the default time-to-live value
 * @deprecated use the getTimeToLive method instead, which returns
 * an <b>int</b> instead of a <b>byte</b>.
 * @see #setTTL(byte)
 */
====>[PUBLIC]<java.net.MulticastSocket: byte getTTL()>    ---->    the getTimeToLive method
<com.android.ims.ImsManager: void setWfcMode(Context,int)>
/**
 * Change persistent WFC preference setting.
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #setWfcMode(int)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void setWfcMode(Context,int)>    ---->    #setWfcMode(int)
<com.android.setupwizardlib.template.ListMixin: int getDividerInset()>
/**
 * @return The number of pixels inset on the start side of the divider.
 * @deprecated This is the same as {@link #getDividerInsetStart()}. Use that instead.
 */
====>[PUBLIC]<com.android.setupwizardlib.template.ListMixin: int getDividerInset()>    ---->    that
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getTrustedHardwarePublicKey()>
/**
 * Public key used to encrypt {@code encryptedRecoveryKeyBlob}.
 *
 * See implementation for binary key format.
 *
 * @deprecated Use {@link #getTrustedHardwareCertPath} instead.
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.KeyChainSnapshot: byte[] getTrustedHardwarePublicKey()>    ---->    #getTrustedHardwareCertPath
<android.net.http.SslError: void <init>(int,X509Certificate)>
/**
 * Creates a new SslError object using the supplied error and certificate.
 * The URL will be set to the empty string.
 * @param error The SSL error
 * @param certificate The associated SSL certificate
 * @deprecated Use {@link #SslError(int, X509Certificate, String)}
 */
====>[PUBLIC]<android.net.http.SslError: void <init>(int,X509Certificate)>    ---->    #SslError(int, X509Certificate, String)
<java.lang.Character: boolean isJavaLetterOrDigit(char)>
/**
 * Determines if the specified character may be part of a Java
 * identifier as other than the first character.
 * <p>
 * A character may be part of a Java identifier if and only if any
 * of the following are true:
 * <ul>
 * <li>  it is a letter
 * <li>  it is a currency symbol (such as {@code '$'})
 * <li>  it is a connecting punctuation character (such as {@code '_'})
 * <li>  it is a digit
 * <li>  it is a numeric letter (such as a Roman numeral character)
 * <li>  it is a combining mark
 * <li>  it is a non-spacing mark
 * <li> {@code isIdentifierIgnorable} returns
 * {@code true} for the character.
 * </ul>
 *
 * @param   ch the character to be tested.
 * @return  {@code true} if the character may be part of a
 * Java identifier; {@code false} otherwise.
 * @see     Character#isJavaLetter(char)
 * @see     Character#isJavaIdentifierStart(char)
 * @see     Character#isJavaIdentifierPart(char)
 * @see     Character#isLetter(char)
 * @see     Character#isLetterOrDigit(char)
 * @see     Character#isUnicodeIdentifierPart(char)
 * @see     Character#isIdentifierIgnorable(char)
 * @since   1.02
 * @deprecated Replaced by isJavaIdentifierPart(char).
 */
====>[PUBLIC]<java.lang.Character: boolean isJavaLetterOrDigit(char)>    ---->
<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>
/**
 * This is called when a Fragment in this activity calls its
 * {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}
 * method.
 *
 * <p>This method throws {@link android.content.ActivityNotFoundException}
 * if there was no Activity found to run the given Intent.
 *
 * @param fragment The fragment making the call.
 * @param intent The intent to start.
 * @param requestCode Reply request code.  < 0 if reply is not requested.
 * @param options Additional options for how the Activity should be started.
 * See {@link android.content.Context#startActivity(Intent, Bundle)}
 * Context.startActivity(Intent, Bundle)} for more details.
 *
 * @throws android.content.ActivityNotFoundException
 *
 * @see Fragment#startActivity
 * @see Fragment#startActivityForResult
 *
 * @deprecated Use {@link android.support.v4.app.FragmentActivity#startActivityFromFragment(
 * android.support.v4.app.Fragment,Intent,int,Bundle)}
 */
====>[PUBLIC]<android.app.Activity: void startActivityFromFragment(Fragment,Intent,int,Bundle)>    ---->    android.support.v4.app.FragmentActivity#startActivityFromFragment(  android.support.v4.app.Fragment,Intent,int,Bundle)
<androidx.core.net.TrafficStatsCompat: void clearThreadStatsTag()>
/**
 * Clear active tag used when accounting {@link Socket} traffic originating
 * from the current thread.
 *
 * @deprecated Use {@link TrafficStats#clearThreadStatsTag()} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void clearThreadStatsTag()>    ---->    TrafficStats#clearThreadStatsTag()
<androidx.core.widget.ScrollerCompat: void abortAnimation()>
/**
 * Stops the animation. Aborting the animation causes the scroller to move to the final x and y
 * position.
 *
 * @deprecated Use {@link OverScroller#abortAnimation()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: void abortAnimation()>    ---->    OverScroller#abortAnimation()
<android.renderscript.ProgramVertex.Builder: ProgramVertex create()>
/**
 * @deprecated in API 16
 * Creates ProgramVertex from the current state of the builder
 *
 * @return  ProgramVertex
 */
====>[PUBLIC]<android.renderscript.ProgramVertex.Builder: ProgramVertex create()>    ---->
<android.telecom.InCallService: void onPhoneCreated(Phone)>
/**
 * Invoked when the {@code Phone} has been created. This is a signal to the in-call experience
 * to start displaying in-call information to the user. Each instance of {@code InCallService}
 * will have only one {@code Phone}, and this method will be called exactly once in the lifetime
 * of the {@code InCallService}.
 *
 * @param phone The {@code Phone} object associated with this {@code InCallService}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: void onPhoneCreated(Phone)>    ---->    direct methods on InCallService
<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 3 of the dialog is pressed.
 * @param text The text to display in button 3.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_POSITIVE}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton3(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<android.renderscript.RSTextureView: void <init>(Context)>
/**
 * @deprecated in API 16
 * Standard View constructor. In order to render something, you
 * must call {@link android.opengl.GLSurfaceView#setRenderer} to
 * register a renderer.
 */
====>[PUBLIC]<android.renderscript.RSTextureView: void <init>(Context)>    ---->    android.opengl.GLSurfaceView#setRenderer
<androidx.core.view.MotionEventCompat: float getY(MotionEvent,int)>
/**
 * Call {@link MotionEvent#getY(int)}.
 *
 * @deprecated Call {@link MotionEvent#getY()} directly. This method will be
 * removed in a future release.
 */
====>[PUBLIC]<androidx.core.view.MotionEventCompat: float getY(MotionEvent,int)>    ---->    MotionEvent#getY()
<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap,int)>
/**
 * Creates the TaskDescription to the specified values.
 *
 * @param label A label and description of the current state of this task.
 * @param icon An icon that represents the current state of this task.
 * @param colorPrimary A color to override the theme's primary color.  This color must be
 * opaque.
 * @deprecated use TaskDescription constructor with icon resource instead
 */
====>[PUBLIC]<android.app.ActivityManager.TaskDescription: void <init>(String,Bitmap,int)>    ---->    TaskDescription constructor with icon resource
<android.util.proto.ProtoOutputStream: void writeRepeatedBool(long,boolean)>
/**
 * Write a single repeated proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedBool(long,boolean)>    ---->    #write
Inconsistency (Non-Documentation):<com.android.internal.telephony.sip.SipCommandInterface: void getLastPdpFailCause(Message)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\telephony\sip\SipCommandInterface.java
<com.android.internal.telephony.sip.SipCommandInterface: void getLastPdpFailCause(Message)>

====>[PUBLIC]<com.android.internal.telephony.sip.SipCommandInterface: void getLastPdpFailCause(Message)>    ---->
<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,short,byte[],boolean)>
/**
 * Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port
 *
 * @param scAddress Service Centre address. null == use default
 * @param destinationAddress the address of the destination for the message
 * @param destinationPort the port to deliver the message to at the
 * destination
 * @param data the dat for the message
 * @return a <code>SubmitPdu</code> containing the encoded SC
 * address, if applicable, and the encoded message.
 * Returns null on encode error.
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,short,byte[],boolean)>    ---->
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
/**
 * Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
 *
 * As of API Level API level {@value Build.VERSION_CODES#P} the only valid
 * {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.
 *
 * @deprecated Use {@link #saveLayerAlpha(float, float, float, float, int)} instead.
 */
====>[PUBLIC]<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>    ---->    #saveLayerAlpha(float, float, float, float, int)
<android.util.proto.ProtoOutputStream: void writePackedEnum(long,int[])>
/**
 * Write a list of packed proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writePackedEnum(long,int[])>    ---->    #write
<com.android.server.am.ActivityManagerService: void requestWifiBugReport(String,String)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestWifiBugReport(String,String)>    ---->
<android.provider.Contacts.ContactMethods: String lookupProviderNameFromId(int)>
/**
 * This looks up the provider name defined in
 * from the predefined IM protocol id.
 * This is used for interacting with the IM application.
 *
 * @param protocol the protocol ID
 * @return the provider name the IM app uses for the given protocol, or null if no
 * provider is defined for the given protocol
 * @deprecated see {@link android.provider.ContactsContract}
 * @hide
 */
====>[HIDDEN]<android.provider.Contacts.ContactMethods: String lookupProviderNameFromId(int)>    ---->    android.provider.ContactsContract
<androidx.appcompat.app.ActionBar: void selectTab(Tab)>
/**
 * Select the specified tab. If it is not a child of this action bar it will be added.
 *
 * <p>Note: If you want to select by index, use {@link #setSelectedNavigationItem(int)}.</p>
 *
 * @param tab Tab to select
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<androidx.appcompat.app.ActionBar: void selectTab(Tab)>    ---->
<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void onDrawOver(Canvas,RecyclerView)>    ---->    #onDrawOver(Canvas, RecyclerView, RecyclerView.State)
<androidx.core.view.ViewCompat: int getMeasuredWidthAndState(View)>
/**
 * Return the full width measurement information for this view as computed
 * by the most recent call to {@link android.view.View#measure(int, int)}.
 * This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and
 * {@link #MEASURED_STATE_TOO_SMALL}.
 * This should be used during measurement and layout calculations only. Use
 * {@link android.view.View#getWidth()} to see how wide a view is after layout.
 *
 * @return The measured width of this view as a bit mask.
 *
 * @deprecated Use {@link View#getMeasuredWidth()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: int getMeasuredWidthAndState(View)>    ---->    View#getMeasuredWidth()
<androidx.core.widget.EdgeEffectCompat: boolean onPull(float)>
/**
 * A view should call this when content is pulled away from an edge by the user.
 * This will update the state of the current visual effect and its associated animation.
 * The host view should always {@link android.view.View#invalidate()} if this method
 * returns true and draw the results accordingly.
 *
 * @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to
 * 1.f (full length of the view) or negative values to express change
 * back toward the edge reached to initiate the effect.
 * @return true if the host view should call invalidate, false if it should not.
 *
 * @deprecated Use {@link #onPull(EdgeEffect, float, float)}.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean onPull(float)>    ---->    #onPull(EdgeEffect, float, float)
<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)>
/**
 * Gets an auth token of the specified type for a particular account,
 * optionally raising a notification if the user must enter credentials.
 * This method is intended for background tasks and services where the
 * user should not be immediately interrupted with a password prompt.
 *
 * <p>If a previously generated auth token is cached for this account and
 * type, then it is returned.  Otherwise, if a saved password is
 * available, it is sent to the server to generate a new auth token.
 * Otherwise, an {@link Intent} is returned which, when started, will
 * prompt the user for a password.  If the notifyAuthFailure parameter is
 * set, a status bar notification is also created with the same Intent,
 * alerting the user that they need to enter a password at some point.
 *
 * <p>In that case, you may need to wait until the user responds, which
 * could take hours or days or forever.  When the user does respond and
 * supply a new password, the account manager will broadcast the
 * {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent and
 * notify {@link OnAccountsUpdateListener} which applications can
 * use to try again.
 *
 * <p>If notifyAuthFailure is not set, it is the application's
 * responsibility to launch the returned Intent at some point.
 * Either way, the result from this call will not wait for user action.
 *
 * <p>Some authenticators have auth token <em>types</em>, whose value
 * is authenticator-dependent.  Some services use different token types to
 * access different functionality -- for example, Google uses different auth
 * tokens to access Gmail and Google Calendar for the same account.
 *
 * <p>This method may be called from any thread, but the returned
 * {@link AccountManagerFuture} must not be used on the main thread.
 *
 * @param account The account to fetch an auth token for
 * @param authTokenType The auth token type, an authenticator-dependent
 * string token, must not be null
 * @param notifyAuthFailure True to add a notification to prompt the
 * user for a password if necessary, false to leave that to the caller
 * @param callback Callback to invoke when the request completes,
 * null for no callback
 * @param handler {@link Handler} identifying the callback thread,
 * null for the main thread
 * @return An {@link AccountManagerFuture} which resolves to a Bundle with
 * at least the following fields on success:
 * <ul>
 * <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied
 * <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account
 * <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted
 * </ul>
 *
 * (Other authenticator-specific values may be returned.)  If the user
 * must enter credentials, the returned Bundle contains only
 * {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.
 *
 * If an error occurred, {@link AccountManagerFuture#getResult()} throws:
 * <ul>
 * <li> {@link AuthenticatorException} if the authenticator failed to respond
 * <li> {@link OperationCanceledException} if the operation is canceled for
 * any reason, incluidng the user canceling a credential request
 * <li> {@link IOException} if the authenticator experienced an I/O problem
 * creating a new auth token, usually because of network trouble
 * </ul>
 * If the account is no longer present on the device, the return value is
 * authenticator-dependent.  The caller should verify the validity of the
 * account before requesting an auth token.
 * @deprecated use {@link #getAuthToken(Account, String, android.os.Bundle,
 * boolean, AccountManagerCallback, android.os.Handler)} instead
 */
====>[PUBLIC]<android.accounts.AccountManager: AccountManagerFuture<Bundle> getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)>    ---->    lback, android.os.Handler)}
<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.Slice.Builder: Builder setSpec(SliceSpec)>    ---->
<android.os.TestLooperManager: MessageQueue getQueue()>
/**
 * @removed
 */
====>[HIDDEN]<android.os.TestLooperManager: MessageQueue getQueue()>    ---->
<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)>
/**
 * @deprecated in API 16
 * Set the default ProgramStore object seen as the parent state by the root
 * rendering script.
 *
 * @param p
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void bindProgramStore(ProgramStore)>    ---->
<androidx.core.app.NotificationCompat.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>
/**
 * Constructor
 *
 * @param text A {@link CharSequence} to be displayed as the message content
 * @param timestamp Time at which the message arrived in ms since Unix epoch
 * @param sender A {@link CharSequence} to be used for displaying the name of the
 * sender. Should be <code>null</code> for messages by the current user, in which case
 * the platform will insert {@link MessagingStyle#getUserDisplayName()}.
 * Should be unique amongst all individuals in the conversation, and should be
 * consistent during re-posts of the notification.
 *
 * @deprecated Use the alternative constructor instead.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.MessagingStyle.Message: void <init>(CharSequence,long,CharSequence)>    ---->    the alternative constructor
<android.text.TextUtils: boolean isGraphic(char)>
/**
 * Returns whether this character is a printable character.
 *
 * This does not support non-BMP characters and should not be used.
 *
 * @deprecated Use {@link #isGraphic(CharSequence)} instead.
 */
====>[PUBLIC]<android.text.TextUtils: boolean isGraphic(char)>    ---->    #isGraphic(CharSequence)
<androidx.core.view.ViewCompat: void setScaleY(View,float)>
/**
 * Sets the amount that the view is scaled in Y around the pivot point, as a proportion of
 * the view's unscaled width. A value of 1 means that no scaling is applied.
 *
 * @param value The scaling factor.
 *
 * @deprecated Use {@link View#setScaleY(float)} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: void setScaleY(View,float)>    ---->    View#setScaleY(float)
<android.telephony.PhoneNumberUtils: void formatNanpNumber(Editable)>
/**
 * Formats a phone number in-place using the NANP formatting rules. Numbers will be formatted
 * as:
 *
 * <p><code>
 * xxxxx
 * xxx-xxxx
 * xxx-xxx-xxxx
 * 1-xxx-xxx-xxxx
 * +1-xxx-xxx-xxxx
 * </code></p>
 *
 * @param text the number to be formatted, will be modified with the formatting
 *
 * @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead
 */
====>[PUBLIC]<android.telephony.PhoneNumberUtils: void formatNanpNumber(Editable)>    ---->    link #formatNumber(String phoneNumber, String defaultCountryIso)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void setWallpaper(Bitmap)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void setWallpaper(Bitmap)>

====>[PUBLIC]<android.content.ContextWrapper: void setWallpaper(Bitmap)>    ---->
<java.io.StreamTokenizer: void <init>(InputStream)>
/**
 * Creates a stream tokenizer that parses the specified input
 * stream. The stream tokenizer is initialized to the following
 * default state:
 * <ul>
 * <li>All byte values {@code 'A'} through {@code 'Z'},
 * {@code 'a'} through {@code 'z'}, and
 * {@code '\u00A0'} through {@code '\u00FF'} are
 * considered to be alphabetic.
 * <li>All byte values {@code '\u0000'} through
 * {@code '\u0020'} are considered to be white space.
 * <li>{@code '/'} is a comment character.
 * <li>Single quote {@code '\''} and double quote {@code '"'}
 * are string quote characters.
 * <li>Numbers are parsed.
 * <li>Ends of lines are treated as white space, not as separate tokens.
 * <li>C-style and C++-style comments are not recognized.
 * </ul>
 *
 * @deprecated As of JDK version 1.1, the preferred way to tokenize an
 * input stream is to convert it into a character stream, for example:
 * <blockquote><pre>
 * Reader r = new BufferedReader(new InputStreamReader(is));
 * StreamTokenizer st = new StreamTokenizer(r);
 * </pre></blockquote>
 *
 * @param      is        an input stream.
 * @see        java.io.BufferedReader
 * @see        java.io.InputStreamReader
 * @see        java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)
 */
====>[PUBLIC]<java.io.StreamTokenizer: void <init>(InputStream)>    ---->    java.io.BufferedReader
<com.android.ims.ImsConfig: String getProvisionedStringValue(int)>
/**
 * @deprecated see {@link #getConfigString(int)} instead
 */
====>[PUBLIC]<com.android.ims.ImsConfig: String getProvisionedStringValue(int)>    ---->    #getConfigString(int)
<android.app.backup.BackupManager: int requestRestore(RestoreObserver,BackupManagerMonitor)>
/**
 * @deprecated Since Android P app can no longer request restoring of its backup.
 *
 * <p>Restore the calling application from backup.  The data will be restored from the
 * current backup dataset if the application has stored data there, or from
 * the dataset used during the last full device setup operation if the current
 * backup dataset has no matching data.  If no backup data exists for this application
 * in either source, a nonzero value will be returned.
 *
 * <p>If this method returns zero (meaning success), the OS will attempt to retrieve
 * a backed-up dataset from the remote transport, instantiate the application's
 * backup agent, and pass the dataset to the agent's
 * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}
 * method.
 *
 * @param observer The {@link RestoreObserver} to receive callbacks during the restore
 * operation. This must not be null.
 *
 * @param monitor the {@link BackupManagerMonitor} to receive callbacks during the restore
 * operation.
 *
 * @return Zero on success; nonzero on error.
 *
 * @hide
 */
====>[HIDDEN]<android.app.backup.BackupManager: int requestRestore(RestoreObserver,BackupManagerMonitor)>    ---->    android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()
<android.renderscript.FileA3D.IndexEntry: String getName()>
/**
 * @deprecated in API 16
 * Returns the name of a renderscript object the index entry
 * describes
 *
 * @return name of a renderscript object the index entry
 * describes
 */
====>[PUBLIC]<android.renderscript.FileA3D.IndexEntry: String getName()>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void sendStickyBroadcast(Intent)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void sendStickyBroadcast(Intent)>

====>[PUBLIC]<android.content.ContextWrapper: void sendStickyBroadcast(Intent)>    ---->
<android.util.proto.ProtoOutputStream: void writeBytes(long,byte[])>
/**
 * Write a single proto "bytes" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeBytes(long,byte[])>    ---->    #write
<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreRow(RowBuilder)>
/**
 * If all content in a slice cannot be shown, the row added here may be displayed where the
 * content is cut off. This row should have an affordance to take the user to an activity to
 * see all of the content.
 * <p>
 * This method should only be used if you want to display a custom row to indicate more
 * content, consider using {@link #addSeeMoreAction(PendingIntent)} otherwise. If you do
 * choose to specify a custom row, the row should have a content intent or action end item
 * specified to take the user to an activity to see all of the content.
 * </p>
 * <p>
 * Only one see more affordance can be added, this throws {@link IllegalStateException} if
 * a row or action has been previously added.
 * </p>
 *
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder: ListBuilder addSeeMoreRow(RowBuilder)>    ---->
<java.util.Date: void <init>(int,int,int,int,int)>
/**
 * Allocates a <code>Date</code> object and initializes it so that
 * it represents the instant at the start of the minute specified by
 * the <code>year</code>, <code>month</code>, <code>date</code>,
 * <code>hrs</code>, and <code>min</code> arguments, in the local
 * time zone.
 *
 * @param   year    the year minus 1900.
 * @param   month   the month between 0-11.
 * @param   date    the day of the month between 1-31.
 * @param   hrs     the hours between 0-23.
 * @param   min     the minutes between 0-59.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(year + 1900, month, date,
 * hrs, min)</code> or <code>GregorianCalendar(year + 1900,
 * month, date, hrs, min)</code>.
 */
====>[PUBLIC]<java.util.Date: void <init>(int,int,int,int,int)>    ---->
<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isFullScreen()>
/**
 * Gets if the source is taking the entire screen.
 *
 * @return True if the source is full screen, false otherwise.
 *
 * @deprecated Use {@link AccessibilityRecord#isFullScreen()} directly.
 */
====>[PUBLIC]<androidx.core.view.accessibility.AccessibilityRecordCompat: boolean isFullScreen()>    ---->    AccessibilityRecord#isFullScreen()
<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform(Context)>
/**
 * Returns a platform configuration for WFC which may override the user
 * setting. Note: WFC presumes that VoLTE is enabled (these are
 * configuration settings which must be done correctly).
 *
 * @deprecated Doesn't work for MSIM devices. Use {@link #isWfcEnabledByPlatform()}
 * instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform(Context)>    ---->    #isWfcEnabledByPlatform()
<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>
/**
 * Gets the default zoom density of the page. This should be called from
 * the UI thread.
 *
 * This setting is not recommended for use in new applications.
 *
 * @return the zoom density
 * @see #setDefaultZoom
 * @deprecated Will only return the default value.
 */
====>[PUBLIC]<android.webkit.WebSettings: ZoomDensity getDefaultZoom()>    ---->
<android.app.job.JobInfo: long getEstimatedNetworkBytes()>
/**
 * @deprecated replaced by {@link #getEstimatedNetworkDownloadBytes()} and
 * {@link #getEstimatedNetworkUploadBytes()}.
 * @removed
 */
====>[HIDDEN]<android.app.job.JobInfo: long getEstimatedNetworkBytes()>    ---->    #getEstimatedNetworkDownloadBytes()
<android.os.Debug: int setAllocationLimit(int)>
/**
 * Establish an object allocation limit in the current thread.
 * This feature was never enabled in release builds.  The
 * allocation limits feature was removed in Honeycomb.  This
 * method exists for compatibility and always returns -1 and has
 * no effect.
 *
 * @deprecated This method is now obsolete.
 */
====>[PUBLIC]<android.os.Debug: int setAllocationLimit(int)>    ---->
<android.webkit.WebChromeClient: void openFileChooser(ValueCallback<Uri>,String,String)>
/**
 * Tell the client to open a file chooser.
 * @param uploadFile A ValueCallback to set the URI of the file to upload.
 * onReceiveValue must be called to wake up the thread.a
 * @param acceptType The value of the 'accept' attribute of the input tag
 * associated with this file picker.
 * @param capture The value of the 'capture' attribute of the input tag
 * associated with this file picker.
 *
 * @deprecated Use {@link #onShowFileChooser} instead.
 * @hide This method was not published in any SDK version.
 */
====>[HIDDEN]<android.webkit.WebChromeClient: void openFileChooser(ValueCallback<Uri>,String,String)>    ---->    #onShowFileChooser
<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(String)>
/**
 * Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the
 * length in bytes (not hex chars) less the SMSC header
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(String)>    ---->
Inconsistency (Non-Documentation):<android.databinding.parser.XMLLexer: String[] getTokenNames()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\databinding\parser\XMLLexer.java
<android.databinding.parser.XMLLexer: String[] getTokenNames()>

====>[PUBLIC]<android.databinding.parser.XMLLexer: String[] getTokenNames()>    ---->
<android.location.LocationManager: boolean addGpsNavigationMessageListener(Listener)>
/**
 * No-op method to keep backward-compatibility.
 * Don't use it. Use {@link #registerGnssNavigationMessageCallback} instead.
 * @hide
 * @deprecated Not supported anymore.
 */
====>[HIDDEN]<android.location.LocationManager: boolean addGpsNavigationMessageListener(Listener)>    ---->
<android.telephony.PhoneNumberUtils: CharSequence ttsSpanAsPhoneNumber(CharSequence)>
/**
 * Wrap the supplied {@code CharSequence} with a {@code TtsSpan}, annotating it as
 * containing a phone number in its entirety.
 *
 * @param phoneNumber A {@code CharSequence} the entirety of which represents a phone number.
 * @return A {@code CharSequence} with appropriate annotations.
 * @deprecated Renamed {@link #createTtsSpannable}.
 *
 * @hide
 */
====>[HIDDEN]<android.telephony.PhoneNumberUtils: CharSequence ttsSpanAsPhoneNumber(CharSequence)>    ---->    #createTtsSpannable
<android.service.notification.StatusBarNotification: void <init>(String,String,int,String,int,int,int,Notification,UserHandle,long)>
/**
 * @deprecated Non-system apps should not need to create StatusBarNotifications.
 */
====>[PUBLIC]<android.service.notification.StatusBarNotification: void <init>(String,String,int,String,int,int,int,Notification,UserHandle,long)>    ---->
Inconsistency (Non-Documentation):<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\opengl\GLSurfaceView.java
<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)>
/**
 * This method is part of the SurfaceHolder.Callback2 interface, and is
 * not normally called or subclassed by clients of GLSurfaceView.
 */
====>[PUBLIC]<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(SurfaceHolder)>    ---->
<android.net.wifi.WpsInfo: void <init>(WpsInfo)>

====>[PUBLIC]<android.net.wifi.WpsInfo: void <init>(WpsInfo)>    ---->
<android.net.NetworkInfo: void setRoaming(boolean)>
/**
 * @deprecated Use {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING} instead.
 * {@hide}
 */
====>[HIDDEN]<android.net.NetworkInfo: void setRoaming(boolean)>    ---->    NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,int)>
/**
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder addEndItem(Icon,int)>    ---->
<android.os.Debug: int getThreadAllocCount()>
/**
 * Returns the thread-local count of objects allocated by the runtime between a
 * {@link #startAllocCounting() start} and {@link #stopAllocCounting() stop}.
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: int getThreadAllocCount()>    ---->
<android.provider.Contacts.ContactMethods: CharSequence getDisplayLabel(Context,int,int,CharSequence)>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.ContactMethods: CharSequence getDisplayLabel(Context,int,int,CharSequence)>    ---->    android.provider.ContactsContract
<android.app.ActionBar: void removeTab(Tab)>
/**
 * Remove a tab from the action bar. If the removed tab was selected it will be deselected
 * and another tab will be selected if present.
 *
 * @param tab The tab to remove
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: void removeTab(Tab)>    ---->
<com.android.internal.widget.RecyclerView.LayoutParams: int getViewPosition()>
/**
 * @deprecated use {@link #getViewLayoutPosition()} or {@link #getViewAdapterPosition()}
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.LayoutParams: int getViewPosition()>    ---->    #getViewLayoutPosition()
<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)>
/**
 * Start playing the sound.  It will actually start playing at some
 * point in the future.  There are no guarantees about latency here.
 * Calling this before another audio file is done playing will stop
 * that one and start the new one.
 *
 * @param context Your application's context.
 * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})
 * @param looping Whether the audio should loop forever.
 * (see {@link MediaPlayer#setLooping(boolean)})
 * @param stream the AudioStream to use.
 * (see {@link MediaPlayer#setAudioStreamType(int)})
 * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead
 */
====>[PUBLIC]<android.media.AsyncPlayer: void play(Context,Uri,boolean,int)>    ---->    #play(Context, Uri, boolean, AudioAttributes)
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>
/**
 * Set a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @param hintAvoidBackgroundClipping {@code true} to avoid clipping if possible.
 * @return this object for method chaining
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: WearableExtender setHintAvoidBackgroundClipping(boolean)>    ---->
<android.content.pm.PackageParser.Package: void setApplicationInfoSplitResourcePaths(String[])>
/**
 * @deprecated Forward locked apps no longer supported. Resource path not needed.
 */
====>[PUBLIC]<android.content.pm.PackageParser.Package: void setApplicationInfoSplitResourcePaths(String[])>    ---->
<androidx.legacy.app.FragmentTabHost: void addTab(TabSpec,Class<?>,Bundle)>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void addTab(TabSpec,Class<?>,Bundle)>    ---->    androidx.fragment.app.FragmentTabHost
<android.app.ActionBar: int getNavigationItemCount()>
/**
 * Get the number of navigation items present in the current navigation mode.
 *
 * @return Number of navigation items.
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: int getNavigationItemCount()>    ---->
<android.renderscript.ProgramVertexFixedFunction.Builder: void <init>(RenderScript)>
/**
 * @deprecated in API 16
 * Creates a builder for fixed function vertex program
 *
 * @param rs Context to which the program will belong.
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Builder: void <init>(RenderScript)>    ---->
<androidx.appcompat.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>
/**
 * Set a custom view to be the contents of the Dialog, specifying the
 * spacing to appear around that view. If the supplied view is an
 * instance of a {@link ListView} the light background will be used.
 *
 * @param view              The view to use as the contents of the Dialog.
 * @param viewSpacingLeft   Spacing between the left edge of the view and
 * the dialog frame
 * @param viewSpacingTop    Spacing between the top edge of the view and
 * the dialog frame
 * @param viewSpacingRight  Spacing between the right edge of the view
 * and the dialog frame
 * @param viewSpacingBottom Spacing between the bottom edge of the view
 * and the dialog frame
 * @return This Builder object to allow for chaining of calls to set
 * methods
 *
 * This is currently hidden because it seems like people should just
 * be able to put padding around the view.
 * @hide
 */
====>[HIDDEN]<androidx.appcompat.app.AlertDialog.Builder: Builder setView(View,int,int,int,int)>    ---->
<android.support.v4.media.session.MediaControllerCompat: void removeQueueItemAt(int)>
/**
 * Removes an queue item at the specified position in the play queue
 * of this session. Not all sessions may support this. To know whether the session supports
 * this, get the session's flags with {@link #getFlags()} and check that the flag
 * {@link MediaSessionCompat#FLAG_HANDLES_QUEUE_COMMANDS} is set.
 *
 * @param index The index of the element to be removed.
 * @throws UnsupportedOperationException If this session doesn't support this.
 * @see #getFlags()
 * @see MediaSessionCompat#FLAG_HANDLES_QUEUE_COMMANDS
 * @deprecated Use {@link #removeQueueItem(MediaDescriptionCompat)} instead.
 */
====>[PUBLIC]<android.support.v4.media.session.MediaControllerCompat: void removeQueueItemAt(int)>    ---->    #removeQueueItem(MediaDescriptionCompat)
<android.app.job.JobInfo.Builder: Builder setIsPrefetch(boolean)>
/**
 * @removed
 * @deprecated replaced with {@link #setPrefetch(boolean)}
 */
====>[HIDDEN]<android.app.job.JobInfo.Builder: Builder setIsPrefetch(boolean)>    ---->    #setPrefetch(boolean)
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setGravity(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setGravity(int)>
/**
 * Set the gravity that this notification should have within the available viewport space.
 * Supported values include {@link android.view.Gravity#TOP},
 * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.
 * The default value is {@link android.view.Gravity#BOTTOM}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setGravity(int)>    ---->
Inconsistency (Non-Documentation):<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\server\pm\PackageInstallerService.java
<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)>

====>[PUBLIC]<com.android.server.pm.PackageInstallerService: File allocateStageDirLegacy(String,boolean)>    ---->
<android.webkit.CacheManager: File getCacheFileBaseDir()>
/**
 * Gets the base directory in which the files used to store the contents of
 * cache entries are placed. See
 * {@link CacheManager.CacheResult#getLocalPath CacheManager.CacheResult.getLocalPath()}.
 *
 * @return the base directory of the cache
 * @deprecated This method no longer has any effect and always returns {@code null}.
 */
====>[PUBLIC]<android.webkit.CacheManager: File getCacheFileBaseDir()>    ---->
<android.app.Notification.TvExtender: String getChannel()>
/**
 * @removed
 */
====>[HIDDEN]<android.app.Notification.TvExtender: String getChannel()>    ---->
<android.telephony.SmsMessage: int getIndexOnSim()>
/**
 * Returns the record index of the message on the SIM (1-based index).
 * @return the record index of the message on the SIM, or -1 if this
 * SmsMessage was not created from a SIM SMS EF record.
 * @deprecated Use getIndexOnIcc instead.
 */
====>[PUBLIC]<android.telephony.SmsMessage: int getIndexOnSim()>    ---->    getIndexOnIcc
<com.android.internal.logging.MetricsLogger: void action(Context,int,int)>
/**
 * @deprecated use {@link #action(int, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void action(Context,int,int)>    ---->    #action(int, int)
Inconsistency (Non-Documentation):<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>

====>[PUBLIC]<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>    ---->
<android.content.pm.PackageManager: void addPackageToPreferred(String)>
/**
 * @deprecated This function no longer does anything; it was an old
 * approach to managing preferred activities, which has been superseded
 * by (and conflicts with) the modern activity-based preferences.
 */
====>[PUBLIC]<android.content.pm.PackageManager: void addPackageToPreferred(String)>    ---->
<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()>
/**
 * @deprecated in API 16
 * Forces deallocation of memory backing the contant matrices.
 * Normally, this is unnecessary and will be garbage collected
 */
====>[PUBLIC]<android.renderscript.ProgramVertexFixedFunction.Constants: void destroy()>    ---->
<android.view.View: Bitmap getDrawingCache(boolean)>
/**
 * <p>Returns the bitmap in which this view drawing is cached. The returned bitmap
 * is null when caching is disabled. If caching is enabled and the cache is not ready,
 * this method will create it. Calling {@link #draw(android.graphics.Canvas)} will not
 * draw from the cache when the cache is enabled. To benefit from the cache, you must
 * request the drawing cache by calling this method and draw it on screen if the
 * returned bitmap is not null.</p>
 *
 * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 * this method will create a bitmap of the same size as this view. Because this bitmap
 * will be drawn scaled by the parent ViewGroup, the result on screen might show
 * scaling artifacts. To avoid such artifacts, you should call this method by setting
 * the auto scaling to true. Doing so, however, will generate a bitmap of a different
 * size than the view. This implies that your application must be able to handle this
 * size.</p>
 *
 * @param autoScale Indicates whether the generated bitmap should be scaled based on
 * the current density of the screen when the application is in compatibility
 * mode.
 *
 * @return A bitmap representing this view or null if cache is disabled.
 *
 * @see #setDrawingCacheEnabled(boolean)
 * @see #isDrawingCacheEnabled()
 * @see #buildDrawingCache(boolean)
 * @see #destroyDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: Bitmap getDrawingCache(boolean)>    ---->    #setLayerType(int, Paint)
<android.telecom.InCallService: void onPhoneDestroyed(Phone)>
/**
 * Invoked when a {@code Phone} has been destroyed. This is a signal to the in-call experience
 * to stop displaying in-call information to the user. This method will be called exactly once
 * in the lifetime of the {@code InCallService}, and it will always be called after a previous
 * call to {@link #onPhoneCreated(Phone)}.
 *
 * @param phone The {@code Phone} object associated with this {@code InCallService}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: void onPhoneDestroyed(Phone)>    ---->    direct methods on InCallService
<android.os.Parcel: void closeFileDescriptor(FileDescriptor)>
/**
 * @deprecated use {@link android.system.Os#close(FileDescriptor)}
 */
====>[PUBLIC]<android.os.Parcel: void closeFileDescriptor(FileDescriptor)>    ---->    android.system.Os#close(FileDescriptor)
<android.net.ConnectivityManager: int getNetworkPreference()>
/**
 * Retrieves the current preferred network type.
 *
 * @return an integer representing the preferred network type
 *
 * @deprecated Functionality has been removed as it no longer makes sense,
 * with many more than two networks - we'd need an array to express
 * preference.  Instead we use dynamic network properties of
 * the networks to describe their precedence.
 */
====>[PUBLIC]<android.net.ConnectivityManager: int getNetworkPreference()>    ---->
<android.app.StatsManager: boolean removeConfiguration(long)>
/**
 * @deprecated Use {@link #removeConfig(long)}
 */
====>[PUBLIC]<android.app.StatsManager: boolean removeConfiguration(long)>    ---->    #removeConfig(long)
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>
/**
 * Returns {@code true} if {@link #getCarrierPhaseUncertainty()} is available, {@code false}
 * otherwise.
 *
 * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.
 */
====>[PUBLIC]<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>    ---->    #getAccumulatedDeltaRangeState()
<android.graphics.Canvas: void getMatrix(Matrix)>
/**
 * Return, in ctm, the current transformation matrix. This does not alter
 * the matrix in the canvas, but just returns a copy of it.
 *
 * @deprecated {@link #isHardwareAccelerated() Hardware accelerated} canvases may have any
 * matrix when passed to a View or Drawable, as it is implementation defined where in the
 * hierarchy such canvases are created. It is recommended in such cases to either draw contents
 * irrespective of the current matrix, or to track relevant transform state outside of the
 * canvas.
 */
====>[PUBLIC]<android.graphics.Canvas: void getMatrix(Matrix)>    ---->    #isHardwareAccelerated() Hardware accelerated
<android.transition.Scene: void <init>(ViewGroup,ViewGroup)>
/**
 * @deprecated use {@link #Scene(ViewGroup, View)}.
 */
====>[PUBLIC]<android.transition.Scene: void <init>(ViewGroup,ViewGroup)>    ---->    #Scene(ViewGroup, View)
<android.os.Parcel: T[] readTypedArray(Creator<T>)>
/**
 * @deprecated
 * @hide
 */
====>[HIDDEN]<android.os.Parcel: T[] readTypedArray(Creator<T>)>    ---->
Inconsistency (Non-Documentation):<android.content.ContextWrapper: void setWallpaper(InputStream)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\content\ContextWrapper.java
<android.content.ContextWrapper: void setWallpaper(InputStream)>

====>[PUBLIC]<android.content.ContextWrapper: void setWallpaper(InputStream)>    ---->
Inconsistency (Non-Documentation):<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\widget\LockPatternUtils.java
<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)>

====>[PUBLIC]<com.android.internal.widget.LockPatternUtils: boolean isLegacyLockPatternEnabled(int)>    ---->
<android.security.keystore.recovery.RecoveryController: void setRecoveryStatus(String,String,int)>
/**
 * @deprecated Use {@link #setRecoveryStatus(String, int)}
 * @removed
 */
====>[HIDDEN]<android.security.keystore.recovery.RecoveryController: void setRecoveryStatus(String,String,int)>    ---->    #setRecoveryStatus(String, int)
<android.content.pm.ShortcutInfo: int getTextResId()>
/**
 * @hide -- old signature, the internal code still uses it.
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo: int getTextResId()>    ---->
<android.app.RecoverableSecurityException: void showAsNotification(Context)>
/**
 * @removed
 */
====>[HIDDEN]<android.app.RecoverableSecurityException: void showAsNotification(Context)>    ---->
<java.sql.Time: void setDate(int)>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a date component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #getDate
 */
====>[PUBLIC]<java.sql.Time: void setDate(int)>    ---->    #getDate
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
/**
 * Gets the actions that can be performed on the node.
 *
 * @return The bit mask of with actions.
 *
 * @see AccessibilityNodeInfo#ACTION_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLEAR_FOCUS
 * @see AccessibilityNodeInfo#ACTION_SELECT
 * @see AccessibilityNodeInfo#ACTION_CLEAR_SELECTION
 * @see AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS
 * @see AccessibilityNodeInfo#ACTION_CLICK
 * @see AccessibilityNodeInfo#ACTION_LONG_CLICK
 * @see AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY
 * @see AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
 * @see AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT
 * @see AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT
 * @see AccessibilityNodeInfo#ACTION_SCROLL_FORWARD
 * @see AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD
 *
 * @deprecated Use {@link #getActionList()}.
 */
====>[PUBLIC]<android.view.accessibility.AccessibilityNodeInfo: int getActions()>    ---->    #getActionList()
<androidx.leanback.app.PlaybackSupportFragment: void setFadingEnabled(boolean)>
/**
 * @deprecated Uses {@link #setControlsOverlayAutoHideEnabled(boolean)}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackSupportFragment: void setFadingEnabled(boolean)>    ---->    #setControlsOverlayAutoHideEnabled(boolean)
Inconsistency (Non-Documentation):<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\os\Environment.java
<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()>

====>[PUBLIC]<android.os.Environment.UserEnvironment: File getExternalStorageDirectory()>    ---->
<androidx.leanback.app.PlaybackFragment: void setFadingEnabled(boolean)>
/**
 * @deprecated Uses {@link #setControlsOverlayAutoHideEnabled(boolean)}
 */
====>[PUBLIC]<androidx.leanback.app.PlaybackFragment: void setFadingEnabled(boolean)>    ---->    #setControlsOverlayAutoHideEnabled(boolean)
<android.view.ViewDebug: void trace(View,RecyclerTraceType,int)>
/**
 * @deprecated This method is now unused and invoking it is a no-op
 */
====>[PUBLIC]<android.view.ViewDebug: void trace(View,RecyclerTraceType,int)>    ---->
<android.hardware.location.ContextHubManager: int registerCallback(Callback)>
/**
 * Set a callback to receive messages from the context hub
 *
 * @param callback Callback object
 *
 * @see Callback
 *
 * @return int 0 on success, -1 otherwise
 *
 * @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}
 * or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to
 * register a {@link android.hardware.location.ContextHubClientCallback}.
 */
====>[PUBLIC]<android.hardware.location.ContextHubManager: int registerCallback(Callback)>    ---->    #createClient(ContextHubInfo, ContextHubClientCallback)
<com.android.ims.ImsManager: int getWfcMode(Context,boolean)>
/**
 * Returns the user configuration of WFC preference setting
 *
 * @param roaming {@code false} for home network setting, {@code true} for roaming  setting
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #getWfcMode(boolean)} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: int getWfcMode(Context,boolean)>    ---->    #getWfcMode(boolean)
<com.android.server.am.ActivityManagerService: void requestBugReport(int)>
/**
 * @deprecated This method is only used by a few internal components and it will soon be
 * replaced by a proper bug report API (which will be restricted to a few, pre-defined apps).
 * No new code should be calling it.
 */
====>[PUBLIC]<com.android.server.am.ActivityManagerService: void requestBugReport(int)>    ---->
Inconsistency (Non-Documentation):<android.app.ContextImpl: Drawable peekWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: Drawable peekWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: Drawable peekWallpaper()>    ---->
<android.hardware.radio.RadioTuner: boolean isAntennaConnected()>
/**
 * Get current antenna connection state for current configuration.
 * Only valid if a configuration has been applied.
 * @return {@code true} if the antenna is connected, {@code false} otherwise.
 *
 * @deprecated Use {@link onAntennaState} callback instead
 */
====>[PUBLIC]<android.hardware.radio.RadioTuner: boolean isAntennaConnected()>    ---->    onAntennaState
<android.util.proto.ProtoOutputStream: void writeEnum(long,int)>
/**
 * Write a single proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeEnum(long,int)>    ---->    #write
<android.net.TrafficStats: long getUidTcpRxSegments(int)>
/**
 * @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},
 * transport layer statistics are no longer available, and will
 * always return {@link #UNSUPPORTED}.
 * @see #getUidRxPackets(int)
 */
====>[PUBLIC]<android.net.TrafficStats: long getUidTcpRxSegments(int)>    ---->    #getUidRxPackets(int)
<android.hardware.radio.ProgramSelector: long[] getVendorIds()>
/**
 * Vendor identifiers are passed as-is to the HAL implementation,
 * preserving elements order.
 *
 * @return an array of vendor identifiers, must not be modified.
 * @deprecated for HAL 1.x compatibility;
 * HAL 2.x uses standard primary/secondary lists for vendor IDs
 */
====>[PUBLIC]<android.hardware.radio.ProgramSelector: long[] getVendorIds()>    ---->
<android.content.pm.SharedLibraryInfo: int getVersion()>
/**
 * @deprecated Use {@link #getLongVersion()} instead.
 */
====>[PUBLIC]<android.content.pm.SharedLibraryInfo: int getVersion()>    ---->    #getLongVersion()
<java.util.Date: int getMonth()>
/**
 * Returns a number representing the month that contains or begins
 * with the instant in time represented by this <tt>Date</tt> object.
 * The value returned is between <code>0</code> and <code>11</code>,
 * with the value <code>0</code> representing January.
 *
 * @return  the month represented by this date.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.get(Calendar.MONTH)</code>.
 */
====>[PUBLIC]<java.util.Date: int getMonth()>    ---->
<android.webkit.CookieSyncManager: void stopSync()>
/**
 * stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in
 * the queue to break the sync loop
 * @deprecated Calling stopSync is no longer useful as the WebView
 * automatically syncs cookies.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void stopSync()>    ---->
<androidx.leanback.widget.GuidedActionsStylist: void onEditingModeChange(ViewHolder,GuidedAction,boolean)>
/**
 * @deprecated Use {@link #onEditingModeChange(ViewHolder, boolean, boolean)}.
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedActionsStylist: void onEditingModeChange(ViewHolder,GuidedAction,boolean)>    ---->    #onEditingModeChange(ViewHolder, boolean, boolean)
<com.android.settingslib.core.instrumentation.LogWriter: void action(Context,int,boolean)>
/**
 * Logs an user action.
 * @deprecated use {@link #action(int, boolean, Pair[])}
 */
====>[PUBLIC]<com.android.settingslib.core.instrumentation.LogWriter: void action(Context,int,boolean)>    ---->    #action(int, boolean, Pair[])
Inconsistency (Non-Documentation):<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomSizePreset(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\androidx\core\app\NotificationCompat.java
<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomSizePreset(int)>
/**
 * Set the custom size preset for the display of this notification out of the available
 * presets found in {@link NotificationCompat.WearableExtender}, e.g.
 * {@link #SIZE_LARGE}.
 * <p>Some custom size presets are only applicable for custom display notifications created
 * using {@link NotificationCompat.WearableExtender#setDisplayIntent}. Check the
 * documentation for the preset in question. See also
 * {@link #setCustomContentHeight} and {@link #getCustomSizePreset}.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.WearableExtender: WearableExtender setCustomSizePreset(int)>    ---->
<android.telephony.CellIdentityLte: int getMcc()>
/**
 * @return 3-digit Mobile Country Code, 0..999, Integer.MAX_VALUE if unknown
 * @deprecated Use {@link #getMccString} instead.
 */
====>[PUBLIC]<android.telephony.CellIdentityLte: int getMcc()>    ---->    #getMccString
<android.app.DownloadManager.Request: Request setShowRunningNotification(boolean)>
/**
 * Control whether a system notification is posted by the download manager while this
 * download is running. If enabled, the download manager posts notifications about downloads
 * through the system {@link android.app.NotificationManager}. By default, a notification is
 * shown.
 *
 * If set to false, this requires the permission
 * android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.
 *
 * @param show whether the download manager should show a notification for this download.
 * @return this object
 * @deprecated use {@link #setNotificationVisibility(int)}
 */
====>[PUBLIC]<android.app.DownloadManager.Request: Request setShowRunningNotification(boolean)>    ---->    #setNotificationVisibility(int)
<android.app.AlertDialog: void setButton3(CharSequence,Message)>
/**
 * @deprecated Use {@link #setButton(int, CharSequence, Message)} with
 * {@link DialogInterface#BUTTON_NEUTRAL}.
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton3(CharSequence,Message)>    ---->    #setButton(int, CharSequence, Message)
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
/**
 * Sets whether the horizontal progress bar in the title should be indeterminate (the circular
 * is always indeterminate).
 * <p>
 * In order for the progress bar to be shown, the feature must be requested
 * via {@link #requestWindowFeature(int)}.
 *
 * @param indeterminate Whether the horizontal progress bar should be indeterminate.
 * @deprecated No longer supported starting in API 21.
 */
====>[PUBLIC]<android.app.Activity: void setProgressBarIndeterminate(boolean)>    ---->
<androidx.core.widget.EdgeEffectCompat: void setSize(int,int)>
/**
 * Set the size of this edge effect in pixels.
 *
 * @param width Effect width in pixels
 * @param height Effect height in pixels
 *
 * @deprecated Use {@link EdgeEffect#setSize(int, int)} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: void setSize(int,int)>    ---->    EdgeEffect#setSize(int, int)
<androidx.core.widget.EdgeEffectCompat: boolean onPull(float,float)>
/**
 * A view should call this when content is pulled away from an edge by the user.
 * This will update the state of the current visual effect and its associated animation.
 * The host view should always {@link android.view.View#invalidate()} if this method
 * returns true and draw the results accordingly.
 *
 * Views using {@link EdgeEffect} should favor {@link EdgeEffect#onPull(float, float)} when
 * the displacement of the pull point is known.
 *
 * @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to
 * 1.f (full length of the view) or negative values to express change
 * back toward the edge reached to initiate the effect.
 * @param displacement The displacement from the starting side of the effect of the point
 * initiating the pull. In the case of touch this is the finger position.
 * Values may be from 0-1.
 * @return true if the host view should call invalidate, false if it should not.
 *
 * @deprecated Use {@link EdgeEffect#onPull(float)} directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: boolean onPull(float,float)>    ---->    EdgeEffect#onPull(float)
Inconsistency (Non-Documentation):<android.view.SurfaceControl: void mergeToGlobalTransaction(Transaction)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\view\SurfaceControl.java
<android.view.SurfaceControl: void mergeToGlobalTransaction(Transaction)>
/**
 * Merge the supplied transaction in to the deprecated "global" transaction.
 * This clears the supplied transaction in an identical fashion to {@link Transaction#merge}.
 * <p>
 * This is a utility for interop with legacy-code and will go away with the Global Transaction.
 */
====>[PUBLIC]<android.view.SurfaceControl: void mergeToGlobalTransaction(Transaction)>    ---->
<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplicationIndex(int)>
/**
 * @deprecated Please use {@link UiccProfile#getApplicationIndex(int)} instead.
 */
====>[PUBLIC]<com.android.internal.telephony.uicc.UiccCard: UiccCardApplication getApplicationIndex(int)>    ---->    UiccProfile#getApplicationIndex(int)
<java.sql.ResultSet: InputStream getUnicodeStream(String)>
/**
 * Retrieves the value of the designated column in the current row
 * of this <code>ResultSet</code> object as a stream of two-byte
 * Unicode characters. The first byte is the high byte; the second
 * byte is the low byte.
 *
 * The value can then be read in chunks from the
 * stream. This method is particularly
 * suitable for retrieving large <code>LONGVARCHAR</code> values.
 * The JDBC technology-enabled driver will
 * do any necessary conversion from the database format into Unicode.
 *
 * <P><B>Note:</B> All the data in the returned stream must be
 * read prior to getting the value of any other column. The next
 * call to a getter method implicitly closes the stream.
 * Also, a stream may return <code>0</code> when the method
 * <code>InputStream.available</code> is called, whether there
 * is data available or not.
 *
 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
 * @return a Java input stream that delivers the database column value
 * as a stream of two-byte Unicode characters.
 * If the value is SQL <code>NULL</code>, the value returned
 * is <code>null</code>.
 * @exception SQLException if the columnLabel is not valid;
 * if a database access error occurs or this method is
 * called on a closed result set
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated use <code>getCharacterStream</code> instead
 */
====>[PUBLIC]<java.sql.ResultSet: InputStream getUnicodeStream(String)>    ---->    <code>getCharacterStream</code>
<android.widget.CalendarView: int getWeekNumberColor()>
/**
 * Gets the color for the week numbers.
 *
 * @return The week number color.
 *
 * @attr ref android.R.styleable#CalendarView_weekNumberColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getWeekNumberColor()>    ---->
<android.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>
/**
 * Restores the saved state for all Fragments. The given Fragment list are Fragment
 * instances retained across configuration changes.
 *
 * @see #retainNonConfig()
 *
 * @deprecated use {@link #restoreAllState(Parcelable, FragmentManagerNonConfig)}
 */
====>[PUBLIC]<android.app.FragmentController: void restoreAllState(Parcelable,List<Fragment>)>    ---->    #restoreAllState(Parcelable, FragmentManagerNonConfig)
<android.service.euicc.EuiccProfileInfo: void <init>(String,UiccAccessRule[],String)>
/**
 * @hide
 * @deprecated - Do not use.
 */
====>[HIDDEN]<android.service.euicc.EuiccProfileInfo: void <init>(String,UiccAccessRule[],String)>    ---->
<androidx.slice.Slice.Builder: Builder addTimestamp(long,String,String)>
/**
 * Add a timestamp to the slice being constructed
 * @param subType Optional template-specific type information
 * @see {@link SliceItem#getSubType()}
 * @deprecated TO BE REMOVED
 */
====>[PUBLIC]<androidx.slice.Slice.Builder: Builder addTimestamp(long,String,String)>    ---->
<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getViewPosition()>
/**
 * @deprecated use {@link #getViewLayoutPosition()} or {@link #getViewAdapterPosition()}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.LayoutParams: int getViewPosition()>    ---->    #getViewLayoutPosition()
<android.telephony.TelephonyManager: String getDeviceId(int)>
/**
 * Returns the unique device ID of a subscription, for example, the IMEI for
 * GSM and the MEID for CDMA phones. Return null if device ID is not available.
 *
 * <p>Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
 * or that the calling app has carrier privileges (see {@link #hasCarrierPrivileges}).
 *
 * @param slotIndex of which deviceID is returned
 *
 * @deprecated Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns
 * MEID for CDMA.
 */
====>[PUBLIC]<android.telephony.TelephonyManager: String getDeviceId(int)>    ---->    getImei
Inconsistency (Non-Documentation):<android.app.ContextImpl: void clearWallpaper()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\ContextImpl.java
<android.app.ContextImpl: void clearWallpaper()>

====>[PUBLIC]<android.app.ContextImpl: void clearWallpaper()>    ---->
<androidx.core.view.LayoutInflaterCompat: void setFactory(LayoutInflater,LayoutInflaterFactory)>
/**
 * Attach a custom Factory interface for creating views while using
 * this LayoutInflater. This must not be null, and can only be set once;
 * after setting, you can not change the factory.
 *
 * @see LayoutInflater#setFactory(android.view.LayoutInflater.Factory)
 *
 * @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} instead to set
 * and {@link LayoutInflater#getFactory2()} to get the factory.
 */
====>[PUBLIC]<androidx.core.view.LayoutInflaterCompat: void setFactory(LayoutInflater,LayoutInflaterFactory)>    ---->    #setFactory2(LayoutInflater, LayoutInflater.Factory2)
<android.net.http.SslCertificate: String getValidNotAfter()>
/**
 * @return Not-after date from the certificate validity period in
 * ISO 8601 format or "" if none has been set
 *
 * @deprecated Use {@link #getValidNotAfterDate()}
 */
====>[PUBLIC]<android.net.http.SslCertificate: String getValidNotAfter()>    ---->    #getValidNotAfterDate()
<android.telecom.InCallService: Phone getPhone()>
/**
 * Obtain the {@code Phone} associated with this {@code InCallService}.
 *
 * @return The {@code Phone} object associated with this {@code InCallService}, or {@code null}
 * if the {@code InCallService} is not in a state where it has an associated
 * {@code Phone}.
 * @hide
 * @deprecated Use direct methods on InCallService instead of {@link Phone}.
 */
====>[HIDDEN]<android.telecom.InCallService: Phone getPhone()>    ---->    direct methods on InCallService
<android.app.FragmentManager: FragmentTransaction openTransaction()>
/**
 * @hide -- remove once prebuilts are in.
 */
====>[HIDDEN]<android.app.FragmentManager: FragmentTransaction openTransaction()>    ---->
<android.text.format.DateUtils: String getDayOfWeekString(int,int)>
/**
 * Return a string for the day of the week.
 * @param dayOfWeek One of {@link Calendar#SUNDAY Calendar.SUNDAY},
 * {@link Calendar#MONDAY Calendar.MONDAY}, etc.
 * @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_SHORT},
 * {@link #LENGTH_MEDIUM}, or {@link #LENGTH_SHORTEST}.
 * Note that in most languages, {@link #LENGTH_SHORT}
 * will return the same as {@link #LENGTH_MEDIUM}.
 * Undefined lengths will return {@link #LENGTH_MEDIUM}
 * but may return something different in the future.
 * @throws IndexOutOfBoundsException if the dayOfWeek is out of bounds.
 * @deprecated Use {@link java.text.SimpleDateFormat} instead.
 */
====>[PUBLIC]<android.text.format.DateUtils: String getDayOfWeekString(int,int)>    ---->    java.text.SimpleDateFormat
<android.widget.TimePicker: void setCurrentMinute(Integer)>
/**
 * Sets the currently selected minute.
 *
 * @param currentMinute the minute to set, in the range (0-59)
 * @deprecated Use {@link #setMinute(int)}
 */
====>[PUBLIC]<android.widget.TimePicker: void setCurrentMinute(Integer)>    ---->    #setMinute(int)
<android.widget.RemoteViews: void setRemoteAdapter(int,int,Intent)>
/**
 * Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}.
 *
 * @param appWidgetId The id of the app widget which contains the specified view. (This
 * parameter is ignored in this deprecated method)
 * @param viewId The id of the {@link AdapterView}
 * @param intent The intent of the service which will be
 * providing data to the RemoteViewsAdapter
 * @deprecated This method has been deprecated. See
 * {@link android.widget.RemoteViews#setRemoteAdapter(int, Intent)}
 */
====>[PUBLIC]<android.widget.RemoteViews: void setRemoteAdapter(int,int,Intent)>    ---->    android.widget.RemoteViews#setRemoteAdapter(int, Intent)
<android.app.SearchManager: void onDismiss(DialogInterface)>
/**
 * @deprecated This method is an obsolete internal implementation detail. Do not use.
 */
====>[PUBLIC]<android.app.SearchManager: void onDismiss(DialogInterface)>    ---->
<android.text.method.TimeKeyListener: void <init>()>
/**
 * @deprecated Use {@link #TimeKeyListener(Locale)} instead.
 */
====>[PUBLIC]<android.text.method.TimeKeyListener: void <init>()>    ---->    #TimeKeyListener(Locale)
<android.security.KeyChain: boolean isBoundKeyAlgorithm(String)>
/**
 * Returns {@code true} if the current device's {@code KeyChain} binds any
 * {@code PrivateKey} of the given {@code algorithm} to the device once
 * imported or generated. This can be used to tell if there is special
 * hardware support that can be used to bind keys to the device in a way
 * that makes it non-exportable.
 *
 * @deprecated Whether the key is bound to the secure hardware is known only
 * once the key has been imported. To find out, use:
 * <pre>{@code
 * PrivateKey key = ...; // private key from KeyChain
 *
 * KeyFactory keyFactory =
 * KeyFactory.getInstance(key.getAlgorithm(), "AndroidKeyStore");
 * KeyInfo keyInfo = keyFactory.getKeySpec(key, KeyInfo.class);
 * if (keyInfo.isInsideSecureHardware()) {
 * // The key is bound to the secure hardware of this Android
 * }}</pre>
 */
====>[PUBLIC]<android.security.KeyChain: boolean isBoundKeyAlgorithm(String)>    ---->
<android.util.proto.ProtoOutputStream: long startObject(long)>
/**
 * Start a child object.
 *
 * Returns a token which should be passed to endObject.  Calls to endObject must be
 * nested properly.
 *
 * @deprecated Use #start() instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: long startObject(long)>    ---->    #start()
<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(IBinder,int)>
/**
 * Close/hide the input method's soft input area, so the user no longer
 * sees it or can interact with it.  This can only be called
 * from the currently active input method, as validated by the given token.
 *
 * @param token Supplies the identifying token given to an input method
 * when it was started, which allows it to perform this operation on
 * itself.
 * @param flags Provides additional operating flags.  Currently may be
 * 0 or have the {@link #HIDE_IMPLICIT_ONLY},
 * {@link #HIDE_NOT_ALWAYS} bit set.
 * @deprecated Use {@link InputMethodService#requestHideSelf(int)} instead. This method was
 * intended for IME developers who should be accessing APIs through the service. APIs in this
 * class are intended for app developers interacting with the IME.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(IBinder,int)>    ---->    InputMethodService#requestHideSelf(int)
<android.app.slice.SliceProvider: Slice onBindSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceProvider: Slice onBindSlice(Uri,List<SliceSpec>)>    ---->
<androidx.core.widget.ScrollerCompat: boolean isOverScrolled()>
/**
 * Returns whether the current Scroller is currently returning to a valid position.
 * Valid bounds were provided by the
 * {@link #fling(int, int, int, int, int, int, int, int, int, int)} method.
 *
 * One should check this value before calling
 * {@link #startScroll(int, int, int, int)} as the interpolation currently in progress
 * to restore a valid position will then be stopped. The caller has to take into account
 * the fact that the started scroll will start from an overscrolled position.
 *
 * @return true when the current position is overscrolled and in the process of
 * interpolating back to a valid value.
 *
 * @deprecated Use {@link OverScroller#isOverScrolled()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: boolean isOverScrolled()>    ---->    OverScroller#isOverScrolled()
<android.view.View: void buildDrawingCache(boolean)>
/**
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p>
 *
 * <p>If you call {@link #buildDrawingCache()} manually without calling
 * {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you
 * should cleanup the cache by calling {@link #destroyDrawingCache()} afterwards.</p>
 *
 * <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,
 * this method will create a bitmap of the same size as this view. Because this bitmap
 * will be drawn scaled by the parent ViewGroup, the result on screen might show
 * scaling artifacts. To avoid such artifacts, you should call this method by setting
 * the auto scaling to true. Doing so, however, will generate a bitmap of a different
 * size than the view. This implies that your application must be able to handle this
 * size.</p>
 *
 * <p>You should avoid calling this method when hardware acceleration is enabled. If
 * you do not need the drawing cache bitmap, calling this method will increase memory
 * usage and cause the view to be rendered in software once, thus negatively impacting
 * performance.</p>
 *
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 *
 * @deprecated The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache
 * layers are largely unnecessary and can easily result in a net loss in performance due to the
 * cost of creating and updating the layer. In the rare cases where caching layers are useful,
 * such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware
 * rendering. For software-rendered snapshots of a small part of the View hierarchy or
 * individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or
 * {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these
 * software-rendered usages are discouraged and have compatibility issues with hardware-only
 * rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}
 * bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback
 * reports or unit testing the {@link PixelCopy} API is recommended.
 */
====>[PUBLIC]<android.view.View: void buildDrawingCache(boolean)>    ---->    #setLayerType(int, Paint)
<com.android.internal.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>
/**
 * @see RecyclerView#scrollToPosition(int)
 * @deprecated Use {@link Action#jumpTo(int)}.
 */
====>[PUBLIC]<com.android.internal.widget.RecyclerView.SmoothScroller: void instantScrollToPosition(int)>    ---->    Action#jumpTo(int)
<android.app.slice.SliceManager: Slice bindSlice(Uri,List<SliceSpec>)>
/**
 * @deprecated TO BE REMOVED
 * @removed
 */
====>[HIDDEN]<android.app.slice.SliceManager: Slice bindSlice(Uri,List<SliceSpec>)>    ---->
<android.webkit.CookieSyncManager: void syncFromRamToFlash()>
/**
 * @deprecated Use {@link CookieManager#flush} instead.
 */
====>[PUBLIC]<android.webkit.CookieSyncManager: void syncFromRamToFlash()>    ---->    CookieManager#flush
<androidx.leanback.widget.GuidedAction.BuilderBase: B iconResourceId(int,Context)>
/**
 * Sets the action's icon drawable by retrieving it by resource ID from the specified
 * context. This is a convenience function that simply looks up the drawable and calls
 * {@link #icon(Drawable)}.
 * @param iconResourceId The resource ID for the icon associated with this action.
 * @param context The context whose resource ID should be retrieved.
 * @deprecated Use {@link #icon(int)}.
 */
====>[PUBLIC]<androidx.leanback.widget.GuidedAction.BuilderBase: B iconResourceId(int,Context)>    ---->    #icon(int)
<android.provider.Contacts.Intents: void <init>()>
/**
 * @deprecated see {@link android.provider.ContactsContract}
 */
====>[PUBLIC]<android.provider.Contacts.Intents: void <init>()>    ---->    android.provider.ContactsContract
<android.view.KeyCharacterMap: boolean getKeyData(int,KeyData)>
/**
 * Get the character conversion data for a given key code.
 *
 * @param keyCode The keyCode to query.
 * @param results A {@link KeyData} instance that will be filled with the results.
 * @return True if the key was mapped.  If the key was not mapped, results is not modified.
 *
 * @deprecated instead use {@link KeyCharacterMap#getDisplayLabel(int)},
 * {@link KeyCharacterMap#getNumber(int)} or {@link KeyCharacterMap#get(int, int)}.
 */
====>[PUBLIC]<android.view.KeyCharacterMap: boolean getKeyData(int,KeyData)>    ---->    KeyCharacterMap#getDisplayLabel(int)
<android.renderscript.RenderScriptGL: void pause()>
/**
 * @deprecated in API 16
 * Temporarly halt calls to the root rendering script.
 */
====>[PUBLIC]<android.renderscript.RenderScriptGL: void pause()>    ---->
<androidx.navigation.NavOptions.Builder: Builder setClearTask(boolean)>
/**
 * Clear the entire task before launching this target. If you are launching as a
 * {@link #setLaunchDocument(boolean) document}, this will clear the document task.
 * Otherwise it will clear the current task.
 *
 * @param clearTask
 * @return
 * @deprecated Use {@link #setPopUpTo(int, boolean)} with the
 * {@link NavDestination#getId() id} of the
 * {@link androidx.navigation.NavController#getGraph() NavController's graph}
 * and set inclusive to true.
 */
====>[PUBLIC]<androidx.navigation.NavOptions.Builder: Builder setClearTask(boolean)>    ---->    #setPopUpTo(int, boolean)
<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>
/**
 * Sets an output of the ScriptGroup. This specifies an
 * Allocation to be used for the kernels that require an output
 * Allocation visible after the ScriptGroup is executed.
 *
 * @deprecated Use return value of {@link #execute(Object...)} instead.
 *
 * @param s The ID of the kernel where the allocation should be
 * connected.
 * @param a The allocation to connect.
 */
====>[PUBLIC]<android.renderscript.ScriptGroup: void setOutput(KernelID,Allocation)>    ---->    #execute(Object...)
<androidx.core.widget.EdgeEffectCompat: void <init>(Context)>
/**
 * Construct a new EdgeEffect themed using the given context.
 *
 * <p>Note: On platform versions that do not support EdgeEffect, all operations
 * on the newly constructed object will be mocked/no-ops.</p>
 *
 * @param context Context to use for theming the effect
 *
 * @deprecated Use {@link EdgeEffect} constructor directly.
 */
====>[PUBLIC]<androidx.core.widget.EdgeEffectCompat: void <init>(Context)>    ---->    EdgeEffect
<android.webkit.WebSettings: void setDatabasePath(String)>
/**
 * Sets the path to where database storage API databases should be saved.
 * In order for the database storage API to function correctly, this method
 * must be called with a path to which the application can write. This
 * method should only be called once: repeated calls are ignored.
 *
 * @param databasePath a path to the directory where databases should be
 * saved.
 * @deprecated Database paths are managed by the implementation and calling this method
 * will have no effect.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setDatabasePath(String)>    ---->
<androidx.room.Room: void <init>()>
/**
 * @deprecated This type should not be instantiated as it contains only static methods.
 */
====>[PUBLIC]<androidx.room.Room: void <init>()>    ---->
<com.android.internal.logging.MetricsLogger: void count(Context,String,int)>
/**
 * Add an integer value to the monotonically increasing counter with the given name.
 * @deprecated use {@link #count(String, int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void count(Context,String,int)>    ---->    #count(String, int)
<com.android.ims.ImsManager: void updateImsServiceConfig(Context,int,boolean)>
/**
 * Sync carrier config and user settings with ImsConfig.
 *
 * @param context for the manager object
 * @param phoneId phone id
 * @param force update
 *
 * @deprecated Doesn't support MSIM devices. Use {@link #updateImsServiceConfig(boolean)}
 * instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: void updateImsServiceConfig(Context,int,boolean)>    ---->    #updateImsServiceConfig(boolean)
<java.util.Date: void setSeconds(int)>
/**
 * Sets the seconds of this <tt>Date</tt> to the specified value.
 * This <tt>Date</tt> object is modified so that it represents a
 * point in time within the specified second of the minute, with
 * the year, month, date, hour, and minute the same as before, as
 * interpreted in the local time zone.
 *
 * @param   seconds   the seconds value.
 * @see     java.util.Calendar
 * @deprecated As of JDK version 1.1,
 * replaced by <code>Calendar.set(Calendar.SECOND, int seconds)</code>.
 */
====>[PUBLIC]<java.util.Date: void setSeconds(int)>    ---->
<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()>
/**
 * get the state of the url intercept, enabled or disabled
 *
 * @return return if it is disabled
 *
 * @hide
 * @deprecated This class was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()>    ---->
<android.webkit.PluginList: void pluginClicked(Context,int)>
/**
 * Dispatches the click event to the appropriate plugin.
 *
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.PluginList: void pluginClicked(Context,int)>    ---->
<java.util.logging.LogManager: void removePropertyChangeListener(PropertyChangeListener)>
/**
 * Removes an event listener for property change events.
 * If the same listener instance has been added to the listener table
 * through multiple invocations of <CODE>addPropertyChangeListener</CODE>,
 * then an equivalent number of
 * <CODE>removePropertyChangeListener</CODE> invocations are required to remove
 * all instances of that listener from the listener table.
 * <P>
 * Returns silently if the given listener is not found.
 *
 * <p><b>WARNING:</b> This method is omitted from this class in all subset
 * Profiles of Java SE that do not include the {@code java.beans} package.
 * </p>
 *
 * @param l  event listener (can be null)
 * @exception  SecurityException  if a security manager exists and if
 * the caller does not have LoggingPermission("control").
 * @deprecated The dependency on {@code PropertyChangeListener} creates a
 * significant impediment to future modularization of the Java
 * platform. This method will be removed in a future release.
 * The global {@code LogManager} can detect changes to the
 * logging configuration by overridding the {@link
 * #readConfiguration readConfiguration} method.
 */
====>[PUBLIC]<java.util.logging.LogManager: void removePropertyChangeListener(PropertyChangeListener)>    ---->    #readConfiguration readConfiguration} method. /@Deprecatedpublic void removePropertyChangeListener(PropertyChangeListener l) throws SecurityException {    checkPermission();    if (l != null) {        PropertyChangeListener listener = l;        synchronized (listenerMap) {            Integer value = listenerMap.get(listener);            if (value != null) {                // remove from map if registration count is 1, otherwise                // just decrement its count                int i = value.intValue();                if (i == 1) {                    listenerMap.remove(listener);                } else {                    assert i > 1;                    listenerMap.put(listener, i - 1)
<android.webkit.Plugin: void setDescription(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setDescription(String)>    ---->
<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)>
/**
 * @removed
 * @deprecated Replaced with getRepeatCount to match other APIs.
 */
====>[HIDDEN]<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)>    ---->
<android.os.PowerManager: boolean isScreenOn()>
/**
 * Returns true if the device is in an interactive state.
 * <p>
 * For historical reasons, the name of this method refers to the power state of
 * the screen but it actually describes the overall interactive state of
 * the device.  This method has been replaced by {@link #isInteractive}.
 * </p><p>
 * The value returned by this method only indicates whether the device is
 * in an interactive state which may have nothing to do with the screen being
 * on or off.  To determine the actual state of the screen,
 * use {@link android.view.Display#getState}.
 * </p>
 *
 * @return True if the device is in an interactive state.
 *
 * @deprecated Use {@link #isInteractive} instead.
 */
====>[PUBLIC]<android.os.PowerManager: boolean isScreenOn()>    ---->    #isInteractive
<android.widget.AutoCompleteTextView: OnItemClickListener getItemClickListener()>
/**
 * <p>Returns the listener that is notified whenever the user clicks an item
 * in the drop down list.</p>
 *
 * @return the item click listener
 *
 * @deprecated Use {@link #getOnItemClickListener()} intead
 */
====>[PUBLIC]<android.widget.AutoCompleteTextView: OnItemClickListener getItemClickListener()>    ---->    #getOnItemClickListener()
<android.app.KeyguardManager: KeyguardLock newKeyguardLock(String)>
/**
 * @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}
 * and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * instead; this allows you to seamlessly hide the keyguard as your application
 * moves in and out of the foreground and does not require that any special
 * permissions be requested.
 *
 * Enables you to lock or unlock the keyboard. Get an instance of this class by
 * calling {@link android.content.Context#getSystemService(java.lang.String) Context.getSystemService()}.
 * This class is wrapped by {@link android.app.KeyguardManager KeyguardManager}.
 * @param tag A tag that informally identifies who you are (for debugging who
 * is disabling he keyguard).
 *
 * @return A {@link KeyguardLock} handle to use to disable and reenable the
 * keyguard.
 */
====>[PUBLIC]<android.app.KeyguardManager: KeyguardLock newKeyguardLock(String)>    ---->    LayoutParams#FLAG_DISMISS_KEYGUARD
<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>
/**
 * @deprecated
 * Use {@link #getItemOffsets(Rect, View, RecyclerView, State)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void getItemOffsets(Rect,int,RecyclerView)>    ---->    #getItemOffsets(Rect, View, RecyclerView, State)
<android.media.AudioManager: int getVibrateSetting(int)>
/**
 * Returns whether the user's vibrate setting for a vibrate type.
 * <p>
 * This shouldn't be needed by most clients that want to vibrate, instead
 * see {@link #shouldVibrate(int)}.
 *
 * @param vibrateType The type of vibrate. One of
 * {@link #VIBRATE_TYPE_NOTIFICATION} or
 * {@link #VIBRATE_TYPE_RINGER}.
 * @return The vibrate setting, one of {@link #VIBRATE_SETTING_ON},
 * {@link #VIBRATE_SETTING_OFF}, or
 * {@link #VIBRATE_SETTING_ONLY_SILENT}.
 * @see #setVibrateSetting(int, int)
 * @see #shouldVibrate(int)
 * @deprecated Applications should maintain their own vibrate policy based on
 * current ringer mode that can be queried via {@link #getRingerMode()}.
 */
====>[PUBLIC]<android.media.AudioManager: int getVibrateSetting(int)>    ---->    #getRingerMode()
<java.sql.Date: int getHours()>
/**
 * @deprecated This method is deprecated and should not be used because SQL Date
 * values do not have a time component.
 *
 * @exception java.lang.IllegalArgumentException if this method is invoked
 * @see #setHours
 */
====>[PUBLIC]<java.sql.Date: int getHours()>    ---->    #setHours
<android.util.proto.ProtoOutputStream: void writeUInt32(long,int)>
/**
 * Write a single proto "uint32" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeUInt32(long,int)>    ---->    #write
<android.content.pm.PackageManager: void replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>
/**
 * @deprecated This is a protected API that should not have been available
 * to third party applications.  It is the platform's responsibility for
 * assigning preferred activities and this cannot be directly modified.
 *
 * Replaces an existing preferred activity mapping to the system, and if that were not present
 * adds a new preferred activity.  This will be used
 * to automatically select the given activity component when
 * {@link Context#startActivity(Intent) Context.startActivity()} finds
 * multiple matching activities and also matches the given filter.
 *
 * @param filter The set of intents under which this activity will be
 * made preferred.
 * @param match The IntentFilter match category that this preference
 * applies to.
 * @param set The set of activities that the user was picking from when
 * this preference was made.
 * @param activity The component name of the activity that is to be
 * preferred.
 * @hide
 */
====>[HIDDEN]<android.content.pm.PackageManager: void replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName)>    ---->    Context#startActivity(Intent) Context.startActivity()
<androidx.leanback.app.BackgroundManager: void setDimLayer(Drawable)>
/**
 * Sets the drawable used as a dim layer.
 * @deprecated No longer support dim layer.
 */
====>[PUBLIC]<androidx.leanback.app.BackgroundManager: void setDimLayer(Drawable)>    ---->
<androidx.core.view.ViewConfigurationCompat: boolean hasPermanentMenuKey(ViewConfiguration)>
/**
 * Report if the device has a permanent menu key available to the user, in a backwards
 * compatible way.
 *
 * @deprecated Use {@link ViewConfiguration#hasPermanentMenuKey()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewConfigurationCompat: boolean hasPermanentMenuKey(ViewConfiguration)>    ---->    ViewConfiguration#hasPermanentMenuKey()
<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform(Context)>
/**
 * Returns whether turning off ims is allowed by platform.
 * The platform property may override the carrier config.
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isTurnOffImsAllowedByPlatform()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform(Context)>    ---->    #isTurnOffImsAllowedByPlatform()
<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFinishedGoingToSleep(int)>
/**
 * Called when the device has finished going to sleep.
 * @param why either {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_ADMIN},
 * {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_USER}, or
 * {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_TIMEOUT}.
 *
 * @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.
 */
====>[PUBLIC]<com.android.keyguard.KeyguardUpdateMonitorCallback: void onFinishedGoingToSleep(int)>    ---->    com.android.systemui.keyguard.WakefulnessLifecycle
<android.media.AudioManager: boolean registerRemoteController(RemoteController)>
/**
 * Registers a {@link RemoteController} instance for it to receive media
 * metadata updates and playback state information from applications using
 * {@link RemoteControlClient}, and control their playback.
 * <p>
 * Registration requires the {@link RemoteController.OnClientUpdateListener} listener to be
 * one of the enabled notification listeners (see
 * {@link android.service.notification.NotificationListenerService}).
 *
 * @param rctlr the object to register.
 * @return true if the {@link RemoteController} was successfully registered,
 * false if an error occurred, due to an internal system error, or
 * insufficient permissions.
 * @deprecated Use
 * {@link MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)}
 * and {@link MediaController} instead.
 */
====>[PUBLIC]<android.media.AudioManager: boolean registerRemoteController(RemoteController)>    ---->    MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)
<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser(Context)>
/**
 * Returns the user configuration of WFC roaming setting
 *
 * @deprecated Does not support MSIM devices. Please use
 * {@link #isWfcRoamingEnabledByUser()} instead.
 */
====>[PUBLIC]<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser(Context)>    ---->    #isWfcRoamingEnabledByUser()
<android.provider.ContactsContract.Contacts: void markAsContacted(ContentResolver,long)>
/**
 * Mark a contact as having been contacted. Updates two fields:
 * {@link #TIMES_CONTACTED} and {@link #LAST_TIME_CONTACTED}. The
 * TIMES_CONTACTED field is incremented by 1 and the LAST_TIME_CONTACTED
 * field is populated with the current system time.
 *
 * @param resolver the ContentResolver to use
 * @param contactId the person who was contacted
 *
 * @deprecated The class DataUsageStatUpdater of the Android support library should
 * be used instead.
 */
====>[PUBLIC]<android.provider.ContactsContract.Contacts: void markAsContacted(ContentResolver,long)>    ---->    d
<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(View)>
/**
 * Return true if the current input method wants to watch the location
 * of the input editor's cursor in its window.
 *
 * @deprecated Use {@link InputConnection#requestCursorUpdates(int)} instead.
 */
====>[PUBLIC]<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(View)>    ---->    InputConnection#requestCursorUpdates(int)
<android.graphics.drawable.NinePatchDrawable: void <init>(Bitmap,byte[],Rect,String)>
/**
 * Create drawable from raw nine-patch data, not dealing with density.
 *
 * @deprecated Use {@link #NinePatchDrawable(Resources, Bitmap, byte[], Rect, String)}
 * to ensure that the drawable has correctly set its target density.
 */
====>[PUBLIC]<android.graphics.drawable.NinePatchDrawable: void <init>(Bitmap,byte[],Rect,String)>    ---->    #NinePatchDrawable(Resources, Bitmap, byte[], Rect, String)
Inconsistency (Non-Documentation):<com.android.internal.policy.PhoneWindow: void setTitleColor(int)> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\internal\policy\PhoneWindow.java
<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>

====>[PUBLIC]<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>    ---->
<android.content.pm.ShortcutInfo.Builder: Builder setLongLabelResId(int)>
/**
 * @hide We don't support resource strings for dynamic shortcuts for now.  (But unit tests
 * use it.)
 */
====>[HIDDEN]<android.content.pm.ShortcutInfo.Builder: Builder setLongLabelResId(int)>    ---->
Inconsistency (Non-Documentation):<com.android.ex.photo.util.Exif: int getOrientation(byte[])> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\com\android\ex\photo\util\Exif.java
<com.android.ex.photo.util.Exif: int getOrientation(byte[])>

====>[PUBLIC]<com.android.ex.photo.util.Exif: int getOrientation(byte[])>    ---->
<android.test.TouchUtils: int dragViewTo(ActivityInstrumentationTestCase,View,int,int,int)>
/**
 * Simulate touching a view and dragging it to a specified location.
 *
 * @param test The test case that is being run
 * @param v The view that should be dragged
 * @param gravity Which part of the view to use for the initial down event. A combination of
 * (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)
 * @param toX Final location of the view after dragging
 * @param toY Final location of the view after dragging
 *
 * @return distance in pixels covered by the drag
 *
 * @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of
 * {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for
 * configuring the Activity under test
 */
====>[PUBLIC]<android.test.TouchUtils: int dragViewTo(ActivityInstrumentationTestCase,View,int,int,int)>    ---->    android.test.ActivityInstrumentationTestCase2
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(Context,Intent)>
/**
 * Called after the user has succeeded at entering their device or profile challenge password,
 * as a result of receiving {@link #ACTION_PASSWORD_SUCCEEDED}.  This will
 * only be received the first time they succeed after having previously
 * failed.
 * @param context The running context as per {@link #onReceive}.
 * @param intent The received intent as per {@link #onReceive}.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}, use
 * {@link #onPasswordSucceeded(Context, Intent, UserHandle)} instead.
 */
====>[PUBLIC]<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(Context,Intent)>    ---->    #onPasswordSucceeded(Context, Intent, UserHandle)
<android.test.ActivityInstrumentationTestCase2: void <init>(String,Class<T>)>
/**
 * Creates an {@link ActivityInstrumentationTestCase2}.
 *
 * @param pkg ignored - no longer in use.
 * @param activityClass The activity to test. This must be a class in the instrumentation
 * targetPackage specified in the AndroidManifest.xml
 *
 * @deprecated use {@link #ActivityInstrumentationTestCase2(Class)} instead
 */
====>[PUBLIC]<android.test.ActivityInstrumentationTestCase2: void <init>(String,Class<T>)>    ---->    #ActivityInstrumentationTestCase2(Class)
<androidx.cursoradapter.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>
/**
 * Constructor the enables auto-requery.
 *
 * @deprecated This option is discouraged, as it results in Cursor queries
 * being performed on the application's UI thread and thus can cause poor
 * responsiveness or even Application Not Responding errors.  As an alternative,
 * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.
 */
====>[PUBLIC]<androidx.cursoradapter.widget.SimpleCursorAdapter: void <init>(Context,int,Cursor,String[],int[])>    ---->    android.app.LoaderManager
<android.content.res.Resources: Drawable getDrawable(int)>
/**
 * Return a drawable object associated with a particular resource ID.
 * Various types of objects will be returned depending on the underlying
 * resource -- for example, a solid color, PNG image, scalable image, etc.
 * The Drawable API hides these implementation details.
 *
 * <p class="note"><strong>Note:</strong> Prior to
 * {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, this function
 * would not correctly retrieve the final configuration density when
 * the resource ID passed here is an alias to another Drawable resource.
 * This means that if the density configuration of the alias resource
 * is different than the actual resource, the density of the returned
 * Drawable would be incorrect, resulting in bad scaling. To work
 * around this, you can instead manually resolve the aliased reference
 * by using {@link #getValue(int, TypedValue, boolean)} and passing
 * {@code true} for {@code resolveRefs}. The resulting
 * {@link TypedValue#resourceId} value may be passed to this method.</p>
 *
 * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
 * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
 * or {@link #getDrawable(int, Theme)} passing the desired theme.</p>
 *
 * @param id The desired resource identifier, as generated by the aapt
 * tool. This integer encodes the package, type, and resource
 * entry. The value 0 is an invalid identifier.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 * not exist.
 * @see #getDrawable(int, Theme)
 * @deprecated Use {@link #getDrawable(int, Theme)} instead.
 */
====>[PUBLIC]<android.content.res.Resources: Drawable getDrawable(int)>    ---->    #getDrawable(int, Theme)
<androidx.legacy.app.FragmentStatePagerAdapter: Parcelable saveState()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentStatePagerAdapter: Parcelable saveState()>    ---->    androidx.fragment.app.FragmentStatePagerAdapter
<java.lang.Thread: int countStackFrames()>
/**
 * Counts the number of stack frames in this thread. The thread must
 * be suspended.
 *
 * @return     the number of stack frames in this thread.
 * @exception  IllegalThreadStateException  if this thread is not
 * suspended.
 * @deprecated The definition of this call depends on {@link #suspend},
 * which is deprecated.  Further, the results of this call
 * were never well-defined.
 */
====>[PUBLIC]<java.lang.Thread: int countStackFrames()>    ---->    #suspend
<androidx.core.widget.ScrollerCompat: boolean isFinished()>
/**
 * Returns whether the scroller has finished scrolling.
 *
 * @return True if the scroller has finished scrolling, false otherwise.
 *
 * @deprecated Use {@link OverScroller#isFinished()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: boolean isFinished()>    ---->    OverScroller#isFinished()
<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(ComponentName,String)>
/**
 * @hide
 * @deprecated Use #ACTION_SET_PROFILE_OWNER
 * Sets the given component as an active admin and registers the package as the profile
 * owner for this user. The package must already be installed and there shouldn't be
 * an existing profile owner registered for this user. Also, this method must be called
 * before the user setup has been completed.
 * <p>
 * This method can only be called by system apps that hold MANAGE_USERS permission and
 * MANAGE_DEVICE_ADMINS permission.
 * @param admin The component to register as an active admin and profile owner.
 * @param ownerName The user-visible name of the entity that is managing this user.
 * @return whether the admin was successfully registered as the profile owner.
 * @throws IllegalArgumentException if packageName is null, the package isn't installed, or
 * the user has already been set up.
 */
====>[HIDDEN]<android.app.admin.DevicePolicyManager: boolean setActiveProfileOwner(ComponentName,String)>    ---->
<android.widget.CalendarView: void setWeekNumberColor(int)>
/**
 * Sets the color for the week numbers.
 *
 * @param color The week number color.
 *
 * @attr ref android.R.styleable#CalendarView_weekNumberColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: void setWeekNumberColor(int)>    ---->
<android.app.AlertDialog: void setButton2(CharSequence,OnClickListener)>
/**
 * Set a listener to be invoked when button 2 of the dialog is pressed.
 * @param text The text to display in button 2.
 * @param listener The {@link DialogInterface.OnClickListener} to use.
 * @deprecated Use
 * {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}
 * with {@link DialogInterface#BUTTON_NEGATIVE}
 */
====>[PUBLIC]<android.app.AlertDialog: void setButton2(CharSequence,OnClickListener)>    ---->    #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)
<androidx.appcompat.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>
/**
 * Sets the Dialog to use the inverse background, regardless of what the
 * contents is.
 *
 * @param useInverseBackground Whether to use the inverse background
 * @return This Builder object to allow for chaining of calls to set methods
 * @deprecated This flag is only used for pre-Material themes. Instead,
 * specify the window background using on the alert dialog
 * theme.
 */
====>[PUBLIC]<androidx.appcompat.app.AlertDialog.Builder: Builder setInverseBackgroundForced(boolean)>    ---->    d for pre-Material themes.
<com.android.settingslib.drawer.TileUtils: List<DashboardCategory> getCategories(Context,Map<Pair<String, String>, Tile>)>
/**
 * Build a list of DashboardCategory. Each category must be defined in manifest.
 * eg: .Settings$DeviceSettings
 * @deprecated
 */
====>[PUBLIC]<com.android.settingslib.drawer.TileUtils: List<DashboardCategory> getCategories(Context,Map<Pair<String, String>, Tile>)>    ---->
<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
/**
 * Returns the status of the message on the SIM (read, unread, sent, unsent).
 *
 * @return the status of the message on the SIM.  These are:
 * SmsManager.STATUS_ON_SIM_FREE
 * SmsManager.STATUS_ON_SIM_READ
 * SmsManager.STATUS_ON_SIM_UNREAD
 * SmsManager.STATUS_ON_SIM_SEND
 * SmsManager.STATUS_ON_SIM_UNSENT
 * @deprecated Use android.telephony.SmsMessage and getStatusOnIcc instead.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage: int getStatusOnSim()>    ---->    android.telephony.SmsMessage and getStatusOnIcc
<java.net.MulticastSocket: void setTTL(byte)>
/**
 * Set the default time-to-live for multicast packets sent out
 * on this {@code MulticastSocket} in order to control the
 * scope of the multicasts.
 *
 * <p>The ttl is an <b>unsigned</b> 8-bit quantity, and so <B>must</B> be
 * in the range {@code 0 <= ttl <= 0xFF }.
 *
 * @param ttl the time-to-live
 * @exception IOException if an I/O exception occurs
 * while setting the default time-to-live value
 * @deprecated use the setTimeToLive method instead, which uses
 * <b>int</b> instead of <b>byte</b> as the type for ttl.
 * @see #getTTL()
 */
====>[PUBLIC]<java.net.MulticastSocket: void setTTL(byte)>    ---->    the setTimeToLive method
<androidx.leanback.widget.BaseGridView: void setItemMargin(int)>
/**
 * Sets the spacing in pixels between two child items.
 * @deprecated use {@link #setItemSpacing(int)}
 */
====>[PUBLIC]<androidx.leanback.widget.BaseGridView: void setItemMargin(int)>    ---->    #setItemSpacing(int)
<android.renderscript.Mesh.TriangleMeshBuilder: void <init>(RenderScript,int,int)>
/**
 * @deprecated in API 16
 * @param rs Context to which the mesh will belong.
 * @param vtxSize specifies whether the vertex is a float2 or
 * float3
 * @param flags bitfield that is a combination of COLOR, NORMAL,
 * and TEXTURE_0 that specifies what vertex data
 * channels are present in the mesh
 */
====>[PUBLIC]<android.renderscript.Mesh.TriangleMeshBuilder: void <init>(RenderScript,int,int)>    ---->
<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(Uri)>
/**
 * Special variant of init(), which accepts a Uri for obtaining {@link RawContactsEntity} from
 * {@link ContentResolver} with {@link Contacts#_ID}.
 * <code>
 * String selection = Data.CONTACT_ID + "=?";
 * String[] selectionArgs = new String[] {contactId};
 * Cursor cursor = mContentResolver.query(
 * contentUriForRawContactsEntity, null, selection, selectionArgs, null)
 * </code>
 *
 * You can call this method or a variant of this method just once. In other words, you cannot
 * reuse this object.
 *
 * @deprecated Use {@link #init(Uri, String[], String, String[], String, Uri)} if you really
 * need to change the default Uri.
 */
====>[PUBLIC]<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(Uri)>    ---->    #init(Uri, String[], String, String[], String, Uri)
<androidx.fragment.app.FragmentController: void dispatchReallyStop()>
/**
 * @deprecated This functionality has been rolled into {@link #dispatchStop()}.
 */
====>[PUBLIC]<androidx.fragment.app.FragmentController: void dispatchReallyStop()>    ---->    #dispatchStop()
<androidx.core.app.NotificationCompat.Builder: Notification getNotification()>
/**
 * @deprecated Use {@link #build()} instead.
 */
====>[PUBLIC]<androidx.core.app.NotificationCompat.Builder: Notification getNotification()>    ---->    #build()
<androidx.core.widget.ScrollerCompat: int getFinalX()>
/**
 * @return The final X position for the scroll in progress, if known.
 *
 * @deprecated Use {@link OverScroller#getFinalX()} directly.
 */
====>[PUBLIC]<androidx.core.widget.ScrollerCompat: int getFinalX()>    ---->    OverScroller#getFinalX()
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
/**
 * Gets the color for the dates in a not focused month.
 *
 * @return A not focused month date color.
 *
 * @attr ref android.R.styleable#CalendarView_unfocusedMonthDateColor
 * @deprecated No longer used by Material-style CalendarView.
 */
====>[PUBLIC]<android.widget.CalendarView: int getUnfocusedMonthDateColor()>    ---->
<android.graphics.Canvas: boolean clipRegion(Region,Op)>
/**
 * Modify the current clip with the specified region. Note that unlike
 * clipRect() and clipPath() which transform their arguments by the
 * current matrix, clipRegion() assumes its argument is already in the
 * coordinate system of the current layer's bitmap, and so not
 * transformation is performed.
 *
 * @param region The region to operate on the current clip, based on op
 * @param op How the clip is modified
 * @return true if the resulting is non-empty
 *
 * @removed
 * @deprecated Unlike all other clip calls this API does not respect the
 * current matrix. Use {@link #clipRect(Rect)} as an alternative.
 */
====>[HIDDEN]<android.graphics.Canvas: boolean clipRegion(Region,Op)>    ---->    #clipRect(Rect)
<android.webkit.WebSettings: String getDatabasePath()>
/**
 * Gets the path to where database storage API databases are saved.
 *
 * @return the String path to the database storage API databases
 * @see #setDatabasePath
 * @deprecated Database paths are managed by the implementation this method is obsolete.
 */
====>[PUBLIC]<android.webkit.WebSettings: String getDatabasePath()>    ---->
<java.sql.Time: int getMonth()>
/**
 * @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>
 * values do not have a month component.
 *
 * @exception java.lang.IllegalArgumentException if this
 * method is invoked
 * @see #setMonth
 */
====>[PUBLIC]<java.sql.Time: int getMonth()>    ---->
<androidx.core.view.ViewCompat: float getRotationX(View)>
/**
 * @deprecated Use {@link View#getRotationX()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getRotationX(View)>    ---->    View#getRotationX()
<android.os.FileUtils: void copyFileOrThrow(File,File)>
/**
 * @deprecated use {@link #copy(File, File)} instead.
 */
====>[PUBLIC]<android.os.FileUtils: void copyFileOrThrow(File,File)>    ---->    #copy(File, File)
<androidx.core.view.ViewCompat: float getScaleY(View)>
/**
 * @deprecated Use {@link View#getScaleY()} directly.
 */
====>[PUBLIC]<androidx.core.view.ViewCompat: float getScaleY(View)>    ---->    View#getScaleY()
<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>
/**
 * Sets the priority of the Render thread. Unlike the other settings, this
 * one only needs to be called once per process. The default value is
 * {@link RenderPriority#NORMAL}.
 *
 * @param priority the priority
 * @deprecated It is not recommended to adjust thread priorities, and this will
 * not be supported in future versions.
 */
====>[PUBLIC]<android.webkit.WebSettings: void setRenderPriority(RenderPriority)>    ---->
Inconsistency (Non-Documentation):<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()> | C:\Users\Shane Li\AppData\Local\Android\Sdk\sources\android-28\\android\app\Notification.java
<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()>
/**
 * Get a hint that this notification's background should not be clipped if possible,
 * and should instead be resized to fully display on the screen, retaining the aspect
 * ratio of the image. This can be useful for images like barcodes or qr codes.
 * @return {@code true} if it's ok if the background is clipped on the screen, false
 * otherwise. The default value is {@code false} if this was never set.
 */
====>[PUBLIC]<android.app.Notification.WearableExtender: boolean getHintAvoidBackgroundClipping()>    ---->
<android.webkit.Plugin: void setName(String)>
/**
 * @hide
 * @deprecated This interface was intended to be used by Gears. Since Gears was
 * deprecated, so is this class.
 */
====>[HIDDEN]<android.webkit.Plugin: void setName(String)>    ---->
<android.database.Cursor: void deactivate()>
/**
 * Deactivates the Cursor, making all calls on it fail until {@link #requery} is called.
 * Inactive Cursors use fewer resources than active Cursors.
 * Calling {@link #requery} will make the cursor active again.
 * @deprecated Since {@link #requery()} is deprecated, so too is this.
 */
====>[PUBLIC]<android.database.Cursor: void deactivate()>    ---->
<android.content.pm.PackageParser: Package parseMonolithicPackage(File,int)>
/**
 * Parse the given APK file, treating it as as a single monolithic package.
 * <p>
 * Note that this <em>does not</em> perform signature verification; that
 * must be done separately in {@link #collectCertificates(Package, int)}.
 *
 * @deprecated external callers should move to
 * {@link #parsePackage(File, int)}. Eventually this method will
 * be marked private.
 */
====>[PUBLIC]<android.content.pm.PackageParser: Package parseMonolithicPackage(File,int)>    ---->    #parsePackage(File, int)
<androidx.core.net.TrafficStatsCompat: void untagSocket(Socket)>
/**
 * Remove any statistics parameters from the given {@link Socket}.
 *
 * @deprecated Use {@link TrafficStats#untagSocket(Socket)} directly.
 */
====>[PUBLIC]<androidx.core.net.TrafficStatsCompat: void untagSocket(Socket)>    ---->    TrafficStats#untagSocket(Socket)
<androidx.leanback.widget.SearchBar: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>
/**
 * Sets the speech recognition callback.
 *
 * @deprecated Launching voice recognition activity is no longer supported. App should declare
 * android.permission.RECORD_AUDIO in AndroidManifest file. See details in
 * {@link androidx.leanback.app.SearchSupportFragment}.
 */
====>[PUBLIC]<androidx.leanback.widget.SearchBar: void setSpeechRecognitionCallback(SpeechRecognitionCallback)>    ---->    androidx.leanback.app.SearchSupportFragment
<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()>
/**
 * Get subject match (deprecated)
 * @return the subject match string
 * @deprecated in favor of altSubjectMatch
 */
====>[PUBLIC]<android.net.wifi.WifiEnterpriseConfig: String getSubjectMatch()>    ---->    altSubjectMatch
<android.media.AudioManager: void unregisterRemoteControlClient(RemoteControlClient)>
/**
 * Unregisters the remote control client that was providing information to display on the
 * remote controls.
 * @param rcClient The remote control client to unregister.
 * @see #registerRemoteControlClient(RemoteControlClient)
 * @deprecated Use {@link MediaSession} instead.
 */
====>[PUBLIC]<android.media.AudioManager: void unregisterRemoteControlClient(RemoteControlClient)>    ---->    MediaSession
<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String)>
/**
 * Converts a CharSequence of the comma-separated form "Andy, Bob,
 * Charles, David" that is too wide to fit into the specified width
 * into one like "Andy, Bob, 2 more".
 *
 * @param text the text to truncate
 * @param p the Paint with which to measure the text
 * @param avail the horizontal width available for the text (in pixels)
 * @param oneMore the string for "1 more" in the current locale
 * @param more the string for "%d more" in the current locale
 *
 * @deprecated Do not use. This is not internationalized, and has known issues
 * with right-to-left text, languages that have more than one plural form, languages
 * that use a different character as a comma-like separator, etc.
 * Use {@link #listEllipsize} instead.
 */
====>[PUBLIC]<android.text.TextUtils: CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String)>    ---->    #listEllipsize
<android.telecom.TelecomManager: void clearAccounts()>
/**
 * Remove all Accounts that belong to the calling package from the system.
 * @deprecated Use {@link #clearPhoneAccounts()} instead.
 * @hide
 */
====>[HIDDEN]<android.telecom.TelecomManager: void clearAccounts()>    ---->    #clearPhoneAccounts()
<android.graphics.BitmapFactory.Options: void requestCancelDecode()>
/**
 * @deprecated As of {@link android.os.Build.VERSION_CODES#N}, this
 * will not affect the decode, though it will still set mCancel.
 *
 * In {@link android.os.Build.VERSION_CODES#M} and below, if this can
 * be called from another thread while this options object is inside
 * a decode... call. Calling this will notify the decoder that it
 * should cancel its operation. This is not guaranteed to cancel the
 * decode, but if it does, the decoder... operation will return null,
 * or if inJustDecodeBounds is true, will set outWidth/outHeight
 * to -1
 */
====>[PUBLIC]<android.graphics.BitmapFactory.Options: void requestCancelDecode()>    ---->
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
/**
 * Called when the last reference to the object was released by
 * a call to {@link #releaseReferenceFromContainer()}.
 *
 * @deprecated Do not use.
 */
====>[PUBLIC]<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>    ---->
<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>
/**
 * @deprecated
 * Override {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)}
 */
====>[PUBLIC]<androidx.recyclerview.widget.RecyclerView.ItemDecoration: void onDraw(Canvas,RecyclerView)>    ---->    #onDraw(Canvas, RecyclerView, RecyclerView.State)
<android.telephony.gsm.SmsMessage.SubmitPdu: String toString()>
/**
 * @deprecated Use android.telephony.SmsMessage.
 */
====>[PUBLIC]<android.telephony.gsm.SmsMessage.SubmitPdu: String toString()>    ---->
<android.os.Debug: void resetGlobalClassInitCount()>
/**
 * Clears the count of classes initialized.
 * @see #getGlobalClassInitCount()
 *
 * @deprecated Accurate counting is a burden on the runtime and may be removed.
 */
====>[PUBLIC]<android.os.Debug: void resetGlobalClassInitCount()>    ---->
<android.util.proto.ProtoOutputStream: void writeBool(long,boolean)>
/**
 * Write a single proto "bool" type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeBool(long,boolean)>    ---->    #write
<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)>
/**
 * Return the {@link MediaCodecInfo} object for the codec at
 * the given {@code index} in the regular list.
 *
 * @deprecated Use {@link #getCodecInfos} instead.
 *
 * @see #REGULAR_CODECS
 */
====>[PUBLIC]<android.media.MediaCodecList: MediaCodecInfo getCodecInfoAt(int)>    ---->    #getCodecInfos
<android.content.Context: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>
/**
 * <p>Version of {@link #sendStickyBroadcast} that allows you to
 * receive data back from the broadcast.  This is accomplished by
 * supplying your own BroadcastReceiver when calling, which will be
 * treated as a final receiver at the end of the broadcast -- its
 * {@link BroadcastReceiver#onReceive} method will be called with
 * the result values collected from the other receivers.  The broadcast will
 * be serialized in the same way as calling
 * {@link #sendOrderedBroadcast(Intent, String)}.
 *
 * <p>Like {@link #sendBroadcast(Intent)}, this method is
 * asynchronous; it will return before
 * resultReceiver.onReceive() is called.  Note that the sticky data
 * stored is only the data you initially supply to the broadcast, not
 * the result of any changes made by the receivers.
 *
 * <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.
 *
 * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone
 * can access them), no protection (anyone can modify them), and many other problems.
 * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>
 * has changed, with another mechanism for apps to retrieve the current value whenever
 * desired.
 *
 * @param intent The Intent to broadcast; all receivers matching this
 * Intent will receive the broadcast.
 * @param resultReceiver Your own BroadcastReceiver to treat as the final
 * receiver of the broadcast.
 * @param scheduler A custom Handler with which to schedule the
 * resultReceiver callback; if null it will be
 * scheduled in the Context's main thread.
 * @param initialCode An initial value for the result code.  Often
 * Activity.RESULT_OK.
 * @param initialData An initial value for the result data.  Often
 * null.
 * @param initialExtras An initial value for the result extras.  Often
 * null.
 *
 * @see #sendBroadcast(Intent)
 * @see #sendBroadcast(Intent, String)
 * @see #sendOrderedBroadcast(Intent, String)
 * @see #sendStickyBroadcast(Intent)
 * @see android.content.BroadcastReceiver
 * @see #registerReceiver
 * @see android.app.Activity#RESULT_OK
 */
====>[PUBLIC]<android.content.Context: void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)>    ---->    #sendBroadcast(Intent)
<java.sql.ResultSet: BigDecimal getBigDecimal(int,int)>
/**
 * Retrieves the value of the designated column in the current row
 * of this <code>ResultSet</code> object as
 * a <code>java.sql.BigDecimal</code> in the Java programming language.
 *
 * @param columnIndex the first column is 1, the second is 2, ...
 * @param scale the number of digits to the right of the decimal point
 * @return the column value; if the value is SQL <code>NULL</code>, the
 * value returned is <code>null</code>
 * @exception SQLException if the columnIndex is not valid;
 * if a database access error occurs or this method is
 * called on a closed result set
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
 * this method
 * @deprecated Use {@code getBigDecimal(int columnIndex)}
 * or {@code getBigDecimal(String columnLabel)}
 */
====>[PUBLIC]<java.sql.ResultSet: BigDecimal getBigDecimal(int,int)>    ---->
<android.util.proto.ProtoOutputStream: void writeRepeatedEnum(long,int)>
/**
 * Write a single repeated proto enum type field value.
 *
 * @deprecated Use #write instead.
 */
====>[PUBLIC]<android.util.proto.ProtoOutputStream: void writeRepeatedEnum(long,int)>    ---->    #write
<android.view.SurfaceHolder: void setType(int)>
/**
 * Sets the surface's type.
 *
 * @deprecated this is ignored, this value is set automatically when needed.
 */
====>[PUBLIC]<android.view.SurfaceHolder: void setType(int)>    ---->
<android.app.ActionBar: Tab newTab()>
/**
 * Create and return a new {@link Tab}.
 * This tab will not be included in the action bar until it is added.
 *
 * <p>Very often tabs will be used to switch between {@link Fragment}
 * objects.  Here is a typical implementation of such tabs:</p>
 *
 * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentTabs.java
 * complete}
 *
 * @return A new Tab
 *
 * @see #addTab(Tab)
 *
 * @deprecated Action bar navigation modes are deprecated and not supported by inline
 * toolbar action bars. Consider using other
 * <a href="http://developer.android.com/design/patterns/navigation.html">common
 * navigation patterns</a> instead.
 */
====>[PUBLIC]<android.app.ActionBar: Tab newTab()>    ---->
<com.android.internal.logging.MetricsLogger: void hidden(Context,int)>
/**
 * @deprecated use {@link #hidden(int)}
 */
====>[PUBLIC]<com.android.internal.logging.MetricsLogger: void hidden(Context,int)>    ---->    #hidden(int)
<androidx.legacy.app.FragmentTabHost: void onDetachedFromWindow()>
/**
 * @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.
 */
====>[PUBLIC]<androidx.legacy.app.FragmentTabHost: void onDetachedFromWindow()>    ---->    androidx.fragment.app.FragmentTabHost
<android.net.NetworkInfo: int getType()>
/**
 * Reports the type of network to which the
 * info in this {@code NetworkInfo} pertains.
 * @return one of {@link ConnectivityManager#TYPE_MOBILE}, {@link
 * ConnectivityManager#TYPE_WIFI}, {@link ConnectivityManager#TYPE_WIMAX}, {@link
 * ConnectivityManager#TYPE_ETHERNET},  {@link ConnectivityManager#TYPE_BLUETOOTH}, or other
 * types defined by {@link ConnectivityManager}.
 * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}
 * instead with one of the NetworkCapabilities#TRANSPORT_* constants :
 * {@link #getType} and {@link #getTypeName} cannot account for networks using
 * multiple transports. Note that generally apps should not care about transport;
 * {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and
 * {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that
 * apps concerned with meteredness or bandwidth should be looking at, as they
 * offer this information with much better accuracy.
 */
====>[PUBLIC]<android.net.NetworkInfo: int getType()>    ---->    NetworkCapabilities#hasTransport
<androidx.core.app.TaskStackBuilder: Intent getIntent(int)>
/**
 * Get the intent at the specified index.
 * Useful if you need to modify the flags or extras of an intent that was previously added,
 * for example with {@link #addParentStack(Activity)}.
 *
 * @param index Index from 0-getIntentCount()
 * @return the intent at position index
 *
 * @deprecated Renamed to editIntentAt to better reflect intended usage
 */
====>[PUBLIC]<androidx.core.app.TaskStackBuilder: Intent getIntent(int)>    ---->
<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)>
/**
 * @hide
 * Request or lock audio focus.
 * This method is to be used by system components that have registered an
 * {@link android.media.audiopolicy.AudioPolicy} to request audio focus, but also to "lock" it
 * so focus granting is temporarily disabled.
 * @param l see the description of the same parameter in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @param requestAttributes non null {@link AudioAttributes} describing the main reason for
 * requesting audio focus.
 * @param durationHint see the description of the same parameter in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @param flags 0 or a combination of {link #AUDIOFOCUS_FLAG_DELAY_OK},
 * {@link #AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS}, and {@link #AUDIOFOCUS_FLAG_LOCK}.
 * <br>Use 0 when not using any flags for the request, which behaves like
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)}, where either audio
 * focus is granted immediately, or the grant request fails because the system is in a
 * state where focus cannot change (e.g. a phone call).
 * @param ap a registered {@link android.media.audiopolicy.AudioPolicy} instance when locking
 * focus, or null.
 * @return see the description of the same return value in
 * {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)}
 * @throws IllegalArgumentException
 * @deprecated use {@link #requestAudioFocus(AudioFocusRequest, AudioPolicy)}
 */
====>[HIDDEN]<android.media.AudioManager: int requestAudioFocus(OnAudioFocusChangeListener,AudioAttributes,int,int,AudioPolicy)>    ---->    #requestAudioFocus(AudioFocusRequest, AudioPolicy)
<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,int,boolean)>
/**
 * @deprecated TO BE REMOVED.
 */
====>[PUBLIC]<androidx.slice.builders.ListBuilder.RowBuilder: RowBuilder setTitleItem(Icon,int,boolean)>    ---->
