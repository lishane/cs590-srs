{"writePackedDouble": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedDouble", "method": "void writePackedDouble(long,double[])", "replacementComments": "/**\n* Write a list of packed proto \"double\" type field values.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onGetInstantAppResolveInfo": {"dirtyReplacement": "onGetInstantAppResolveInfo(Intent, int[], String,  InstantAppResolutionCallback)", "methodClass": "android.app.InstantAppResolverService", "methodName": "onGetInstantAppResolveInfo", "method": "void onGetInstantAppResolveInfo(int[],String,InstantAppResolutionCallback)", "replacementComments": "/**\n* Called to retrieve resolve info for instant applications immediately.\n*\n* @param digestPrefix The hash prefix of the instant app's domain.\n* @deprecated should implement {@link #onGetInstantAppResolveInfo(Intent, int[], String,\n* InstantAppResolutionCallback)}\n*/\n"}, "iterator": {"dirtyReplacement": "editIntentAt", "methodClass": "androidx.core.app.TaskStackBuilder", "methodName": "iterator", "method": "Iterator<Intent> iterator()", "replacementComments": "/**\n* @deprecated Use editIntentAt instead\n*/\n"}, "getUidUdpTxPackets": {"dirtyReplacement": "getUidTxPackets(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidUdpTxPackets", "method": "long getUidUdpTxPackets(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidTxPackets(int)\n*/\n"}, "writeDouble": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeDouble", "method": "void writeDouble(long,double)", "replacementComments": "/**\n* Write a single proto \"double\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "writeRepeatedObject": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedObject", "method": "void writeRepeatedObject(long,byte[])", "replacementComments": "/**\n* Write an object that has already been flattend.\n*\n* @deprecated Use #write instead.\n*/\n"}, "hasText": {"dirtyReplacement": "hasPrimaryClip()", "methodClass": "android.content.ClipboardManager", "methodName": "hasText", "method": "boolean hasText()", "replacementComments": "/**\n* @deprecated Use {@link #hasPrimaryClip()} instead.\n*/\n"}, "getItemId": {"dirtyReplacement": "androidx.fragment.app.FragmentPagerAdapter", "methodClass": "androidx.legacy.app.FragmentPagerAdapter", "methodName": "getItemId", "method": "long getItemId(int)", "replacementComments": "/**\n* Return a unique identifier for the item at the given position.\n*\n* <p>The default implementation returns the given position.\n* Subclasses should override this method if the positions of items can change.</p>\n*\n* @param position Position within this adapter\n* @return Unique identifier for the item at position\n*\n* @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.\n*/\n"}, "buildDrawingCache": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "buildDrawingCache", "method": "void buildDrawingCache(boolean)", "replacementComments": "/**\n* <p>Forces the drawing cache to be built if the drawing cache is invalid.</p>\n*\n* <p>If you call {@link #buildDrawingCache()} manually without calling\n* {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you\n* should cleanup the cache by calling {@link #destroyDrawingCache()} afterwards.</p>\n*\n* <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,\n* this method will create a bitmap of the same size as this view. Because this bitmap\n* will be drawn scaled by the parent ViewGroup, the result on screen might show\n* scaling artifacts. To avoid such artifacts, you should call this method by setting\n* the auto scaling to true. Doing so, however, will generate a bitmap of a different\n* size than the view. This implies that your application must be able to handle this\n* size.</p>\n*\n* <p>You should avoid calling this method when hardware acceleration is enabled. If\n* you do not need the drawing cache bitmap, calling this method will increase memory\n* usage and cause the view to be rendered in software once, thus negatively impacting\n* performance.</p>\n*\n* @see #getDrawingCache()\n* @see #destroyDrawingCache()\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "getThreadStatsTag": {"dirtyReplacement": "TrafficStats#getThreadStatsTag()", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "getThreadStatsTag", "method": "int getThreadStatsTag()", "replacementComments": "/**\n* Get the active tag used when accounting {@link Socket} traffic originating\n* from the current thread. Only one active tag per thread is supported.\n* {@link #tagSocket(Socket)}.\n*\n* @deprecated Use {@link TrafficStats#getThreadStatsTag()} directly.\n*/\n"}, "getLayerType": {"dirtyReplacement": "View#getLayerType()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getLayerType", "method": "int getLayerType(View)", "replacementComments": "/**\n* Indicates what type of layer is currently associated with this view. By default\n* a view does not have a layer, and the layer type is {@link View#LAYER_TYPE_NONE}.\n* Refer to the documentation of\n* {@link #setLayerType(android.view.View, int, android.graphics.Paint)}\n* for more information on the different types of layers.\n*\n* @param view The view to fetch the layer type from\n* @return {@link View#LAYER_TYPE_NONE}, {@link View#LAYER_TYPE_SOFTWARE} or\n* {@link View#LAYER_TYPE_HARDWARE}\n*\n* @see #setLayerType(android.view.View, int, android.graphics.Paint)\n* @see View#LAYER_TYPE_NONE\n* @see View#LAYER_TYPE_SOFTWARE\n* @see View#LAYER_TYPE_HARDWARE\n*\n* @deprecated Use {@link View#getLayerType()} directly.\n*/\n"}, "setParameter": {"dirtyReplacement": "setParameter(java.security.spec.AlgorithmParameterSpec)  setParameter", "methodClass": "java.security.Signature", "methodName": "setParameter", "method": "void setParameter(String,Object)", "replacementComments": "/**\n* Sets the specified algorithm parameter to the specified value.\n* This method supplies a general-purpose mechanism through\n* which it is possible to set the various parameters of this object.\n* A parameter may be any settable parameter for the algorithm, such as\n* a parameter size, or a source of random bits for signature generation\n* (if appropriate), or an indication of whether or not to perform\n* a specific but optional computation. A uniform algorithm-specific\n* naming scheme for each parameter is desirable but left unspecified\n* at this time.\n*\n* @param param the string identifier of the parameter.\n* @param value the parameter value.\n*\n* @exception InvalidParameterException if {@code param} is an\n* invalid parameter for this signature algorithm engine,\n* the parameter is already set\n* and cannot be set again, a security exception occurs, and so on.\n*\n* @see #getParameter\n*\n* @deprecated Use\n* {@link #setParameter(java.security.spec.AlgorithmParameterSpec)\n* setParameter}.\n*/\n"}, "sendStickyOrderedBroadcastAsUser": {"dirtyReplacement": "sendStickyOrderedBroadcast(Intent,", "methodClass": "android.content.Context", "methodName": "sendStickyOrderedBroadcastAsUser", "method": "void sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)", "replacementComments": "/**\n* <p>Version of\n* {@link #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)}\n* that allows you to specify the\n* user the broadcast will be sent to.  This is not available to applications\n* that are not pre-installed on the system image.\n*\n* <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent to broadcast; all receivers matching this\n* Intent will receive the broadcast.\n* @param user UserHandle to send the intent to.\n* @param resultReceiver Your own BroadcastReceiver to treat as the final\n* receiver of the broadcast.\n* @param scheduler A custom Handler with which to schedule the\n* resultReceiver callback; if null it will be\n* scheduled in the Context's main thread.\n* @param initialCode An initial value for the result code.  Often\n* Activity.RESULT_OK.\n* @param initialData An initial value for the result data.  Often\n* null.\n* @param initialExtras An initial value for the result extras.  Often\n* null.\n*\n* @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)\n*/\n"}, "enableRowScaling": {"dirtyReplacement": "BrowseSupportFragment#enableRowScaling(boolean)", "methodClass": "androidx.leanback.app.RowsSupportFragment", "methodName": "enableRowScaling", "method": "void enableRowScaling(boolean)", "replacementComments": "/**\n* @deprecated use {@link BrowseSupportFragment#enableRowScaling(boolean)} instead.\n*\n* @param enable true to enable row scaling\n*/\n"}, "setUserVisibleHint": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat", "methodName": "setUserVisibleHint", "method": "void setUserVisibleHint(Fragment,boolean)", "replacementComments": "/**\n* Call {@link Fragment#setUserVisibleHint(boolean) setUserVisibleHint(boolean)}\n* if running on an appropriate version of the platform.\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "asRecord": {"dirtyReplacement": "AccessibilityEvent", "methodClass": "androidx.core.view.accessibility.AccessibilityEventCompat", "methodName": "asRecord", "method": "AccessibilityRecordCompat asRecord(AccessibilityEvent)", "replacementComments": "/**\n* Creates an {@link AccessibilityRecordCompat} from an {@link AccessibilityEvent}\n* that can be used to manipulate the event properties defined in\n* {@link android.view.accessibility.AccessibilityRecord}.\n* <p>\n* <strong>Note:</strong> Do not call {@link AccessibilityRecordCompat#recycle()} on the\n* returned {@link AccessibilityRecordCompat}. Call {@link AccessibilityEvent#recycle()}\n* in case you want to recycle the event.\n* </p>\n*\n* @param event The from which to create a record.\n* @return An {@link AccessibilityRecordCompat}.\n*\n* @deprecated Use the {@link AccessibilityEvent} directly as {@link AccessibilityRecord}.\n*/\n"}, "setOverScrollMode": {"dirtyReplacement": "View#setOverScrollMode(int)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setOverScrollMode", "method": "void setOverScrollMode(View,int)", "replacementComments": "/**\n* Set the over-scroll mode for this view. Valid over-scroll modes are\n* {@link #OVER_SCROLL_ALWAYS} (default), {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}\n* (allow over-scrolling only if the view content is larger than the container),\n* or {@link #OVER_SCROLL_NEVER}.\n*\n* Setting the over-scroll mode of a view will have an effect only if the\n* view is capable of scrolling.\n*\n* @param v The View against which to invoke the method.\n* @param overScrollMode The new over-scroll mode for this view.\n* @deprecated Call {@link View#setOverScrollMode(int)} directly. This method will be\n* removed in a future release.\n*/\n"}, "isVolteEnabledByPlatform": {"dirtyReplacement": "isVolteEnabledByPlatform()", "methodClass": "com.android.ims.ImsManager", "methodName": "isVolteEnabledByPlatform", "method": "boolean isVolteEnabledByPlatform(Context)", "replacementComments": "/**\n* Returns a platform configuration for VoLTE which may override the user setting.\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isVolteEnabledByPlatform()} instead.\n*/\n"}, "computeScrollOffset": {"dirtyReplacement": "OverScroller#computeScrollOffset()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "computeScrollOffset", "method": "boolean computeScrollOffset()", "replacementComments": "/**\n* Call this when you want to know the new location.  If it returns true,\n* the animation is not yet finished.  loc will be altered to provide the\n* new location.\n*\n* @deprecated Use {@link OverScroller#computeScrollOffset()} directly.\n*/\n"}, "isNonTtyOrTtyOnVolteEnabled": {"dirtyReplacement": "isNonTtyOrTtyOnVolteEnabled()", "methodClass": "com.android.ims.ImsManager", "methodName": "isNonTtyOrTtyOnVolteEnabled", "method": "boolean isNonTtyOrTtyOnVolteEnabled(Context)", "replacementComments": "/**\n* Indicates whether the call is non-TTY or if TTY - whether TTY on VoLTE is\n* supported.\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isNonTtyOrTtyOnVolteEnabled()} instead.\n*/\n"}, "send": {"dirtyReplacement": "the following code or its equivalent", "methodClass": "java.net.MulticastSocket", "methodName": "send", "method": "void send(DatagramPacket,byte)", "replacementComments": "/**\n* Sends a datagram packet to the destination, with a TTL (time-\n* to-live) other than the default for the socket.  This method\n* need only be used in instances where a particular TTL is desired;\n* otherwise it is preferable to set a TTL once on the socket, and\n* use that default TTL for all packets.  This method does <B>not\n* </B> alter the default TTL for the socket. Its behavior may be\n* affected by {@code setInterface}.\n*\n* <p>If there is a security manager, this method first performs some\n* security checks. First, if {@code p.getAddress().isMulticastAddress()}\n* is true, this method calls the\n* security manager's {@code checkMulticast} method\n* with {@code p.getAddress()} and {@code ttl} as its arguments.\n* If the evaluation of that expression is false,\n* this method instead calls the security manager's\n* {@code checkConnect} method with arguments\n* {@code p.getAddress().getHostAddress()} and\n* {@code p.getPort()}. Each call to a security manager method\n* could result in a SecurityException if the operation is not allowed.\n*\n* @param p is the packet to be sent. The packet should contain\n* the destination multicast ip address and the data to be sent.\n* One does not need to be the member of the group to send\n* packets to a destination multicast address.\n* @param ttl optional time to live for multicast packet.\n* default ttl is 1.\n*\n* @exception IOException is raised if an error occurs i.e\n* error while setting ttl.\n* @exception  SecurityException  if a security manager exists and its\n* {@code checkMulticast} or {@code checkConnect}\n* method doesn't allow the send.\n*\n* @deprecated Use the following code or its equivalent instead:\n* ......\n* int ttl = mcastSocket.getTimeToLive();\n* mcastSocket.setTimeToLive(newttl);\n* mcastSocket.send(p);\n* mcastSocket.setTimeToLive(ttl);\n* ......\n*\n* @see DatagramSocket#send\n* @see DatagramSocket#receive\n* @see SecurityManager#checkMulticast(java.net.InetAddress, byte)\n* @see SecurityManager#checkConnect\n*/\n"}, "getLocalizedOutputStream": {"dirtyReplacement": "java.io.OutputStream", "methodClass": "java.lang.Runtime", "methodName": "getLocalizedOutputStream", "method": "OutputStream getLocalizedOutputStream(OutputStream)", "replacementComments": "/**\n* Creates a localized version of an output stream. This method\n* takes an <code>OutputStream</code> and returns an\n* <code>OutputStream</code> equivalent to the argument in all respects\n* except that it is localized: as Unicode characters are written to\n* the stream, they are automatically converted to the local\n* character set.\n* <p>\n* If the argument is already a localized stream, it may be returned\n* as the result.\n*\n* @deprecated As of JDK&nbsp;1.1, the preferred way to translate a\n* Unicode character stream into a byte stream in the local encoding is via\n* the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and\n* <code>PrintWriter</code> classes.\n*\n* @param      out OutputStream to localize\n* @return     a localized output stream\n* @see        java.io.OutputStream\n* @see        java.io.BufferedWriter#BufferedWriter(java.io.Writer)\n* @see        java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)\n* @see        java.io.PrintWriter#PrintWriter(java.io.OutputStream)\n*/\n"}, "getMessage": {"dirtyReplacement": "getVoicePrompt()", "methodClass": "android.service.voice.VoiceInteractionSession.CompleteVoiceRequest", "methodName": "getMessage", "method": "CharSequence getMessage()", "replacementComments": "/**\n* Return the message informing the user of the completion, as per\n* {@link android.app.VoiceInteractor.CompleteVoiceRequest\n* VoiceInteractor.CompleteVoiceRequest}.\n* @deprecated Prefer {@link #getVoicePrompt()} which allows a separate visual message.\n*/\n"}, "recycle": {"dirtyReplacement": "AccessibilityRecord#recycle()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "recycle", "method": "void recycle()", "replacementComments": "/**\n* Return an instance back to be reused.\n* <p>\n* <strong>Note:</strong> You must not touch the object after calling this\n* function.\n* </p>\n*\n* @throws IllegalStateException If the record is already recycled.\n*\n* @deprecated Use {@link AccessibilityRecord#recycle()} directly.\n*/\n"}, "allowThreadSuspension": {"dirtyReplacement": "suspend", "methodClass": "java.lang.ThreadGroup", "methodName": "allowThreadSuspension", "method": "boolean allowThreadSuspension(boolean)", "replacementComments": "/**\n* Used by VM to control lowmem implicit suspension.\n*\n* @param b boolean to allow or disallow suspension\n* @return true on success\n* @since   JDK1.1\n* @deprecated The definition of this call depends on {@link #suspend},\n* which is deprecated.  Further, the behavior of this call\n* was never specified.\n*/\n"}, "setIntent": {"dirtyReplacement": "addAction(RemoteAction)", "methodClass": "android.view.textclassifier.TextClassification.Builder", "methodName": "setIntent", "method": "Builder setIntent(Intent)", "replacementComments": "/**\n* Sets the intent for the <i>primary</i> action that may be fired to act on the classified\n* text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelled.\n*\n* @deprecated Use {@link #addAction(RemoteAction)} instead.\n*/\n"}, "formatNanpNumber": {"dirtyReplacement": "link #formatNumber(String phoneNumber, String defaultCountryIso)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "formatNanpNumber", "method": "void formatNanpNumber(Editable)", "replacementComments": "/**\n* Formats a phone number in-place using the NANP formatting rules. Numbers will be formatted\n* as:\n*\n* <p><code>\n* xxxxx\n* xxx-xxxx\n* xxx-xxx-xxxx\n* 1-xxx-xxx-xxxx\n* +1-xxx-xxx-xxxx\n* </code></p>\n*\n* @param text the number to be formatted, will be modified with the formatting\n*\n* @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead\n*/\n"}, "getSupportedRefreshRates": {"dirtyReplacement": "getSupportedModes()", "methodClass": "android.view.Display", "methodName": "getSupportedRefreshRates", "method": "float[] getSupportedRefreshRates()", "replacementComments": "/**\n* Get the supported refresh rates of this display in frames per second.\n* <p>\n* This method only returns refresh rates for the display's default modes. For more options, use\n* {@link #getSupportedModes()}.\n*\n* @deprecated use {@link #getSupportedModes()} instead\n*/\n"}, "getNetworkInfo": {"dirtyReplacement": "getAllNetworks", "methodClass": "android.net.ConnectivityManager", "methodName": "getNetworkInfo", "method": "NetworkInfo getNetworkInfo(int)", "replacementComments": "/**\n* Returns connection status information about a particular\n* network type.\n*\n* @param networkType integer specifying which networkType in\n* which you're interested.\n* @return a {@link NetworkInfo} object for the requested\n* network type or {@code null} if the type is not\n* supported by the device. If {@code networkType} is\n* TYPE_VPN and a VPN is active for the calling app,\n* then this method will try to return one of the\n* underlying networks for the VPN or null if the\n* VPN agent didn't specify any.\n*\n* @deprecated This method does not support multiple connected networks\n* of the same type. Use {@link #getAllNetworks} and\n* {@link #getNetworkInfo(android.net.Network)} instead.\n*/\n"}, "isWfcEnabledByPlatform": {"dirtyReplacement": "isWfcEnabledByPlatform()", "methodClass": "com.android.ims.ImsManager", "methodName": "isWfcEnabledByPlatform", "method": "boolean isWfcEnabledByPlatform(Context)", "replacementComments": "/**\n* Returns a platform configuration for WFC which may override the user\n* setting. Note: WFC presumes that VoLTE is enabled (these are\n* configuration settings which must be done correctly).\n*\n* @deprecated Doesn't work for MSIM devices. Use {@link #isWfcEnabledByPlatform()}\n* instead.\n*/\n"}, "setChildrenDrawingOrderEnabled": {"dirtyReplacement": "ViewGroup#setChildrenDrawingOrderEnabled(boolean)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setChildrenDrawingOrderEnabled", "method": "void setChildrenDrawingOrderEnabled(ViewGroup,boolean)", "replacementComments": "/**\n* Tells the ViewGroup whether to draw its children in the order defined by the method\n* {@code ViewGroup.getChildDrawingOrder(int, int)}.\n*\n* @param enabled true if the order of the children when drawing is determined by\n* {@link ViewGroup#getChildDrawingOrder(int, int)}, false otherwise\n*\n* <p>Prior to API 7 this will have no effect.</p>\n*\n* @deprecated Use {@link ViewGroup#setChildrenDrawingOrderEnabled(boolean)} directly.\n*/\n"}, "onPasswordExpiring": {"dirtyReplacement": "onPasswordExpiring(Context, Intent, UserHandle)", "methodClass": "android.app.admin.DeviceAdminReceiver", "methodName": "onPasswordExpiring", "method": "void onPasswordExpiring(Context,Intent)", "replacementComments": "/**\n* Called periodically when the device or profile challenge password is about to expire\n* or has expired.  It will typically be called at these times: on device boot, once per day\n* before the password expires, and at the time when the password expires.\n*\n* <p>If the password is not updated by the user, this method will continue to be called\n* once per day until the password is changed or the device admin disables password expiration.\n*\n* <p>The admin will typically post a notification requesting the user to change their password\n* in response to this call. The actual password expiration time can be obtained by calling\n* {@link DevicePolicyManager#getPasswordExpiration(ComponentName) }\n*\n* <p>The admin should be sure to take down any notifications it posted in response to this call\n* when it receives {@link DeviceAdminReceiver#onPasswordChanged(Context, Intent) }.\n*\n* @param context The running context as per {@link #onReceive}.\n* @param intent The received intent as per {@link #onReceive}.\n*\n* @deprecated From {@link android.os.Build.VERSION_CODES#O}, use\n* {@link #onPasswordExpiring(Context, Intent, UserHandle)} instead.\n*/\n"}, "setButton3": {"dirtyReplacement": "setButton(int, CharSequence, Message)", "methodClass": "android.app.AlertDialog", "methodName": "setButton3", "method": "void setButton3(CharSequence,Message)", "replacementComments": "/**\n* @deprecated Use {@link #setButton(int, CharSequence, Message)} with\n* {@link DialogInterface#BUTTON_NEUTRAL}.\n*/\n"}, "setExpandedViewHolder": {"dirtyReplacement": "expandAction(GuidedAction, boolean)", "methodClass": "androidx.leanback.widget.GuidedActionsStylist", "methodName": "setExpandedViewHolder", "method": "void setExpandedViewHolder(ViewHolder)", "replacementComments": "/**\n* Expands or collapse the sub actions list view with transition animation\n* @param avh When not null, fill sub actions list of this ViewHolder into sub actions list and\n* hide the other items in main list.  When null, collapse the sub actions list.\n* @deprecated use {@link #expandAction(GuidedAction, boolean)} and\n* {@link #collapseAction(boolean)}\n*/\n"}, "getContainerId": {"dirtyReplacement": "findContainer(int)", "methodClass": "com.android.setupwizardlib.TemplateLayout", "methodName": "getContainerId", "method": "int getContainerId()", "replacementComments": "/**\n* @return ID of the default container for this layout. This will be used to find the container\n* ViewGroup, which all children views of this layout will be placed in.\n* @deprecated Override {@link #findContainer(int)} instead.\n*/\n"}, "setDefaults": {"dirtyReplacement": "NotificationChannel#enableVibration(boolean)", "methodClass": "android.app.Notification.Builder", "methodName": "setDefaults", "method": "Builder setDefaults(int)", "replacementComments": "/**\n* Set which notification properties will be inherited from system defaults.\n* <p>\n* The value should be one or more of the following fields combined with\n* bitwise-or:\n* {@link #DEFAULT_SOUND}, {@link #DEFAULT_VIBRATE}, {@link #DEFAULT_LIGHTS}.\n* <p>\n* For all default values, use {@link #DEFAULT_ALL}.\n*\n* @deprecated use {@link NotificationChannel#enableVibration(boolean)} and\n* {@link NotificationChannel#enableLights(boolean)} and\n* {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.\n*/\n"}, "combineMeasuredStates": {"dirtyReplacement": "View#combineMeasuredStates(int, int)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "combineMeasuredStates", "method": "int combineMeasuredStates(int,int)", "replacementComments": "/**\n* Merge two states as returned by {@link #getMeasuredState(View)}.\n* @param curState The current state as returned from a view or the result\n* of combining multiple views.\n* @param newState The new view state to combine.\n* @return Returns a new integer reflecting the combination of the two\n* states.\n*\n* @deprecated Use {@link View#combineMeasuredStates(int, int)} directly.\n*/\n"}, "removeAction": {"dirtyReplacement": "removeAction(AccessibilityAction)", "methodClass": "android.view.accessibility.AccessibilityNodeInfo", "methodName": "removeAction", "method": "void removeAction(int)", "replacementComments": "/**\n* Removes an action that can be performed on the node. If the action was\n* not already added to the node, calling this method has no effect.\n* <p>\n* <strong>Note:</strong> Cannot be called from an\n* {@link android.accessibilityservice.AccessibilityService}.\n* This class is made immutable before being delivered to an AccessibilityService.\n* </p>\n*\n* @param action The action to be removed.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n* @deprecated Use {@link #removeAction(AccessibilityAction)}\n*/\n"}, "addPropertyChangeListener": {"dirtyReplacement": "readConfiguration readConfiguration} method. /@Deprecatedpublic void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException {    PropertyChangeListener listener = Objects.requireNonNull(l);    checkPermission();    synchronized (listenerMap) {        // increment the registration count if already registered        Integer value = listenerMap.get(listener);        value = (value == null) ? 1 : (value + 1);        listenerMap.put(listener, value)", "methodClass": "java.util.logging.LogManager: void addPropertyChangeListener(PropertyChangeListener)>    ---->    #readConfiguration readConfiguration} method. /@Deprecatedpublic void addPropertyChangeListener(PropertyChangeListener l) throws SecurityException {    PropertyChangeListener listener = Objects.requireNonNull(l);    checkPermission();    synchronized (listenerMap) {        // increment the registration count if already registered        Integer value = listenerMap.get(listener);        value = (value == null) ? 1 ", "methodName": "addPropertyChangeListener", "method": "void addPropertyChangeListener(PropertyChangeListener)", "replacementComments": "/**\n* Adds an event listener to be invoked when the logging\n* properties are re-read. Adding multiple instances of\n* the same event Listener results in multiple entries\n* in the property event listener table.\n*\n* <p><b>WARNING:</b> This method is omitted from this class in all subset\n* Profiles of Java SE that do not include the {@code java.beans} package.\n* </p>\n*\n* @param l  event listener\n* @exception  SecurityException  if a security manager exists and if\n* the caller does not have LoggingPermission(\"control\").\n* @exception NullPointerException if the PropertyChangeListener is null.\n* @deprecated The dependency on {@code PropertyChangeListener} creates a\n* significant impediment to future modularization of the Java\n* platform. This method will be removed in a future release.\n* The global {@code LogManager} can detect changes to the\n* logging configuration by overridding the {@link\n* #readConfiguration readConfiguration} method.\n*/\n"}, "getInCheck": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "getInCheck", "method": "boolean getInCheck()", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "getMeasuredWidthAndState": {"dirtyReplacement": "View#getMeasuredWidth()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getMeasuredWidthAndState", "method": "int getMeasuredWidthAndState(View)", "replacementComments": "/**\n* Return the full width measurement information for this view as computed\n* by the most recent call to {@link android.view.View#measure(int, int)}.\n* This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n* {@link #MEASURED_STATE_TOO_SMALL}.\n* This should be used during measurement and layout calculations only. Use\n* {@link android.view.View#getWidth()} to see how wide a view is after layout.\n*\n* @return The measured width of this view as a bit mask.\n*\n* @deprecated Use {@link View#getMeasuredWidth()} directly.\n*/\n"}, "isString": {"dirtyReplacement": "getType", "methodClass": "android.database.AbstractWindowedCursor", "methodName": "isString", "method": "boolean isString(int)", "replacementComments": "/**\n* @deprecated Use {@link #getType}\n*/\n"}, "getContextHubHandles": {"dirtyReplacement": "getContextHubs()", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "getContextHubHandles", "method": "int[] getContextHubHandles()", "replacementComments": "/**\n* Get a handle to all the context hubs in the system\n*\n* @return array of context hub handles\n*\n* @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the\n* new APIs.\n*/\n"}, "isOpaque": {"dirtyReplacement": "View#isOpaque()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "isOpaque", "method": "boolean isOpaque(View)", "replacementComments": "/**\n* Indicates whether this View is opaque. An opaque View guarantees that it will\n* draw all the pixels overlapping its bounds using a fully opaque color.\n*\n* @return True if this View is guaranteed to be fully opaque, false otherwise.\n* @deprecated Use {@link View#isOpaque()} directly. This method will be\n* removed in a future release.\n*/\n"}, "loadContactPhoto": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "loadContactPhoto", "method": "Bitmap loadContactPhoto(Context,Uri,int,Options)", "replacementComments": "/**\n* Opens an InputStream for the person's photo and returns the photo as a Bitmap.\n* If the person's photo isn't present returns the placeholderImageResource instead.\n* @param context the Context\n* @param person the person whose photo should be used\n* @param placeholderImageResource the image resource to use if the person doesn't\n* have a photo\n* @param options the decoding options, can be set to null\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "isWfcProvisionedOnDevice": {"dirtyReplacement": "isWfcProvisionedOnDevice()", "methodClass": "com.android.ims.ImsManager", "methodName": "isWfcProvisionedOnDevice", "method": "boolean isWfcProvisionedOnDevice(Context)", "replacementComments": "/**\n* Indicates whether VoWifi is provisioned on device.\n*\n* When CarrierConfig KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL is true, and VoLTE is not\n* provisioned on device, this method returns false.\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isWfcProvisionedOnDevice()} instead.\n*/\n"}, "noteAlarmStart": {"dirtyReplacement": "ActivityManager.noteAlarmStart", "methodClass": "android.app.ActivityManagerNative", "methodName": "noteAlarmStart", "method": "void noteAlarmStart(PendingIntent,int,String)", "replacementComments": "/**\n* @deprecated use ActivityManager.noteAlarmStart instead.\n*/\n"}, "getMinimumFlingVelocity": {"dirtyReplacement": "getScaledMinimumFlingVelocity()", "methodClass": "android.view.ViewConfiguration", "methodName": "getMinimumFlingVelocity", "method": "int getMinimumFlingVelocity()", "replacementComments": "/**\n* @return Minimum velocity to initiate a fling, as measured in dips per second.\n*\n* @deprecated Use {@link #getScaledMinimumFlingVelocity()} instead.\n*/\n"}, "createDragToOpenListener": {"dirtyReplacement": "createDragToOpenListener(ListPopupWindow, View)", "methodClass": "androidx.core.widget.ListPopupWindowCompat", "methodName": "createDragToOpenListener", "method": "OnTouchListener createDragToOpenListener(Object,View)", "replacementComments": "/**\n* On API {@link android.os.Build.VERSION_CODES#KITKAT} and higher, returns\n* an {@link OnTouchListener} that can be added to the source view to\n* implement drag-to-open behavior. Generally, the source view should be the\n* same view that was passed to ListPopupWindow.setAnchorView(View).\n* <p>\n* When the listener is set on a view, touching that view and dragging\n* outside of its bounds will open the popup window. Lifting will select the\n* currently touched list item.\n* <p>\n* Example usage:\n*\n* <pre>\n* ListPopupWindow myPopup = new ListPopupWindow(context);\n* myPopup.setAnchor(myAnchor);\n* OnTouchListener dragListener = myPopup.createDragToOpenListener(myAnchor);\n* myAnchor.setOnTouchListener(dragListener);\n* </pre>\n*\n* @param listPopupWindow the ListPopupWindow against which to invoke the\n* method\n* @param src the view on which the resulting listener will be set\n* @return a touch listener that controls drag-to-open behavior, or {@code null} on\n* unsupported APIs\n*\n* @deprecated Use {@link #createDragToOpenListener(ListPopupWindow, View)} that takes in\n* {@link ListPopupWindow} instead of {@link Object}.\n*/\n"}, "shouldOfferSwitchingToNextInputMethod": {"dirtyReplacement": "InputMethodService#shouldOfferSwitchingToNextInputMethod()", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "shouldOfferSwitchingToNextInputMethod", "method": "boolean shouldOfferSwitchingToNextInputMethod(IBinder)", "replacementComments": "/**\n* Returns true if the current IME needs to offer the users ways to switch to a next input\n* method (e.g. a globe key.).\n* When an IME sets supportsSwitchingToNextInputMethod and this method returns true,\n* the IME has to offer ways to to invoke {@link #switchToNextInputMethod} accordingly.\n* <p> Note that the system determines the most appropriate next input method\n* and subtype in order to provide the consistent user experience in switching\n* between IMEs and subtypes.\n* @param imeToken Supplies the identifying token given to an input method when it was started,\n* which allows it to perform this operation on itself.\n* @deprecated Use {@link InputMethodService#shouldOfferSwitchingToNextInputMethod()}\n* instead. This method was intended for IME developers who should be accessing APIs through\n* the service. APIs in this class are intended for app developers interacting with the IME.\n*/\n"}, "getAlpha": {"dirtyReplacement": "View#getAlpha()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getAlpha", "method": "float getAlpha(View)", "replacementComments": "/**\n* The opacity of the view. This is a value from 0 to 1, where 0 means the view is\n* completely transparent and 1 means the view is completely opaque.\n*\n* <p>By default this is 1.0f.\n* @return The opacity of the view.\n*\n* @deprecated Use {@link View#getAlpha()} directly.\n*/\n"}, "setSize": {"dirtyReplacement": "EdgeEffect#setSize(int, int)", "methodClass": "androidx.core.widget.EdgeEffectCompat", "methodName": "setSize", "method": "void setSize(int,int)", "replacementComments": "/**\n* Set the size of this edge effect in pixels.\n*\n* @param width Effect width in pixels\n* @param height Effect height in pixels\n*\n* @deprecated Use {@link EdgeEffect#setSize(int, int)} directly.\n*/\n"}, "setAnalogForced": {"dirtyReplacement": "setConfigFlag(int, boolean)", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "setAnalogForced", "method": "void setAnalogForced(boolean)", "replacementComments": "/**\n* Forces the analog playback for the supporting radio technology.\n*\n* User may disable digital playback for FM HD Radio or hybrid FM/DAB with\n* this option. This is purely user choice, ie. does not reflect digital-\n* analog handover managed from the HAL implementation side.\n*\n* Some radio technologies may not support this, ie. DAB.\n*\n* @param isForced {@code true} to force analog, {@code false} for a default behaviour.\n* @throws IllegalStateException if the switch is not supported at current\n* configuration.\n* @deprecated Use {@link setConfigFlag(int, boolean)} instead.\n*/\n"}, "canScrollHorizontally": {"dirtyReplacement": "View#canScrollHorizontally(int)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "canScrollHorizontally", "method": "boolean canScrollHorizontally(View,int)", "replacementComments": "/**\n* Check if this view can be scrolled horizontally in a certain direction.\n*\n* @param view The View against which to invoke the method.\n* @param direction Negative to check scrolling left, positive to check scrolling right.\n* @return true if this view can be scrolled in the specified direction, false otherwise.\n*\n* @deprecated Use {@link View#canScrollHorizontally(int)} directly.\n*/\n"}, "collapseActionView": {"dirtyReplacement": "MenuItem#collapseActionView()", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "collapseActionView", "method": "boolean collapseActionView(MenuItem)", "replacementComments": "/**\n* Collapse the action view associated with this menu item. The menu item must have an action\n* view set, as well as the showAsAction flag {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}. If a\n* listener has been set using {@link #setOnActionExpandListener(MenuItem,\n* androidx.core.view.MenuItemCompat.OnActionExpandListener)}\n* it will have its {@link\n* androidx.core.view.MenuItemCompat.OnActionExpandListener#onMenuItemActionCollapse(MenuItem)}\n* method invoked. The listener may return false from this method to prevent collapsing\n* the action view.\n*\n* @return true if the action view was collapsed, false otherwise.\n*\n* @deprecated Use {@link MenuItem#collapseActionView()} directly.\n*/\n"}, "getAuthToken": {"dirtyReplacement": "lback, android.os.Handler)}", "methodClass": "android.accounts.AccountManager", "methodName": "getAuthToken", "method": "AccountManagerFuture<Bundle> getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)", "replacementComments": "/**\n* Gets an auth token of the specified type for a particular account,\n* optionally raising a notification if the user must enter credentials.\n* This method is intended for background tasks and services where the\n* user should not be immediately interrupted with a password prompt.\n*\n* <p>If a previously generated auth token is cached for this account and\n* type, then it is returned.  Otherwise, if a saved password is\n* available, it is sent to the server to generate a new auth token.\n* Otherwise, an {@link Intent} is returned which, when started, will\n* prompt the user for a password.  If the notifyAuthFailure parameter is\n* set, a status bar notification is also created with the same Intent,\n* alerting the user that they need to enter a password at some point.\n*\n* <p>In that case, you may need to wait until the user responds, which\n* could take hours or days or forever.  When the user does respond and\n* supply a new password, the account manager will broadcast the\n* {@link #LOGIN_ACCOUNTS_CHANGED_ACTION} Intent and\n* notify {@link OnAccountsUpdateListener} which applications can\n* use to try again.\n*\n* <p>If notifyAuthFailure is not set, it is the application's\n* responsibility to launch the returned Intent at some point.\n* Either way, the result from this call will not wait for user action.\n*\n* <p>Some authenticators have auth token <em>types</em>, whose value\n* is authenticator-dependent.  Some services use different token types to\n* access different functionality -- for example, Google uses different auth\n* tokens to access Gmail and Google Calendar for the same account.\n*\n* <p>This method may be called from any thread, but the returned\n* {@link AccountManagerFuture} must not be used on the main thread.\n*\n* @param account The account to fetch an auth token for\n* @param authTokenType The auth token type, an authenticator-dependent\n* string token, must not be null\n* @param notifyAuthFailure True to add a notification to prompt the\n* user for a password if necessary, false to leave that to the caller\n* @param callback Callback to invoke when the request completes,\n* null for no callback\n* @param handler {@link Handler} identifying the callback thread,\n* null for the main thread\n* @return An {@link AccountManagerFuture} which resolves to a Bundle with\n* at least the following fields on success:\n* <ul>\n* <li> {@link #KEY_ACCOUNT_NAME} - the name of the account you supplied\n* <li> {@link #KEY_ACCOUNT_TYPE} - the type of the account\n* <li> {@link #KEY_AUTHTOKEN} - the auth token you wanted\n* </ul>\n*\n* (Other authenticator-specific values may be returned.)  If the user\n* must enter credentials, the returned Bundle contains only\n* {@link #KEY_INTENT} with the {@link Intent} needed to launch a prompt.\n*\n* If an error occurred, {@link AccountManagerFuture#getResult()} throws:\n* <ul>\n* <li> {@link AuthenticatorException} if the authenticator failed to respond\n* <li> {@link OperationCanceledException} if the operation is canceled for\n* any reason, incluidng the user canceling a credential request\n* <li> {@link IOException} if the authenticator experienced an I/O problem\n* creating a new auth token, usually because of network trouble\n* </ul>\n* If the account is no longer present on the device, the return value is\n* authenticator-dependent.  The caller should verify the validity of the\n* account before requesting an auth token.\n* @deprecated use {@link #getAuthToken(Account, String, android.os.Bundle,\n* boolean, AccountManagerCallback, android.os.Handler)} instead\n*/\n"}, "getActionMasked": {"dirtyReplacement": "MotionEvent#getAction()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getActionMasked", "method": "int getActionMasked(MotionEvent)", "replacementComments": "/**\n* Call {@link MotionEvent#getAction}, returning only the {@link #ACTION_MASK}\n* portion.\n*\n* @deprecated Call {@link MotionEvent#getAction()} directly. This method will be\n* removed in a future release.\n*/\n"}, "sync": {"dirtyReplacement": "CookieManager#flush", "methodClass": "android.webkit.CookieSyncManager", "methodName": "sync", "method": "void sync()", "replacementComments": "/**\n* sync() forces sync manager to sync now\n* @deprecated Use {@link CookieManager#flush} instead.\n*/\n"}, "setExtraVisibility": {"dirtyReplacement": "setInfoVisibility(int)", "methodClass": "androidx.leanback.widget.BaseCardView", "methodName": "setExtraVisibility", "method": "void setExtraVisibility(int)", "replacementComments": "/**\n* Sets the visibility of the extra region of the card.\n*\n* @param visibility The region visibility to use for the extra region. Must\n* be one of {@link #CARD_REGION_VISIBLE_ALWAYS},\n* {@link #CARD_REGION_VISIBLE_SELECTED}, or\n* {@link #CARD_REGION_VISIBLE_ACTIVATED}.\n* @deprecated Extra view's visibility is controlled by {@link #setInfoVisibility(int)}\n*/\n"}, "setLayerType": {"dirtyReplacement": "View#setLayerType(int, Paint)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setLayerType", "method": "void setLayerType(View,int,Paint)", "replacementComments": "/**\n* <p>Specifies the type of layer backing this view. The layer can be\n* {@link View#LAYER_TYPE_NONE disabled}, {@link View#LAYER_TYPE_SOFTWARE software} or\n* {@link View#LAYER_TYPE_HARDWARE hardware}.</p>\n*\n* <p>A layer is associated with an optional {@link android.graphics.Paint}\n* instance that controls how the layer is composed on screen. The following\n* properties of the paint are taken into account when composing the layer:</p>\n* <ul>\n* <li>{@link android.graphics.Paint#getAlpha() Translucency (alpha)}</li>\n* <li>{@link android.graphics.Paint#getXfermode() Blending mode}</li>\n* <li>{@link android.graphics.Paint#getColorFilter() Color filter}</li>\n* </ul>\n*\n* <p>If this view has an alpha value set to < 1.0 by calling\n* setAlpha(float), the alpha value of the layer's paint is replaced by\n* this view's alpha value. Calling setAlpha(float) is therefore\n* equivalent to setting a hardware layer on this view and providing a paint with\n* the desired alpha value.<p>\n*\n* <p>Refer to the documentation of {@link View#LAYER_TYPE_NONE disabled},\n* {@link View#LAYER_TYPE_SOFTWARE software} and {@link View#LAYER_TYPE_HARDWARE hardware}\n* for more information on when and how to use layers.</p>\n*\n* @param view View to set the layer type for\n* @param layerType The type of layer to use with this view, must be one of\n* {@link View#LAYER_TYPE_NONE}, {@link View#LAYER_TYPE_SOFTWARE} or\n* {@link View#LAYER_TYPE_HARDWARE}\n* @param paint The paint used to compose the layer. This argument is optional\n* and can be null. It is ignored when the layer type is\n* {@link View#LAYER_TYPE_NONE}\n*\n* @deprecated Use {@link View#setLayerType(int, Paint)} directly.\n*/\n"}, "invokeOemRilRequestStrings": {"dirtyReplacement": "that", "methodClass": "com.android.internal.telephony.Phone", "methodName": "invokeOemRilRequestStrings", "method": "void invokeOemRilRequestStrings(String[],Message)", "replacementComments": "/**\n* Invokes RIL_REQUEST_OEM_HOOK_Strings on RIL implementation.\n*\n* @param strings The strings to make available as the request data.\n* @param response <strong>On success</strong>, \"response\" bytes is\n* made available as:\n* (String[])(((AsyncResult)response.obj).result).\n* <strong>On failure</strong>,\n* (((AsyncResult)response.obj).result) == null and\n* (((AsyncResult)response.obj).exception) being an instance of\n* com.android.internal.telephony.gsm.CommandException\n*\n* @see #invokeOemRilRequestStrings(java.lang.String[], android.os.Message)\n* @deprecated OEM needs a vendor-extension hal and their apps should use that instead\n*/\n"}, "isVtEnabledByPlatform": {"dirtyReplacement": "isVtEnabledByPlatform()", "methodClass": "com.android.ims.ImsManager", "methodName": "isVtEnabledByPlatform", "method": "boolean isVtEnabledByPlatform(Context)", "replacementComments": "/**\n* Returns a platform configuration for VT which may override the user setting.\n*\n* Note: VT presumes that VoLTE is enabled (these are configuration settings\n* which must be done correctly).\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isVtEnabledByPlatform()} instead.\n*/\n"}, "notifyHorizontalEdgeReached": {"dirtyReplacement": "OverScroller#notifyHorizontalEdgeReached(int, int, int)", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "notifyHorizontalEdgeReached", "method": "void notifyHorizontalEdgeReached(int,int,int)", "replacementComments": "/**\n* Notify the scroller that we've reached a horizontal boundary.\n* Normally the information to handle this will already be known\n* when the animation is started, such as in a call to one of the\n* fling functions. However there are cases where this cannot be known\n* in advance. This function will transition the current motion and\n* animate from startX to finalX as appropriate.\n*\n* @param startX Starting/current X position\n* @param finalX Desired final X position\n* @param overX Magnitude of overscroll allowed. This should be the maximum\n* desired distance from finalX. Absolute value - must be positive.\n*\n* @deprecated Use {@link OverScroller#notifyHorizontalEdgeReached(int, int, int)} directly.\n*/\n"}, "saveConfiguration": {"dirtyReplacement": "addNetwork(WifiConfiguration)", "methodClass": "android.net.wifi.WifiManager", "methodName": "saveConfiguration", "method": "boolean saveConfiguration()", "replacementComments": "/**\n* Tell the device to persist the current list of configured networks.\n* <p>\n* Note: It is possible for this method to change the network IDs of\n* existing networks. You should assume the network IDs can be different\n* after calling this method.\n*\n* @return {@code false} Will always return true.\n* @deprecated There is no need to call this method -\n* {@link #addNetwork(WifiConfiguration)}, {@link #updateNetwork(WifiConfiguration)}\n* and {@link #removeNetwork(int)} already persist the configurations automatically.\n*/\n"}, "registerForCarrierPrivilegeRulesLoaded": {"dirtyReplacement": "UiccProfile#registerForCarrierPrivilegeRulesLoaded(Handler, int, Object)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "registerForCarrierPrivilegeRulesLoaded", "method": "void registerForCarrierPrivilegeRulesLoaded(Handler,int,Object)", "replacementComments": "/**\n* Notifies handler when carrier privilege rules are loaded.\n* @deprecated Please use\n* {@link UiccProfile#registerForCarrierPrivilegeRulesLoaded(Handler, int, Object)} instead.\n*/\n"}, "startRepeatedObject": {"dirtyReplacement": "start()", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "startRepeatedObject", "method": "long startRepeatedObject(long)", "replacementComments": "/**\n* Start a repeated child object.\n*\n* Returns a token which should be passed to endObject.  Calls to endObject must be\n* nested properly.\n*\n* @deprecated Use #start() instead.\n*/\n"}, "writePackedSFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedSFixed32", "method": "void writePackedSFixed32(long,int[])", "replacementComments": "/**\n* Write a list of packed proto \"sfixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setWfcSetting": {"dirtyReplacement": "setWfcSetting", "methodClass": "com.android.ims.ImsManager", "methodName": "setWfcSetting", "method": "void setWfcSetting(Context,boolean)", "replacementComments": "/**\n* Change persistent WFC enabled setting.\n* @deprecated Does not support MSIM devices. Please use\n* {@link #setWfcSetting} instead.\n*/\n"}, "isChildrenDrawnWithCacheEnabled": {"dirtyReplacement": "View#setLayerType(int, Paint)", "methodClass": "android.view.ViewGroup", "methodName": "isChildrenDrawnWithCacheEnabled", "method": "boolean isChildrenDrawnWithCacheEnabled()", "replacementComments": "/**\n* Indicates whether the ViewGroup is currently drawing its children using\n* their drawing cache.\n*\n* @return true if children should be drawn with their cache, false otherwise\n*\n* @see #setAlwaysDrawnWithCacheEnabled(boolean)\n* @see #setChildrenDrawnWithCacheEnabled(boolean)\n*\n* @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.\n* Child views may no longer be forced to cache their rendering state by their parents.\n* Use {@link View#setLayerType(int, Paint)} on individual Views instead.\n*/\n"}, "writePackedUInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedUInt64", "method": "void writePackedUInt64(long,long[])", "replacementComments": "/**\n* Write a single proto \"uint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "unregisterMediaButtonEventReceiver": {"dirtyReplacement": "MediaSession", "methodClass": "android.media.AudioManager", "methodName": "unregisterMediaButtonEventReceiver", "method": "void unregisterMediaButtonEventReceiver(ComponentName)", "replacementComments": "/**\n* Unregister the receiver of MEDIA_BUTTON intents.\n* @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}\n* that was registered with {@link #registerMediaButtonEventReceiver(ComponentName)}.\n* @deprecated Use {@link MediaSession} instead.\n*/\n"}, "writePackedFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedFixed32", "method": "void writePackedFixed32(long,int[])", "replacementComments": "/**\n* Write a list of packed proto \"fixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getUserDisplayName": {"dirtyReplacement": "getUser()", "methodClass": "android.app.Notification.MessagingStyle", "methodName": "getUserDisplayName", "method": "CharSequence getUserDisplayName()", "replacementComments": "/**\n* Returns the name to be displayed for any replies sent by the user\n*\n* @deprecated use {@link #getUser()} instead\n*/\n"}, "setFadingEnabled": {"dirtyReplacement": "setControlsOverlayAutoHideEnabled(boolean)", "methodClass": "androidx.leanback.app.PlaybackFragment", "methodName": "setFadingEnabled", "method": "void setFadingEnabled(boolean)", "replacementComments": "/**\n* @deprecated Uses {@link #setControlsOverlayAutoHideEnabled(boolean)}\n*/\n"}, "getCurrentMinute": {"dirtyReplacement": "getMinute()", "methodClass": "android.widget.TimePicker", "methodName": "getCurrentMinute", "method": "Integer getCurrentMinute()", "replacementComments": "/**\n* @return the currently selected minute, in the range (0-59)\n* @deprecated Use {@link #getMinute()}\n*/\n"}, "writePackedSInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedSInt32", "method": "void writePackedSInt32(long,int[])", "replacementComments": "/**\n* Write a list of packed proto \"sint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setItemCount": {"dirtyReplacement": "AccessibilityRecord#setItemCount(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setItemCount", "method": "void setItemCount(int)", "replacementComments": "/**\n* Sets the number of items that can be visited.\n*\n* @param itemCount The number of items.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setItemCount(int)} directly.\n*/\n"}, "restoreState": {"dirtyReplacement": "androidx.fragment.app.FragmentStatePagerAdapter", "methodClass": "androidx.legacy.app.FragmentStatePagerAdapter", "methodName": "restoreState", "method": "void restoreState(Parcelable,ClassLoader)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.\n*/\n"}, "copyFileOrThrow": {"dirtyReplacement": "copy(File, File)", "methodClass": "android.os.FileUtils", "methodName": "copyFileOrThrow", "method": "void copyFileOrThrow(File,File)", "replacementComments": "/**\n* @deprecated use {@link #copy(File, File)} instead.\n*/\n"}, "writeUInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeUInt64", "method": "void writeUInt64(long,long)", "replacementComments": "/**\n* Write a single proto \"uint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getUidUdpRxBytes": {"dirtyReplacement": "getUidRxBytes(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidUdpRxBytes", "method": "long getUidUdpRxBytes(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidRxBytes(int)\n*/\n"}, "setScrollable": {"dirtyReplacement": "AccessibilityRecord#setScrollable(boolean)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setScrollable", "method": "void setScrollable(boolean)", "replacementComments": "/**\n* Sets if the source is scrollable.\n*\n* @param scrollable True if the source is scrollable, false otherwise.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setScrollable(boolean)} directly.\n*/\n"}, "isFinished": {"dirtyReplacement": "OverScroller#isFinished()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "isFinished", "method": "boolean isFinished()", "replacementComments": "/**\n* Returns whether the scroller has finished scrolling.\n*\n* @return True if the scroller has finished scrolling, false otherwise.\n*\n* @deprecated Use {@link OverScroller#isFinished()} directly.\n*/\n"}, "getCurrentSync": {"dirtyReplacement": "getCurrentSyncs()", "methodClass": "android.content.ContentResolver", "methodName": "getCurrentSync", "method": "SyncInfo getCurrentSync()", "replacementComments": "/**\n* If a sync is active returns the information about it, otherwise returns null.\n* <p>\n* This method requires the caller to hold the permission\n* {@link android.Manifest.permission#READ_SYNC_STATS}.\n* <p>\n* @return the SyncInfo for the currently active sync or null if one is not active.\n* @deprecated\n* Since multiple concurrent syncs are now supported you should use\n* {@link #getCurrentSyncs()} to get the accurate list of current syncs.\n* This method returns the first item from the list of current syncs\n* or null if there are none.\n*/\n"}, "equals": {"dirtyReplacement": "AccessibilityRecord", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "equals", "method": "boolean equals(Object)", "replacementComments": "/**\n* @deprecated Use {@link AccessibilityRecord} directly.\n*/\n"}, "getFinalY": {"dirtyReplacement": "OverScroller#getFinalY()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "getFinalY", "method": "int getFinalY()", "replacementComments": "/**\n* @return The final Y position for the scroll in progress, if known.\n*\n* @deprecated Use {@link OverScroller#getFinalY()} directly.\n*/\n"}, "iccCloseLogicalChannel": {"dirtyReplacement": "UiccProfile#iccCloseLogicalChannel(int, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "iccCloseLogicalChannel", "method": "void iccCloseLogicalChannel(int,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#iccCloseLogicalChannel}\n* @deprecated Please use\n* {@link UiccProfile#iccCloseLogicalChannel(int, Message)} instead.\n*/\n"}, "playSilence": {"dirtyReplacement": "playSilentUtterance(long, int, String)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "playSilence", "method": "int playSilence(long,int,HashMap<String, String>)", "replacementComments": "/**\n* Plays silence for the specified amount of time using the specified\n* queue mode.\n* This method is asynchronous, i.e. the method just adds the request to the queue of TTS\n* requests and then returns. The synthesis might not have finished (or even started!) at the\n* time when this method returns. In order to reliably detect errors during synthesis,\n* we recommend setting an utterance progress listener (see\n* {@link #setOnUtteranceProgressListener}) and using the\n* {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.\n*\n* @param durationInMs The duration of the silence.\n* @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.\n* @param params Parameters for the request. Can be null.\n* Supported parameter names:\n* {@link Engine#KEY_PARAM_UTTERANCE_ID}.\n* Engine specific parameters may be passed in but the parameter keys\n* must be prefixed by the name of the engine they are intended for. For example\n* the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the\n* engine named \"com.svox.pico\" if it is being used.\n*\n* @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playSilence operation.\n* @deprecated As of API level 21, replaced by\n* {@link #playSilentUtterance(long, int, String)}.\n*/\n"}, "getDisplayLabel": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.ContactMethods", "methodName": "getDisplayLabel", "method": "CharSequence getDisplayLabel(Context,int,int,CharSequence)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "initWithRawContactsEntityUri": {"dirtyReplacement": "init(Uri, String[], String, String[], String, Uri)", "methodClass": "com.android.vcard.VCardComposer", "methodName": "initWithRawContactsEntityUri", "method": "boolean initWithRawContactsEntityUri(Uri)", "replacementComments": "/**\n* Special variant of init(), which accepts a Uri for obtaining {@link RawContactsEntity} from\n* {@link ContentResolver} with {@link Contacts#_ID}.\n* <code>\n* String selection = Data.CONTACT_ID + \"=?\";\n* String[] selectionArgs = new String[] {contactId};\n* Cursor cursor = mContentResolver.query(\n* contentUriForRawContactsEntity, null, selection, selectionArgs, null)\n* </code>\n*\n* You can call this method or a variant of this method just once. In other words, you cannot\n* reuse this object.\n*\n* @deprecated Use {@link #init(Uri, String[], String, String[], String, Uri)} if you really\n* need to change the default Uri.\n*/\n"}, "onSupportContentChanged": {"dirtyReplacement": "onContentChanged()", "methodClass": "androidx.appcompat.app.AppCompatActivity", "methodName": "onSupportContentChanged", "method": "void onSupportContentChanged()", "replacementComments": "/**\n* @deprecated Use {@link #onContentChanged()} instead.\n*/\n"}, "getMatrix": {"dirtyReplacement": "isHardwareAccelerated() Hardware accelerated", "methodClass": "android.graphics.Canvas", "methodName": "getMatrix", "method": "void getMatrix(Matrix)", "replacementComments": "/**\n* Return, in ctm, the current transformation matrix. This does not alter\n* the matrix in the canvas, but just returns a copy of it.\n*\n* @deprecated {@link #isHardwareAccelerated() Hardware accelerated} canvases may have any\n* matrix when passed to a View or Drawable, as it is implementation defined where in the\n* hierarchy such canvases are created. It is recommended in such cases to either draw contents\n* irrespective of the current matrix, or to track relevant transform state outside of the\n* canvas.\n*/\n"}, "setOperatorBrandOverride": {"dirtyReplacement": "UiccProfile#setOperatorBrandOverride(String)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "setOperatorBrandOverride", "method": "boolean setOperatorBrandOverride(String)", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#setOperatorBrandOverride(String)} instead.\n*/\n"}, "updateCallBarring": {"dirtyReplacement": "updateCallBarring(int, int, Message, String[], int)", "methodClass": "com.android.ims.ImsUt", "methodName": "updateCallBarring", "method": "void updateCallBarring(int,int,Message,String[])", "replacementComments": "/**\n* Modifies the configuration of the call barring.\n* @deprecated Use {@link #updateCallBarring(int, int, Message, String[], int)} instead.\n*/\n"}, "isLong": {"dirtyReplacement": "getType", "methodClass": "android.database.AbstractWindowedCursor", "methodName": "isLong", "method": "boolean isLong(int)", "replacementComments": "/**\n* @deprecated Use {@link #getType}\n*/\n"}, "setVoicemailVibrationEnabled": {"dirtyReplacement": "android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS", "methodClass": "android.telephony.TelephonyManager", "methodName": "setVoicemailVibrationEnabled", "method": "void setVoicemailVibrationEnabled(PhoneAccountHandle,boolean)", "replacementComments": "/**\n* Sets the per-account preference whether vibration is enabled for voicemail notifications.\n*\n* <p>Requires that the calling app is the default dialer, or has carrier privileges (see\n* {@link #hasCarrierPrivileges}, or has permission\n* {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.\n*\n* @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the\n* voicemail vibration setting.\n* @param enabled Whether to enable or disable vibration for voicemail notifications from a\n* specific PhoneAccount.\n*\n* @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}\n* instead.\n*/\n"}, "dragViewToTop": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewToTop", "method": "void dragViewToTop(ActivityInstrumentationTestCase,View,int)", "replacementComments": "/**\n* Simulate touching the center of a view and dragging to the top of the screen.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n* @param stepCount How many move steps to include in the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "openContactPhotoInputStream": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "openContactPhotoInputStream", "method": "InputStream openContactPhotoInputStream(ContentResolver,Uri)", "replacementComments": "/**\n* Opens an InputStream for the person's photo and returns the photo as a Bitmap.\n* If the person's photo isn't present returns the placeholderImageResource instead.\n* @param person the person whose photo should be used\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "isScreenOn": {"dirtyReplacement": "isInteractive", "methodClass": "android.os.PowerManager", "methodName": "isScreenOn", "method": "boolean isScreenOn()", "replacementComments": "/**\n* Returns true if the device is in an interactive state.\n* <p>\n* For historical reasons, the name of this method refers to the power state of\n* the screen but it actually describes the overall interactive state of\n* the device.  This method has been replaced by {@link #isInteractive}.\n* </p><p>\n* The value returned by this method only indicates whether the device is\n* in an interactive state which may have nothing to do with the screen being\n* on or off.  To determine the actual state of the screen,\n* use {@link android.view.Display#getState}.\n* </p>\n*\n* @return True if the device is in an interactive state.\n*\n* @deprecated Use {@link #isInteractive} instead.\n*/\n"}, "queue": {"dirtyReplacement": "queue(ByteBuffer)", "methodClass": "android.hardware.usb.UsbRequest", "methodName": "queue", "method": "boolean queue(ByteBuffer,int)", "replacementComments": "/**\n* Queues the request to send or receive data on its endpoint.\n* <p>For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints,\n* the endpoint will attempt to read the given number of bytes into the specified buffer. If the\n* queueing operation is successful, return true. The result will be returned via\n* {@link UsbDeviceConnection#requestWait}</p>\n*\n* @param buffer the buffer containing the bytes to write, or location to store the results of a\n* read. Position and array offset will be ignored and assumed to be 0. Limit and\n* capacity will be ignored. Once the request\n* {@link UsbDeviceConnection#requestWait() is processed} the position will be set\n* to the number of bytes read/written.\n* @param length number of bytes to read or write. Before {@value Build.VERSION_CODES#P}, a\n* value larger than 16384 bytes would be truncated down to 16384. In API\n* {@value Build.VERSION_CODES#P} and after, any value of length is valid.\n*\n* @return true if the queueing operation succeeded\n*\n* @deprecated Use {@link #queue(ByteBuffer)} instead.\n*/\n"}, "getAMPMString": {"dirtyReplacement": "java.text.SimpleDateFormat", "methodClass": "android.text.format.DateUtils", "methodName": "getAMPMString", "method": "String getAMPMString(int)", "replacementComments": "/**\n* Return a localized string for AM or PM.\n* @param ampm Either {@link Calendar#AM Calendar.AM} or {@link Calendar#PM Calendar.PM}.\n* @throws IndexOutOfBoundsException if the ampm is out of bounds.\n* @return Localized version of \"AM\" or \"PM\".\n* @deprecated Use {@link java.text.SimpleDateFormat} instead.\n*/\n"}, "getApplicationByType": {"dirtyReplacement": "UiccProfile#getApplicationByType(int)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getApplicationByType", "method": "UiccCardApplication getApplicationByType(int)", "replacementComments": "/**\n* Returns the SIM application of the specified type.\n*\n* @param type ICC application type (@see com.android.internal.telephony.PhoneConstants#APPTYPE_xxx)\n* @return application corresponding to type or a null if no match found\n*\n* @deprecated Please use {@link UiccProfile#getApplicationByType(int)} instead.\n*/\n"}, "action": {"dirtyReplacement": "action(int, boolean, Pair[])", "methodClass": "com.android.settingslib.core.instrumentation.LogWriter", "methodName": "action", "method": "void action(Context,int,boolean)", "replacementComments": "/**\n* Logs an user action.\n* @deprecated use {@link #action(int, boolean, Pair[])}\n*/\n"}, "isTouchExplorationEnabled": {"dirtyReplacement": "AccessibilityManager#isTouchExplorationEnabled()", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat", "methodName": "isTouchExplorationEnabled", "method": "boolean isTouchExplorationEnabled(AccessibilityManager)", "replacementComments": "/**\n* Returns if the touch exploration in the system is enabled.\n*\n* @param manager The accessibility manager.\n* @return True if touch exploration is enabled, false otherwise.\n*\n* @deprecated Use {@link AccessibilityManager#isTouchExplorationEnabled()} directly.\n*/\n"}, "getLatLong": {"dirtyReplacement": "getLatLong()", "methodClass": "androidx.exifinterface.media.ExifInterface", "methodName": "getLatLong", "method": "boolean getLatLong(float[])", "replacementComments": "/**\n* Stores the latitude and longitude value in a float array. The first element is the latitude,\n* and the second element is the longitude. Returns false if the Exif tags are not available.\n*\n* @deprecated Use {@link #getLatLong()} instead.\n*/\n"}, "dispatchChange": {"dirtyReplacement": "dispatchChange(boolean, Uri)", "methodClass": "android.database.ContentObserver", "methodName": "dispatchChange", "method": "void dispatchChange(boolean)", "replacementComments": "/**\n* Dispatches a change notification to the observer.\n* <p>\n* If a {@link Handler} was supplied to the {@link ContentObserver} constructor,\n* then a call to the {@link #onChange} method is posted to the handler's message queue.\n* Otherwise, the {@link #onChange} method is invoked immediately on this thread.\n* </p>\n*\n* @param selfChange True if this is a self-change notification.\n*\n* @deprecated Use {@link #dispatchChange(boolean, Uri)} instead.\n*/\n"}, "onRequestChildFocus": {"dirtyReplacement": "onRequestChildFocus(RecyclerView, State, View, View)", "methodClass": "androidx.recyclerview.widget.RecyclerView.LayoutManager", "methodName": "onRequestChildFocus", "method": "boolean onRequestChildFocus(RecyclerView,View,View)", "replacementComments": "/**\n* @deprecated Use {@link #onRequestChildFocus(RecyclerView, State, View, View)}\n*/\n"}, "setTint": {"dirtyReplacement": "setAccentColor(int)", "methodClass": "androidx.slice.widget.SliceView", "methodName": "setTint", "method": "void setTint(int)", "replacementComments": "/**\n* @deprecated TO BE REMOVED; use {@link #setAccentColor(int)} instead.\n*/\n"}, "invalidate": {"dirtyReplacement": "invalidate()", "methodClass": "android.view.View", "methodName": "invalidate", "method": "void invalidate(Rect)", "replacementComments": "/**\n* Mark the area defined by dirty as needing to be drawn. If the view is\n* visible, {@link #onDraw(android.graphics.Canvas)} will be called at some\n* point in the future.\n* <p>\n* This must be called from a UI thread. To call from a non-UI thread, call\n* {@link #postInvalidate()}.\n* <p>\n* <b>WARNING:</b> In API 19 and below, this method may be destructive to\n* {@code dirty}.\n*\n* @param dirty the rectangle representing the bounds of the dirty region\n*\n* @deprecated The switch to hardware accelerated rendering in API 14 reduced\n* the importance of the dirty rectangle. In API 21 the given rectangle is\n* ignored entirely in favor of an internally-calculated area instead.\n* Because of this, clients are encouraged to just call {@link #invalidate()}.\n*/\n"}, "getSupportLoaderManager": {"dirtyReplacement": "LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)", "methodClass": "androidx.fragment.app.FragmentActivity", "methodName": "getSupportLoaderManager", "method": "LoaderManager getSupportLoaderManager()", "replacementComments": "/**\n* @deprecated Use\n* {@link LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)}.\n*/\n"}, "startManagingCursor": {"dirtyReplacement": "android.content.CursorLoader", "methodClass": "android.app.Activity", "methodName": "startManagingCursor", "method": "void startManagingCursor(Cursor)", "replacementComments": "/**\n* This method allows the activity to take care of managing the given\n* {@link Cursor}'s lifecycle for you based on the activity's lifecycle.\n* That is, when the activity is stopped it will automatically call\n* {@link Cursor#deactivate} on the given Cursor, and when it is later restarted\n* it will call {@link Cursor#requery} for you.  When the activity is\n* destroyed, all managed Cursors will be closed automatically.\n*\n* <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}\n* or later, consider instead using {@link LoaderManager} instead, available\n* via {@link #getLoaderManager()}.</em>\n*\n* <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on cursor obtained from\n* {@link #managedQuery}, because the activity will do that for you at the appropriate time.\n* However, if you call {@link #stopManagingCursor} on a cursor from a managed query, the system\n* <em>will not</em> automatically close the cursor and, in that case, you must call\n* {@link Cursor#close()}.</p>\n*\n* @param c The Cursor to be managed.\n*\n* @see #managedQuery(android.net.Uri , String[], String, String[], String)\n* @see #stopManagingCursor\n*\n* @deprecated Use the new {@link android.content.CursorLoader} class with\n* {@link LoaderManager} instead; this is also\n* available on older platforms through the Android compatibility package.\n*/\n"}, "getMetadata": {"dirtyReplacement": "getStatsMetadata()", "methodClass": "android.app.StatsManager", "methodName": "getMetadata", "method": "byte[] getMetadata()", "replacementComments": "/**\n* @deprecated Use {@link #getStatsMetadata()}\n*/\n"}, "destroyDrawingCache": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "destroyDrawingCache", "method": "void destroyDrawingCache()", "replacementComments": "/**\n* <p>Frees the resources used by the drawing cache. If you call\n* {@link #buildDrawingCache()} manually without calling\n* {@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you\n* should cleanup the cache with this method afterwards.</p>\n*\n* @see #setDrawingCacheEnabled(boolean)\n* @see #buildDrawingCache()\n* @see #getDrawingCache()\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "formatNumber": {"dirtyReplacement": "link #formatNumber(String phoneNumber, String defaultCountryIso)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "formatNumber", "method": "void formatNumber(Editable,int)", "replacementComments": "/**\n* Formats a phone number in-place. Currently {@link #FORMAT_JAPAN} and {@link #FORMAT_NANP}\n* is supported as a second argument.\n*\n* @param text The number to be formatted, will be modified with the formatting\n* @param defaultFormattingType The default formatting rules to apply if the number does\n* not begin with +[country_code]\n*\n* @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead\n*/\n"}, "setCurrentTime": {"dirtyReplacement": "setCurrentPosition(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setCurrentTime", "method": "void setCurrentTime(int)", "replacementComments": "/**\n* Sets the current time in milliseconds for the playback controls row.\n* If this row is bound to a view, the view will automatically\n* be updated to reflect the new value.\n* @deprecated use {@link #setCurrentPosition(long)}\n*/\n"}, "getText": {"dirtyReplacement": "getCharSequenceText", "methodClass": "android.speech.tts.SynthesisRequest", "methodName": "getText", "method": "String getText()", "replacementComments": "/**\n* Gets the text which should be synthesized.\n* @deprecated As of API level 21, replaced by {@link #getCharSequenceText}.\n*/\n"}, "getInstalledAccessibilityServiceList": {"dirtyReplacement": "AccessibilityManager#getInstalledAccessibilityServiceList()", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat", "methodName": "getInstalledAccessibilityServiceList", "method": "List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(AccessibilityManager)", "replacementComments": "/**\n* Returns the {@link AccessibilityServiceInfo}s of the installed accessibility services.\n*\n* @param manager The accessibility manager.\n* @return An unmodifiable list with {@link AccessibilityServiceInfo}s.\n*\n* @deprecated Use {@link AccessibilityManager#getInstalledAccessibilityServiceList()} directly.\n*/\n"}, "getWidth": {"dirtyReplacement": "getSize(Point)", "methodClass": "android.view.Display", "methodName": "getWidth", "method": "int getWidth()", "replacementComments": "/**\n* @deprecated Use {@link #getSize(Point)} instead.\n*/\n"}, "setBroadcastSubscriber": {"dirtyReplacement": "setBroadcastSubscriber(PendingIntent, long, long)", "methodClass": "android.app.StatsManager", "methodName": "setBroadcastSubscriber", "method": "boolean setBroadcastSubscriber(long,long,PendingIntent)", "replacementComments": "/**\n* @deprecated Use {@link #setBroadcastSubscriber(PendingIntent, long, long)}\n*/\n"}, "setPriority": {"dirtyReplacement": "NotificationChannel#setImportance(int)", "methodClass": "android.app.Notification.Builder", "methodName": "setPriority", "method": "Builder setPriority(int)", "replacementComments": "/**\n* Set the priority of this notification.\n*\n* @see Notification#priority\n* @deprecated use {@link NotificationChannel#setImportance(int)} instead.\n*/\n"}, "setInput": {"dirtyReplacement": "execute(Object...)", "methodClass": "android.renderscript.ScriptGroup", "methodName": "setInput", "method": "void setInput(KernelID,Allocation)", "replacementComments": "/**\n* Sets an input of the ScriptGroup. This specifies an\n* Allocation to be used for kernels that require an input\n* Allocation provided from outside of the ScriptGroup.\n*\n* @deprecated Set arguments to {@link #execute(Object...)} instead.\n*\n* @param s The ID of the kernel where the allocation should be\n* connected.\n* @param a The allocation to connect.\n*/\n"}, "calledPartyBCDToString": {"dirtyReplacement": "calledPartyBCDToString(byte[], int, int, int)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "calledPartyBCDToString", "method": "String calledPartyBCDToString(byte[],int,int)", "replacementComments": "/**\n* 3GPP TS 24.008 10.5.4.7\n* Called Party BCD Number\n*\n* See Also TS 51.011 10.5.1 \"dialing number/ssc string\"\n* and TS 11.11 \"10.3.1 EF adn (Abbreviated dialing numbers)\"\n*\n* @param bytes the data buffer\n* @param offset should point to the TOA (aka. TON/NPI) octet after the length byte\n* @param length is the number of bytes including TOA byte\n* and must be at least 2\n*\n* @return partial string on invalid decode\n*\n* @deprecated use {@link #calledPartyBCDToString(byte[], int, int, int)} instead. Calling this\n* method is equivalent to calling {@link #calledPartyBCDToString(byte[], int, int)} with\n* {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.\n*/\n"}, "apply": {"dirtyReplacement": "SharedPreferences.Editor#apply()", "methodClass": "androidx.core.content.SharedPreferencesCompat.EditorCompat", "methodName": "apply", "method": "void apply(Editor)", "replacementComments": "/**\n* @deprecated This compatibility method is no longer required. Use\n* {@link SharedPreferences.Editor#apply()} directly.\n*/\n"}, "isConnecting": {"dirtyReplacement": "getConnectionState", "methodClass": "androidx.mediarouter.media.MediaRouteDescriptor", "methodName": "isConnecting", "method": "boolean isConnecting()", "replacementComments": "/**\n* Gets whether the route is connecting.\n* @deprecated Use {@link #getConnectionState} instead\n*/\n"}, "setOnClickListener": {"dirtyReplacement": "addAction(RemoteAction)", "methodClass": "android.view.textclassifier.TextClassification.Builder", "methodName": "setOnClickListener", "method": "Builder setOnClickListener(OnClickListener)", "replacementComments": "/**\n* Sets the OnClickListener for the <i>primary</i> action that may be triggered to act on\n* the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelable. If read from a parcel, the\n* returned OnClickListener represents the first {@link RemoteAction} (if one exists).\n*\n* @deprecated Use {@link #addAction(RemoteAction)} instead.\n*/\n"}, "smoothSlideClosed": {"dirtyReplacement": "closePane()", "methodClass": "androidx.slidingpanelayout.widget.SlidingPaneLayout", "methodName": "smoothSlideClosed", "method": "void smoothSlideClosed()", "replacementComments": "/**\n* @deprecated Renamed to {@link #closePane()} - this method is going away soon!\n*/\n"}, "supportInvalidateOptionsMenu": {"dirtyReplacement": "Activity#invalidateOptionsMenu", "methodClass": "androidx.fragment.app.FragmentActivity", "methodName": "supportInvalidateOptionsMenu", "method": "void supportInvalidateOptionsMenu()", "replacementComments": "/**\n* Support library version of {@link Activity#invalidateOptionsMenu}.\n*\n* <p>Invalidate the activity's options menu. This will cause relevant presentations\n* of the menu to fully update via calls to onCreateOptionsMenu and\n* onPrepareOptionsMenu the next time the menu is requested.\n*\n* @deprecated Call {@link Activity#invalidateOptionsMenu} directly.\n*/\n"}, "syncFromRamToFlash": {"dirtyReplacement": "CookieManager#flush", "methodClass": "android.webkit.CookieSyncManager", "methodName": "syncFromRamToFlash", "method": "void syncFromRamToFlash()", "replacementComments": "/**\n* @deprecated Use {@link CookieManager#flush} instead.\n*/\n"}, "getOperatorBrandOverride": {"dirtyReplacement": "UiccProfile#getOperatorBrandOverride()", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getOperatorBrandOverride", "method": "String getOperatorBrandOverride()", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#getOperatorBrandOverride()} instead.\n*/\n"}, "from": {"dirtyReplacement": "Context#getSystemService(Class)", "methodClass": "android.telephony.SubscriptionManager", "methodName": "from", "method": "SubscriptionManager from(Context)", "replacementComments": "/**\n* @deprecated developers should always obtain references directly from\n* {@link Context#getSystemService(Class)}.\n*/\n"}, "writePackedFloat": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedFloat", "method": "void writePackedFloat(long,float[])", "replacementComments": "/**\n* Write a list of packed proto \"float\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getLegacyListenerFromContext": {"dirtyReplacement": "OnClickListener", "methodClass": "com.android.setupwizardlib.span.LinkSpan", "methodName": "getLegacyListenerFromContext", "method": "OnClickListener getLegacyListenerFromContext(Context)", "replacementComments": "/**\n* @deprecated Deprecated together with {@link OnClickListener}\n*/\n"}, "getCarrierPhaseUncertainty": {"dirtyReplacement": "getAccumulatedDeltaRangeUncertaintyMeters()", "methodClass": "android.location.GnssMeasurement", "methodName": "getCarrierPhaseUncertainty", "method": "double getCarrierPhaseUncertainty()", "replacementComments": "/**\n* Gets the carrier-phase's uncertainty (1-Sigma).\n*\n* <p>The uncertainty is represented as an absolute (single sided) value.\n*\n* <p>The value is only available if {@link #hasCarrierPhaseUncertainty()} is {@code true}.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeUncertaintyMeters()} instead.\n*/\n"}, "addGrid": {"dirtyReplacement": "addGridRow(GridRowBuilder)", "methodClass": "androidx.slice.builders.ListBuilder", "methodName": "addGrid", "method": "ListBuilder addGrid(GridBuilder)", "replacementComments": "/**\n* Add a grid row to the list builder.\n*\n* @deprecated TO BE REMOVED; use {@link #addGridRow(GridRowBuilder)} instead\n*/\n"}, "startScroll": {"dirtyReplacement": "OverScroller#startScroll(int, int, int, int, int)", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "startScroll", "method": "void startScroll(int,int,int,int,int)", "replacementComments": "/**\n* Start scrolling by providing a starting point and the distance to travel.\n*\n* @param startX Starting horizontal scroll offset in pixels. Positive\n* numbers will scroll the content to the left.\n* @param startY Starting vertical scroll offset in pixels. Positive numbers\n* will scroll the content up.\n* @param dx Horizontal distance to travel. Positive numbers will scroll the\n* content to the left.\n* @param dy Vertical distance to travel. Positive numbers will scroll the\n* content up.\n* @param duration Duration of the scroll in milliseconds.\n*\n* @deprecated Use {@link OverScroller#startScroll(int, int, int, int, int)} directly.\n*/\n"}, "setTTL": {"dirtyReplacement": "the setTimeToLive method", "methodClass": "java.net.MulticastSocket", "methodName": "setTTL", "method": "void setTTL(byte)", "replacementComments": "/**\n* Set the default time-to-live for multicast packets sent out\n* on this {@code MulticastSocket} in order to control the\n* scope of the multicasts.\n*\n* <p>The ttl is an <b>unsigned</b> 8-bit quantity, and so <B>must</B> be\n* in the range {@code 0 <= ttl <= 0xFF }.\n*\n* @param ttl the time-to-live\n* @exception IOException if an I/O exception occurs\n* while setting the default time-to-live value\n* @deprecated use the setTimeToLive method instead, which uses\n* <b>int</b> instead of <b>byte</b> as the type for ttl.\n* @see #getTTL()\n*/\n"}, "showProgressBar": {"dirtyReplacement": "setProgressBarShown(boolean)", "methodClass": "com.android.setupwizardlib.SetupWizardLayout", "methodName": "showProgressBar", "method": "void showProgressBar()", "replacementComments": "/**\n* @deprecated Use {@link #setProgressBarShown(boolean)}\n*/\n"}, "onPasswordFailed": {"dirtyReplacement": "onPasswordFailed(Context, Intent, UserHandle)", "methodClass": "android.app.admin.DeviceAdminReceiver", "methodName": "onPasswordFailed", "method": "void onPasswordFailed(Context,Intent)", "replacementComments": "/**\n* Called after the user has failed at entering their device or profile challenge password,\n* as a result of receiving {@link #ACTION_PASSWORD_FAILED}.  At this point you can use\n* {@link DevicePolicyManager#getCurrentFailedPasswordAttempts()} to retrieve the number of\n* failed password attempts.\n* @param context The running context as per {@link #onReceive}.\n* @param intent The received intent as per {@link #onReceive}.\n*\n* @deprecated From {@link android.os.Build.VERSION_CODES#O}, use\n* {@link #onPasswordFailed(Context, Intent, UserHandle)} instead.\n*/\n"}, "getControlsRowPresenter": {"dirtyReplacement": "getPlaybackRowPresenter()", "methodClass": "androidx.leanback.media.PlaybackControlGlue", "methodName": "getControlsRowPresenter", "method": "PlaybackControlsRowPresenter getControlsRowPresenter()", "replacementComments": "/**\n* Returns the playback controls row Presenter managed by the glue layer.\n* @deprecated PlaybackControlGlue supports any PlaybackRowPresenter, use\n* {@link #getPlaybackRowPresenter()}.\n*/\n"}, "writeRepeatedSFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedSFixed32", "method": "void writeRepeatedSFixed32(long,int)", "replacementComments": "/**\n* Write a single repeated proto \"sfixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "writeRepeatedEnum": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedEnum", "method": "void writeRepeatedEnum(long,int)", "replacementComments": "/**\n* Write a single repeated proto enum type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "managedQuery": {"dirtyReplacement": "CursorLoader", "methodClass": "android.app.Activity", "methodName": "managedQuery", "method": "Cursor managedQuery(Uri,String[],String,String[],String)", "replacementComments": "/**\n* Wrapper around\n* {@link ContentResolver#query(android.net.Uri , String[], String, String[], String)}\n* that gives the resulting {@link Cursor} to call\n* {@link #startManagingCursor} so that the activity will manage its\n* lifecycle for you.\n*\n* <em>If you are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}\n* or later, consider instead using {@link LoaderManager} instead, available\n* via {@link #getLoaderManager()}.</em>\n*\n* <p><strong>Warning:</strong> Do not call {@link Cursor#close()} on a cursor obtained using\n* this method, because the activity will do that for you at the appropriate time. However, if\n* you call {@link #stopManagingCursor} on a cursor from a managed query, the system <em>will\n* not</em> automatically close the cursor and, in that case, you must call\n* {@link Cursor#close()}.</p>\n*\n* @param uri The URI of the content provider to query.\n* @param projection List of columns to return.\n* @param selection SQL WHERE clause.\n* @param selectionArgs The arguments to selection, if any ?s are pesent\n* @param sortOrder SQL ORDER BY clause.\n*\n* @return The Cursor that was returned by query().\n*\n* @see ContentResolver#query(android.net.Uri , String[], String, String[], String)\n* @see #startManagingCursor\n*\n* @deprecated Use {@link CursorLoader} instead.\n*/\n"}, "isVolteProvisionedOnDevice": {"dirtyReplacement": "isVolteProvisionedOnDevice()", "methodClass": "com.android.ims.ImsManager", "methodName": "isVolteProvisionedOnDevice", "method": "boolean isVolteProvisionedOnDevice(Context)", "replacementComments": "/**\n* Indicates whether VoLTE is provisioned on device.\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isVolteProvisionedOnDevice()} instead.\n*/\n"}, "setEnabled": {"dirtyReplacement": "AccessibilityRecord#isEnabled()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setEnabled", "method": "void setEnabled(boolean)", "replacementComments": "/**\n* Sets if the source is enabled.\n*\n* @param isEnabled True if the view is enabled, false otherwise.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#isEnabled()} directly.\n*/\n"}, "setCid": {"dirtyReplacement": "NeighboringCellInfo(int, String, int)", "methodClass": "android.telephony.NeighboringCellInfo", "methodName": "setCid", "method": "void setCid(int)", "replacementComments": "/**\n* Set the cell id.\n*\n* NeighboringCellInfo is a one time shot for the neighboring cells based on\n* the radio network type at that moment. It shouldn't be changed after\n* creation.\n*\n* @deprecated cid value passed as in location parameter passed to constructor\n* {@link #NeighboringCellInfo(int, String, int)}\n*/\n"}, "onAbsorb": {"dirtyReplacement": "EdgeEffect#onAbsorb(int)", "methodClass": "androidx.core.widget.EdgeEffectCompat", "methodName": "onAbsorb", "method": "boolean onAbsorb(int)", "replacementComments": "/**\n* Call when the effect absorbs an impact at the given velocity.\n* Used when a fling reaches the scroll boundary.\n*\n* <p>When using a {@link android.widget.Scroller} or {@link android.widget.OverScroller},\n* the method <code>getCurrVelocity</code> will provide a reasonable approximation\n* to use here.</p>\n*\n* @param velocity Velocity at impact in pixels per second.\n* @return true if the host view should invalidate, false if it should not.\n*\n* @deprecated Use {@link EdgeEffect#onAbsorb(int)} directly.\n*/\n"}, "noteWakeupAlarm": {"dirtyReplacement": "ActivityManager.noteWakeupAlarm", "methodClass": "android.app.ActivityManagerNative", "methodName": "noteWakeupAlarm", "method": "void noteWakeupAlarm(PendingIntent,int,String,String)", "replacementComments": "/**\n* @deprecated use ActivityManager.noteWakeupAlarm instead.\n*/\n"}, "hasCarrierPhase": {"dirtyReplacement": "getAccumulatedDeltaRangeState()", "methodClass": "android.location.GnssMeasurement", "methodName": "hasCarrierPhase", "method": "boolean hasCarrierPhase()", "replacementComments": "/**\n* Returns {@code true} if {@link #getCarrierPhase()} is available, {@code false} otherwise.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n*/\n"}, "RecommendationInfo": {"dirtyReplacement": "RecommendationInfo(String, String, List<InetAddress>, boolean)", "methodClass": "android.printservice.recommendation.RecommendationInfo", "methodName": "RecommendationInfo", "method": "void <init>(CharSequence,CharSequence,int,boolean)", "replacementComments": "/**\n* Create a new recommendation.\n*\n* @param packageName                  Package name of the print service\n* @param name                         Display name of the print service\n* @param numDiscoveredPrinters        Number of printers the print service would discover if\n* installed\n* @param recommendsMultiVendorService If the service detects printer from multiple vendor\n*\n* @deprecated Use {@link RecommendationInfo(String, String, List<InetAddress>, boolean)}\n* instead\n*/\n"}, "writeInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeInt64", "method": "void writeInt64(long,long)", "replacementComments": "/**\n* Write a single proto \"int64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "hideStatusIcon": {"dirtyReplacement": "InputMethodService#hideStatusIcon()", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "hideStatusIcon", "method": "void hideStatusIcon(IBinder)", "replacementComments": "/**\n* @deprecated Use {@link InputMethodService#hideStatusIcon()} instead. This method was\n* intended for IME developers who should be accessing APIs through the service. APIs in\n* this class are intended for app developers interacting with the IME.\n*/\n"}, "getPointerId": {"dirtyReplacement": "MotionEvent#getPointerId(int)", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getPointerId", "method": "int getPointerId(MotionEvent,int)", "replacementComments": "/**\n* Call {@link MotionEvent#getPointerId(int)}.\n*\n* @deprecated Call {@link MotionEvent#getPointerId(int)} directly. This method will be\n* removed in a future release.\n*/\n"}, "getZoomFactor": {"dirtyReplacement": "getFocusZoomFactor", "methodClass": "androidx.leanback.widget.ListRowPresenter", "methodName": "getZoomFactor", "method": "int getZoomFactor()", "replacementComments": "/**\n* Returns the zoom factor used for focus highlighting.\n* @deprecated use {@link #getFocusZoomFactor} instead.\n*/\n"}, "visibility": {"dirtyReplacement": "visibility(int, boolean)", "methodClass": "com.android.internal.logging.MetricsLogger", "methodName": "visibility", "method": "void visibility(Context,int,boolean)", "replacementComments": "/**\n* @deprecated use {@link #visibility(int, boolean)}\n*/\n"}, "getChannel": {"dirtyReplacement": "getSelector()", "methodClass": "android.hardware.radio.RadioManager.ProgramInfo", "methodName": "getChannel", "method": "int getChannel()", "replacementComments": "/**\n* Main channel expressed in units according to band type.\n* Currently all defined band types express channels as frequency in kHz\n* @return the program channel\n* @deprecated Use {@link getSelector()} instead.\n*/\n"}, "writeRepeatedInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedInt64", "method": "void writeRepeatedInt64(long,long)", "replacementComments": "/**\n* Write a single repeated proto \"int64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setAction": {"dirtyReplacement": "InputRangeBuilder#setInputAction(PendingIntent)", "methodClass": "androidx.slice.builders.ListBuilder.InputRangeBuilder", "methodName": "setAction", "method": "InputRangeBuilder setAction(PendingIntent)", "replacementComments": "/**\n* Set the {@link PendingIntent} to send when the current value is updated.\n*\n* @deprecated TO BE REMOVED; use {@link InputRangeBuilder#setInputAction(PendingIntent)}\n*/\n"}, "getVersion": {"dirtyReplacement": "getLongVersion()", "methodClass": "android.content.pm.SharedLibraryInfo", "methodName": "getVersion", "method": "int getVersion()", "replacementComments": "/**\n* @deprecated Use {@link #getLongVersion()} instead.\n*/\n"}, "withExecutor": {"dirtyReplacement": "Configuration.Builder#setExecutor(Executor)", "methodClass": "androidx.work.Configuration.Builder", "methodName": "withExecutor", "method": "Builder withExecutor(Executor)", "replacementComments": "/**\n* Specifies a custom {@link Executor} for WorkManager.\n*\n* @param executor An {@link Executor} for processing work\n* @return This {@link Builder} instance\n* @deprecated Use the {@link Configuration.Builder#setExecutor(Executor)} method instead\n*/\n"}, "getPosition": {"dirtyReplacement": "getLayoutPosition()", "methodClass": "com.android.internal.widget.RecyclerView.ViewHolder", "methodName": "getPosition", "method": "int getPosition()", "replacementComments": "/**\n* @deprecated This method is deprecated because its meaning is ambiguous due to the async\n* handling of adapter updates. Please use {@link #getLayoutPosition()} or\n* {@link #getAdapterPosition()} depending on your use case.\n*\n* @see #getLayoutPosition()\n* @see #getAdapterPosition()\n*/\n"}, "getCarrierPackageNamesForIntent": {"dirtyReplacement": "UiccProfile#getCarrierPackageNamesForIntent(PackageManager, Intent)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getCarrierPackageNamesForIntent", "method": "List<String> getCarrierPackageNamesForIntent(PackageManager,Intent)", "replacementComments": "/**\n* Exposes {@link UiccCarrierPrivilegeRules#getCarrierPackageNamesForIntent}.\n* @deprecated Please use\n* {@link UiccProfile#getCarrierPackageNamesForIntent(PackageManager, Intent)} instead.\n*/\n"}, "getAvailableBlocks": {"dirtyReplacement": "getAvailableBlocksLong()", "methodClass": "android.os.StatFs", "methodName": "getAvailableBlocks", "method": "int getAvailableBlocks()", "replacementComments": "/**\n* @deprecated Use {@link #getAvailableBlocksLong()} instead.\n*/\n"}, "removeStickyBroadcast": {"dirtyReplacement": "sendStickyBroadcast", "methodClass": "android.content.Context", "methodName": "removeStickyBroadcast", "method": "void removeStickyBroadcast(Intent)", "replacementComments": "/**\n* <p>Remove the data previously sent with {@link #sendStickyBroadcast},\n* so that it is as if the sticky broadcast had never happened.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent that was previously broadcast.\n*\n* @see #sendStickyBroadcast\n*/\n"}, "abandonAudioFocus": {"dirtyReplacement": "abandonAudioFocusRequest(AudioFocusRequest)", "methodClass": "android.media.AudioManager", "methodName": "abandonAudioFocus", "method": "int abandonAudioFocus(OnAudioFocusChangeListener)", "replacementComments": "/**\n* Abandon audio focus. Causes the previous focus owner, if any, to receive focus.\n* @param l the listener with which focus was requested.\n* @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}\n* @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)}\n*/\n"}, "canSlide": {"dirtyReplacement": "isSlideable()", "methodClass": "androidx.slidingpanelayout.widget.SlidingPaneLayout", "methodName": "canSlide", "method": "boolean canSlide()", "replacementComments": "/**\n* @return true if content in this layout can be slid open and closed\n* @deprecated Renamed to {@link #isSlideable()} - this method is going away soon!\n*/\n"}, "setPhotoData": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "setPhotoData", "method": "void setPhotoData(ContentResolver,Uri,byte[])", "replacementComments": "/**\n* Set the photo for this person. data may be null\n* @param cr the ContentResolver to use\n* @param person the Uri of the person whose photo is to be updated\n* @param data the byte[] that represents the photo\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "addConfiguration": {"dirtyReplacement": "addConfig(long, byte[])", "methodClass": "android.app.StatsManager", "methodName": "addConfiguration", "method": "boolean addConfiguration(long,byte[])", "replacementComments": "/**\n* @deprecated Use {@link #addConfig(long, byte[])}\n*/\n"}, "setup": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "setup", "method": "void setup(Context,FragmentManager,int)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "getProgramType": {"dirtyReplacement": "getPrimaryId", "methodClass": "android.hardware.radio.ProgramSelector", "methodName": "getProgramType", "method": "int getProgramType()", "replacementComments": "/**\n* Type of a radio technology.\n*\n* @return program type.\n* @deprecated use {@link getPrimaryId} instead\n*/\n"}, "getFeatures": {"dirtyReplacement": "getVoices()", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "getFeatures", "method": "Set<String> getFeatures(Locale)", "replacementComments": "/**\n* Queries the engine for the set of features it supports for a given locale.\n* Features can either be framework defined, e.g.\n* {@link TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS} or engine specific.\n* Engine specific keys must be prefixed by the name of the engine they\n* are intended for. These keys can be used as parameters to\n* {@link TextToSpeech#speak(String, int, java.util.HashMap)} and\n* {@link TextToSpeech#synthesizeToFile(String, java.util.HashMap, String)}.\n*\n* Features values are strings and their values must meet restrictions described in their\n* documentation.\n*\n* @param locale The locale to query features for.\n* @return Set instance. May return {@code null} on error.\n* @deprecated As of API level 21, please use voices. In order to query features of the voice,\n* call {@link #getVoices()} to retrieve the list of available voices and\n* {@link Voice#getFeatures()} to retrieve the set of features.\n*/\n"}, "unregisterRemoteController": {"dirtyReplacement": "MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)", "methodClass": "android.media.AudioManager", "methodName": "unregisterRemoteController", "method": "void unregisterRemoteController(RemoteController)", "replacementComments": "/**\n* Unregisters a {@link RemoteController}, causing it to no longer receive\n* media metadata and playback state information, and no longer be capable\n* of controlling playback.\n*\n* @param rctlr the object to unregister.\n* @deprecated Use\n* {@link MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)}\n* instead.\n*/\n"}, "isFadingEnabled": {"dirtyReplacement": "isControlsOverlayAutoHideEnabled()", "methodClass": "androidx.leanback.app.PlaybackFragment", "methodName": "isFadingEnabled", "method": "boolean isFadingEnabled()", "replacementComments": "/**\n* @deprecated Uses {@link #isControlsOverlayAutoHideEnabled()}\n*/\n"}, "getClassName": {"dirtyReplacement": "AccessibilityRecord#getClassName()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getClassName", "method": "CharSequence getClassName()", "replacementComments": "/**\n* Gets the class name of the source.\n*\n* @return The class name.\n*\n* @deprecated Use {@link AccessibilityRecord#getClassName()} directly.\n*/\n"}, "fromHtml": {"dirtyReplacement": "fromHtml(String, int)", "methodClass": "android.text.Html", "methodName": "fromHtml", "method": "Spanned fromHtml(String)", "replacementComments": "/**\n* Returns displayable styled text from the provided HTML string with the legacy flags\n* {@link #FROM_HTML_MODE_LEGACY}.\n*\n* @deprecated use {@link #fromHtml(String, int)} instead.\n*/\n"}, "getPivotY": {"dirtyReplacement": "View#getPivotY()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getPivotY", "method": "float getPivotY(View)", "replacementComments": "/**\n* The y location of the point around which the view is {@link #setRotation(View,\n* float) rotated} and {@link #setScaleY(View, float) scaled}.\n*\n* @return The y location of the pivot point.\n*\n* @deprecated Use {@link View#getPivotY()} directly.\n*/\n"}, "getPivotX": {"dirtyReplacement": "View#getPivotX()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getPivotX", "method": "float getPivotX(View)", "replacementComments": "/**\n* The x location of the point around which the view is\n* {@link #setRotation(View, float) rotated} and {@link #setScaleX(View, float) scaled}.\n*\n* @deprecated Use {@link View#getPivotX()} directly.\n*/\n"}, "setScrollY": {"dirtyReplacement": "AccessibilityRecord#setScrollY(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setScrollY", "method": "void setScrollY(int)", "replacementComments": "/**\n* Sets the scroll offset of the source top edge in pixels.\n*\n* @param scrollY The scroll.\n*\n* @deprecated Use {@link AccessibilityRecord#setScrollY(int)} directly.\n*/\n"}, "setScrollX": {"dirtyReplacement": "AccessibilityRecord#setScrollX(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setScrollX", "method": "void setScrollX(int)", "replacementComments": "/**\n* Sets the scroll offset of the source left edge in pixels.\n*\n* @param scrollX The scroll.\n*\n* @deprecated Use {@link AccessibilityRecord#setScrollX(int)} directly.\n*/\n"}, "writeString": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeString", "method": "void writeString(long,String)", "replacementComments": "/**\n* Write a single proto \"string\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setLights": {"dirtyReplacement": "NotificationChannel#enableLights(boolean)", "methodClass": "android.app.Notification.Builder", "methodName": "setLights", "method": "Builder setLights(int,int,int)", "replacementComments": "/**\n* Set the desired color for the indicator LED on the device, as well as the\n* blink duty cycle (specified in milliseconds).\n*\n* Not all devices will honor all (or even any) of these values.\n*\n* @deprecated use {@link NotificationChannel#enableLights(boolean)} instead.\n* @see Notification#ledARGB\n* @see Notification#ledOnMS\n* @see Notification#ledOffMS\n*/\n"}, "getDrawableForDensity": {"dirtyReplacement": "getDrawableForDensity(int, int, Theme)", "methodClass": "android.content.res.Resources", "methodName": "getDrawableForDensity", "method": "Drawable getDrawableForDensity(int,int)", "replacementComments": "/**\n* Return a drawable object associated with a particular resource ID for the\n* given screen density in DPI. This will set the drawable's density to be\n* the device's density multiplied by the ratio of actual drawable density\n* to requested density. This allows the drawable to be scaled up to the\n* correct size if needed. Various types of objects will be returned\n* depending on the underlying resource -- for example, a solid color, PNG\n* image, scalable image, etc. The Drawable API hides these implementation\n* details.\n*\n* <p class=\"note\"><strong>Note:</strong> To obtain a themed drawable, use\n* {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}\n* or {@link #getDrawableForDensity(int, int, Theme)} passing the desired\n* theme.</p>\n*\n* @param id The desired resource identifier, as generated by the aapt tool.\n* This integer encodes the package, type, and resource entry.\n* The value 0 is an invalid identifier.\n* @param density the desired screen density indicated by the resource as\n* found in {@link DisplayMetrics}. A value of 0 means to use the\n* density returned from {@link #getConfiguration()}.\n* This is equivalent to calling {@link #getDrawable(int)}.\n* @return Drawable An object that can be used to draw this resource.\n* @throws NotFoundException Throws NotFoundException if the given ID does\n* not exist.\n* @see #getDrawableForDensity(int, int, Theme)\n* @deprecated Use {@link #getDrawableForDensity(int, int, Theme)} instead.\n*/\n"}, "requestSendAccessibilityEvent": {"dirtyReplacement": "ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)", "methodClass": "androidx.core.view.ViewParentCompat", "methodName": "requestSendAccessibilityEvent", "method": "boolean requestSendAccessibilityEvent(ViewParent,View,AccessibilityEvent)", "replacementComments": "/**\n* Called by a child to request from its parent to send an {@link AccessibilityEvent}.\n* The child has already populated a record for itself in the event and is delegating\n* to its parent to send the event. The parent can optionally add a record for itself.\n* <p>\n* Note: An accessibility event is fired by an individual view which populates the\n* event with a record for its state and requests from its parent to perform\n* the sending. The parent can optionally add a record for itself before\n* dispatching the request to its parent. A parent can also choose not to\n* respect the request for sending the event. The accessibility event is sent\n* by the topmost view in the view tree.</p>\n*\n* @param parent The parent whose method to invoke.\n* @param child The child which requests sending the event.\n* @param event The event to be sent.\n* @return True if the event was sent.\n*\n* @deprecated Use {@link ViewParent#requestSendAccessibilityEvent(View, AccessibilityEvent)}\n* directly.\n*/\n"}, "formatJapaneseNumber": {"dirtyReplacement": "link #formatNumber(String phoneNumber, String defaultCountryIso)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "formatJapaneseNumber", "method": "void formatJapaneseNumber(Editable)", "replacementComments": "/**\n* Formats a phone number in-place using the Japanese formatting rules.\n* Numbers will be formatted as:\n*\n* <p><code>\n* 03-xxxx-xxxx\n* 090-xxxx-xxxx\n* 0120-xxx-xxx\n* +81-3-xxxx-xxxx\n* +81-90-xxxx-xxxx\n* </code></p>\n*\n* @param text the number to be formatted, will be modified with\n* the formatting\n*\n* @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead\n*/\n"}, "setSubjectMatch": {"dirtyReplacement": "altSubjectMatch", "methodClass": "android.net.wifi.WifiEnterpriseConfig", "methodName": "setSubjectMatch", "method": "void setSubjectMatch(String)", "replacementComments": "/**\n* Set subject match (deprecated). This is the substring to be matched against the subject of\n* the authentication server certificate.\n* @param subjectMatch substring to be matched\n* @deprecated in favor of altSubjectMatch\n*/\n"}, "setScaleY": {"dirtyReplacement": "View#setScaleY(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setScaleY", "method": "void setScaleY(View,float)", "replacementComments": "/**\n* Sets the amount that the view is scaled in Y around the pivot point, as a proportion of\n* the view's unscaled width. A value of 1 means that no scaling is applied.\n*\n* @param value The scaling factor.\n*\n* @deprecated Use {@link View#setScaleY(float)} directly.\n*/\n"}, "setPermissionCompatDelegate": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat", "methodName": "setPermissionCompatDelegate", "method": "void setPermissionCompatDelegate(PermissionCompatDelegate)", "replacementComments": "/**\n* Sets the permission delegate for {@code FragmentCompat}. Replaces the previously set\n* delegate.\n*\n* @param delegate The delegate to be set. {@code null} to clear the set delegate.\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "defineClass": {"dirtyReplacement": "defineClass(String, byte[], int, int)  defineClass(String, byte[], int, int)", "methodClass": "java.lang.ClassLoader", "methodName": "defineClass", "method": "Class<?> defineClass(byte[],int,int)", "replacementComments": "/**\n* Converts an array of bytes into an instance of class <tt>Class</tt>.\n* Before the <tt>Class</tt> can be used it must be resolved.  This method\n* is deprecated in favor of the version that takes a <a\n* href=\"#name\">binary name</a> as its first argument, and is more secure.\n*\n* @param  b\n* The bytes that make up the class data.  The bytes in positions\n* <tt>off</tt> through <tt>off+len-1</tt> should have the format\n* of a valid class file as defined by\n* <cite>The Java&trade; Virtual Machine Specification</cite>.\n*\n* @param  off\n* The start offset in <tt>b</tt> of the class data\n*\n* @param  len\n* The length of the class data\n*\n* @return  The <tt>Class</tt> object that was created from the specified\n* class data\n*\n* @throws  ClassFormatError\n* If the data did not contain a valid class\n*\n* @throws  IndexOutOfBoundsException\n* If either <tt>off</tt> or <tt>len</tt> is negative, or if\n* <tt>off+len</tt> is greater than <tt>b.length</tt>.\n*\n* @throws  SecurityException\n* If an attempt is made to add this class to a package that\n* contains classes that were signed by a different set of\n* certificates than this class, or if an attempt is made\n* to define a class in a package with a fully-qualified name\n* that starts with \"{@code java.}\".\n*\n* @see  #loadClass(String, boolean)\n* @see  #resolveClass(Class)\n*\n* @deprecated  Replaced by {@link #defineClass(String, byte[], int, int)\n* defineClass(String, byte[], int, int)}\n*/\n"}, "writeRepeatedBool": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedBool", "method": "void writeRepeatedBool(long,boolean)", "replacementComments": "/**\n* Write a single repeated proto \"bool\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getFormatTypeForLocale": {"dirtyReplacement": "link #formatNumber(String phoneNumber, String defaultCountryIso)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "getFormatTypeForLocale", "method": "int getFormatTypeForLocale(Locale)", "replacementComments": "/**\n* Returns the phone number formatting type for the given locale.\n*\n* @param locale The locale of interest, usually {@link Locale#getDefault()}\n* @return The formatting type for the given locale, or FORMAT_UNKNOWN if the formatting\n* rules are not known for the given locale\n*\n* @deprecated Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead\n*/\n"}, "writeEnum": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeEnum", "method": "void writeEnum(long,int)", "replacementComments": "/**\n* Write a single proto enum type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onRequestPermissionsResult": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat.OnRequestPermissionsResultCallback", "methodName": "onRequestPermissionsResult", "method": "void onRequestPermissionsResult(int,String[],int[])", "replacementComments": "/**\n* Callback for the result from requesting permissions. This method\n* is invoked for every call on {@link #requestPermissions(android.app.Fragment,\n* String[], int)}\n*\n* @param requestCode The request code passed in {@link #requestPermissions(\n* android.app.Fragment, String[], int)}\n* @param permissions The requested permissions. Never null.\n* @param grantResults The grant results for the corresponding permissions\n* which is either {@link android.content.pm.PackageManager#PERMISSION_GRANTED}\n* or {@link android.content.pm.PackageManager#PERMISSION_DENIED}. Never null.\n*\n* @see #requestPermissions(android.app.Fragment, String[], int)\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "setProgressBackgroundColor": {"dirtyReplacement": "setProgressBackgroundColorSchemeResource(int)", "methodClass": "androidx.swiperefreshlayout.widget.SwipeRefreshLayout", "methodName": "setProgressBackgroundColor", "method": "void setProgressBackgroundColor(int)", "replacementComments": "/**\n* @deprecated Use {@link #setProgressBackgroundColorSchemeResource(int)}\n*/\n"}, "endRepeatedObject": {"dirtyReplacement": "end()", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "endRepeatedObject", "method": "void endRepeatedObject(long)", "replacementComments": "/**\n* End a child object. Pass in the token from the correspoinding startRepeatedObject call.\n*\n* @deprecated Use #end() instead.\n*/\n"}, "writeRepeatedBytes": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedBytes", "method": "void writeRepeatedBytes(long,byte[])", "replacementComments": "/**\n* Write a single repeated proto \"bytes\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "untagSocket": {"dirtyReplacement": "TrafficStats#untagSocket(Socket)", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "untagSocket", "method": "void untagSocket(Socket)", "replacementComments": "/**\n* Remove any statistics parameters from the given {@link Socket}.\n*\n* @deprecated Use {@link TrafficStats#untagSocket(Socket)} directly.\n*/\n"}, "getUniversalPinState": {"dirtyReplacement": "UiccProfile#getUniversalPinState()", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getUniversalPinState", "method": "PinState getUniversalPinState()", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#getUniversalPinState()} instead.\n*/\n"}, "getRecord": {"dirtyReplacement": "AccessibilityEvent#getRecord(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityEventCompat", "methodName": "getRecord", "method": "AccessibilityRecordCompat getRecord(AccessibilityEvent,int)", "replacementComments": "/**\n* Gets the record at a given index.\n*\n* @param index The index.\n* @return The record at the specified index.\n*\n* @deprecated Use {@link AccessibilityEvent#getRecord(int)} directly.\n*/\n"}, "onNestedPreScroll": {"dirtyReplacement": "onNestedPreScroll(CoordinatorLayout, View, View, int, int, int[], int)", "methodClass": "androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior", "methodName": "onNestedPreScroll", "method": "void onNestedPreScroll(CoordinatorLayout,V,View,int,int,int[])", "replacementComments": "/**\n* @deprecated You should now override\n* {@link #onNestedPreScroll(CoordinatorLayout, View, View, int, int, int[], int)}.\n* This method will still continue to be called if the type is\n* {@link ViewCompat#TYPE_TOUCH}.\n*/\n"}, "getFocusedVirtualView": {"dirtyReplacement": "getAccessibilityFocusedVirtualViewId()", "methodClass": "androidx.customview.widget.ExploreByTouchHelper", "methodName": "getFocusedVirtualView", "method": "int getFocusedVirtualView()", "replacementComments": "/**\n* Returns the virtual view ID for the currently accessibility focused\n* item.\n*\n* @return the identifier of the virtual view that has accessibility focus\n* or {@link #INVALID_ID} if no virtual view has accessibility\n* focus\n* @deprecated Use {@link #getAccessibilityFocusedVirtualViewId()}.\n*/\n"}, "hasDrawnLw": {"dirtyReplacement": "isDrawnLw", "methodClass": "com.android.server.policy.WindowManagerPolicy.WindowState", "methodName": "hasDrawnLw", "method": "boolean hasDrawnLw()", "replacementComments": "/**\n* Returns true if this window has been shown on screen at some time in\n* the past.  Must be called with the window manager lock held.\n*\n* @deprecated Use {@link #isDrawnLw} or any of the other drawn/visibility methods.\n*/\n"}, "getUidTcpRxBytes": {"dirtyReplacement": "getUidRxBytes(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidTcpRxBytes", "method": "long getUidTcpRxBytes(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidRxBytes(int)\n*/\n"}, "write": {"dirtyReplacement": "java.io.ObjectOutputStream#writeFields()", "methodClass": "java.io.ObjectOutputStream.PutField", "methodName": "write", "method": "void write(ObjectOutput)", "replacementComments": "/**\n* Write the data and fields to the specified ObjectOutput stream,\n* which must be the same stream that produced this\n* <code>PutField</code> object.\n*\n* @param  out the stream to write the data and fields to\n* @throws IOException if I/O errors occur while writing to the\n* underlying stream\n* @throws IllegalArgumentException if the specified stream is not\n* the same stream that produced this <code>PutField</code>\n* object\n* @deprecated This method does not write the values contained by this\n* <code>PutField</code> object in a proper format, and may\n* result in corruption of the serialization stream.  The\n* correct way to write <code>PutField</code> data is by\n* calling the {@link java.io.ObjectOutputStream#writeFields()}\n* method.\n*/\n"}, "jumpDrawablesToCurrentState": {"dirtyReplacement": "View#jumpDrawablesToCurrentState()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "jumpDrawablesToCurrentState", "method": "void jumpDrawablesToCurrentState(View)", "replacementComments": "/**\n* On API 11 devices and above, call <code>Drawable.jumpToCurrentState()</code>\n* on all Drawable objects associated with this view.\n* <p>\n* On API 21 and above, also calls <code>StateListAnimator#jumpToCurrentState()</code>\n* if there is a StateListAnimator attached to this view.\n*\n* @deprecated Use {@link View#jumpDrawablesToCurrentState()} directly.\n*/\n"}, "shouldClearTask": {"dirtyReplacement": "getPopUpTo()", "methodClass": "androidx.navigation.NavOptions", "methodName": "shouldClearTask", "method": "boolean shouldClearTask()", "replacementComments": "/**\n* Whether this navigation action should clear the entire back stack\n* <p>\n* This functions similarly to how {@link android.content.Intent#FLAG_ACTIVITY_CLEAR_TASK}\n* works with activites.\n* @deprecated This is synonymous with {@link #getPopUpTo()} with the root of the graph and\n* using {@link #isPopUpToInclusive()}.\n*/\n"}, "getColorStateList": {"dirtyReplacement": "getColorStateList(int, Theme)", "methodClass": "android.content.res.Resources", "methodName": "getColorStateList", "method": "ColorStateList getColorStateList(int)", "replacementComments": "/**\n* Returns a color state list associated with a particular resource ID. The\n* resource may contain either a single raw color value or a complex\n* {@link ColorStateList} holding multiple possible colors.\n*\n* @param id The desired resource identifier of a {@link ColorStateList},\n* as generated by the aapt tool. This integer encodes the\n* package, type, and resource entry. The value 0 is an invalid\n* identifier.\n*\n* @throws NotFoundException Throws NotFoundException if the given ID does\n* not exist.\n*\n* @return A ColorStateList object containing either a single solid color\n* or multiple colors that can be selected based on a state.\n* @deprecated Use {@link #getColorStateList(int, Theme)} instead.\n*/\n"}, "getColor": {"dirtyReplacement": "getColor(int, Theme)", "methodClass": "android.content.res.Resources", "methodName": "getColor", "method": "int getColor(int)", "replacementComments": "/**\n* Returns a color integer associated with a particular resource ID. If the\n* resource holds a complex {@link ColorStateList}, then the default color\n* from the set is returned.\n*\n* @param id The desired resource identifier, as generated by the aapt\n* tool. This integer encodes the package, type, and resource\n* entry. The value 0 is an invalid identifier.\n*\n* @throws NotFoundException Throws NotFoundException if the given ID does\n* not exist.\n*\n* @return A single color value in the form 0xAARRGGBB.\n* @deprecated Use {@link #getColor(int, Theme)} instead.\n*/\n"}, "grantTrust": {"dirtyReplacement": "grantTrust(CharSequence, long, int)", "methodClass": "android.service.trust.TrustAgentService", "methodName": "grantTrust", "method": "void grantTrust(CharSequence,long,boolean)", "replacementComments": "/**\n* Call to grant trust on the device.\n*\n* @param message describes why the device is trusted, e.g. \"Trusted by location\".\n* @param durationMs amount of time in milliseconds to keep the device in a trusted state.\n* Trust for this agent will automatically be revoked when the timeout expires unless\n* extended by a subsequent call to this function. The timeout is measured from the\n* invocation of this function as dictated by {@link SystemClock#elapsedRealtime())}.\n* For security reasons, the value should be no larger than necessary.\n* The value may be adjusted by the system as necessary to comply with a policy controlled\n* by the system or {@link DevicePolicyManager} restrictions. See {@link #onTrustTimeout()}\n* for determining when trust expires.\n* @param initiatedByUser this is a hint to the system that trust is being granted as the\n* direct result of user action - such as solving a security challenge. The hint is used\n* by the system to optimize the experience. Behavior may vary by device and release, so\n* one should only set this parameter if it meets the above criteria rather than relying on\n* the behavior of any particular device or release. Corresponds to\n* {@link #FLAG_GRANT_TRUST_INITIATED_BY_USER}.\n* @throws IllegalStateException if the agent is not currently managing trust.\n*\n* @deprecated use {@link #grantTrust(CharSequence, long, int)} instead.\n*/\n"}, "inflateTitle": {"dirtyReplacement": "onInflateTitleView(LayoutInflater,ViewGroup,Bundle)", "methodClass": "androidx.leanback.app.DetailsSupportFragment", "methodName": "inflateTitle", "method": "View inflateTitle(LayoutInflater,ViewGroup,Bundle)", "replacementComments": "/**\n* @deprecated override {@link #onInflateTitleView(LayoutInflater,ViewGroup,Bundle)} instead.\n*/\n"}, "writeRepeatedUInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedUInt32", "method": "void writeRepeatedUInt32(long,int)", "replacementComments": "/**\n* Write a single repeated proto \"uint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "isTtyModeSupported": {"dirtyReplacement": "TelecomManager#isTtySupported()", "methodClass": "android.telephony.TelephonyManager", "methodName": "isTtyModeSupported", "method": "boolean isTtyModeSupported()", "replacementComments": "/**\n* @deprecated Use {@link TelecomManager#isTtySupported()} instead\n* Whether the phone supports TTY mode.\n*\n* @return {@code true} if the device supports TTY mode, and {@code false} otherwise.\n*/\n"}, "queryGroups": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "queryGroups", "method": "Cursor queryGroups(ContentResolver,long)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "iccExchangeSimIO": {"dirtyReplacement": "UiccProfile#iccExchangeSimIO(int, int, int, int, int, String, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "iccExchangeSimIO", "method": "void iccExchangeSimIO(int,int,int,int,int,String,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#iccIO}\n* @deprecated Please use\n* {@link UiccProfile#iccExchangeSimIO(int, int, int, int, int, String, Message)} instead.\n*/\n"}, "setStreamSolo": {"dirtyReplacement": "requestAudioFocus", "methodClass": "android.media.AudioManager", "methodName": "setStreamSolo", "method": "void setStreamSolo(int,boolean)", "replacementComments": "/**\n* Solo or unsolo a particular stream.\n* <p>\n* Do not use. This method has been deprecated and is now a no-op.\n* {@link #requestAudioFocus} should be used for exclusive audio playback.\n*\n* @param streamType The stream to be soloed/unsoloed.\n* @param state The required solo state: true for solo ON, false for solo\n* OFF\n* @see #isVolumeFixed()\n* @deprecated Do not use. If you need exclusive audio playback use\n* {@link #requestAudioFocus}.\n*/\n"}, "stop": {"dirtyReplacement": "Thread#stop", "methodClass": "java.lang.ThreadGroup", "methodName": "stop", "method": "void stop()", "replacementComments": "/**\n* Stops all threads in this thread group.\n* <p>\n* First, the <code>checkAccess</code> method of this thread group is\n* called with no arguments; this may result in a security exception.\n* <p>\n* This method then calls the <code>stop</code> method on all the\n* threads in this thread group and in all of its subgroups.\n*\n* @exception  SecurityException  if the current thread is not allowed\n* to access this thread group or any of the threads in\n* the thread group.\n* @see        java.lang.SecurityException\n* @see        java.lang.Thread#stop()\n* @see        java.lang.ThreadGroup#checkAccess()\n* @since      JDK1.0\n* @deprecated    This method is inherently unsafe.  See\n* {@link Thread#stop} for details.\n*/\n"}, "clone": {"dirtyReplacement": "RemoteViews(RemoteViews)", "methodClass": "android.widget.RemoteViews", "methodName": "clone", "method": "RemoteViews clone()", "replacementComments": "/**\n* Returns a deep copy of the RemoteViews object. The RemoteView may not be\n* attached to another RemoteView -- it must be the root of a hierarchy.\n*\n* @deprecated use {@link #RemoteViews(RemoteViews)} instead.\n* @throws IllegalStateException if this is not the root of a RemoteView\n* hierarchy\n*/\n"}, "removeAccount": {"dirtyReplacement": "removeAccount(Account, Activity, AccountManagerCallback, Handler)", "methodClass": "android.accounts.AccountManager", "methodName": "removeAccount", "method": "AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)", "replacementComments": "/**\n* Removes an account from the AccountManager.  Does nothing if the account\n* does not exist.  Does not delete the account from the server.\n* The authenticator may have its own policies preventing account\n* deletion, in which case the account will not be deleted.\n*\n* <p>This method requires the caller to have a signature match with the\n* authenticator that manages the specified account.\n*\n* <p><b>NOTE:</b> If targeting your app to work on API level 22 and before,\n* MANAGE_ACCOUNTS permission is needed for those platforms. See docs for\n* this function in API level 22.\n*\n* @param account The {@link Account} to remove\n* @param callback Callback to invoke when the request completes,\n* null for no callback\n* @param handler {@link Handler} identifying the callback thread,\n* null for the main thread\n* @return An {@link AccountManagerFuture} which resolves to a Boolean,\n* true if the account has been successfully removed\n* @deprecated use\n* {@link #removeAccount(Account, Activity, AccountManagerCallback, Handler)}\n* instead\n*/\n"}, "exitKeyguardSecurely": {"dirtyReplacement": "LayoutParams#FLAG_DISMISS_KEYGUARD", "methodClass": "android.app.KeyguardManager", "methodName": "exitKeyguardSecurely", "method": "void exitKeyguardSecurely(OnKeyguardExitResult)", "replacementComments": "/**\n* @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}\n* and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}\n* instead; this allows you to seamlessly hide the keyguard as your application\n* moves in and out of the foreground and does not require that any special\n* permissions be requested.\n*\n* Exit the keyguard securely.  The use case for this api is that, after\n* disabling the keyguard, your app, which was granted permission to\n* disable the keyguard and show a limited amount of information deemed\n* safe without the user getting past the keyguard, needs to navigate to\n* something that is not safe to view without getting past the keyguard.\n*\n* This will, if the keyguard is secure, bring up the unlock screen of\n* the keyguard.\n*\n* @param callback Let's you know whether the operation was succesful and\n* it is safe to launch anything that would normally be considered safe\n* once the user has gotten past the keyguard.\n*/\n"}, "instantiateItem": {"dirtyReplacement": "instantiateItem(android.view.ViewGroup, int)", "methodClass": "com.android.internal.widget.PagerAdapter", "methodName": "instantiateItem", "method": "Object instantiateItem(View,int)", "replacementComments": "/**\n* Create the page for the given position.  The adapter is responsible\n* for adding the view to the container given here, although it only\n* must ensure this is done by the time it returns from\n* {@link #finishUpdate(android.view.ViewGroup)}.\n*\n* @param container The containing View in which the page will be shown.\n* @param position The page position to be instantiated.\n* @return Returns an Object representing the new page.  This does not\n* need to be a View, but can be some other container of the page.\n*\n* @deprecated Use {@link #instantiateItem(android.view.ViewGroup, int)}\n*/\n"}, "getItemClickListener": {"dirtyReplacement": "getOnItemClickListener()", "methodClass": "android.widget.AutoCompleteTextView", "methodName": "getItemClickListener", "method": "OnItemClickListener getItemClickListener()", "replacementComments": "/**\n* <p>Returns the listener that is notified whenever the user clicks an item\n* in the drop down list.</p>\n*\n* @return the item click listener\n*\n* @deprecated Use {@link #getOnItemClickListener()} intead\n*/\n"}, "getMeasuredHeightAndState": {"dirtyReplacement": "View#getMeasuredHeightAndState()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getMeasuredHeightAndState", "method": "int getMeasuredHeightAndState(View)", "replacementComments": "/**\n* Return the full height measurement information for this view as computed\n* by the most recent call to {@link android.view.View#measure(int, int)}.\n* This result is a bit mask as defined by {@link #MEASURED_SIZE_MASK} and\n* {@link #MEASURED_STATE_TOO_SMALL}.\n* This should be used during measurement and layout calculations only. Use\n* {@link android.view.View#getHeight()} to see how wide a view is after layout.\n*\n* @return The measured width of this view as a bit mask.\n*\n* @deprecated Use {@link View#getMeasuredHeightAndState()} directly.\n*/\n"}, "writePackedFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedFixed64", "method": "void writePackedFixed64(long,long[])", "replacementComments": "/**\n* Write a list of packed proto \"fixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "removeConfiguration": {"dirtyReplacement": "removeConfig(long)", "methodClass": "android.app.StatsManager", "methodName": "removeConfiguration", "method": "boolean removeConfiguration(long)", "replacementComments": "/**\n* @deprecated Use {@link #removeConfig(long)}\n*/\n"}, "setTotalTimeLong": {"dirtyReplacement": "setDuration(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setTotalTimeLong", "method": "void setTotalTimeLong(long)", "replacementComments": "/**\n* Sets the total time in milliseconds (long type) for the playback controls row.\n* @param ms Total time in milliseconds of long type.\n* @deprecated Use {@link #setDuration(long)}\n*/\n"}, "startUpdate": {"dirtyReplacement": "startUpdate(ViewGroup)", "methodClass": "androidx.viewpager.widget.PagerAdapter", "methodName": "startUpdate", "method": "void startUpdate(View)", "replacementComments": "/**\n* Called when a change in the shown pages is going to start being made.\n* @param container The containing View which is displaying this adapter's\n* page views.\n*\n* @deprecated Use {@link #startUpdate(ViewGroup)}\n*/\n"}, "isGraphic": {"dirtyReplacement": "isGraphic(CharSequence)", "methodClass": "android.text.TextUtils", "methodName": "isGraphic", "method": "boolean isGraphic(char)", "replacementComments": "/**\n* Returns whether this character is a printable character.\n*\n* This does not support non-BMP characters and should not be used.\n*\n* @deprecated Use {@link #isGraphic(CharSequence)} instead.\n*/\n"}, "requestFitSystemWindows": {"dirtyReplacement": "requestApplyInsets()", "methodClass": "android.view.View", "methodName": "requestFitSystemWindows", "method": "void requestFitSystemWindows()", "replacementComments": "/**\n* Ask that a new dispatch of {@link #fitSystemWindows(Rect)} be performed.\n* @deprecated Use {@link #requestApplyInsets()} for newer platform versions.\n*/\n"}, "getMaximumDrawingCacheSize": {"dirtyReplacement": "getScaledMaximumDrawingCacheSize()", "methodClass": "android.view.ViewConfiguration", "methodName": "getMaximumDrawingCacheSize", "method": "int getMaximumDrawingCacheSize()", "replacementComments": "/**\n* The maximum drawing cache size expressed in bytes.\n*\n* @return the maximum size of View's drawing cache expressed in bytes\n*\n* @deprecated Use {@link #getScaledMaximumDrawingCacheSize()} instead.\n*/\n"}, "hasPermanentMenuKey": {"dirtyReplacement": "ViewConfiguration#hasPermanentMenuKey()", "methodClass": "androidx.core.view.ViewConfigurationCompat", "methodName": "hasPermanentMenuKey", "method": "boolean hasPermanentMenuKey(ViewConfiguration)", "replacementComments": "/**\n* Report if the device has a permanent menu key available to the user, in a backwards\n* compatible way.\n*\n* @deprecated Use {@link ViewConfiguration#hasPermanentMenuKey()} directly.\n*/\n"}, "getCertificates": {"dirtyReplacement": "getCertificateChains", "methodClass": "android.util.jar.StrictJarFile", "methodName": "getCertificates", "method": "Certificate[] getCertificates(ZipEntry)", "replacementComments": "/**\n* Return all certificates for a given {@link ZipEntry} belonging to this jar.\n* This method MUST be called only after fully exhausting the InputStream belonging\n* to this entry.\n*\n* Returns {@code null} if this jar file isn't signed or if this method is\n* called before the stream is processed.\n*\n* @deprecated Switch callers to use getCertificateChains instead\n*/\n"}, "getButtonState": {"dirtyReplacement": "MotionEvent#getButtonState()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getButtonState", "method": "int getButtonState(MotionEvent)", "replacementComments": "/**\n* @deprecated Call {@link MotionEvent#getButtonState()} directly. This method will be\n* removed in a future release.\n*/\n"}, "setVtSetting": {"dirtyReplacement": "setVtSetting(boolean)", "methodClass": "com.android.ims.ImsManager", "methodName": "setVtSetting", "method": "void setVtSetting(Context,boolean)", "replacementComments": "/**\n* Change persistent VT enabled setting\n*\n* @deprecated Does not support MSIM devices. Please use {@link #setVtSetting(boolean)} instead.\n*/\n"}, "writeBytes": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeBytes", "method": "void writeBytes(long,byte[])", "replacementComments": "/**\n* Write a single proto \"bytes\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "hideProgressBar": {"dirtyReplacement": "setProgressBarShown(boolean)", "methodClass": "com.android.setupwizardlib.SetupWizardLayout", "methodName": "hideProgressBar", "method": "void hideProgressBar()", "replacementComments": "/**\n* @deprecated Use {@link #setProgressBarShown(boolean)}\n*/\n"}, "setOnUtteranceCompletedListener": {"dirtyReplacement": "setOnUtteranceProgressListener(UtteranceProgressListener)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "setOnUtteranceCompletedListener", "method": "int setOnUtteranceCompletedListener(OnUtteranceCompletedListener)", "replacementComments": "/**\n* Sets the listener that will be notified when synthesis of an utterance completes.\n*\n* @param listener The listener to use.\n*\n* @return {@link #ERROR} or {@link #SUCCESS}.\n*\n* @deprecated Use {@link #setOnUtteranceProgressListener(UtteranceProgressListener)}\n* instead.\n*/\n"}, "addAction": {"dirtyReplacement": "addAction(Action)", "methodClass": "android.app.Notification.Builder", "methodName": "addAction", "method": "Builder addAction(int,CharSequence,PendingIntent)", "replacementComments": "/**\n* Add an action to this notification. Actions are typically displayed by\n* the system as a button adjacent to the notification content.\n* <p>\n* Every action must have an icon (32dp square and matching the\n* <a href=\"{@docRoot}design/style/iconography.html#action-bar\">Holo\n* Dark action bar</a> visual style), a textual label, and a {@link PendingIntent}.\n* <p>\n* A notification in its expanded form can display up to 3 actions, from left to right in\n* the order they were added. Actions will not be displayed when the notification is\n* collapsed, however, so be sure that any essential functions may be accessed by the user\n* in some other way (for example, in the Activity pointed to by {@link #contentIntent}).\n*\n* @param icon Resource ID of a drawable that represents the action.\n* @param title Text describing the action.\n* @param intent PendingIntent to be fired when the action is invoked.\n*\n* @deprecated Use {@link #addAction(Action)} instead.\n*/\n"}, "onAttachedToWindow": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "onAttachedToWindow", "method": "void onAttachedToWindow()", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "getItemOffsets": {"dirtyReplacement": "getItemOffsets(Rect, View, RecyclerView, State)", "methodClass": "androidx.recyclerview.widget.RecyclerView.ItemDecoration", "methodName": "getItemOffsets", "method": "void getItemOffsets(Rect,int,RecyclerView)", "replacementComments": "/**\n* @deprecated\n* Use {@link #getItemOffsets(Rect, View, RecyclerView, State)}\n*/\n"}, "onUpdateCursor": {"dirtyReplacement": "{#link onUpdateCursorAnchorInfo(CursorAnchorInfo)}", "methodClass": "android.inputmethodservice.InputMethodService", "methodName": "onUpdateCursor", "method": "void onUpdateCursor(Rect)", "replacementComments": "/**\n* Called when the application has reported a new location of its text\n* cursor.  This is only called if explicitly requested by the input method.\n* The default implementation does nothing.\n* @deprecated Use {#link onUpdateCursorAnchorInfo(CursorAnchorInfo)} instead.\n*/\n"}, "getClientState": {"dirtyReplacement": "getEvents()", "methodClass": "android.service.autofill.FillEventHistory", "methodName": "getClientState", "method": "Bundle getClientState()", "replacementComments": "/**\n* Returns the client state set in the previous {@link FillResponse}.\n*\n* <p><b>Note: </b>the state is associated with the app that was autofilled in the previous\n* {@link AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)}\n* , which is not necessary the same app being autofilled now.\n*\n* @deprecated use {@link #getEvents()} then {@link Event#getClientState()} instead.\n*/\n"}, "getEdgeSlop": {"dirtyReplacement": "getScaledEdgeSlop()", "methodClass": "android.view.ViewConfiguration", "methodName": "getEdgeSlop", "method": "int getEdgeSlop()", "replacementComments": "/**\n* @return Inset in dips to look for touchable content when the user touches the edge of the\n* screen\n*\n* @deprecated Use {@link #getScaledEdgeSlop()} instead.\n*/\n"}, "setClearTask": {"dirtyReplacement": "setPopUpTo(int, boolean)", "methodClass": "androidx.navigation.NavOptions.Builder", "methodName": "setClearTask", "method": "Builder setClearTask(boolean)", "replacementComments": "/**\n* Clear the entire task before launching this target. If you are launching as a\n* {@link #setLaunchDocument(boolean) document}, this will clear the document task.\n* Otherwise it will clear the current task.\n*\n* @param clearTask\n* @return\n* @deprecated Use {@link #setPopUpTo(int, boolean)} with the\n* {@link NavDestination#getId() id} of the\n* {@link androidx.navigation.NavController#getGraph() NavController's graph}\n* and set inclusive to true.\n*/\n"}, "writeSFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeSFixed64", "method": "void writeSFixed64(long,long)", "replacementComments": "/**\n* Write a single proto \"sfixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "startObject": {"dirtyReplacement": "start()", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "startObject", "method": "long startObject(long)", "replacementComments": "/**\n* Start a child object.\n*\n* Returns a token which should be passed to endObject.  Calls to endObject must be\n* nested properly.\n*\n* @deprecated Use #start() instead.\n*/\n"}, "unregisterRemoteControlClient": {"dirtyReplacement": "MediaSession", "methodClass": "android.media.AudioManager", "methodName": "unregisterRemoteControlClient", "method": "void unregisterRemoteControlClient(RemoteControlClient)", "replacementComments": "/**\n* Unregisters the remote control client that was providing information to display on the\n* remote controls.\n* @param rcClient The remote control client to unregister.\n* @see #registerRemoteControlClient(RemoteControlClient)\n* @deprecated Use {@link MediaSession} instead.\n*/\n"}, "resizeBitmapSize": {"dirtyReplacement": "resizeBitmapArea(int)", "methodClass": "com.android.internal.graphics.palette.Palette.Builder", "methodName": "resizeBitmapSize", "method": "Builder resizeBitmapSize(int)", "replacementComments": "/**\n* Set the resize value when using a {@link android.graphics.Bitmap} as the source.\n* If the bitmap's largest dimension is greater than the value specified, then the bitmap\n* will be resized so that its largest dimension matches {@code maxDimension}. If the\n* bitmap is smaller or equal, the original is used as-is.\n*\n* @deprecated Using {@link #resizeBitmapArea(int)} is preferred since it can handle\n* abnormal aspect ratios more gracefully.\n*\n* @param maxDimension the number of pixels that the max dimension should be scaled down to,\n* or any value <= 0 to disable resizing.\n*/\n"}, "setOemUnlockEnabled": {"dirtyReplacement": "OemLockManager#setOemUnlockAllowedByUser(boolean)", "methodClass": "android.service.persistentdata.PersistentDataBlockManager", "methodName": "setOemUnlockEnabled", "method": "void setOemUnlockEnabled(boolean)", "replacementComments": "/**\n* Writes a byte enabling or disabling the ability to \"OEM unlock\" the device.\n*\n* @deprecated use {@link OemLockManager#setOemUnlockAllowedByUser(boolean)} instead.\n*/\n"}, "playEarcon": {"dirtyReplacement": "playEarcon(String, int, Bundle, String)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "playEarcon", "method": "int playEarcon(String,int,HashMap<String, String>)", "replacementComments": "/**\n* Plays the earcon using the specified queueing mode and parameters.\n* The earcon must already have been added with {@link #addEarcon(String, String)} or\n* {@link #addEarcon(String, String, int)}.\n* This method is asynchronous, i.e. the method just adds the request to the queue of TTS\n* requests and then returns. The synthesis might not have finished (or even started!) at the\n* time when this method returns. In order to reliably detect errors during synthesis,\n* we recommend setting an utterance progress listener (see\n* {@link #setOnUtteranceProgressListener}) and using the\n* {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.\n*\n* @param earcon The earcon that should be played\n* @param queueMode {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.\n* @param params Parameters for the request. Can be null.\n* Supported parameter names:\n* {@link Engine#KEY_PARAM_STREAM},\n* {@link Engine#KEY_PARAM_UTTERANCE_ID}.\n* Engine specific parameters may be passed in but the parameter keys\n* must be prefixed by the name of the engine they are intended for. For example\n* the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the\n* engine named \"com.svox.pico\" if it is being used.\n*\n* @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the playEarcon operation.\n* @deprecated As of API level 21, replaced by\n* {@link #playEarcon(String, int, Bundle, String)}.\n*/\n"}, "onMonitoringSystemChange": {"dirtyReplacement": "onMonitoringSystemChange(GeofenceHardwareMonitorEvent)", "methodClass": "android.hardware.location.GeofenceHardwareMonitorCallback", "methodName": "onMonitoringSystemChange", "method": "void onMonitoringSystemChange(int,boolean,Location)", "replacementComments": "/**\n* The callback called when the state of a monitoring system changes.\n* {@link GeofenceHardware#MONITORING_TYPE_GPS_HARDWARE} is an example of a\n* monitoring system.\n*\n* @deprecated use {@link #onMonitoringSystemChange(GeofenceHardwareMonitorEvent)} instead.\n* NOTE: this API is will remain to be called on Android API 21 and above for backwards\n* compatibility. But clients must stop implementing it when updating their code.\n*\n* @param monitoringType The type of the monitoring system.\n* @param available Indicates whether the system is currently available or not.\n* @param location The last known location according to the monitoring system.\n*/\n"}, "unloadNanoApp": {"dirtyReplacement": "unloadNanoApp(ContextHubInfo, long)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "unloadNanoApp", "method": "int unloadNanoApp(int)", "replacementComments": "/**\n* Unload a specified nanoApp\n*\n* Note that unloading is asynchronous.  When we return from this method,\n* the nano app (probably) hasn't unloaded yet.  Assuming a return of 0\n* from this method, then the final success/failure for the unload is\n* delivered in a byte string via a call to Callback.onMessageReceipt.\n*\n* TODO(b/30784270): Provide a better success/failure delivery.\n*\n* @param nanoAppHandle handle of the nanoApp to unload\n*\n* @return 0 if the command for unloading was sent to the context hub;\n* -1 otherwise\n*\n* @deprecated Use {@link #unloadNanoApp(ContextHubInfo, long)} instead.\n*/\n"}, "registerMediaButtonEventReceiver": {"dirtyReplacement": "MediaSession#setMediaButtonReceiver(PendingIntent)", "methodClass": "android.media.AudioManager", "methodName": "registerMediaButtonEventReceiver", "method": "void registerMediaButtonEventReceiver(ComponentName)", "replacementComments": "/**\n* Register a component to be the sole receiver of MEDIA_BUTTON intents.\n* @param eventReceiver identifier of a {@link android.content.BroadcastReceiver}\n* that will receive the media button intent. This broadcast receiver must be declared\n* in the application manifest. The package of the component must match that of\n* the context you're registering from.\n* @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead.\n*/\n"}, "runFinalizersOnExit": {"dirtyReplacement": "java.lang.Runtime#exit(int)", "methodClass": "java.lang.System", "methodName": "runFinalizersOnExit", "method": "void runFinalizersOnExit(boolean)", "replacementComments": "/**\n* Enable or disable finalization on exit; doing so specifies that the\n* finalizers of all objects that have finalizers that have not yet been\n* automatically invoked are to be run before the Java runtime exits.\n* By default, finalization on exit is disabled.\n*\n* <p>If there is a security manager,\n* its <code>checkExit</code> method is first called\n* with 0 as its argument to ensure the exit is allowed.\n* This could result in a SecurityException.\n*\n* @deprecated  This method is inherently unsafe.  It may result in\n* finalizers being called on live objects while other threads are\n* concurrently manipulating those objects, resulting in erratic\n* behavior or deadlock.\n* @param value indicating enabling or disabling of finalization\n* @throws  SecurityException\n* if a security manager exists and its <code>checkExit</code>\n* method doesn't allow the exit.\n*\n* @see     java.lang.Runtime#exit(int)\n* @see     java.lang.Runtime#gc()\n* @see     java.lang.SecurityManager#checkExit(int)\n* @since   JDK1.1\n*/\n"}, "getMeasuredState": {"dirtyReplacement": "View#getMeasuredState()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getMeasuredState", "method": "int getMeasuredState(View)", "replacementComments": "/**\n* Return only the state bits of {@link #getMeasuredWidthAndState}\n* and {@link #getMeasuredHeightAndState}, combined into one integer.\n* The width component is in the regular bits {@link #MEASURED_STATE_MASK}\n* and the height component is at the shifted bits\n* {@link #MEASURED_HEIGHT_STATE_SHIFT}>>{@link #MEASURED_STATE_MASK}.\n*\n* @deprecated Use {@link View#getMeasuredState()} directly.\n*/\n"}, "getProvisionedValue": {"dirtyReplacement": "getConfigInt(int)", "methodClass": "com.android.ims.ImsConfig", "methodName": "getProvisionedValue", "method": "int getProvisionedValue(int)", "replacementComments": "/**\n* @deprecated see {@link #getConfigInt(int)} instead.\n*/\n"}, "setMaxScrollX": {"dirtyReplacement": "setMaxScrollX(AccessibilityRecord, int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setMaxScrollX", "method": "void setMaxScrollX(int)", "replacementComments": "/**\n* Sets the max scroll offset of the source left edge in pixels.\n*\n* @param maxScrollX The max scroll.\n*\n* @deprecated Use {@link #setMaxScrollX(AccessibilityRecord, int)} instead.\n*/\n"}, "setStreamType": {"dirtyReplacement": "setAudioAttributes(AudioAttributes)", "methodClass": "android.media.Ringtone", "methodName": "setStreamType", "method": "void setStreamType(int)", "replacementComments": "/**\n* Sets the stream type where this ringtone will be played.\n*\n* @param streamType The stream, see {@link AudioManager}.\n* @deprecated use {@link #setAudioAttributes(AudioAttributes)}\n*/\n"}, "requestAudioFocus": {"dirtyReplacement": "requestAudioFocus(AudioFocusRequest)", "methodClass": "android.media.AudioManager", "methodName": "requestAudioFocus", "method": "int requestAudioFocus(OnAudioFocusChangeListener,int,int)", "replacementComments": "/**\n* Request audio focus.\n* Send a request to obtain the audio focus\n* @param l the listener to be notified of audio focus changes\n* @param streamType the main audio stream type affected by the focus request\n* @param durationHint use {@link #AUDIOFOCUS_GAIN_TRANSIENT} to indicate this focus request\n* is temporary, and focus will be abandonned shortly. Examples of transient requests are\n* for the playback of driving directions, or notifications sounds.\n* Use {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} to indicate also that it's ok for\n* the previous focus owner to keep playing if it ducks its audio output.\n* Alternatively use {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} for a temporary request\n* that benefits from the system not playing disruptive sounds like notifications, for\n* usecases such as voice memo recording, or speech recognition.\n* Use {@link #AUDIOFOCUS_GAIN} for a focus request of unknown duration such\n* as the playback of a song or a video.\n* @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED}\n* @deprecated use {@link #requestAudioFocus(AudioFocusRequest)}\n*/\n"}, "getCapabilities": {"dirtyReplacement": "android.net.wifi.RttManager#getRttCapabilities()", "methodClass": "android.net.wifi.RttManager", "methodName": "getCapabilities", "method": "Capabilities getCapabilities()", "replacementComments": "/**\n* @deprecated Use the new {@link android.net.wifi.RttManager#getRttCapabilities()} API.\n*/\n"}, "setMaxScrollY": {"dirtyReplacement": "setMaxScrollY(AccessibilityRecord, int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setMaxScrollY", "method": "void setMaxScrollY(int)", "replacementComments": "/**\n* Sets the max scroll offset of the source top edge in pixels.\n*\n* @param maxScrollY The max scroll.\n*\n* @deprecated Use {@link #setMaxScrollY(AccessibilityRecord, int)} instead.\n*/\n"}, "getWindowId": {"dirtyReplacement": "AccessibilityRecord#getWindowId()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getWindowId", "method": "int getWindowId()", "replacementComments": "/**\n* Gets the id of the window from which the event comes from.\n*\n* @return The window id.\n*\n* @deprecated Use {@link AccessibilityRecord#getWindowId()} directly.\n*/\n"}, "getScaleX": {"dirtyReplacement": "View#getScaleX()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getScaleX", "method": "float getScaleX(View)", "replacementComments": "/**\n* @deprecated Use {@link View#getScaleX()} directly.\n*/\n"}, "getInputBuffers": {"dirtyReplacement": "getInputBuffer", "methodClass": "android.media.MediaCodec", "methodName": "getInputBuffers", "method": "ByteBuffer[] getInputBuffers()", "replacementComments": "/**\n* Retrieve the set of input buffers.  Call this after start()\n* returns. After calling this method, any ByteBuffers\n* previously returned by an earlier call to this method MUST no\n* longer be used.\n*\n* @deprecated Use the new {@link #getInputBuffer} method instead\n* each time an input buffer is dequeued.\n*\n* <b>Note:</b> As of API 21, dequeued input buffers are\n* automatically {@link java.nio.Buffer#clear cleared}.\n*\n* <em>Do not use this method if using an input surface.</em>\n*\n* @throws IllegalStateException if not in the Executing state,\n* or codec is configured in asynchronous mode.\n* @throws MediaCodec.CodecException upon codec error.\n*/\n"}, "fling": {"dirtyReplacement": "OverScroller#fling(int, int, int, int, int, int, int, int, int, int)", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "fling", "method": "void fling(int,int,int,int,int,int,int,int,int,int)", "replacementComments": "/**\n* Start scrolling based on a fling gesture. The distance travelled will\n* depend on the initial velocity of the fling.\n*\n* @param startX Starting point of the scroll (X)\n* @param startY Starting point of the scroll (Y)\n* @param velocityX Initial velocity of the fling (X) measured in pixels per\n* second.\n* @param velocityY Initial velocity of the fling (Y) measured in pixels per\n* second\n* @param minX Minimum X value. The scroller will not scroll past this\n* point.\n* @param maxX Maximum X value. The scroller will not scroll past this\n* point.\n* @param minY Minimum Y value. The scroller will not scroll past this\n* point.\n* @param maxY Maximum Y value. The scroller will not scroll past this\n* point.\n* @param overX Overfling range. If > 0, horizontal overfling in either\n* direction will be possible.\n* @param overY Overfling range. If > 0, vertical overfling in either\n* direction will be possible.\n*\n* @deprecated Use {@link OverScroller#fling(int, int, int, int, int, int, int, int, int, int)}\n* directly.\n*/\n"}, "dragViewBy": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewBy", "method": "int dragViewBy(ActivityInstrumentationTestCase,View,int,int,int)", "replacementComments": "/**\n* Simulate touching a view and dragging it by the specified amount.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n* @param gravity Which part of the view to use for the initial down event. A combination of\n* (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)\n* @param deltaX Amount to drag horizontally in pixels\n* @param deltaY Amount to drag vertically in pixels\n*\n* @return distance in pixels covered by the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "setDividerInset": {"dirtyReplacement": "setDividerInsets(int, int)", "methodClass": "com.android.setupwizardlib.template.RecyclerMixin", "methodName": "setDividerInset", "method": "void setDividerInset(int)", "replacementComments": "/**\n* @deprecated Use {@link #setDividerInsets(int, int)} instead.\n*/\n"}, "createPersonInMyContactsGroup": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "createPersonInMyContactsGroup", "method": "Uri createPersonInMyContactsGroup(ContentResolver,ContentValues)", "replacementComments": "/**\n* Creates a new contacts and adds it to the \"My Contacts\" group.\n*\n* @param resolver the ContentResolver to use\n* @param values the values to use when creating the contact\n* @return the URI of the contact, or null if the operation fails\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "getUserId": {"dirtyReplacement": "getUser()", "methodClass": "android.service.notification.StatusBarNotification", "methodName": "getUserId", "method": "int getUserId()", "replacementComments": "/**\n* Returns a userid for whom this notification is intended.\n*\n* @deprecated Use {@link #getUser()} instead.\n*/\n"}, "dismissDialog": {"dirtyReplacement": "DialogFragment", "methodClass": "android.app.Activity", "methodName": "dismissDialog", "method": "void dismissDialog(int)", "replacementComments": "/**\n* Dismiss a dialog that was previously shown via {@link #showDialog(int)}.\n*\n* @param id The id of the managed dialog.\n*\n* @throws IllegalArgumentException if the id was not previously shown via\n* {@link #showDialog(int)}.\n*\n* @see #onCreateDialog(int, Bundle)\n* @see #onPrepareDialog(int, Dialog, Bundle)\n* @see #showDialog(int)\n* @see #removeDialog(int)\n*\n* @deprecated Use the new {@link DialogFragment} class with\n* {@link FragmentManager} instead; this is also\n* available on older platforms through the Android compatibility package.\n*/\n"}, "parse": {"dirtyReplacement": "addInterpreter(VCardInterpreter)", "methodClass": "com.android.vcard.VCardParser", "methodName": "parse", "method": "void parse(InputStream,VCardInterpreter)", "replacementComments": "/**\n* @deprecated use {@link #addInterpreter(VCardInterpreter)} and\n* {@link #parse(InputStream)}\n*/\n"}, "isBlob": {"dirtyReplacement": "getType", "methodClass": "android.database.AbstractWindowedCursor", "methodName": "isBlob", "method": "boolean isBlob(int)", "replacementComments": "/**\n* @deprecated Use {@link #getType}\n*/\n"}, "getVersionCode": {"dirtyReplacement": "getLongVersionCode()", "methodClass": "android.content.pm.VersionedPackage", "methodName": "getVersionCode", "method": "int getVersionCode()", "replacementComments": "/**\n* @deprecated use {@link #getLongVersionCode()} instead.\n*/\n"}, "longClickView": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "longClickView", "method": "void longClickView(ActivityInstrumentationTestCase,View)", "replacementComments": "/**\n* Simulate touching the center of a view, holding until it is a long press, and then releasing.\n*\n* @param test The test case that is being run\n* @param v The view that should be clicked\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "getPreviewFrameRate": {"dirtyReplacement": "getPreviewFpsRange(int[])", "methodClass": "android.hardware.Camera.Parameters", "methodName": "getPreviewFrameRate", "method": "int getPreviewFrameRate()", "replacementComments": "/**\n* Returns the setting for the rate at which preview frames are\n* received. This is the target frame rate. The actual frame rate\n* depends on the driver.\n*\n* @return the frame rate setting (frames per second)\n* @deprecated replaced by {@link #getPreviewFpsRange(int[])}\n*/\n"}, "reportBadNetwork": {"dirtyReplacement": "reportNetworkConnectivity", "methodClass": "android.net.ConnectivityManager", "methodName": "reportBadNetwork", "method": "void reportBadNetwork(Network)", "replacementComments": "/**\n* Report a problem network to the framework.  This provides a hint to the system\n* that there might be connectivity problems on this network and may cause\n* the framework to re-evaluate network connectivity and/or switch to another\n* network.\n*\n* @param network The {@link Network} the application was attempting to use\n* or {@code null} to indicate the current default network.\n* @deprecated Use {@link #reportNetworkConnectivity} which allows reporting both\n* working and non-working connectivity.\n*/\n"}, "execute": {"dirtyReplacement": "execute", "methodClass": "android.renderscript.ScriptGroup", "methodName": "execute", "method": "void execute()", "replacementComments": "/**\n* Execute the ScriptGroup.  This will run all the kernels in\n* the ScriptGroup.  No internal connection results will be visible\n* after execution of the ScriptGroup.\n*\n* @deprecated Use {@link #execute} instead.\n*/\n"}, "getData": {"dirtyReplacement": "getReports(long)", "methodClass": "android.app.StatsManager", "methodName": "getData", "method": "byte[] getData(long)", "replacementComments": "/**\n* @deprecated Use {@link #getReports(long)}\n*/\n"}, "getFreeBlocks": {"dirtyReplacement": "getFreeBlocksLong()", "methodClass": "android.os.StatFs", "methodName": "getFreeBlocks", "method": "int getFreeBlocks()", "replacementComments": "/**\n* @deprecated Use {@link #getFreeBlocksLong()} instead.\n*/\n"}, "inClass": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "inClass", "method": "boolean inClass(String)", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "getDrawingCacheQuality": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "getDrawingCacheQuality", "method": "int getDrawingCacheQuality()", "replacementComments": "/**\n* Returns the quality of the drawing cache.\n*\n* @return One of {@link #DRAWING_CACHE_QUALITY_AUTO},\n* {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}\n*\n* @see #setDrawingCacheQuality(int)\n* @see #setDrawingCacheEnabled(boolean)\n* @see #isDrawingCacheEnabled()\n*\n* @attr ref android.R.styleable#View_drawingCacheQuality\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "getNotification": {"dirtyReplacement": "build()", "methodClass": "androidx.core.app.NotificationCompat.Builder", "methodName": "getNotification", "method": "Notification getNotification()", "replacementComments": "/**\n* @deprecated Use {@link #build()} instead.\n*/\n"}, "writeObject": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeObject", "method": "void writeObject(long,byte[])", "replacementComments": "/**\n* Write an object that has already been flattend.\n*\n* @deprecated Use #write instead.\n*/\n"}, "addWord": {"dirtyReplacement": "addWord(Context, String, int, String, Locale)", "methodClass": "android.provider.UserDictionary.Words", "methodName": "addWord", "method": "void addWord(Context,String,int,int)", "replacementComments": "/**\n* Adds a word to the dictionary, with the given frequency and the specified\n* specified locale type.\n*\n* @deprecated Please use\n* {@link #addWord(Context, String, int, String, Locale)} instead.\n*\n* @param context the current application context\n* @param word the word to add to the dictionary. This should not be null or\n* empty.\n* @param localeType the locale type for this word. It should be one of\n* {@link #LOCALE_TYPE_ALL} or {@link #LOCALE_TYPE_CURRENT}.\n*/\n"}, "setOnScrollListener": {"dirtyReplacement": "addOnScrollListener(OnScrollListener)", "methodClass": "androidx.recyclerview.widget.RecyclerView", "methodName": "setOnScrollListener", "method": "void setOnScrollListener(OnScrollListener)", "replacementComments": "/**\n* Set a listener that will be notified of any changes in scroll state or position.\n*\n* @param listener Listener to set or null to clear\n*\n* @deprecated Use {@link #addOnScrollListener(OnScrollListener)} and\n* {@link #removeOnScrollListener(OnScrollListener)}\n*/\n"}, "sendMessage": {"dirtyReplacement": "android.hardware.location.ContextHubClient#sendMessageToNanoApp(  NanoAppMessage)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "sendMessage", "method": "int sendMessage(int,int,ContextHubMessage)", "replacementComments": "/**\n* Send a message to a specific nano app instance on a context hub.\n*\n* Note that the return value of this method only speaks of success\n* up to the point of sending this to the Context Hub.  It is not\n* an assurance that the Context Hub successfully sent this message\n* on to the nanoapp.  If assurance is desired, a protocol should be\n* established between your code and the nanoapp, with the nanoapp\n* sending a confirmation message (which will be reported via\n* Callback.onMessageReceipt).\n*\n* @param hubHandle handle of the hub to send the message to\n* @param nanoAppHandle  handle of the nano app to send to\n* @param message Message to be sent\n*\n* @see ContextHubMessage\n*\n* @return int 0 on success, -1 otherwise\n*\n* @deprecated Use {@link android.hardware.location.ContextHubClient#sendMessageToNanoApp(\n* NanoAppMessage)} instead, after creating a\n* {@link android.hardware.location.ContextHubClient} with\n* {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n* or {@link #createClient(ContextHubInfo, ContextHubClientCallback)}.\n*/\n"}, "hideChild": {"dirtyReplacement": "hideChild(android.view.ViewGroup, android.view.View, int)", "methodClass": "android.animation.LayoutTransition", "methodName": "hideChild", "method": "void hideChild(ViewGroup,View)", "replacementComments": "/**\n* @deprecated Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.\n*/\n"}, "setShadowResource": {"dirtyReplacement": "setShadowResourceLeft(int)", "methodClass": "androidx.slidingpanelayout.widget.SlidingPaneLayout", "methodName": "setShadowResource", "method": "void setShadowResource(int)", "replacementComments": "/**\n* Set a drawable to use as a shadow cast by the right pane onto the left pane\n* during opening/closing.\n*\n* @param resId Resource ID of a drawable to use\n* @deprecated Renamed to {@link #setShadowResourceLeft(int)} to support LTR (left to\n* right language) and {@link #setShadowResourceRight(int)} to support RTL (right to left\n* language) during opening/closing.\n*/\n"}, "readLine": {"dirtyReplacement": "java.io.BufferedReader#readLine()", "methodClass": "java.io.DataInputStream", "methodName": "readLine", "method": "String readLine()", "replacementComments": "/**\n* See the general contract of the <code>readLine</code>\n* method of <code>DataInput</code>.\n* <p>\n* Bytes\n* for this operation are read from the contained\n* input stream.\n*\n* @deprecated This method does not properly convert bytes to characters.\n* As of JDK&nbsp;1.1, the preferred way to read lines of text is via the\n* <code>BufferedReader.readLine()</code> method.  Programs that use the\n* <code>DataInputStream</code> class to read lines can be converted to use\n* the <code>BufferedReader</code> class by replacing code of the form:\n* <blockquote><pre>\n* DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);\n* </pre></blockquote>\n* with:\n* <blockquote><pre>\n* BufferedReader d\n* =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));\n* </pre></blockquote>\n*\n* @return     the next line of text from this input stream.\n* @exception  IOException  if an I/O error occurs.\n* @see        java.io.BufferedReader#readLine()\n* @see        java.io.FilterInputStream#in\n*/\n"}, "onScreenTurnedOn": {"dirtyReplacement": "com.android.systemui.keyguard.ScreenLifecycle", "methodClass": "com.android.keyguard.KeyguardUpdateMonitorCallback", "methodName": "onScreenTurnedOn", "method": "void onScreenTurnedOn()", "replacementComments": "/**\n* Called when the screen has been turned on.\n*\n* @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.\n*/\n"}, "onPopulateAccessibilityEvent": {"dirtyReplacement": "View#onPopulateAccessibilityEvent(AccessibilityEvent)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "onPopulateAccessibilityEvent", "method": "void onPopulateAccessibilityEvent(View,AccessibilityEvent)", "replacementComments": "/**\n* Called from {@link View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)}\n* giving a chance to this View to populate the accessibility event with its\n* text content. While this method is free to modify event\n* attributes other than text content, doing so should normally be performed in\n* {@link View#onInitializeAccessibilityEvent(AccessibilityEvent)}.\n* <p>\n* Example: Adding formatted date string to an accessibility event in addition\n* to the text added by the super implementation:\n* <pre> public void onPopulateAccessibilityEvent(AccessibilityEvent event) {\n* super.onPopulateAccessibilityEvent(event);\n* final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY;\n* String selectedDateUtterance = DateUtils.formatDateTime(mContext,\n* mCurrentDate.getTimeInMillis(), flags);\n* event.getText().add(selectedDateUtterance);\n* }</pre>\n* <p>\n* If an {@link AccessibilityDelegateCompat} has been specified via calling\n* {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)} its\n* {@link AccessibilityDelegateCompat#onPopulateAccessibilityEvent(View, AccessibilityEvent)}\n* is responsible for handling this call.\n* </p>\n* <p class=\"note\"><strong>Note:</strong> Always call the super implementation before adding\n* information to the event, in case the default implementation has basic information to add.\n* </p>\n*\n* @param v The View against which to invoke the method.\n* @param event The accessibility event which to populate.\n*\n* @see View#sendAccessibilityEvent(int)\n* @see View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n*\n* @deprecated Call {@link View#onPopulateAccessibilityEvent(AccessibilityEvent)} directly.\n* This method will be removed in a future release.\n*/\n"}, "notifyVerticalEdgeReached": {"dirtyReplacement": "OverScroller#notifyVerticalEdgeReached(int, int, int)", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "notifyVerticalEdgeReached", "method": "void notifyVerticalEdgeReached(int,int,int)", "replacementComments": "/**\n* Notify the scroller that we've reached a vertical boundary.\n* Normally the information to handle this will already be known\n* when the animation is started, such as in a call to one of the\n* fling functions. However there are cases where this cannot be known\n* in advance. This function will animate a parabolic motion from\n* startY to finalY.\n*\n* @param startY Starting/current Y position\n* @param finalY Desired final Y position\n* @param overY Magnitude of overscroll allowed. This should be the maximum\n* desired distance from finalY. Absolute value - must be positive.\n*\n* @deprecated Use {@link OverScroller#notifyVerticalEdgeReached(int, int, int)} directly.\n*/\n"}, "getCanRetrieveWindowContent": {"dirtyReplacement": "getCapabilities()", "methodClass": "android.accessibilityservice.AccessibilityServiceInfo", "methodName": "getCanRetrieveWindowContent", "method": "boolean getCanRetrieveWindowContent()", "replacementComments": "/**\n* Whether this service can retrieve the current window's content.\n* <p>\n* <strong>Statically set from\n* {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n* </p>\n* @return True if window content can be retrieved.\n*\n* @deprecated Use {@link #getCapabilities()}.\n*/\n"}, "setVibrate": {"dirtyReplacement": "NotificationChannel#setVibrationPattern(long[])", "methodClass": "android.app.Notification.Builder", "methodName": "setVibrate", "method": "Builder setVibrate(long[])", "replacementComments": "/**\n* Set the vibration pattern to use.\n*\n* See {@link android.os.Vibrator#vibrate(long[], int)} for a discussion of the\n* <code>pattern</code> parameter.\n*\n* <p>\n* A notification that vibrates is more likely to be presented as a heads-up notification.\n* </p>\n*\n* @deprecated use {@link NotificationChannel#setVibrationPattern(long[])} instead.\n* @see Notification#vibrate\n*/\n"}, "onGuidedActionEdited": {"dirtyReplacement": "onGuidedActionEditedAndProceed(GuidedAction)", "methodClass": "androidx.leanback.app.GuidedStepSupportFragment", "methodName": "onGuidedActionEdited", "method": "void onGuidedActionEdited(GuidedAction)", "replacementComments": "/**\n* Callback invoked when an action's title or description has been edited, this happens either\n* when user clicks confirm button in IME or user closes IME window by BACK key.\n* @deprecated Override {@link #onGuidedActionEditedAndProceed(GuidedAction)} and/or\n* {@link #onGuidedActionEditCanceled(GuidedAction)}.\n*/\n"}, "setDefaultRequestProperty": {"dirtyReplacement": "getDefaultRequestProperty(java.lang.String)", "methodClass": "java.net.URLConnection", "methodName": "setDefaultRequestProperty", "method": "void setDefaultRequestProperty(String,String)", "replacementComments": "/**\n* Sets the default value of a general request property. When a\n* {@code URLConnection} is created, it is initialized with\n* these properties.\n*\n* @param   key     the keyword by which the request is known\n* (e.g., \"{@code Accept}\").\n* @param   value   the value associated with the key.\n*\n* @see java.net.URLConnection#setRequestProperty(java.lang.String,java.lang.String)\n*\n* @deprecated The instance specific setRequestProperty method\n* should be used after an appropriate instance of URLConnection\n* is obtained. Invoking this method will have no effect.\n*\n* @see #getDefaultRequestProperty(java.lang.String)\n*/\n"}, "writeRepeatedInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedInt32", "method": "void writeRepeatedInt32(long,int)", "replacementComments": "/**\n* Write a single repeated proto \"int32\" type field value.\n*\n* Note that these are stored in memory as signed values and written as unsigned\n* varints, which if negative, are 10 bytes long. If you know the data is likely\n* to be negative, use \"sint32\".\n*\n* @deprecated Use #write instead.\n*/\n"}, "closeFileDescriptor": {"dirtyReplacement": "android.system.Os#close(FileDescriptor)", "methodClass": "android.os.Parcel", "methodName": "closeFileDescriptor", "method": "void closeFileDescriptor(FileDescriptor)", "replacementComments": "/**\n* @deprecated use {@link android.system.Os#close(FileDescriptor)}\n*/\n"}, "getRotationY": {"dirtyReplacement": "View#getRotationY()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getRotationY", "method": "float getRotationY(View)", "replacementComments": "/**\n* @deprecated Use {@link View#getRotationY()} directly.\n*/\n"}, "addPreferredActivity": {"dirtyReplacement": "Context#startActivity(Intent) Context.startActivity()", "methodClass": "android.content.pm.PackageManager", "methodName": "addPreferredActivity", "method": "void addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)", "replacementComments": "/**\n* @deprecated This is a protected API that should not have been available\n* to third party applications.  It is the platform's responsibility for\n* assigning preferred activities and this cannot be directly modified.\n*\n* Add a new preferred activity mapping to the system.  This will be used\n* to automatically select the given activity component when\n* {@link Context#startActivity(Intent) Context.startActivity()} finds\n* multiple matching activities and also matches the given filter.\n*\n* @param filter The set of intents under which this activity will be\n* made preferred.\n* @param match The IntentFilter match category that this preference\n* applies to.\n* @param set The set of activities that the user was picking from when\n* this preference was made.\n* @param activity The component name of the activity that is to be\n* preferred.\n*/\n"}, "getTextSize": {"dirtyReplacement": "getTextZoom", "methodClass": "android.webkit.WebSettings", "methodName": "getTextSize", "method": "TextSize getTextSize()", "replacementComments": "/**\n* Gets the text size of the page. If the text size was previously specified\n* in percent using {@link #setTextZoom}, this will return the closest\n* matching {@link TextSize}.\n*\n* @return the text size as a {@link TextSize} value\n* @see #setTextSize\n* @deprecated Use {@link #getTextZoom} instead.\n*/\n"}, "isAntennaConnected": {"dirtyReplacement": "onAntennaState", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "isAntennaConnected", "method": "boolean isAntennaConnected()", "replacementComments": "/**\n* Get current antenna connection state for current configuration.\n* Only valid if a configuration has been applied.\n* @return {@code true} if the antenna is connected, {@code false} otherwise.\n*\n* @deprecated Use {@link onAntennaState} callback instead\n*/\n"}, "removeAccessibilityStateChangeListener": {"dirtyReplacement": "AccessibilityManager#removeAccessibilityStateChangeListener(  AccessibilityManager.AccessibilityStateChangeListener)", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat", "methodName": "removeAccessibilityStateChangeListener", "method": "boolean removeAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)", "replacementComments": "/**\n* Unregisters an {@link AccessibilityManager.AccessibilityStateChangeListener}.\n*\n* @param manager The accessibility manager.\n* @param listener The listener.\n* @return True if successfully unregistered.\n*\n* @deprecated Use {@link AccessibilityManager#removeAccessibilityStateChangeListener(\n* AccessibilityManager.AccessibilityStateChangeListener)} directly.\n*/\n"}, "getTTL": {"dirtyReplacement": "the getTimeToLive method", "methodClass": "java.net.MulticastSocket", "methodName": "getTTL", "method": "byte getTTL()", "replacementComments": "/**\n* Get the default time-to-live for multicast packets sent out on\n* the socket.\n*\n* @exception IOException if an I/O exception occurs\n* while getting the default time-to-live value\n* @return the default time-to-live value\n* @deprecated use the getTimeToLive method instead, which returns\n* an <b>int</b> instead of a <b>byte</b>.\n* @see #setTTL(byte)\n*/\n"}, "onMultiWindowModeChanged": {"dirtyReplacement": "onMultiWindowModeChanged(boolean, Configuration)", "methodClass": "android.app.Fragment", "methodName": "onMultiWindowModeChanged", "method": "void onMultiWindowModeChanged(boolean)", "replacementComments": "/**\n* Called when the Fragment's activity changes from fullscreen mode to multi-window mode and\n* visa-versa. This is generally tied to {@link Activity#onMultiWindowModeChanged} of the\n* containing Activity.\n*\n* @param isInMultiWindowMode True if the activity is in multi-window mode.\n*\n* @deprecated Use {@link #onMultiWindowModeChanged(boolean, Configuration)} instead.\n*/\n"}, "showSoftInputFromInputMethod": {"dirtyReplacement": "InputMethodService#requestShowSelf(int)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "showSoftInputFromInputMethod", "method": "void showSoftInputFromInputMethod(IBinder,int)", "replacementComments": "/**\n* Show the input method's soft input area, so the user\n* sees the input method window and can interact with it.\n* This can only be called from the currently active input method,\n* as validated by the given token.\n*\n* @param token Supplies the identifying token given to an input method\n* when it was started, which allows it to perform this operation on\n* itself.\n* @param flags Provides additional operating flags.  Currently may be\n* 0 or have the {@link #SHOW_IMPLICIT} or\n* {@link #SHOW_FORCED} bit set.\n* @deprecated Use {@link InputMethodService#requestShowSelf(int)} instead. This method was\n* intended for IME developers who should be accessing APIs through the service. APIs in this\n* class are intended for app developers interacting with the IME.\n*/\n"}, "hasCarrierCycles": {"dirtyReplacement": "getAccumulatedDeltaRangeState()", "methodClass": "android.location.GnssMeasurement", "methodName": "hasCarrierCycles", "method": "boolean hasCarrierCycles()", "replacementComments": "/**\n* Returns {@code true} if {@link #getCarrierCycles()} is available, {@code false} otherwise.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n*/\n"}, "setInstrumentaiton": {"dirtyReplacement": "setInstrumentation(android.app.Instrumentation)", "methodClass": "android.test.AndroidTestRunner", "methodName": "setInstrumentaiton", "method": "void setInstrumentaiton(Instrumentation)", "replacementComments": "/**\n* @deprecated Incorrect spelling,\n* use {@link #setInstrumentation(android.app.Instrumentation)} instead.\n*/\n"}, "isWiredHeadsetOn": {"dirtyReplacement": "AudioManager#getDevices(int)", "methodClass": "android.media.AudioManager", "methodName": "isWiredHeadsetOn", "method": "boolean isWiredHeadsetOn()", "replacementComments": "/**\n* Checks whether a wired headset is connected or not.\n* <p>This is not a valid indication that audio playback is\n* actually over the wired headset as audio routing depends on other conditions.\n*\n* @return true if a wired headset is connected.\n* false if otherwise\n* @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.\n*/\n"}, "saveLayerAlpha": {"dirtyReplacement": "saveLayerAlpha(float, float, float, float, int)", "methodClass": "android.graphics.Canvas", "methodName": "saveLayerAlpha", "method": "int saveLayerAlpha(float,float,float,float,int,int)", "replacementComments": "/**\n* Helper for saveLayerAlpha() that takes 4 values instead of a RectF.\n*\n* As of API Level API level {@value Build.VERSION_CODES#P} the only valid\n* {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.\n*\n* @deprecated Use {@link #saveLayerAlpha(float, float, float, float, int)} instead.\n*/\n"}, "synthesizeToFile": {"dirtyReplacement": "synthesizeToFile(CharSequence, Bundle, File, String)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "synthesizeToFile", "method": "int synthesizeToFile(String,HashMap<String, String>,String)", "replacementComments": "/**\n* Synthesizes the given text to a file using the specified parameters.\n* This method is asynchronous, i.e. the method just adds the request to the queue of TTS\n* requests and then returns. The synthesis might not have finished (or even started!) at the\n* time when this method returns. In order to reliably detect errors during synthesis,\n* we recommend setting an utterance progress listener (see\n* {@link #setOnUtteranceProgressListener}) and using the\n* {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.\n*\n* @param text The text that should be synthesized. No longer than\n* {@link #getMaxSpeechInputLength()} characters.\n* @param params Parameters for the request. Can be null.\n* Supported parameter names:\n* {@link Engine#KEY_PARAM_UTTERANCE_ID}.\n* Engine specific parameters may be passed in but the parameter keys\n* must be prefixed by the name of the engine they are intended for. For example\n* the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the\n* engine named \"com.svox.pico\" if it is being used.\n* @param filename Absolute file filename to write the generated audio data to.It should be\n* something like \"/sdcard/myappsounds/mysound.wav\".\n*\n* @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the synthesizeToFile operation.\n* @deprecated As of API level 21, replaced by\n* {@link #synthesizeToFile(CharSequence, Bundle, File, String)}.\n*/\n"}, "hashCode": {"dirtyReplacement": "AccessibilityRecord#hashCode()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "hashCode", "method": "int hashCode()", "replacementComments": "/**\n* @deprecated Use {@link AccessibilityRecord#hashCode()} directly.\n*/\n"}, "getSliceKeywords": {"dirtyReplacement": "SliceMetadata#getSliceKeywords()", "methodClass": "androidx.slice.SliceUtils", "methodName": "getSliceKeywords", "method": "List<String> getSliceKeywords(Slice)", "replacementComments": "/**\n* @return the list of keywords associated with the provided slice, null if no keywords were\n* specified or an empty list if the slice was specified to have no keywords.\n*\n* @deprecated TO BE REMOVED; use {@link SliceMetadata#getSliceKeywords()}\n*/\n"}, "findNanoAppOnHub": {"dirtyReplacement": "queryNanoApps(ContextHubInfo)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "findNanoAppOnHub", "method": "int[] findNanoAppOnHub(int,NanoAppFilter)", "replacementComments": "/**\n* Find a specified nano app on the system\n*\n* @param hubHandle handle of hub to search for nano app\n* @param filter filter specifying the search criteria for app\n*\n* @see NanoAppFilter\n*\n* @return int[] Array of handles to any found nano apps\n*\n* @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub\n* for loaded nanoapps.\n*/\n"}, "getCarrierPhase": {"dirtyReplacement": "getAccumulatedDeltaRangeMeters()", "methodClass": "android.location.GnssMeasurement", "methodName": "getCarrierPhase", "method": "double getCarrierPhase()", "replacementComments": "/**\n* Gets the RF phase detected by the receiver.\n*\n* <p>Range: [0.0, 1.0].\n*\n* <p>This is the fractional part of the complete carrier phase measurement.\n*\n* <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.\n*\n* <p>The error estimate for this value is {@link #getCarrierPhaseUncertainty()}.\n*\n* <p>The value is only available if {@link #hasCarrierPhase()} is {@code true}.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.\n*/\n"}, "getContentDescription": {"dirtyReplacement": "AccessibilityRecord#getContentDescription()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getContentDescription", "method": "CharSequence getContentDescription()", "replacementComments": "/**\n* Gets the description of the source.\n*\n* @return The description.\n*\n* @deprecated Use {@link AccessibilityRecord#getContentDescription()} directly.\n*/\n"}, "registerCallback": {"dirtyReplacement": "createClient(ContextHubInfo, ContextHubClientCallback)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "registerCallback", "method": "int registerCallback(Callback)", "replacementComments": "/**\n* Set a callback to receive messages from the context hub\n*\n* @param callback Callback object\n*\n* @see Callback\n*\n* @return int 0 on success, -1 otherwise\n*\n* @deprecated Use {@link #createClient(ContextHubInfo, ContextHubClientCallback, Executor)}\n* or {@link #createClient(ContextHubInfo, ContextHubClientCallback)} instead to\n* register a {@link android.hardware.location.ContextHubClientCallback}.\n*/\n"}, "createSettingsIntent": {"dirtyReplacement": "createSetupIntent()", "methodClass": "android.media.tv.TvInputInfo", "methodName": "createSettingsIntent", "method": "Intent createSettingsIntent()", "replacementComments": "/**\n* Returns an intent to start the settings activity for this TV input.\n*\n* @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated.\n* Use setup activity instead to provide settings.\n*/\n"}, "clearProfileOwner": {"dirtyReplacement": "wipeData(int)", "methodClass": "android.app.admin.DevicePolicyManager", "methodName": "clearProfileOwner", "method": "void clearProfileOwner(ComponentName)", "replacementComments": "/**\n* Clears the active profile owner. The caller must be the profile owner of this user, otherwise\n* a SecurityException will be thrown. This method is not available to managed profile owners.\n* <p>\n* While some policies previously set by the profile owner will be cleared by this method, it is\n* a best-effort process and some other policies will still remain in place after the profile\n* owner is cleared.\n*\n* @param admin The component to remove as the profile owner.\n* @throws SecurityException if {@code admin} is not an active profile owner, or the method is\n* being called from a managed profile.\n*\n* @deprecated This method is expected to be used for testing purposes only. The profile owner\n* will lose control of the user and its data after calling it. In order to protect any\n* sensitive data that remains on this user, it is advised that the profile owner deletes it\n* instead of calling this method. See {@link #wipeData(int)}.\n*/\n"}, "resume": {"dirtyReplacement": "Thread#suspend", "methodClass": "java.lang.ThreadGroup", "methodName": "resume", "method": "void resume()", "replacementComments": "/**\n* Resumes all threads in this thread group.\n* <p>\n* First, the <code>checkAccess</code> method of this thread group is\n* called with no arguments; this may result in a security exception.\n* <p>\n* This method then calls the <code>resume</code> method on all the\n* threads in this thread group and in all of its sub groups.\n*\n* @exception  SecurityException  if the current thread is not allowed to\n* access this thread group or any of the threads in the\n* thread group.\n* @see        java.lang.SecurityException\n* @see        java.lang.Thread#resume()\n* @see        java.lang.ThreadGroup#checkAccess()\n* @since      JDK1.0\n* @deprecated    This method is used solely in conjunction with\n* <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,\n* both of which have been deprecated, as they are inherently\n* deadlock-prone.  See {@link Thread#suspend} for details.\n*/\n"}, "getActionIndex": {"dirtyReplacement": "MotionEvent#getActionIndex()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getActionIndex", "method": "int getActionIndex(MotionEvent)", "replacementComments": "/**\n* Call {@link MotionEvent#getAction}, returning only the pointer index\n* portion.\n*\n* @deprecated Call {@link MotionEvent#getActionIndex()} directly. This method will be\n* removed in a future release.\n*/\n"}, "registerListener": {"dirtyReplacement": "SensorManager#registerListener(SensorEventListener, Sensor, int)", "methodClass": "android.hardware.SensorManager", "methodName": "registerListener", "method": "boolean registerListener(SensorListener,int)", "replacementComments": "/**\n* Registers a listener for given sensors.\n*\n* @deprecated This method is deprecated, use\n* {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}\n* instead.\n*\n* @param listener\n* sensor listener object\n*\n* @param sensors\n* a bit masks of the sensors to register to\n*\n* @return <code>true</code> if the sensor is supported and successfully\n* enabled\n*/\n"}, "onAttach": {"dirtyReplacement": "onAttach(Context)", "methodClass": "androidx.fragment.app.Fragment", "methodName": "onAttach", "method": "void onAttach(Activity)", "replacementComments": "/**\n* Called when a fragment is first attached to its activity.\n* {@link #onCreate(Bundle)} will be called after this.\n*\n* @deprecated See {@link #onAttach(Context)}.\n*/\n"}, "writeInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeInt32", "method": "void writeInt32(long,int)", "replacementComments": "/**\n* Write a single proto \"int32\" type field value.\n*\n* Note that these are stored in memory as signed values and written as unsigned\n* varints, which if negative, are 10 bytes long. If you know the data is likely\n* to be negative, use \"sint32\".\n*\n* @deprecated Use #write instead.\n*/\n"}, "shouldLaunchDocument": {"dirtyReplacement": "android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT", "methodClass": "androidx.navigation.NavOptions", "methodName": "shouldLaunchDocument", "method": "boolean shouldLaunchDocument()", "replacementComments": "/**\n* Whether this navigation action should launch the destination in a new document.\n* <p>\n* This functions similarly to how {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}\n* works with activites.\n* @deprecated As per the {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}\n* documentation, it is recommended to use {@link android.R.attr#documentLaunchMode} on an\n* Activity you wish to launch as a new document.\n*/\n"}, "initialize": {"dirtyReplacement": "ShadowOverlayHelper#createShadowOverlayContainer(Context)", "methodClass": "androidx.leanback.widget.ShadowOverlayContainer", "methodName": "initialize", "method": "void initialize(boolean,boolean)", "replacementComments": "/**\n* Initialize shadows, color overlay.\n* @deprecated use {@link ShadowOverlayHelper#createShadowOverlayContainer(Context)} instead.\n*/\n"}, "getStatusOnSim": {"dirtyReplacement": "android.telephony.SmsMessage and getStatusOnIcc", "methodClass": "android.telephony.gsm.SmsMessage", "methodName": "getStatusOnSim", "method": "int getStatusOnSim()", "replacementComments": "/**\n* Returns the status of the message on the SIM (read, unread, sent, unsent).\n*\n* @return the status of the message on the SIM.  These are:\n* SmsManager.STATUS_ON_SIM_FREE\n* SmsManager.STATUS_ON_SIM_READ\n* SmsManager.STATUS_ON_SIM_UNREAD\n* SmsManager.STATUS_ON_SIM_SEND\n* SmsManager.STATUS_ON_SIM_UNSENT\n* @deprecated Use android.telephony.SmsMessage and getStatusOnIcc instead.\n*/\n"}, "getCheckItemIds": {"dirtyReplacement": "getCheckedItemIds()", "methodClass": "android.widget.ListView", "methodName": "getCheckItemIds", "method": "long[] getCheckItemIds()", "replacementComments": "/**\n* Returns the set of checked items ids. The result is only valid if the\n* choice mode has not been set to {@link #CHOICE_MODE_NONE}.\n*\n* @return A new array which contains the id of each checked item in the\n* list.\n*\n* @deprecated Use {@link #getCheckedItemIds()} instead.\n*/\n"}, "generate": {"dirtyReplacement": "Builder", "methodClass": "androidx.palette.graphics.Palette", "methodName": "generate", "method": "Palette generate(Bitmap)", "replacementComments": "/**\n* @deprecated Use {@link Builder} to generate the Palette.\n*/\n"}, "showStatusIcon": {"dirtyReplacement": "InputMethodService#showStatusIcon(int)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "showStatusIcon", "method": "void showStatusIcon(IBinder,String,int)", "replacementComments": "/**\n* @deprecated Use {@link InputMethodService#showStatusIcon(int)} instead. This method was\n* intended for IME developers who should be accessing APIs through the service. APIs in this\n* class are intended for app developers interacting with the IME.\n*/\n"}, "getToIndex": {"dirtyReplacement": "AccessibilityRecord#getToIndex()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getToIndex", "method": "int getToIndex()", "replacementComments": "/**\n* Gets the index of text selection end or the index of the last\n* visible item when scrolling.\n*\n* @return The index of selection end or last item index.\n*\n* @deprecated Use {@link AccessibilityRecord#getToIndex()} directly.\n*/\n"}, "switchToLastInputMethod": {"dirtyReplacement": "InputMethodService#switchToPreviousInputMethod()", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "switchToLastInputMethod", "method": "boolean switchToLastInputMethod(IBinder)", "replacementComments": "/**\n* Force switch to the last used input method and subtype. If the last input method didn't have\n* any subtypes, the framework will simply switch to the last input method with no subtype\n* specified.\n* @param imeToken Supplies the identifying token given to an input method when it was started,\n* which allows it to perform this operation on itself.\n* @return true if the current input method and subtype was successfully switched to the last\n* used input method and subtype.\n* @deprecated Use {@link InputMethodService#switchToPreviousInputMethod()} instead. This method\n* was intended for IME developers who should be accessing APIs through the service. APIs in\n* this class are intended for app developers interacting with the IME.\n*/\n"}, "hasCarrierPhaseUncertainty": {"dirtyReplacement": "getAccumulatedDeltaRangeState()", "methodClass": "android.location.GnssMeasurement", "methodName": "hasCarrierPhaseUncertainty", "method": "boolean hasCarrierPhaseUncertainty()", "replacementComments": "/**\n* Returns {@code true} if {@link #getCarrierPhaseUncertainty()} is available, {@code false}\n* otherwise.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n*/\n"}, "onInitializeAccessibilityEvent": {"dirtyReplacement": "View#onInitializeAccessibilityEvent(AccessibilityEvent)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "onInitializeAccessibilityEvent", "method": "void onInitializeAccessibilityEvent(View,AccessibilityEvent)", "replacementComments": "/**\n* Initializes an {@link AccessibilityEvent} with information about\n* this View which is the event source. In other words, the source of\n* an accessibility event is the view whose state change triggered firing\n* the event.\n* <p>\n* Example: Setting the password property of an event in addition\n* to properties set by the super implementation:\n* <pre> public void onInitializeAccessibilityEvent(AccessibilityEvent event) {\n* super.onInitializeAccessibilityEvent(event);\n* event.setPassword(true);\n* }</pre>\n* <p>\n* If an {@link AccessibilityDelegateCompat} has been specified via calling\n* {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)}, its\n* {@link AccessibilityDelegateCompat#onInitializeAccessibilityEvent(View, AccessibilityEvent)}\n* is responsible for handling this call.\n*\n* @param v The View against which to invoke the method.\n* @param event The event to initialize.\n*\n* @see View#sendAccessibilityEvent(int)\n* @see View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)\n*\n* @deprecated Call {@link View#onInitializeAccessibilityEvent(AccessibilityEvent)} directly.\n* This method will be removed in a future release.\n*/\n"}, "setActivated": {"dirtyReplacement": "View#setActivated(boolean)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setActivated", "method": "void setActivated(View,boolean)", "replacementComments": "/**\n* Changes the activated state of this view. A view can be activated or not.\n* Note that activation is not the same as selection.  Selection is\n* a transient property, representing the view (hierarchy) the user is\n* currently interacting with.  Activation is a longer-term state that the\n* user can move views in and out of.\n*\n* @param activated true if the view must be activated, false otherwise\n*\n* @deprecated Use {@link View#setActivated(boolean)} directly.\n*/\n"}, "setTitleItem": {"dirtyReplacement": "setTitleItem(Icon, int, boolean)", "methodClass": "androidx.slice.builders.ListBuilder.RowBuilder", "methodName": "setTitleItem", "method": "RowBuilder setTitleItem(IconCompat)", "replacementComments": "/**\n* Sets the title item to be the provided icon. There can only be one title item, this\n* will replace any other title items that may have been set.\n*\n* @deprecated TO BE REMOVED; use ListBuilder{@link #setTitleItem(Icon, int, boolean)}.\n*/\n"}, "getOemUnlockEnabled": {"dirtyReplacement": "OemLockManager#isOemUnlockAllowedByUser()", "methodClass": "android.service.persistentdata.PersistentDataBlockManager", "methodName": "getOemUnlockEnabled", "method": "boolean getOemUnlockEnabled()", "replacementComments": "/**\n* Returns whether or not \"OEM unlock\" is enabled or disabled on this device.\n*\n* @deprecated use {@link OemLockManager#isOemUnlockAllowedByUser()} instead.\n*/\n"}, "writeRepeatedDouble": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedDouble", "method": "void writeRepeatedDouble(long,double)", "replacementComments": "/**\n* Write a single repeated proto \"double\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getVerticalMargin": {"dirtyReplacement": "getVerticalSpacing()", "methodClass": "androidx.leanback.widget.BaseGridView", "methodName": "getVerticalMargin", "method": "int getVerticalMargin()", "replacementComments": "/**\n* Returns the spacing in pixels between two child items vertically.\n* @deprecated Use {@link #getVerticalSpacing()}\n*/\n"}, "setFitsSystemWindows": {"dirtyReplacement": "View#setFitsSystemWindows(boolean)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setFitsSystemWindows", "method": "void setFitsSystemWindows(View,boolean)", "replacementComments": "/**\n* Sets whether or not this view should account for system screen decorations\n* such as the status bar and inset its content; that is, controlling whether\n* the default implementation of {@link View#fitSystemWindows(Rect)} will be\n* executed. See that method for more details.\n*\n* @deprecated Use {@link View#setFitsSystemWindows(boolean)} directly.\n*/\n"}, "pingSupplicant": {"dirtyReplacement": "isWifiEnabled()", "methodClass": "android.net.wifi.WifiManager", "methodName": "pingSupplicant", "method": "boolean pingSupplicant()", "replacementComments": "/**\n* Check that the supplicant daemon is responding to requests.\n* @return {@code true} if we were able to communicate with the supplicant and\n* it returned the expected response to the PING message.\n* @deprecated Will return the output of {@link #isWifiEnabled()} instead.\n*/\n"}, "writeRepeatedUInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedUInt64", "method": "void writeRepeatedUInt64(long,long)", "replacementComments": "/**\n* Write a single proto \"uint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "isAvailable": {"dirtyReplacement": "android.net.ConnectivityManager.NetworkCallback", "methodClass": "android.net.NetworkInfo", "methodName": "isAvailable", "method": "boolean isAvailable()", "replacementComments": "/**\n* Indicates whether network connectivity is possible. A network is unavailable\n* when a persistent or semi-persistent condition prevents the possibility\n* of connecting to that network. Examples include\n* <ul>\n* <li>The device is out of the coverage area for any network of this type.</li>\n* <li>The device is on a network other than the home network (i.e., roaming), and\n* data roaming has been disabled.</li>\n* <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li>\n* </ul>\n* Since Android L, this always returns {@code true}, because the system only\n* returns info for available networks.\n* @return {@code true} if the network is available, {@code false} otherwise\n* @deprecated Apps should instead use the\n* {@link android.net.ConnectivityManager.NetworkCallback} API to\n* learn about connectivity changes.\n* {@link ConnectivityManager#registerDefaultNetworkCallback} and\n* {@link ConnectivityManager#registerNetworkCallback}. These will\n* give a more accurate picture of the connectivity state of\n* the device and let apps react more easily and quickly to changes.\n*/\n"}, "getFromIndex": {"dirtyReplacement": "AccessibilityRecord#getFromIndex()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getFromIndex", "method": "int getFromIndex()", "replacementComments": "/**\n* Gets the index of the first character of the changed sequence,\n* or the beginning of a text selection or the index of the first\n* visible item when scrolling.\n*\n* @return The index of the first character or selection\n* start or the first visible item.\n*\n* @deprecated Use {@link AccessibilityRecord#getFromIndex()} directly.\n*/\n"}, "getBeforeText": {"dirtyReplacement": "AccessibilityRecord#getBeforeText()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getBeforeText", "method": "CharSequence getBeforeText()", "replacementComments": "/**\n* Sets the text before a change.\n*\n* @return The text before the change.\n*\n* @deprecated Use {@link AccessibilityRecord#getBeforeText()} directly.\n*/\n"}, "getUidTcpTxBytes": {"dirtyReplacement": "getUidTxBytes(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidTcpTxBytes", "method": "long getUidTcpTxBytes(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidTxBytes(int)\n*/\n"}, "sendEnvelopeWithStatus": {"dirtyReplacement": "UiccProfile#sendEnvelopeWithStatus(String, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "sendEnvelopeWithStatus", "method": "void sendEnvelopeWithStatus(String,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#sendEnvelopeWithStatus}\n* @deprecated Please use {@link UiccProfile#sendEnvelopeWithStatus(String, Message)} instead.\n*/\n"}, "suspend": {"dirtyReplacement": "Thread#suspend", "methodClass": "java.lang.ThreadGroup", "methodName": "suspend", "method": "void suspend()", "replacementComments": "/**\n* Suspends all threads in this thread group.\n* <p>\n* First, the <code>checkAccess</code> method of this thread group is\n* called with no arguments; this may result in a security exception.\n* <p>\n* This method then calls the <code>suspend</code> method on all the\n* threads in this thread group and in all of its subgroups.\n*\n* @exception  SecurityException  if the current thread is not allowed\n* to access this thread group or any of the threads in\n* the thread group.\n* @see        java.lang.Thread#suspend()\n* @see        java.lang.SecurityException\n* @see        java.lang.ThreadGroup#checkAccess()\n* @since      JDK1.0\n* @deprecated    This method is inherently deadlock-prone.  See\n* {@link Thread#suspend} for details.\n*/\n"}, "invalidateChild": {"dirtyReplacement": "onDescendantInvalidated(View, View)", "methodClass": "android.view.ViewParent", "methodName": "invalidateChild", "method": "void invalidateChild(View,Rect)", "replacementComments": "/**\n* All or part of a child is dirty and needs to be redrawn.\n*\n* @param child The child which is dirty\n* @param r The area within the child that is invalid\n*\n* @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.\n*/\n"}, "incrementOperationCount": {"dirtyReplacement": "TrafficStats#incrementOperationCount(int, int)", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "incrementOperationCount", "method": "void incrementOperationCount(int,int)", "replacementComments": "/**\n* Increment count of network operations performed under the given\n* accounting tag. This can be used to derive bytes-per-operation.\n*\n* @param tag Accounting tag used in {@link #setThreadStatsTag(int)}.\n* @param operationCount Number of operations to increment count by.\n*\n* @deprecated Use {@link TrafficStats#incrementOperationCount(int, int)} directly.\n*/\n"}, "getTargetPackage": {"dirtyReplacement": "getCreatorPackage()", "methodClass": "android.app.PendingIntent", "methodName": "getTargetPackage", "method": "String getTargetPackage()", "replacementComments": "/**\n* @deprecated Renamed to {@link #getCreatorPackage()}.\n*/\n"}, "onAccessibilityStateChanged": {"dirtyReplacement": "AccessibilityManager.AccessibilityStateChangeListener", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListener", "methodName": "onAccessibilityStateChanged", "method": "void onAccessibilityStateChanged(boolean)", "replacementComments": "/**\n* Called back on change in the accessibility state.\n*\n* @param enabled Whether accessibility is enabled.\n*\n* @deprecated Use {@link AccessibilityManager.AccessibilityStateChangeListener} directly.\n*/\n"}, "newKeyguardLock": {"dirtyReplacement": "LayoutParams#FLAG_DISMISS_KEYGUARD", "methodClass": "android.app.KeyguardManager", "methodName": "newKeyguardLock", "method": "KeyguardLock newKeyguardLock(String)", "replacementComments": "/**\n* @deprecated Use {@link LayoutParams#FLAG_DISMISS_KEYGUARD}\n* and/or {@link LayoutParams#FLAG_SHOW_WHEN_LOCKED}\n* instead; this allows you to seamlessly hide the keyguard as your application\n* moves in and out of the foreground and does not require that any special\n* permissions be requested.\n*\n* Enables you to lock or unlock the keyboard. Get an instance of this class by\n* calling {@link android.content.Context#getSystemService(java.lang.String) Context.getSystemService()}.\n* This class is wrapped by {@link android.app.KeyguardManager KeyguardManager}.\n* @param tag A tag that informally identifies who you are (for debugging who\n* is disabling he keyguard).\n*\n* @return A {@link KeyguardLock} handle to use to disable and reenable the\n* keyguard.\n*/\n"}, "allowPurging": {"dirtyReplacement": "android.content.ComponentCallbacks2#onTrimMemory(int)", "methodClass": "android.os.MemoryFile", "methodName": "allowPurging", "method": "boolean allowPurging(boolean)", "replacementComments": "/**\n* Enables or disables purging of the memory file.\n*\n* @param allowPurging true if the operating system can purge the contents\n* of the file in low memory situations\n* @return previous value of allowPurging\n*\n* @deprecated Purgable is considered generally fragile and hard to use safely. Applications\n* are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}\n* to react to memory events and release shared memory regions as appropriate.\n*/\n"}, "fitSystemWindows": {"dirtyReplacement": "dispatchApplyWindowInsets(WindowInsets)", "methodClass": "android.view.View", "methodName": "fitSystemWindows", "method": "boolean fitSystemWindows(Rect)", "replacementComments": "/**\n* Called by the view hierarchy when the content insets for a window have\n* changed, to allow it to adjust its content to fit within those windows.\n* The content insets tell you the space that the status bar, input method,\n* and other system windows infringe on the application's window.\n*\n* <p>You do not normally need to deal with this function, since the default\n* window decoration given to applications takes care of applying it to the\n* content of the window.  If you use {@link #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}\n* or {@link #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION} this will not be the case,\n* and your content can be placed under those system elements.  You can then\n* use this method within your view hierarchy if you have parts of your UI\n* which you would like to ensure are not being covered.\n*\n* <p>The default implementation of this method simply applies the content\n* insets to the view's padding, consuming that content (modifying the\n* insets to be 0), and returning true.  This behavior is off by default, but can\n* be enabled through {@link #setFitsSystemWindows(boolean)}.\n*\n* <p>This function's traversal down the hierarchy is depth-first.  The same content\n* insets object is propagated down the hierarchy, so any changes made to it will\n* be seen by all following views (including potentially ones above in\n* the hierarchy since this is a depth-first traversal).  The first view\n* that returns true will abort the entire traversal.\n*\n* <p>The default implementation works well for a situation where it is\n* used with a container that covers the entire window, allowing it to\n* apply the appropriate insets to its content on all edges.  If you need\n* a more complicated layout (such as two different views fitting system\n* windows, one on the top of the window, and one on the bottom),\n* you can override the method and handle the insets however you would like.\n* Note that the insets provided by the framework are always relative to the\n* far edges of the window, not accounting for the location of the called view\n* within that window.  (In fact when this method is called you do not yet know\n* where the layout will place the view, as it is done before layout happens.)\n*\n* <p>Note: unlike many View methods, there is no dispatch phase to this\n* call.  If you are overriding it in a ViewGroup and want to allow the\n* call to continue to your children, you must be sure to call the super\n* implementation.\n*\n* <p>Here is a sample layout that makes use of fitting system windows\n* to have controls for a video view placed inside of the window decorations\n* that it hides and shows.  This can be used with code like the second\n* sample (video player) shown in {@link #setSystemUiVisibility(int)}.\n*\n* {@sample development/samples/ApiDemos/res/layout/video_player.xml complete}\n*\n* @param insets Current content insets of the window.  Prior to\n* {@link android.os.Build.VERSION_CODES#JELLY_BEAN} you must not modify\n* the insets or else you and Android will be unhappy.\n*\n* @return {@code true} if this view applied the insets and it should not\n* continue propagating further down the hierarchy, {@code false} otherwise.\n* @see #getFitsSystemWindows()\n* @see #setFitsSystemWindows(boolean)\n* @see #setSystemUiVisibility(int)\n*\n* @deprecated As of API 20 use {@link #dispatchApplyWindowInsets(WindowInsets)} to apply\n* insets to views. Views should override {@link #onApplyWindowInsets(WindowInsets)} or use\n* {@link #setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)}\n* to implement handling their own insets.\n*/\n"}, "copyToFileOrThrow": {"dirtyReplacement": "copy(InputStream, OutputStream)", "methodClass": "android.os.FileUtils", "methodName": "copyToFileOrThrow", "method": "void copyToFileOrThrow(InputStream,File)", "replacementComments": "/**\n* @deprecated use {@link #copy(InputStream, OutputStream)} instead.\n*/\n"}, "vibrate": {"dirtyReplacement": "vibrate(VibrationEffect)", "methodClass": "android.os.Vibrator", "methodName": "vibrate", "method": "void vibrate(long[],int)", "replacementComments": "/**\n* Vibrate with a given pattern.\n*\n* <p>\n* Pass in an array of ints that are the durations for which to turn on or off\n* the vibrator in milliseconds.  The first value indicates the number of milliseconds\n* to wait before turning the vibrator on.  The next value indicates the number of milliseconds\n* for which to keep the vibrator on before turning it off.  Subsequent values alternate\n* between durations in milliseconds to turn the vibrator off or to turn the vibrator on.\n* </p><p>\n* To cause the pattern to repeat, pass the index into the pattern array at which\n* to start the repeat, or -1 to disable repeating.\n* </p>\n*\n* @param pattern an array of longs of times for which to turn the vibrator on or off.\n* @param repeat the index into pattern at which to repeat, or -1 if\n* you don't want to repeat.\n*\n* @deprecated Use {@link #vibrate(VibrationEffect)} instead.\n*/\n"}, "onFilterSms": {"dirtyReplacement": "onReceiveTextSms", "methodClass": "android.service.carrier.CarrierMessagingService", "methodName": "onFilterSms", "method": "void onFilterSms(MessagePdu,String,int,int,ResultCallback<Boolean>)", "replacementComments": "/**\n* Override this method to filter inbound SMS messages.\n*\n* @param pdu the PDUs of the message\n* @param format the format of the PDUs, typically \"3gpp\" or \"3gpp2\"\n* @param destPort the destination port of a binary SMS, this will be -1 for text SMS\n* @param subId SMS subscription ID of the SIM\n* @param callback result callback. Call with {@code true} to keep an inbound SMS message and\n* deliver to SMS apps, and {@code false} to drop the message.\n* @deprecated Use {@link #onReceiveTextSms} instead.\n*/\n"}, "tagSocket": {"dirtyReplacement": "TrafficStats#tagSocket(Socket)", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "tagSocket", "method": "void tagSocket(Socket)", "replacementComments": "/**\n* Tag the given {@link Socket} with any statistics parameters active for\n* the current thread. Subsequent calls always replace any existing\n* parameters. When finished, call {@link #untagSocket(Socket)} to remove\n* statistics parameters.\n*\n* @see #setThreadStatsTag(int)\n*\n* @deprecated Use {@link TrafficStats#tagSocket(Socket)} directly.\n*/\n"}, "setTitleColor": {"dirtyReplacement": "action bar styles", "methodClass": "android.app.Activity", "methodName": "setTitleColor", "method": "void setTitleColor(int)", "replacementComments": "/**\n* Change the color of the title associated with this activity.\n* <p>\n* This method is deprecated starting in API Level 11 and replaced by action\n* bar styles. For information on styling the Action Bar, read the <a\n* href=\"{@docRoot} guide/topics/ui/actionbar.html\">Action Bar</a> developer\n* guide.\n*\n* @deprecated Use action bar styles instead.\n*/\n"}, "sendStickyOrderedBroadcast": {"dirtyReplacement": "sendBroadcast(Intent)", "methodClass": "android.content.Context", "methodName": "sendStickyOrderedBroadcast", "method": "void sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)", "replacementComments": "/**\n* <p>Version of {@link #sendStickyBroadcast} that allows you to\n* receive data back from the broadcast.  This is accomplished by\n* supplying your own BroadcastReceiver when calling, which will be\n* treated as a final receiver at the end of the broadcast -- its\n* {@link BroadcastReceiver#onReceive} method will be called with\n* the result values collected from the other receivers.  The broadcast will\n* be serialized in the same way as calling\n* {@link #sendOrderedBroadcast(Intent, String)}.\n*\n* <p>Like {@link #sendBroadcast(Intent)}, this method is\n* asynchronous; it will return before\n* resultReceiver.onReceive() is called.  Note that the sticky data\n* stored is only the data you initially supply to the broadcast, not\n* the result of any changes made by the receivers.\n*\n* <p>See {@link BroadcastReceiver} for more information on Intent broadcasts.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent to broadcast; all receivers matching this\n* Intent will receive the broadcast.\n* @param resultReceiver Your own BroadcastReceiver to treat as the final\n* receiver of the broadcast.\n* @param scheduler A custom Handler with which to schedule the\n* resultReceiver callback; if null it will be\n* scheduled in the Context's main thread.\n* @param initialCode An initial value for the result code.  Often\n* Activity.RESULT_OK.\n* @param initialData An initial value for the result data.  Often\n* null.\n* @param initialExtras An initial value for the result extras.  Often\n* null.\n*\n* @see #sendBroadcast(Intent)\n* @see #sendBroadcast(Intent, String)\n* @see #sendOrderedBroadcast(Intent, String)\n* @see #sendStickyBroadcast(Intent)\n* @see android.content.BroadcastReceiver\n* @see #registerReceiver\n* @see android.app.Activity#RESULT_OK\n*/\n"}, "setCurrentMinute": {"dirtyReplacement": "setMinute(int)", "methodClass": "android.widget.TimePicker", "methodName": "setCurrentMinute", "method": "void setCurrentMinute(Integer)", "replacementComments": "/**\n* Sets the currently selected minute.\n*\n* @param currentMinute the minute to set, in the range (0-59)\n* @deprecated Use {@link #setMinute(int)}\n*/\n"}, "getAudioState": {"dirtyReplacement": "getCallAudioState()", "methodClass": "android.telecom.Phone", "methodName": "getAudioState", "method": "AudioState getAudioState()", "replacementComments": "/**\n* Obtains the current phone call audio state of the {@code Phone}.\n*\n* @return An object encapsulating the audio state.\n* @deprecated Use {@link #getCallAudioState()} instead.\n*/\n"}, "unregisterCallback": {"dirtyReplacement": "android.hardware.location.ContextHubClient#close()", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "unregisterCallback", "method": "int unregisterCallback(Callback)", "replacementComments": "/**\n* Unregister a callback for receive messages from the context hub.\n*\n* @see Callback\n*\n* @param callback method to deregister\n*\n* @return int 0 on success, -1 otherwise\n*\n* @deprecated Use {@link android.hardware.location.ContextHubClient#close()} to unregister\n* a {@link android.hardware.location.ContextHubClientCallback}.\n*/\n"}, "writeRepeatedSInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedSInt64", "method": "void writeRepeatedSInt64(long,long)", "replacementComments": "/**\n* Write a single repeated proto \"sint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getFadingEdgeLength": {"dirtyReplacement": "getScaledFadingEdgeLength()", "methodClass": "android.view.ViewConfiguration", "methodName": "getFadingEdgeLength", "method": "int getFadingEdgeLength()", "replacementComments": "/**\n* @return the length of the fading edges in dips\n*\n* @deprecated Use {@link #getScaledFadingEdgeLength()} instead.\n*/\n"}, "getCurrentTime": {"dirtyReplacement": "getCurrentPosition()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getCurrentTime", "method": "int getCurrentTime()", "replacementComments": "/**\n* Returns the current time in milliseconds for the playback controls row.\n* @throws ArithmeticException If current time in milliseconds overflows int.\n* @deprecated Use {@link #getCurrentPosition()}\n*/\n"}, "invalidateOptionsMenu": {"dirtyReplacement": "Activity#invalidateOptionsMenu()", "methodClass": "androidx.core.app.ActivityCompat", "methodName": "invalidateOptionsMenu", "method": "boolean invalidateOptionsMenu(Activity)", "replacementComments": "/**\n* Invalidate the activity's options menu, if able.\n*\n* <p>Before API level 11 (Android 3.0/Honeycomb) the lifecycle of the\n* options menu was controlled primarily by the user's operation of\n* the hardware menu key. When the user presses down on the menu key\n* for the first time the menu was created and prepared by calls\n* to {@link Activity#onCreateOptionsMenu(android.view.Menu)} and\n* {@link Activity#onPrepareOptionsMenu(android.view.Menu)} respectively.\n* Subsequent presses of the menu key kept the existing instance of the\n* Menu itself and called {@link Activity#onPrepareOptionsMenu(android.view.Menu)}\n* to give the activity an opportunity to contextually alter the menu\n* before the menu panel was shown.</p>\n*\n* <p>In Android 3.0+ the Action Bar forces the options menu to be built early\n* so that items chosen to show as actions may be displayed when the activity\n* first becomes visible. The Activity method invalidateOptionsMenu forces\n* the entire menu to be destroyed and recreated from\n* {@link Activity#onCreateOptionsMenu(android.view.Menu)}, offering a similar\n* though heavier-weight opportunity to change the menu's contents. Normally\n* this functionality is used to support a changing configuration of Fragments.</p>\n*\n* <p>Applications may use this support helper to signal a significant change in\n* activity state that should cause the options menu to be rebuilt. If the app\n* is running on an older platform version that does not support menu invalidation\n* the app will still receive {@link Activity#onPrepareOptionsMenu(android.view.Menu)}\n* the next time the user presses the menu key and this method will return false.\n* If this method returns true the options menu was successfully invalidated.</p>\n*\n* @param activity Invalidate the options menu of this activity\n* @return true if this operation was supported and it completed; false if it was not available.\n* @deprecated Use {@link Activity#invalidateOptionsMenu()} directly.\n*/\n"}, "getSetting": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.Settings", "methodName": "getSetting", "method": "String getSetting(ContentResolver,String,String)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "setAudioStreamType": {"dirtyReplacement": "android.media.AudioManager", "methodClass": "android.media.MediaPlayer", "methodName": "setAudioStreamType", "method": "void setAudioStreamType(int)", "replacementComments": "/**\n* Sets the audio stream type for this MediaPlayer. See {@link AudioManager}\n* for a list of stream types. Must call this method before prepare() or\n* prepareAsync() in order for the target stream type to become effective\n* thereafter.\n*\n* @param streamtype the audio stream type\n* @deprecated use {@link #setAudioAttributes(AudioAttributes)}\n* @see android.media.AudioManager\n*/\n"}, "getSubChannel": {"dirtyReplacement": "getSelector()", "methodClass": "android.hardware.radio.RadioManager.ProgramInfo", "methodName": "getSubChannel", "method": "int getSubChannel()", "replacementComments": "/**\n* Sub channel ID. E.g 1 for HD radio HD1\n* @return the program sub channel\n* @deprecated Use {@link getSelector()} instead.\n*/\n"}, "setVerticalMargin": {"dirtyReplacement": "setVerticalSpacing(int)", "methodClass": "androidx.leanback.widget.BaseGridView", "methodName": "setVerticalMargin", "method": "void setVerticalMargin(int)", "replacementComments": "/**\n* Sets the spacing in pixels between two child items vertically.\n* @deprecated Use {@link #setVerticalSpacing(int)}\n*/\n"}, "isActionViewExpanded": {"dirtyReplacement": "MenuItem#isActionViewExpanded()", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "isActionViewExpanded", "method": "boolean isActionViewExpanded(MenuItem)", "replacementComments": "/**\n* Returns true if this menu item's action view has been expanded.\n*\n* @return true if the item's action view is expanded, false otherwise.\n* @see #expandActionView(MenuItem)\n* @see #collapseActionView(MenuItem)\n* @see #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW\n* @see androidx.core.view.MenuItemCompat.OnActionExpandListener\n*\n* @deprecated Use {@link MenuItem#isActionViewExpanded()} directly.\n*/\n"}, "openFileDescriptor": {"dirtyReplacement": "android.system.Os#open(String, int, int)", "methodClass": "android.os.Parcel", "methodName": "openFileDescriptor", "method": "FileDescriptor openFileDescriptor(String,int)", "replacementComments": "/**\n* @deprecated use {@link android.system.Os#open(String, int, int)}\n*/\n"}, "clipRect": {"dirtyReplacement": "Region.Op#INTERSECT", "methodClass": "android.graphics.Canvas", "methodName": "clipRect", "method": "boolean clipRect(Rect,Op)", "replacementComments": "/**\n* Modify the current clip with the specified rectangle, which is\n* expressed in local coordinates.\n*\n* @param rect The rectangle to intersect with the current clip.\n* @param op How the clip is modified\n* @return true if the resulting clip is non-empty\n*\n* @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and\n* {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs\n* are intended to only expand the clip as a result of a restore operation. This enables a view\n* parent to clip a canvas to clearly define the maximal drawing area of its children. The\n* recommended alternative calls are {@link #clipRect(Rect)} and {@link #clipOutRect(Rect)};\n*\n* As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and\n* {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.\n*/\n"}, "setButton": {"dirtyReplacement": "setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)", "methodClass": "android.app.AlertDialog", "methodName": "setButton", "method": "void setButton(CharSequence,OnClickListener)", "replacementComments": "/**\n* Set a listener to be invoked when button 1 of the dialog is pressed.\n*\n* @param text The text to display in button 1.\n* @param listener The {@link DialogInterface.OnClickListener} to use.\n* @deprecated Use\n* {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}\n* with {@link DialogInterface#BUTTON_POSITIVE}\n*/\n"}, "copyFile": {"dirtyReplacement": "copy(File, File)", "methodClass": "android.os.FileUtils", "methodName": "copyFile", "method": "boolean copyFile(File,File)", "replacementComments": "/**\n* @deprecated use {@link #copy(File, File)} instead.\n*/\n"}, "setReparent": {"dirtyReplacement": "android.transition.ChangeTransform", "methodClass": "android.transition.ChangeBounds", "methodName": "setReparent", "method": "void setReparent(boolean)", "replacementComments": "/**\n* Setting this flag tells ChangeBounds to track the before/after parent\n* of every view using this transition. The flag is not enabled by\n* default because it requires the parent instances to be the same\n* in the two scenes or else all parents must use ids to allow\n* the transition to determine which parents are the same.\n*\n* @param reparent true if the transition should track the parent\n* container of target views and animate parent changes.\n* @deprecated Use {@link android.transition.ChangeTransform} to handle\n* transitions between different parents.\n*/\n"}, "setSound": {"dirtyReplacement": "NotificationChannel#setSound(Uri, AudioAttributes)", "methodClass": "android.app.Notification.Builder", "methodName": "setSound", "method": "Builder setSound(Uri)", "replacementComments": "/**\n* Set the sound to play.\n*\n* It will be played using the {@link #AUDIO_ATTRIBUTES_DEFAULT default audio attributes}\n* for notifications.\n*\n* @deprecated use {@link NotificationChannel#setSound(Uri, AudioAttributes)} instead.\n*/\n"}, "setOnActionExpandListener": {"dirtyReplacement": "MenuItem#setOnActionExpandListener(MenuItem.OnActionExpandListener)", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "setOnActionExpandListener", "method": "MenuItem setOnActionExpandListener(MenuItem,OnActionExpandListener)", "replacementComments": "/**\n* Set an {@link OnActionExpandListener} on this menu\n* item to be notified when the associated action view is expanded or collapsed.\n* The menu item must be configured to expand or collapse its action view using the flag\n* {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.\n*\n* @param listener Listener that will respond to expand/collapse events\n* @return This menu item instance for call chaining\n*\n* @deprecated Use {@link MenuItem#setOnActionExpandListener(MenuItem.OnActionExpandListener)}\n* directly.\n*/\n"}, "getUidTcpRxSegments": {"dirtyReplacement": "getUidRxPackets(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidTcpRxSegments", "method": "long getUidTcpRxSegments(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidRxPackets(int)\n*/\n"}, "startSync": {"dirtyReplacement": "requestSync(android.accounts.Account, String, android.os.Bundle)", "methodClass": "android.content.ContentResolver", "methodName": "startSync", "method": "void startSync(Uri,Bundle)", "replacementComments": "/**\n* Start an asynchronous sync operation. If you want to monitor the progress\n* of the sync you may register a SyncObserver. Only values of the following\n* types may be used in the extras bundle:\n* <ul>\n* <li>Integer</li>\n* <li>Long</li>\n* <li>Boolean</li>\n* <li>Float</li>\n* <li>Double</li>\n* <li>String</li>\n* <li>Account</li>\n* <li>null</li>\n* </ul>\n*\n* @param uri the uri of the provider to sync or null to sync all providers.\n* @param extras any extras to pass to the SyncAdapter.\n* @deprecated instead use\n* {@link #requestSync(android.accounts.Account, String, android.os.Bundle)}\n*/\n"}, "writePackedUInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedUInt32", "method": "void writePackedUInt32(long,int[])", "replacementComments": "/**\n* Write a list of packed proto \"uint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "dragViewToY": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewToY", "method": "int dragViewToY(ActivityInstrumentationTestCase,View,int,int)", "replacementComments": "/**\n* Simulate touching a view and dragging it to a specified location. Only moves vertically.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n* @param gravity Which part of the view to use for the initial down event. A combination of\n* (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)\n* @param toY Final location of the view after dragging\n*\n* @return distance in pixels covered by the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "dragViewToX": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewToX", "method": "int dragViewToX(ActivityInstrumentationTestCase,View,int,int)", "replacementComments": "/**\n* Simulate touching a view and dragging it to a specified location. Only moves horizontally.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n* @param gravity Which part of the view to use for the initial down event. A combination of\n* (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)\n* @param toX Final location of the view after dragging\n*\n* @return distance in pixels covered by the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "getInfo": {"dirtyReplacement": "unwrap()", "methodClass": "androidx.core.view.accessibility.AccessibilityNodeInfoCompat", "methodName": "getInfo", "method": "Object getInfo()", "replacementComments": "/**\n* @return The wrapped {@link android.view.accessibility.AccessibilityNodeInfo}.\n*\n* @deprecated Use {@link #unwrap()} instead.\n*/\n"}, "encodePredefinedImProtocol": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.ContactMethods", "methodName": "encodePredefinedImProtocol", "method": "String encodePredefinedImProtocol(int)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "removeGpsStatusListener": {"dirtyReplacement": "unregisterGnssStatusCallback(GnssStatus.Callback)", "methodClass": "android.location.LocationManager", "methodName": "removeGpsStatusListener", "method": "void removeGpsStatusListener(Listener)", "replacementComments": "/**\n* Removes a GPS status listener.\n*\n* @param listener GPS status listener object to remove\n* @deprecated use {@link #unregisterGnssStatusCallback(GnssStatus.Callback)} instead.\n*/\n"}, "isQuickScaleEnabled": {"dirtyReplacement": "isQuickScaleEnabled(ScaleGestureDetector)", "methodClass": "androidx.core.view.ScaleGestureDetectorCompat", "methodName": "isQuickScaleEnabled", "method": "boolean isQuickScaleEnabled(Object)", "replacementComments": "/**\n* Returns whether the quick scale gesture, in which the user performs a double tap followed by\n* a swipe, should perform scaling. See\n* {@link #setQuickScaleEnabled(ScaleGestureDetector, boolean)}.\n*\n* @deprecated Use {@link #isQuickScaleEnabled(ScaleGestureDetector)} that takes\n* {@link ScaleGestureDetector} instead of {@link Object}.\n*/\n"}, "dragViewTo": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewTo", "method": "int dragViewTo(ActivityInstrumentationTestCase,View,int,int,int)", "replacementComments": "/**\n* Simulate touching a view and dragging it to a specified location.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n* @param gravity Which part of the view to use for the initial down event. A combination of\n* (TOP, CENTER_VERTICAL, BOTTOM) and (LEFT, CENTER_HORIZONTAL, RIGHT)\n* @param toX Final location of the view after dragging\n* @param toY Final location of the view after dragging\n*\n* @return distance in pixels covered by the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "toByteArray": {"dirtyReplacement": "NdefMessage#toByteArray()", "methodClass": "android.nfc.NdefRecord", "methodName": "toByteArray", "method": "byte[] toByteArray()", "replacementComments": "/**\n* Return this NDEF Record as a byte array.<p>\n* This method is deprecated, use {@link NdefMessage#toByteArray}\n* instead. This is because the NDEF binary format is not defined for\n* a record outside of the context of a message: the MB and ME flags\n* cannot be set without knowing the location inside a message.<p>\n* This implementation will attempt to serialize a single record by\n* always setting the MB and ME flags (in other words, assume this\n* is a single-record NDEF Message).<p>\n*\n* @deprecated use {@link NdefMessage#toByteArray()} instead\n*/\n"}, "fillMarginLayoutParams": {"dirtyReplacement": "fillMarginLayoutParams(View, ViewGroup.MarginLayoutParams, int, int)", "methodClass": "androidx.percentlayout.widget.PercentLayoutHelper.PercentLayoutInfo", "methodName": "fillMarginLayoutParams", "method": "void fillMarginLayoutParams(MarginLayoutParams,int,int)", "replacementComments": "/**\n* @deprecated Use\n* {@link #fillMarginLayoutParams(View, ViewGroup.MarginLayoutParams, int, int)}\n* for proper RTL support.\n*/\n"}, "getWfcMode": {"dirtyReplacement": "getWfcMode(boolean)", "methodClass": "com.android.ims.ImsManager", "methodName": "getWfcMode", "method": "int getWfcMode(Context,boolean)", "replacementComments": "/**\n* Returns the user configuration of WFC preference setting\n*\n* @param roaming {@code false} for home network setting, {@code true} for roaming  setting\n*\n* @deprecated Doesn't support MSIM devices. Use {@link #getWfcMode(boolean)} instead.\n*/\n"}, "getRotationX": {"dirtyReplacement": "View#getRotationX()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getRotationX", "method": "float getRotationX(View)", "replacementComments": "/**\n* @deprecated Use {@link View#getRotationX()} directly.\n*/\n"}, "addEndItem": {"dirtyReplacement": "addEndItem(Icon, int, boolean)", "methodClass": "androidx.slice.builders.ListBuilder.RowBuilder", "methodName": "addEndItem", "method": "RowBuilder addEndItem(IconCompat,boolean)", "replacementComments": "/**\n* Adds an icon to be displayed at the end of the row. A mixture of icons and actions\n* is not permitted. If an action has already been added this will throw\n* {@link IllegalArgumentException}.\n* <p>\n* Use this method to specify content that will appear in the template once it's been\n* loaded.\n* </p>\n* @param isLoading indicates whether the app is doing work to load the added content in the\n* background or not.\n*\n* @deprecated use ListBuilder{@link #addEndItem(Icon, int, boolean)} instead.\n*/\n"}, "setMenuVisibility": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat", "methodName": "setMenuVisibility", "method": "void setMenuVisibility(Fragment,boolean)", "replacementComments": "/**\n* Call {@link Fragment#setMenuVisibility(boolean) Fragment.setMenuVisibility(boolean)}\n* if running on an appropriate version of the platform.\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "onMetadataChanged": {"dirtyReplacement": "onProgramInfoChanged(RadioManager.ProgramInfo)", "methodClass": "android.hardware.radio.RadioTuner.Callback", "methodName": "onMetadataChanged", "method": "void onMetadataChanged(RadioMetadata)", "replacementComments": "/**\n* Called when metadata is updated for the current program.\n*\n* @deprecated Use {@link #onProgramInfoChanged(RadioManager.ProgramInfo)} instead.\n*/\n"}, "scrollToTop": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "scrollToTop", "method": "void scrollToTop(ActivityInstrumentationTestCase,ViewGroup)", "replacementComments": "/**\n* Scroll a ViewGroup to the top by repeatedly calling\n* {@link #dragQuarterScreenDown(InstrumentationTestCase, Activity)}\n*\n* @param test The test case that is being run\n* @param v The ViewGroup that should be dragged\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "saveState": {"dirtyReplacement": "androidx.fragment.app.FragmentStatePagerAdapter", "methodClass": "androidx.legacy.app.FragmentStatePagerAdapter", "methodName": "saveState", "method": "Parcelable saveState()", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.\n*/\n"}, "setSpeechRecognitionCallback": {"dirtyReplacement": "androidx.leanback.app.SearchSupportFragment", "methodClass": "androidx.leanback.widget.SearchBar", "methodName": "setSpeechRecognitionCallback", "method": "void setSpeechRecognitionCallback(SpeechRecognitionCallback)", "replacementComments": "/**\n* Sets the speech recognition callback.\n*\n* @deprecated Launching voice recognition activity is no longer supported. App should declare\n* android.permission.RECORD_AUDIO in AndroidManifest file. See details in\n* {@link androidx.leanback.app.SearchSupportFragment}.\n*/\n"}, "getAllNetworkInfo": {"dirtyReplacement": "getAllNetworks", "methodClass": "android.net.ConnectivityManager", "methodName": "getAllNetworkInfo", "method": "NetworkInfo[] getAllNetworkInfo()", "replacementComments": "/**\n* Returns connection status information about all network\n* types supported by the device.\n*\n* @return an array of {@link NetworkInfo} objects.  Check each\n* {@link NetworkInfo#getType} for which type each applies.\n*\n* @deprecated This method does not support multiple connected networks\n* of the same type. Use {@link #getAllNetworks} and\n* {@link #getNetworkInfo(android.net.Network)} instead.\n*/\n"}, "setAllowOptimization": {"dirtyReplacement": "setReorderingAllowed(boolean)", "methodClass": "androidx.fragment.app.FragmentTransaction", "methodName": "setAllowOptimization", "method": "FragmentTransaction setAllowOptimization(boolean)", "replacementComments": "/**\n* @deprecated This has been renamed {@link #setReorderingAllowed(boolean)}.\n*/\n"}, "getTouchSlop": {"dirtyReplacement": "getScaledTouchSlop()", "methodClass": "android.view.ViewConfiguration", "methodName": "getTouchSlop", "method": "int getTouchSlop()", "replacementComments": "/**\n* @return Distance in dips a touch can wander before we think the user is scrolling\n*\n* @deprecated Use {@link #getScaledTouchSlop()} instead.\n*/\n"}, "setPreviewFrameRate": {"dirtyReplacement": "setPreviewFpsRange(int,int)", "methodClass": "android.hardware.Camera.Parameters", "methodName": "setPreviewFrameRate", "method": "void setPreviewFrameRate(int)", "replacementComments": "/**\n* Sets the rate at which preview frames are received. This is the\n* target frame rate. The actual frame rate depends on the driver.\n*\n* @param fps the frame rate (frames per second)\n* @deprecated replaced by {@link #setPreviewFpsRange(int,int)}\n*/\n"}, "onDrawOver": {"dirtyReplacement": "onDrawOver(Canvas, RecyclerView, RecyclerView.State)", "methodClass": "androidx.recyclerview.widget.RecyclerView.ItemDecoration", "methodName": "onDrawOver", "method": "void onDrawOver(Canvas,RecyclerView)", "replacementComments": "/**\n* @deprecated\n* Override {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)}\n*/\n"}, "jumpToCurrentState": {"dirtyReplacement": "Drawable#jumpToCurrentState()", "methodClass": "androidx.core.graphics.drawable.DrawableCompat", "methodName": "jumpToCurrentState", "method": "void jumpToCurrentState(Drawable)", "replacementComments": "/**\n* Call {@link Drawable#jumpToCurrentState() Drawable.jumpToCurrentState()}.\n*\n* @param drawable The Drawable against which to invoke the method.\n*\n* @deprecated Use {@link Drawable#jumpToCurrentState()} directly.\n*/\n"}, "getChildMeasureSpec": {"dirtyReplacement": "getChildMeasureSpec(int, int, int, int, boolean)", "methodClass": "com.android.internal.widget.RecyclerView.LayoutManager", "methodName": "getChildMeasureSpec", "method": "int getChildMeasureSpec(int,int,int,boolean)", "replacementComments": "/**\n* Calculate a MeasureSpec value for measuring a child view in one dimension.\n*\n* @param parentSize Size of the parent view where the child will be placed\n* @param padding Total space currently consumed by other elements of the parent\n* @param childDimension Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.\n* Generally obtained from the child view's LayoutParams\n* @param canScroll true if the parent RecyclerView can scroll in this dimension\n*\n* @return a MeasureSpec value for the child view\n* @deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}\n*/\n"}, "setWillNotCacheDrawing": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "setWillNotCacheDrawing", "method": "void setWillNotCacheDrawing(boolean)", "replacementComments": "/**\n* When a View's drawing cache is enabled, drawing is redirected to an\n* offscreen bitmap. Some views, like an ImageView, must be able to\n* bypass this mechanism if they already draw a single bitmap, to avoid\n* unnecessary usage of the memory.\n*\n* @param willNotCacheDrawing true if this view does not cache its\n* drawing, false otherwise\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "setCamera": {"dirtyReplacement": "getSurface", "methodClass": "android.media.MediaRecorder", "methodName": "setCamera", "method": "void setCamera(Camera)", "replacementComments": "/**\n* Sets a {@link android.hardware.Camera} to use for recording.\n*\n* <p>Use this function to switch quickly between preview and capture mode without a teardown of\n* the camera object. {@link android.hardware.Camera#unlock()} should be called before\n* this. Must call before {@link #prepare}.</p>\n*\n* @param c the Camera to use for recording\n* @deprecated Use {@link #getSurface} and the {@link android.hardware.camera2} API instead.\n*/\n"}, "setWfcMode": {"dirtyReplacement": "setWfcMode(int)", "methodClass": "com.android.ims.ImsManager", "methodName": "setWfcMode", "method": "void setWfcMode(Context,int)", "replacementComments": "/**\n* Change persistent WFC preference setting.\n*\n* @deprecated Doesn't support MSIM devices. Use {@link #setWfcMode(int)} instead.\n*/\n"}, "setSetting": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.Settings", "methodName": "setSetting", "method": "void setSetting(ContentResolver,String,String,String)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "abortReliableWrite": {"dirtyReplacement": "abortReliableWrite()", "methodClass": "android.bluetooth.BluetoothGatt", "methodName": "abortReliableWrite", "method": "void abortReliableWrite(BluetoothDevice)", "replacementComments": "/**\n* @deprecated Use {@link #abortReliableWrite()}\n*/\n"}, "removeStickyBroadcastAsUser": {"dirtyReplacement": "sendStickyBroadcastAsUser", "methodClass": "android.content.Context", "methodName": "removeStickyBroadcastAsUser", "method": "void removeStickyBroadcastAsUser(Intent,UserHandle)", "replacementComments": "/**\n* <p>Version of {@link #removeStickyBroadcast(Intent)} that allows you to specify the\n* user the broadcast will be sent to.  This is not available to applications\n* that are not pre-installed on the system image.\n*\n* <p>You must hold the {@link android.Manifest.permission#BROADCAST_STICKY}\n* permission in order to use this API.  If you do not hold that\n* permission, {@link SecurityException} will be thrown.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent that was previously broadcast.\n* @param user UserHandle to remove the sticky broadcast from.\n*\n* @see #sendStickyBroadcastAsUser\n*/\n"}, "clearThreadStatsTag": {"dirtyReplacement": "TrafficStats#clearThreadStatsTag()", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "clearThreadStatsTag", "method": "void clearThreadStatsTag()", "replacementComments": "/**\n* Clear active tag used when accounting {@link Socket} traffic originating\n* from the current thread.\n*\n* @deprecated Use {@link TrafficStats#clearThreadStatsTag()} directly.\n*/\n"}, "clearDeviceOwnerApp": {"dirtyReplacement": "wipeData(int)", "methodClass": "android.app.admin.DevicePolicyManager", "methodName": "clearDeviceOwnerApp", "method": "void clearDeviceOwnerApp(String)", "replacementComments": "/**\n* Clears the current device owner. The caller must be the device owner. This function should be\n* used cautiously as once it is called it cannot be undone. The device owner can only be set as\n* a part of device setup, before it completes.\n* <p>\n* While some policies previously set by the device owner will be cleared by this method, it is\n* a best-effort process and some other policies will still remain in place after the device\n* owner is cleared.\n*\n* @param packageName The package name of the device owner.\n* @throws SecurityException if the caller is not in {@code packageName} or {@code packageName}\n* does not own the current device owner component.\n*\n* @deprecated This method is expected to be used for testing purposes only. The device owner\n* will lose control of the device and its data after calling it. In order to protect any\n* sensitive data that remains on the device, it is advised that the device owner factory resets\n* the device instead of calling this method. See {@link #wipeData(int)}.\n*/\n"}, "getInstance": {"dirtyReplacement": "SharedPreferences.Editor", "methodClass": "androidx.core.content.SharedPreferencesCompat.EditorCompat", "methodName": "getInstance", "method": "EditorCompat getInstance()", "replacementComments": "/**\n* @deprecated This compatibility class is no longer required. Use\n* {@link SharedPreferences.Editor} directly.\n*/\n"}, "hasCarrierPrivilegeRules": {"dirtyReplacement": "UiccProfile#hasCarrierPrivilegeRules()", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "hasCarrierPrivilegeRules", "method": "boolean hasCarrierPrivilegeRules()", "replacementComments": "/**\n* Returns true if there are some carrier privilege rules loaded and specified.\n* @deprecated Please use {@link UiccProfile#hasCarrierPrivilegeRules()} instead.\n*/\n"}, "destroy": {"dirtyReplacement": "suspend", "methodClass": "java.lang.Thread", "methodName": "destroy", "method": "void destroy()", "replacementComments": "/**\n* Throws {@link UnsupportedOperationException}.\n*\n* @deprecated This method was originally designed to destroy this\n* thread without any cleanup. Any monitors it held would have\n* remained locked. However, the method was never implemented.\n* If if were to be implemented, it would be deadlock-prone in\n* much the manner of {@link #suspend}. If the target thread held\n* a lock protecting a critical system resource when it was\n* destroyed, no thread could ever access this resource again.\n* If another thread ever attempted to lock this resource, deadlock\n* would result. Such deadlocks typically manifest themselves as\n* \"frozen\" processes. For more information, see\n* <a href=\"{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html\">\n* Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n* @throws UnsupportedOperationException always\n*/\n"}, "setCurrentHour": {"dirtyReplacement": "setHour(int)", "methodClass": "android.widget.TimePicker", "methodName": "setCurrentHour", "method": "void setCurrentHour(Integer)", "replacementComments": "/**\n* Sets the currently selected hour using 24-hour time.\n*\n* @param currentHour the hour to set, in the range (0-23)\n* @deprecated Use {@link #setHour(int)}\n*/\n"}, "setCurrentItemIndex": {"dirtyReplacement": "AccessibilityRecord#setCurrentItemIndex(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setCurrentItemIndex", "method": "void setCurrentItemIndex(int)", "replacementComments": "/**\n* Sets the index of the source in the list of items that can be visited.\n*\n* @param currentItemIndex The current item index.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setCurrentItemIndex(int)} directly.\n*/\n"}, "getMaximumFlingVelocity": {"dirtyReplacement": "getScaledMaximumFlingVelocity()", "methodClass": "android.view.ViewConfiguration", "methodName": "getMaximumFlingVelocity", "method": "int getMaximumFlingVelocity()", "replacementComments": "/**\n* @return Maximum velocity to initiate a fling, as measured in dips per second.\n*\n* @deprecated Use {@link #getScaledMaximumFlingVelocity()} instead.\n*/\n"}, "cancelNotification": {"dirtyReplacement": "cancelNotification(String key)", "methodClass": "android.service.notification.NotificationListenerService", "methodName": "cancelNotification", "method": "void cancelNotification(String,String,int)", "replacementComments": "/**\n* Inform the notification manager about dismissal of a single notification.\n* <p>\n* Use this if your listener has a user interface that allows the user to dismiss individual\n* notifications, similar to the behavior of Android's status bar and notification panel.\n* It should be called after the user dismisses a single notification using your UI;\n* upon being informed, the notification manager will actually remove the notification\n* and you will get an {@link #onNotificationRemoved(StatusBarNotification)} callback.\n* <p>\n* <b>Note:</b> If your listener allows the user to fire a notification's\n* {@link android.app.Notification#contentIntent} by tapping/clicking/etc., you should call\n* this method at that time <i>if</i> the Notification in question has the\n* {@link android.app.Notification#FLAG_AUTO_CANCEL} flag set.\n*\n* <p>The service should wait for the {@link #onListenerConnected()} event\n* before performing this operation.\n*\n* @param pkg Package of the notifying app.\n* @param tag Tag of the notification as specified by the notifying app in\n* {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.\n* @param id  ID of the notification as specified by the notifying app in\n* {@link android.app.NotificationManager#notify(String, int, android.app.Notification)}.\n* <p>\n* @deprecated Use {@link #cancelNotification(String key)}\n* instead. Beginning with {@link android.os.Build.VERSION_CODES#LOLLIPOP} this method will no longer\n* cancel the notification. It will continue to cancel the notification for applications\n* whose {@code targetSdkVersion} is earlier than {@link android.os.Build.VERSION_CODES#LOLLIPOP}.\n*/\n"}, "play": {"dirtyReplacement": "play(Context, Uri, boolean, AudioAttributes)", "methodClass": "android.media.AsyncPlayer", "methodName": "play", "method": "void play(Context,Uri,boolean,int)", "replacementComments": "/**\n* Start playing the sound.  It will actually start playing at some\n* point in the future.  There are no guarantees about latency here.\n* Calling this before another audio file is done playing will stop\n* that one and start the new one.\n*\n* @param context Your application's context.\n* @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})\n* @param looping Whether the audio should loop forever.\n* (see {@link MediaPlayer#setLooping(boolean)})\n* @param stream the AudioStream to use.\n* (see {@link MediaPlayer#setAudioStreamType(int)})\n* @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead\n*/\n"}, "getUnicodeStream": {"dirtyReplacement": "<code>getCharacterStream</code>", "methodClass": "java.sql.ResultSet", "methodName": "getUnicodeStream", "method": "InputStream getUnicodeStream(String)", "replacementComments": "/**\n* Retrieves the value of the designated column in the current row\n* of this <code>ResultSet</code> object as a stream of two-byte\n* Unicode characters. The first byte is the high byte; the second\n* byte is the low byte.\n*\n* The value can then be read in chunks from the\n* stream. This method is particularly\n* suitable for retrieving large <code>LONGVARCHAR</code> values.\n* The JDBC technology-enabled driver will\n* do any necessary conversion from the database format into Unicode.\n*\n* <P><B>Note:</B> All the data in the returned stream must be\n* read prior to getting the value of any other column. The next\n* call to a getter method implicitly closes the stream.\n* Also, a stream may return <code>0</code> when the method\n* <code>InputStream.available</code> is called, whether there\n* is data available or not.\n*\n* @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n* @return a Java input stream that delivers the database column value\n* as a stream of two-byte Unicode characters.\n* If the value is SQL <code>NULL</code>, the value returned\n* is <code>null</code>.\n* @exception SQLException if the columnLabel is not valid;\n* if a database access error occurs or this method is\n* called on a closed result set\n* @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n* this method\n* @deprecated use <code>getCharacterStream</code> instead\n*/\n"}, "writePackedSInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedSInt64", "method": "void writePackedSInt64(long,long[])", "replacementComments": "/**\n* Write a list of packed proto \"sint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getBackgroundDataSetting": {"dirtyReplacement": "VERSION_CODES#ICE_CREAM_SANDWICH", "methodClass": "android.net.ConnectivityManager", "methodName": "getBackgroundDataSetting", "method": "boolean getBackgroundDataSetting()", "replacementComments": "/**\n* Returns the value of the setting for background data usage. If false,\n* applications should not use the network if the application is not in the\n* foreground. Developers should respect this setting, and check the value\n* of this before performing any background data operations.\n* <p>\n* All applications that have background services that use the network\n* should listen to {@link #ACTION_BACKGROUND_DATA_SETTING_CHANGED}.\n* <p>\n* @deprecated As of {@link VERSION_CODES#ICE_CREAM_SANDWICH}, availability of\n* background data depends on several combined factors, and this method will\n* always return {@code true}. Instead, when background data is unavailable,\n* {@link #getActiveNetworkInfo()} will now appear disconnected.\n*\n* @return Whether background data usage is allowed.\n*/\n"}, "sendStickyBroadcast": {"dirtyReplacement": "sendBroadcast(Intent)", "methodClass": "android.content.Context", "methodName": "sendStickyBroadcast", "method": "void sendStickyBroadcast(Intent)", "replacementComments": "/**\n* <p>Perform a {@link #sendBroadcast(Intent)} that is \"sticky,\" meaning the\n* Intent you are sending stays around after the broadcast is complete,\n* so that others can quickly retrieve that data through the return\n* value of {@link #registerReceiver(BroadcastReceiver, IntentFilter)}.  In\n* all other ways, this behaves the same as\n* {@link #sendBroadcast(Intent)}.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent to broadcast; all receivers matching this\n* Intent will receive the broadcast, and the Intent will be held to\n* be re-broadcast to future receivers.\n*\n* @see #sendBroadcast(Intent)\n* @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)\n*/\n"}, "dragQuarterScreenUp": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragQuarterScreenUp", "method": "void dragQuarterScreenUp(ActivityInstrumentationTestCase)", "replacementComments": "/**\n* Simulate touching in the center of the screen and dragging one quarter of the way up\n* @param test The test case that is being run\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "onStart": {"dirtyReplacement": "onStartCommand(Intent, int, int)", "methodClass": "android.app.Service", "methodName": "onStart", "method": "void onStart(Intent,int)", "replacementComments": "/**\n* @deprecated Implement {@link #onStartCommand(Intent, int, int)} instead.\n*/\n"}, "setUserRestriction": {"dirtyReplacement": "android.app.admin.DevicePolicyManager#addUserRestriction(  android.content.ComponentName, String)", "methodClass": "android.os.UserManager", "methodName": "setUserRestriction", "method": "void setUserRestriction(String,boolean)", "replacementComments": "/**\n* Sets the value of a specific restriction.\n* Requires the MANAGE_USERS permission.\n* @param key the key of the restriction\n* @param value the value for the restriction\n* @deprecated use {@link android.app.admin.DevicePolicyManager#addUserRestriction(\n* android.content.ComponentName, String)} or\n* {@link android.app.admin.DevicePolicyManager#clearUserRestriction(\n* android.content.ComponentName, String)} instead.\n*/\n"}, "getSliceActions": {"dirtyReplacement": "SliceMetadata#getSliceActions()", "methodClass": "androidx.slice.SliceUtils", "methodName": "getSliceActions", "method": "List<SliceItem> getSliceActions(Slice)", "replacementComments": "/**\n* @return the group of actions associated with the provided slice, if they exist.\n*\n* @deprecated TO BE REMOVED; use {@link SliceMetadata#getSliceActions()}\n*/\n"}, "isApplicationOnIcc": {"dirtyReplacement": "UiccProfile#isApplicationOnIcc(AppType)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "isApplicationOnIcc", "method": "boolean isApplicationOnIcc(AppType)", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#isApplicationOnIcc(AppType)} instead.\n*/\n"}, "getItem": {"dirtyReplacement": "androidx.fragment.app.FragmentStatePagerAdapter", "methodClass": "androidx.legacy.app.FragmentStatePagerAdapter", "methodName": "getItem", "method": "Fragment getItem(int)", "replacementComments": "/**\n* Return the Fragment associated with a specified position.\n*\n* @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.\n*/\n"}, "getProgramInformation": {"dirtyReplacement": "onProgramInfoChanged", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "getProgramInformation", "method": "int getProgramInformation(ProgramInfo[])", "replacementComments": "/**\n* Get current station information.\n* @param info a ProgramInfo array of lengh 1 where the information is returned.\n* @return\n* <ul>\n* <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n* <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n* <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n* <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n* <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n* <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n* service fails, </li>\n* </ul>\n* @deprecated Use {@link onProgramInfoChanged} callback instead.\n*/\n"}, "histogram": {"dirtyReplacement": "histogram(String, int)", "methodClass": "com.android.internal.logging.MetricsLogger", "methodName": "histogram", "method": "void histogram(Context,String,int)", "replacementComments": "/**\n* Increment the bucket with the integer label on the histogram with the given name.\n* @deprecated use {@link #histogram(String, int)}\n*/\n"}, "onAudioStateChanged": {"dirtyReplacement": "onCallAudioStateChanged(Phone, CallAudioState)", "methodClass": "android.telecom.Phone.Listener", "methodName": "onAudioStateChanged", "method": "void onAudioStateChanged(Phone,AudioState)", "replacementComments": "/**\n* Called when the audio state changes.\n*\n* @param phone The {@code Phone} calling this method.\n* @param audioState The new {@link AudioState}.\n*\n* @deprecated Use {@link #onCallAudioStateChanged(Phone, CallAudioState)} instead.\n*/\n"}, "classDepth": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "classDepth", "method": "int classDepth(String)", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "setInputMethod": {"dirtyReplacement": "InputMethodService#switchInputMethod(String)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "setInputMethod", "method": "void setInputMethod(IBinder,String)", "replacementComments": "/**\n* Force switch to a new input method component. This can only be called\n* from an application or a service which has a token of the currently active input method.\n* @param token Supplies the identifying token given to an input method\n* when it was started, which allows it to perform this operation on\n* itself.\n* @param id The unique identifier for the new input method to be switched to.\n* @deprecated Use {@link InputMethodService#switchInputMethod(String)}\n* instead. This method was intended for IME developers who should be accessing APIs through\n* the service. APIs in this class are intended for app developers interacting with the IME.\n*/\n"}, "getSensors": {"dirtyReplacement": "SensorManager#getSensorList(int)", "methodClass": "android.hardware.SensorManager", "methodName": "getSensors", "method": "int getSensors()", "replacementComments": "/**\n* @return available sensors.\n* @deprecated This method is deprecated, use\n* {@link SensorManager#getSensorList(int)} instead\n*/\n"}, "getProvisionedStringValue": {"dirtyReplacement": "getConfigString(int)", "methodClass": "com.android.ims.ImsConfig", "methodName": "getProvisionedStringValue", "method": "String getProvisionedStringValue(int)", "replacementComments": "/**\n* @deprecated see {@link #getConfigString(int)} instead\n*/\n"}, "isBlocked": {"dirtyReplacement": "isBlocked(Context, String, Bundle)", "methodClass": "com.android.internal.telephony.BlockChecker", "methodName": "isBlocked", "method": "boolean isBlocked(Context,String)", "replacementComments": "/**\n* Returns {@code true} if {@code phoneNumber} is blocked according to {@code extras}.\n* <p>\n* This method catches all underlying exceptions to ensure that this method never throws any\n* exception.\n* <p>\n* @deprecated use {@link #isBlocked(Context, String, Bundle)} instead.\n*\n* @param context the context of the caller.\n* @param phoneNumber the number to check.\n* @return {@code true} if the number is blocked. {@code false} otherwise.\n*/\n"}, "setText": {"dirtyReplacement": "setPrimaryClip(ClipData)", "methodClass": "android.content.ClipboardManager", "methodName": "setText", "method": "void setText(CharSequence)", "replacementComments": "/**\n* @deprecated Use {@link #setPrimaryClip(ClipData)} instead.  This\n* creates a ClippedItem holding the given text and sets it as the\n* primary clip.  It has no label or icon.\n*/\n"}, "requestPermissions": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat", "methodName": "requestPermissions", "method": "void requestPermissions(Fragment,String[],int)", "replacementComments": "/**\n* Requests permissions to be granted to this application. These permissions\n* must be requested in your manifest, they should not be granted to your app,\n* and they should have protection level {@link android.content.pm.PermissionInfo\n* #PROTECTION_DANGEROUS dangerous}, regardless whether they are declared by\n* the platform or a third-party app.\n* <p>\n* Normal permissions {@link android.content.pm.PermissionInfo#PROTECTION_NORMAL}\n* are granted at install time if requested in the manifest. Signature permissions\n* {@link android.content.pm.PermissionInfo#PROTECTION_SIGNATURE} are granted at\n* install time if requested in the manifest and the signature of your app matches\n* the signature of the app declaring the permissions.\n* </p>\n* <p>\n* If your app does not have the requested permissions the user will be presented\n* with UI for accepting them. After the user has accepted or rejected the\n* requested permissions you will receive a callback reporting whether the\n* permissions were granted or not. Your fragment has to implement {@link\n* OnRequestPermissionsResultCallback}\n* and the results of permission requests will be delivered to its\n* {@link OnRequestPermissionsResultCallback#onRequestPermissionsResult(\n* int, String[], int[])}.\n* </p>\n* <p>\n* Note that requesting a permission does not guarantee it will be granted and\n* your app should be able to run without having this permission.\n* </p>\n* <p>\n* This method may start an activity allowing the user to choose which permissions\n* to grant and which to reject. Hence, you should be prepared that your activity\n* may be paused and resumed. Further, granting some permissions may require\n* a restart of you application. In such a case, the system will recreate the\n* activity stack before delivering the result to your onRequestPermissionsResult(\n* int, String[], int[]).\n* </p>\n* <p>\n* When checking whether you have a permission you should use {@link\n* androidx.core.content.ContextCompat#checkSelfPermission(\n* android.content.Context, String)}.\n* </p>\n*\n* @param fragment The target fragment.\n* @param permissions The requested permissions.\n* @param requestCode Application specific request code to match with a result\n* reported to {@link OnRequestPermissionsResultCallback#onRequestPermissionsResult(\n* int, String[], int[])}.\n*\n* @see androidx.core.content.ContextCompat#checkSelfPermission(\n* android.content.Context, String)\n* @see #shouldShowRequestPermissionRationale(android.app.Fragment, String)\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "removeQueueItemAt": {"dirtyReplacement": "removeQueueItem(MediaDescriptionCompat)", "methodClass": "android.support.v4.media.session.MediaControllerCompat", "methodName": "removeQueueItemAt", "method": "void removeQueueItemAt(int)", "replacementComments": "/**\n* Removes an queue item at the specified position in the play queue\n* of this session. Not all sessions may support this. To know whether the session supports\n* this, get the session's flags with {@link #getFlags()} and check that the flag\n* {@link MediaSessionCompat#FLAG_HANDLES_QUEUE_COMMANDS} is set.\n*\n* @param index The index of the element to be removed.\n* @throws UnsupportedOperationException If this session doesn't support this.\n* @see #getFlags()\n* @see MediaSessionCompat#FLAG_HANDLES_QUEUE_COMMANDS\n* @deprecated Use {@link #removeQueueItem(MediaDescriptionCompat)} instead.\n*/\n"}, "clipPath": {"dirtyReplacement": "Region.Op#INTERSECT", "methodClass": "android.graphics.Canvas", "methodName": "clipPath", "method": "boolean clipPath(Path,Op)", "replacementComments": "/**\n* Modify the current clip with the specified path.\n*\n* @param path The path to operate on the current clip\n* @param op   How the clip is modified\n* @return     true if the resulting is non-empty\n*\n* @deprecated Region.Op values other than {@link Region.Op#INTERSECT} and\n* {@link Region.Op#DIFFERENCE} have the ability to expand the clip. The canvas clipping APIs\n* are intended to only expand the clip as a result of a restore operation. This enables a view\n* parent to clip a canvas to clearly define the maximal drawing area of its children. The\n* recommended alternative calls are {@link #clipPath(Path)} and\n* {@link #clipOutPath(Path)};\n*\n* As of API Level API level {@value Build.VERSION_CODES#P} only {@link Region.Op#INTERSECT} and\n* {@link Region.Op#DIFFERENCE} are valid Region.Op parameters.\n*/\n"}, "getCurrentTimeLong": {"dirtyReplacement": "getCurrentPosition()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getCurrentTimeLong", "method": "long getCurrentTimeLong()", "replacementComments": "/**\n* Returns the current time in milliseconds of long type for playback controls row.\n* @deprecated Use {@link #getCurrentPosition()}\n*/\n"}, "getSeparator": {"dirtyReplacement": "getSeparators()", "methodClass": "androidx.leanback.widget.picker.Picker", "methodName": "getSeparator", "method": "CharSequence getSeparator()", "replacementComments": "/**\n* Gets separator string between columns.\n*\n* @return The separator that will be populated between all the Picker columns.\n* @deprecated Use {@link #getSeparators()}\n*/\n"}, "isSystemReady": {"dirtyReplacement": "ActivityManagerInternal.isSystemReady", "methodClass": "android.app.ActivityManagerNative", "methodName": "isSystemReady", "method": "boolean isSystemReady()", "replacementComments": "/**\n* Convenience for checking whether the system is ready.  For internal use only.\n*\n* @deprecated use ActivityManagerInternal.isSystemReady instead.\n*/\n"}, "setAddedCount": {"dirtyReplacement": "AccessibilityRecord#setAddedCount(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setAddedCount", "method": "void setAddedCount(int)", "replacementComments": "/**\n* Sets the number of added characters.\n*\n* @param addedCount The number of added characters.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setAddedCount(int)} directly.\n*/\n"}, "setWindowLayoutMode": {"dirtyReplacement": "setWidth(int)", "methodClass": "android.widget.PopupWindow", "methodName": "setWindowLayoutMode", "method": "void setWindowLayoutMode(int,int)", "replacementComments": "/**\n* <p>Change the width and height measure specs that are given to the\n* window manager by the popup.  By default these are 0, meaning that\n* the current width or height is requested as an explicit size from\n* the window manager.  You can supply\n* {@link ViewGroup.LayoutParams#WRAP_CONTENT} or\n* {@link ViewGroup.LayoutParams#MATCH_PARENT} to have that measure\n* spec supplied instead, replacing the absolute width and height that\n* has been set in the popup.</p>\n*\n* <p>If the popup is showing, calling this method will take effect only\n* the next time the popup is shown.</p>\n*\n* @param widthSpec an explicit width measure spec mode, either\n* {@link ViewGroup.LayoutParams#WRAP_CONTENT},\n* {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute\n* width.\n* @param heightSpec an explicit height measure spec mode, either\n* {@link ViewGroup.LayoutParams#WRAP_CONTENT},\n* {@link ViewGroup.LayoutParams#MATCH_PARENT}, or 0 to use the absolute\n* height.\n*\n* @deprecated Use {@link #setWidth(int)} and {@link #setHeight(int)}.\n*/\n"}, "setFactory": {"dirtyReplacement": "setFactory2(LayoutInflater, LayoutInflater.Factory2)", "methodClass": "androidx.core.view.LayoutInflaterCompat", "methodName": "setFactory", "method": "void setFactory(LayoutInflater,LayoutInflaterFactory)", "replacementComments": "/**\n* Attach a custom Factory interface for creating views while using\n* this LayoutInflater. This must not be null, and can only be set once;\n* after setting, you can not change the factory.\n*\n* @see LayoutInflater#setFactory(android.view.LayoutInflater.Factory)\n*\n* @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} instead to set\n* and {@link LayoutInflater#getFactory2()} to get the factory.\n*/\n"}, "setLabel": {"dirtyReplacement": "addAction(RemoteAction)", "methodClass": "android.view.textclassifier.TextClassification.Builder", "methodName": "setLabel", "method": "Builder setLabel(String)", "replacementComments": "/**\n* Sets the label for the <i>primary</i> action that may be rendered on a widget used to\n* act on the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the\n* returned label represents the label of the first {@link RemoteAction} (if one exists).\n*\n* @deprecated Use {@link #addAction(RemoteAction)} instead.\n*/\n"}, "setBackgroundDrawable": {"dirtyReplacement": "setBackground(Drawable)", "methodClass": "android.view.View", "methodName": "setBackgroundDrawable", "method": "void setBackgroundDrawable(Drawable)", "replacementComments": "/**\n* @deprecated use {@link #setBackground(Drawable)} instead\n*/\n"}, "getSeconds": {"dirtyReplacement": "setSeconds", "methodClass": "java.sql.Date", "methodName": "getSeconds", "method": "int getSeconds()", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #setSeconds\n*/\n"}, "getCurrVelocity": {"dirtyReplacement": "OverScroller#getCurrVelocity()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "getCurrVelocity", "method": "float getCurrVelocity()", "replacementComments": "/**\n* Returns the current velocity on platform versions that support it.\n*\n* <p> This method should only be used as input for nonessential visual effects such as\n* {@link EdgeEffectCompat}.</p>\n*\n* @return The original velocity less the deceleration. Result may be\n* negative.\n*\n* @deprecated Use {@link OverScroller#getCurrVelocity()} directly.\n*/\n"}, "getOrientation": {"dirtyReplacement": "getRotation", "methodClass": "android.view.Display", "methodName": "getOrientation", "method": "int getOrientation()", "replacementComments": "/**\n* @deprecated use {@link #getRotation}\n* @return orientation of this display.\n*/\n"}, "getProgramList": {"dirtyReplacement": "getDynamicProgramList", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "getProgramList", "method": "ProgramInfo> getProgramList(Map<String, String>)", "replacementComments": "/**\n* Get the list of discovered radio stations.\n*\n* To get the full list, set filter to null or empty map.\n* Keys must be prefixed with unique vendor Java-style namespace,\n* eg. 'com.somecompany.parameter1'.\n*\n* @param vendorFilter vendor-specific selector for radio stations.\n* @return a list of radio stations.\n* @throws IllegalStateException if the scan is in progress or has not been started,\n* startBackgroundScan() call may fix it.\n* @throws IllegalArgumentException if the vendorFilter argument is not valid.\n* @deprecated Use {@link getDynamicProgramList} instead.\n*/\n"}, "getWallpaper": {"dirtyReplacement": "android.app.WallpaperManager#getDrawable  WallpaperManager.get()", "methodClass": "android.content.Context", "methodName": "getWallpaper", "method": "Drawable getWallpaper()", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#getDrawable\n* WallpaperManager.get()} instead.\n*/\n"}, "getScaledPagingTouchSlop": {"dirtyReplacement": "ViewConfiguration#getScaledPagingTouchSlop()", "methodClass": "androidx.core.view.ViewConfigurationCompat", "methodName": "getScaledPagingTouchSlop", "method": "int getScaledPagingTouchSlop(ViewConfiguration)", "replacementComments": "/**\n* Call {@link ViewConfiguration#getScaledPagingTouchSlop()}.\n*\n* @deprecated Call {@link ViewConfiguration#getScaledPagingTouchSlop()} directly.\n* This method will be removed in a future release.\n*/\n"}, "springBack": {"dirtyReplacement": "OverScroller#springBack(int, int, int, int, int, int)", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "springBack", "method": "boolean springBack(int,int,int,int,int,int)", "replacementComments": "/**\n* Call this when you want to 'spring back' into a valid coordinate range.\n*\n* @param startX Starting X coordinate\n* @param startY Starting Y coordinate\n* @param minX Minimum valid X value\n* @param maxX Maximum valid X value\n* @param minY Minimum valid Y value\n* @param maxY Maximum valid Y value\n* @return true if a springback was initiated, false if startX and startY were\n* already within the valid range.\n*\n* @deprecated Use {@link OverScroller#springBack(int, int, int, int, int, int)} directly.\n*/\n"}, "getLabel": {"dirtyReplacement": "getActions()", "methodClass": "android.view.textclassifier.TextClassification", "methodName": "getLabel", "method": "CharSequence getLabel()", "replacementComments": "/**\n* Returns a label that may be rendered on a widget used to act on the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelable and only represents the label of the\n* first {@link RemoteAction} (if one exists) when this object is read from a parcel.\n*\n* @deprecated Use {@link #getActions()} instead.\n*/\n"}, "getPresenceIconResourceId": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.Presence", "methodName": "getPresenceIconResourceId", "method": "int getPresenceIconResourceId(int)", "replacementComments": "/**\n* Gets the resource ID for the proper presence icon.\n*\n* @param status the status to get the icon for\n* @return the resource ID for the proper presence icon\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "getViewPosition": {"dirtyReplacement": "getViewLayoutPosition()", "methodClass": "androidx.recyclerview.widget.RecyclerView.LayoutParams", "methodName": "getViewPosition", "method": "int getViewPosition()", "replacementComments": "/**\n* @deprecated use {@link #getViewLayoutPosition()} or {@link #getViewAdapterPosition()}\n*/\n"}, "getNativeFrameCount": {"dirtyReplacement": "getBufferSizeInFrames()", "methodClass": "android.media.AudioTrack", "methodName": "getNativeFrameCount", "method": "int getNativeFrameCount()", "replacementComments": "/**\n* Returns the frame count of the native <code>AudioTrack</code> buffer.\n* @return current size in frames of the <code>AudioTrack</code> buffer.\n* @throws IllegalStateException\n* @deprecated Use the identical public method {@link #getBufferSizeInFrames()} instead.\n*/\n"}, "onPictureInPictureModeChanged": {"dirtyReplacement": "onPictureInPictureModeChanged(boolean, Configuration)", "methodClass": "android.app.Fragment", "methodName": "onPictureInPictureModeChanged", "method": "void onPictureInPictureModeChanged(boolean)", "replacementComments": "/**\n* Called by the system when the activity changes to and from picture-in-picture mode. This is\n* generally tied to {@link Activity#onPictureInPictureModeChanged} of the containing Activity.\n*\n* @param isInPictureInPictureMode True if the activity is in picture-in-picture mode.\n*\n* @deprecated Use {@link #onPictureInPictureModeChanged(boolean, Configuration)} instead.\n*/\n"}, "finishUpdate": {"dirtyReplacement": "androidx.fragment.app.FragmentStatePagerAdapter", "methodClass": "androidx.legacy.app.FragmentStatePagerAdapter", "methodName": "finishUpdate", "method": "void finishUpdate(ViewGroup)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentStatePagerAdapter} instead.\n*/\n"}, "formatIpAddress": {"dirtyReplacement": "java.net.InetAddress#getHostAddress()", "methodClass": "android.text.format.Formatter", "methodName": "formatIpAddress", "method": "String formatIpAddress(int)", "replacementComments": "/**\n* Returns a string in the canonical IPv4 format ###.###.###.### from a packed integer\n* containing the IP address. The IPv4 address is expected to be in little-endian\n* format (LSB first). That is, 0x01020304 will return \"4.3.2.1\".\n*\n* @deprecated Use {@link java.net.InetAddress#getHostAddress()}, which supports both IPv4 and\n* IPv6 addresses. This method does not support IPv6 addresses.\n*/\n"}, "isEnabled": {"dirtyReplacement": "AccessibilityRecord#isEnabled()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "isEnabled", "method": "boolean isEnabled()", "replacementComments": "/**\n* Gets if the source is enabled.\n*\n* @return True if the view is enabled, false otherwise.\n*\n* @deprecated Use {@link AccessibilityRecord#isEnabled()} directly.\n*/\n"}, "getDayOfWeekString": {"dirtyReplacement": "java.text.SimpleDateFormat", "methodClass": "android.text.format.DateUtils", "methodName": "getDayOfWeekString", "method": "String getDayOfWeekString(int,int)", "replacementComments": "/**\n* Return a string for the day of the week.\n* @param dayOfWeek One of {@link Calendar#SUNDAY Calendar.SUNDAY},\n* {@link Calendar#MONDAY Calendar.MONDAY}, etc.\n* @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_SHORT},\n* {@link #LENGTH_MEDIUM}, or {@link #LENGTH_SHORTEST}.\n* Note that in most languages, {@link #LENGTH_SHORT}\n* will return the same as {@link #LENGTH_MEDIUM}.\n* Undefined lengths will return {@link #LENGTH_MEDIUM}\n* but may return something different in the future.\n* @throws IndexOutOfBoundsException if the dayOfWeek is out of bounds.\n* @deprecated Use {@link java.text.SimpleDateFormat} instead.\n*/\n"}, "getSender": {"dirtyReplacement": "getPerson()", "methodClass": "androidx.core.app.NotificationCompat.MessagingStyle.Message", "methodName": "getSender", "method": "CharSequence getSender()", "replacementComments": "/**\n* Get the text used to display the contact's name in the messaging experience\n*\n* @deprecated Use {@link #getPerson()}\n*/\n"}, "setBufferedProgress": {"dirtyReplacement": "setBufferedPosition(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setBufferedProgress", "method": "void setBufferedProgress(int)", "replacementComments": "/**\n* Sets the buffered progress for the playback controls row.\n* If this row is bound to a view, the view will automatically\n* be updated to reflect the new value.\n* @deprecated Use {@link #setBufferedPosition(long)}\n*/\n"}, "setEnhanced4gLteModeSetting": {"dirtyReplacement": "setEnhanced4gLteModeSetting(boolean)", "methodClass": "com.android.ims.ImsManager", "methodName": "setEnhanced4gLteModeSetting", "method": "void setEnhanced4gLteModeSetting(Context,boolean)", "replacementComments": "/**\n* Change persistent Enhanced 4G LTE Mode setting.\n*\n* @deprecated Doesn't support MSIM devices. Use {@link #setEnhanced4gLteModeSetting(boolean)}\n* instead.\n*/\n"}, "setCurrentTimeLong": {"dirtyReplacement": "setCurrentPosition(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setCurrentTimeLong", "method": "void setCurrentTimeLong(long)", "replacementComments": "/**\n* Sets the current time in milliseconds for playback controls row in long type.\n* @param ms Current time in milliseconds of long type.\n* @deprecated use {@link #setCurrentPosition(long)}\n*/\n"}, "setVoicemailRingtoneUri": {"dirtyReplacement": "android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS", "methodClass": "android.telephony.TelephonyManager", "methodName": "setVoicemailRingtoneUri", "method": "void setVoicemailRingtoneUri(PhoneAccountHandle,Uri)", "replacementComments": "/**\n* Sets the per-account voicemail ringtone.\n*\n* <p>Requires that the calling app is the default dialer, or has carrier privileges (see\n* {@link #hasCarrierPrivileges}, or has permission\n* {@link android.Manifest.permission#MODIFY_PHONE_STATE MODIFY_PHONE_STATE}.\n*\n* @param phoneAccountHandle The handle for the {@link PhoneAccount} for which to set the\n* voicemail ringtone.\n* @param uri The URI for the ringtone to play when receiving a voicemail from a specific\n* PhoneAccount.\n*\n* @deprecated Use {@link android.provider.Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS}\n* instead.\n*/\n"}, "setPassword": {"dirtyReplacement": "AccessibilityRecord#setPassword(boolean)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setPassword", "method": "void setPassword(boolean)", "replacementComments": "/**\n* Sets if the source is a password field.\n*\n* @param isPassword True if the view is a password field, false otherwise.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setPassword(boolean)} directly.\n*/\n"}, "setRotation": {"dirtyReplacement": "View#setRotation(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setRotation", "method": "void setRotation(View,float)", "replacementComments": "/**\n* Sets the degrees that the view is rotated around the pivot point. Increasing values\n* result in clockwise rotation.\n*\n* @param value The degrees of rotation.\n*\n* @deprecated Use {@link View#setRotation(float)} directly.\n*/\n"}, "getBufferedProgress": {"dirtyReplacement": "getBufferedPosition()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getBufferedProgress", "method": "int getBufferedProgress()", "replacementComments": "/**\n* Returns the buffered progress for the playback controls row.\n* @throws ArithmeticException If buffered progress in milliseconds overflows int.\n* @deprecated Use {@link #getBufferedPosition()}\n*/\n"}, "count": {"dirtyReplacement": "count(String, int)", "methodClass": "com.android.internal.logging.MetricsLogger", "methodName": "count", "method": "void count(Context,String,int)", "replacementComments": "/**\n* Add an integer value to the monotonically increasing counter with the given name.\n* @deprecated use {@link #count(String, int)}\n*/\n"}, "toHtml": {"dirtyReplacement": "toHtml(Spanned, int)", "methodClass": "android.text.Html", "methodName": "toHtml", "method": "String toHtml(Spanned)", "replacementComments": "/**\n* @deprecated use {@link #toHtml(Spanned, int)} instead.\n*/\n"}, "setScaleX": {"dirtyReplacement": "View#setScaleX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setScaleX", "method": "void setScaleX(View,float)", "replacementComments": "/**\n* Sets the amount that the view is scaled in x around the pivot point, as a proportion of\n* the view's unscaled width. A value of 1 means that no scaling is applied.\n*\n* @param value The scaling factor.\n*\n* @deprecated Use {@link View#setScaleX(float)} directly.\n*/\n"}, "getDescription": {"dirtyReplacement": "loadDescription(PackageManager)", "methodClass": "android.accessibilityservice.AccessibilityServiceInfo", "methodName": "getDescription", "method": "String getDescription()", "replacementComments": "/**\n* Gets the non-localized description of the accessibility service.\n* <p>\n* <strong>Statically set from\n* {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n* </p>\n* @return The description.\n*\n* @deprecated Use {@link #loadDescription(PackageManager)}.\n*/\n"}, "resolveSizeAndState": {"dirtyReplacement": "View#resolveSizeAndState(int, int, int)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "resolveSizeAndState", "method": "int resolveSizeAndState(int,int,int)", "replacementComments": "/**\n* Utility to reconcile a desired size and state, with constraints imposed\n* by a MeasureSpec.  Will take the desired size, unless a different size\n* is imposed by the constraints.  The returned value is a compound integer,\n* with the resolved size in the {@link #MEASURED_SIZE_MASK} bits and\n* optionally the bit {@link #MEASURED_STATE_TOO_SMALL} set if the resulting\n* size is smaller than the size the view wants to be.\n*\n* @param size How big the view wants to be\n* @param measureSpec Constraints imposed by the parent\n* @return Size information bit mask as defined by\n* {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.\n*\n* @deprecated Use {@link View#resolveSizeAndState(int, int, int)} directly.\n*/\n"}, "updateConfiguration": {"dirtyReplacement": "android.content.Context#createConfigurationContext(Configuration)", "methodClass": "android.content.res.Resources", "methodName": "updateConfiguration", "method": "void updateConfiguration(Configuration,DisplayMetrics)", "replacementComments": "/**\n* Store the newly updated configuration.\n*\n* @deprecated See {@link android.content.Context#createConfigurationContext(Configuration)}.\n*/\n"}, "isEnhanced4gLteModeSettingEnabledByUser": {"dirtyReplacement": "isEnhanced4gLteModeSettingEnabledByUser()", "methodClass": "com.android.ims.ImsManager", "methodName": "isEnhanced4gLteModeSettingEnabledByUser", "method": "boolean isEnhanced4gLteModeSettingEnabledByUser(Context)", "replacementComments": "/**\n* Returns the user configuration of Enhanced 4G LTE Mode setting.\n*\n* @deprecated Doesn't support MSIM devices. Use\n* {@link #isEnhanced4gLteModeSettingEnabledByUser()} instead.\n*/\n"}, "newCreator": {"dirtyReplacement": "android.os.Parcelable.ClassLoaderCreator", "methodClass": "androidx.core.os.ParcelableCompat", "methodName": "newCreator", "method": "Creator<T> newCreator(ParcelableCompatCreatorCallbacks<T>)", "replacementComments": "/**\n* Factory method for {@link Parcelable.Creator}.\n*\n* @param callbacks Creator callbacks implementation.\n* @return New creator.\n*\n* @deprecated Use {@link android.os.Parcelable.ClassLoaderCreator} directly.\n*/\n"}, "setStreamMute": {"dirtyReplacement": "adjustStreamVolume(int, int, int)", "methodClass": "android.media.AudioManager", "methodName": "setStreamMute", "method": "void setStreamMute(int,boolean)", "replacementComments": "/**\n* Mute or unmute an audio stream.\n* <p>\n* This method should only be used by applications that replace the\n* platform-wide management of audio settings or the main telephony\n* application.\n* <p>\n* This method has no effect if the device implements a fixed volume policy\n* as indicated by {@link #isVolumeFixed()}.\n* <p>\n* This method was deprecated in API level 22. Prior to API level 22 this\n* method had significantly different behavior and should be used carefully.\n* The following applies only to pre-22 platforms:\n* <ul>\n* <li>The mute command is protected against client process death: if a\n* process with an active mute request on a stream dies, this stream will be\n* unmuted automatically.</li>\n* <li>The mute requests for a given stream are cumulative: the AudioManager\n* can receive several mute requests from one or more clients and the stream\n* will be unmuted only when the same number of unmute requests are\n* received.</li>\n* <li>For a better user experience, applications MUST unmute a muted stream\n* in onPause() and mute is again in onResume() if appropriate.</li>\n* </ul>\n*\n* @param streamType The stream to be muted/unmuted.\n* @param state The required mute state: true for mute ON, false for mute\n* OFF\n* @see #isVolumeFixed()\n* @deprecated Use {@link #adjustStreamVolume(int, int, int)} with\n* {@link #ADJUST_MUTE} or {@link #ADJUST_UNMUTE} instead.\n*/\n"}, "getTranslationX": {"dirtyReplacement": "View#getTranslationX()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getTranslationX", "method": "float getTranslationX(View)", "replacementComments": "/**\n* The horizontal location of this view relative to its {@link View#getLeft() left} position.\n* This position is post-layout, in addition to wherever the object's\n* layout placed it.\n*\n* @return The horizontal position of this view relative to its left position, in pixels.\n*\n* @deprecated Use {@link View#getTranslationX()} directly.\n*/\n"}, "onRemoveQueueItemAt": {"dirtyReplacement": "led", "methodClass": "android.support.v4.media.session.MediaSessionCompat.Callback", "methodName": "onRemoveQueueItemAt", "method": "void onRemoveQueueItemAt(int)", "replacementComments": "/**\n* Called when a {@link MediaControllerCompat} wants to remove a {@link QueueItem} at the\n* specified position in the play queue.\n*\n* @param index The index of the element to be removed.\n* @deprecated {@link #onRemoveQueueItem} will be called instead.\n*/\n"}, "setShowRunningNotification": {"dirtyReplacement": "setNotificationVisibility(int)", "methodClass": "android.app.DownloadManager.Request", "methodName": "setShowRunningNotification", "method": "Request setShowRunningNotification(boolean)", "replacementComments": "/**\n* Control whether a system notification is posted by the download manager while this\n* download is running. If enabled, the download manager posts notifications about downloads\n* through the system {@link android.app.NotificationManager}. By default, a notification is\n* shown.\n*\n* If set to false, this requires the permission\n* android.permission.DOWNLOAD_WITHOUT_NOTIFICATION.\n*\n* @param show whether the download manager should show a notification for this download.\n* @return this object\n* @deprecated use {@link #setNotificationVisibility(int)}\n*/\n"}, "injectInsrumentation": {"dirtyReplacement": "injectInstrumentation(android.app.Instrumentation)", "methodClass": "android.test.InstrumentationTestCase", "methodName": "injectInsrumentation", "method": "void injectInsrumentation(Instrumentation)", "replacementComments": "/**\n* Injects instrumentation into this test case. This method is\n* called by the test runner during test setup.\n*\n* @param instrumentation the instrumentation to use with this instance\n*\n* @deprecated Incorrect spelling,\n* use {@link #injectInstrumentation(android.app.Instrumentation)} instead.\n*/\n"}, "switchToNextInputMethod": {"dirtyReplacement": "InputMethodService#switchToNextInputMethod(boolean)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "switchToNextInputMethod", "method": "boolean switchToNextInputMethod(IBinder,boolean)", "replacementComments": "/**\n* Force switch to the next input method and subtype. If there is no IME enabled except\n* current IME and subtype, do nothing.\n* @param imeToken Supplies the identifying token given to an input method when it was started,\n* which allows it to perform this operation on itself.\n* @param onlyCurrentIme if true, the framework will find the next subtype which\n* belongs to the current IME\n* @return true if the current input method and subtype was successfully switched to the next\n* input method and subtype.\n* @deprecated Use {@link InputMethodService#switchToNextInputMethod(boolean)} instead. This\n* method was intended for IME developers who should be accessing APIs through the service.\n* APIs in this class are intended for app developers interacting with the IME.\n*/\n"}, "getCurrentItemIndex": {"dirtyReplacement": "AccessibilityRecord#getCurrentItemIndex()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getCurrentItemIndex", "method": "int getCurrentItemIndex()", "replacementComments": "/**\n* Gets the index of the source in the list of items the can be visited.\n*\n* @return The current item index.\n*\n* @deprecated Use {@link AccessibilityRecord#getCurrentItemIndex()} directly.\n*/\n"}, "getUidTcpTxSegments": {"dirtyReplacement": "getUidTxPackets(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidTcpTxSegments", "method": "long getUidTcpTxSegments(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidTxPackets(int)\n*/\n"}, "getYVelocity": {"dirtyReplacement": "VelocityTracker#getYVelocity(int)", "methodClass": "androidx.core.view.VelocityTrackerCompat", "methodName": "getYVelocity", "method": "float getYVelocity(VelocityTracker,int)", "replacementComments": "/**\n* Call {@link VelocityTracker#getYVelocity(int)}.\n* If running on a pre-{@link android.os.Build.VERSION_CODES#HONEYCOMB} device,\n* returns {@link VelocityTracker#getYVelocity()}.\n*\n* @deprecated Use {@link VelocityTracker#getYVelocity(int)} directly.\n*/\n"}, "getIcon": {"dirtyReplacement": "getActions()", "methodClass": "android.view.textclassifier.TextClassification", "methodName": "getIcon", "method": "Drawable getIcon()", "replacementComments": "/**\n* Returns an icon that may be rendered on a widget used to act on the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelable and only represents the icon of the\n* first {@link RemoteAction} (if one exists) when this object is read from a parcel.\n*\n* @deprecated Use {@link #getActions()} instead.\n*/\n"}, "setDataFetchOperation": {"dirtyReplacement": "setFetchReportsOperation(PendingIntent, long)", "methodClass": "android.app.StatsManager", "methodName": "setDataFetchOperation", "method": "boolean setDataFetchOperation(long,PendingIntent)", "replacementComments": "/**\n* @deprecated Use {@link #setFetchReportsOperation(PendingIntent, long)}\n*/\n"}, "getAxisValue": {"dirtyReplacement": "MotionEvent#getAxisValue(int)", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getAxisValue", "method": "float getAxisValue(MotionEvent,int)", "replacementComments": "/**\n* Get axis value for the first pointer index (may be an\n* arbitrary pointer identifier).\n*\n* @param axis The axis identifier for the axis value to retrieve.\n*\n* @see #AXIS_X\n* @see #AXIS_Y\n*\n* @deprecated Call {@link MotionEvent#getAxisValue(int)} directly. This method will be\n* removed in a future release.\n*/\n"}, "getActions": {"dirtyReplacement": "getActionList()", "methodClass": "android.view.accessibility.AccessibilityNodeInfo", "methodName": "getActions", "method": "int getActions()", "replacementComments": "/**\n* Gets the actions that can be performed on the node.\n*\n* @return The bit mask of with actions.\n*\n* @see AccessibilityNodeInfo#ACTION_FOCUS\n* @see AccessibilityNodeInfo#ACTION_CLEAR_FOCUS\n* @see AccessibilityNodeInfo#ACTION_SELECT\n* @see AccessibilityNodeInfo#ACTION_CLEAR_SELECTION\n* @see AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS\n* @see AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS\n* @see AccessibilityNodeInfo#ACTION_CLICK\n* @see AccessibilityNodeInfo#ACTION_LONG_CLICK\n* @see AccessibilityNodeInfo#ACTION_NEXT_AT_MOVEMENT_GRANULARITY\n* @see AccessibilityNodeInfo#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY\n* @see AccessibilityNodeInfo#ACTION_NEXT_HTML_ELEMENT\n* @see AccessibilityNodeInfo#ACTION_PREVIOUS_HTML_ELEMENT\n* @see AccessibilityNodeInfo#ACTION_SCROLL_FORWARD\n* @see AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD\n*\n* @deprecated Use {@link #getActionList()}.\n*/\n"}, "getStorageState": {"dirtyReplacement": "getExternalStorageState(File)", "methodClass": "android.os.Environment", "methodName": "getStorageState", "method": "String getStorageState(File)", "replacementComments": "/**\n* @deprecated use {@link #getExternalStorageState(File)}\n*/\n"}, "decodeImProtocol": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.ContactMethods", "methodName": "decodeImProtocol", "method": "Object decodeImProtocol(String)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "isDigital": {"dirtyReplacement": "getLogicallyTunedTo()", "methodClass": "android.hardware.radio.RadioManager.ProgramInfo", "methodName": "isDigital", "method": "boolean isDigital()", "replacementComments": "/**\n* {@code true} if the received program is digital (e.g HD radio)\n* @return {@code true} if digital, {@code false} otherwise.\n* @deprecated Use {@link getLogicallyTunedTo()} instead.\n*/\n"}, "getTranslationY": {"dirtyReplacement": "View#getTranslationY()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getTranslationY", "method": "float getTranslationY(View)", "replacementComments": "/**\n* The vertical location of this view relative to its {@link View#getTop() top} position.\n* This position is post-layout, in addition to wherever the object's\n* layout placed it.\n*\n* @return The vertical position of this view relative to its top position, in pixels.\n*\n* @deprecated Use {@link View#getTranslationY()} directly.\n*/\n"}, "release": {"dirtyReplacement": "close()", "methodClass": "android.drm.DrmManagerClient", "methodName": "release", "method": "void release()", "replacementComments": "/**\n* @deprecated replaced by {@link #close()}.\n*/\n"}, "startExpandedTransition": {"dirtyReplacement": "expandAction(GuidedAction, boolean)", "methodClass": "androidx.leanback.widget.GuidedActionsStylist", "methodName": "startExpandedTransition", "method": "void startExpandedTransition(ViewHolder)", "replacementComments": "/**\n* Start transition to expand or collapse GuidedActionStylist.\n* @param avh When not null, the GuidedActionStylist expands the sub actions of avh.  When null\n* the GuidedActionStylist will collapse sub actions.\n* @deprecated use {@link #expandAction(GuidedAction, boolean)} and\n* {@link #collapseAction(boolean)}\n*/\n"}, "addOption": {"dirtyReplacement": "addOption(Pattern, int, CharSequence)", "methodClass": "android.service.autofill.ImageTransformation.Builder", "methodName": "addOption", "method": "Builder addOption(Pattern,int)", "replacementComments": "/**\n* Adds an option to replace the child view with a different image when the regex matches.\n*\n* @param regex regular expression defining what should be matched to use this image.\n* @param resId resource id of the image (in the autofill service's package). The\n* {@link RemoteViews presentation} must contain a {@link ImageView} child with that id.\n*\n* @return this build\n*\n* @deprecated use {@link #addOption(Pattern, int, CharSequence)} instead.\n*/\n"}, "stopLeScan": {"dirtyReplacement": "BluetoothLeScanner#stopScan(ScanCallback)", "methodClass": "android.bluetooth.BluetoothAdapter", "methodName": "stopLeScan", "method": "void stopLeScan(LeScanCallback)", "replacementComments": "/**\n* Stops an ongoing Bluetooth LE device scan.\n*\n* @param callback used to identify which scan to stop must be the same handle used to start the\n* scan\n* @deprecated Use {@link BluetoothLeScanner#stopScan(ScanCallback)} instead.\n*/\n"}, "dump": {"dirtyReplacement": "LoaderManager#enableDebugLogging(boolean)", "methodClass": "androidx.loader.content.Loader", "methodName": "dump", "method": "void dump(String,FileDescriptor,PrintWriter,String[])", "replacementComments": "/**\n* Print the Loader's state into the given stream.\n*\n* @param prefix Text to print at the front of each line.\n* @param fd The raw file descriptor that the dump is being sent to.\n* @param writer A PrintWriter to which the dump is to be set.\n* @param args Additional arguments to the dump request.\n* @deprecated Consider using {@link LoaderManager#enableDebugLogging(boolean)} to understand\n* the series of operations performed by LoaderManager.\n*/\n"}, "isBluetoothA2dpOn": {"dirtyReplacement": "AudioManager#getDevices(int)", "methodClass": "android.media.AudioManager", "methodName": "isBluetoothA2dpOn", "method": "boolean isBluetoothA2dpOn()", "replacementComments": "/**\n* Checks whether a Bluetooth A2DP audio peripheral is connected or not.\n*\n* @return true if a Bluetooth A2DP peripheral is connected\n* false if otherwise\n* @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices.\n*/\n"}, "getNetworkType": {"dirtyReplacement": "Builder#setRequiredNetworkType(int)", "methodClass": "android.app.job.JobInfo", "methodName": "getNetworkType", "method": "int getNetworkType()", "replacementComments": "/**\n* Return the basic description of the kind of network this job requires.\n*\n* @deprecated This method attempts to map {@link #getRequiredNetwork()}\n* into the set of simple constants, which results in a loss of\n* fidelity. Callers should move to using\n* {@link #getRequiredNetwork()} directly.\n* @see Builder#setRequiredNetworkType(int)\n*/\n"}, "setContentInfo": {"dirtyReplacement": "setSubText(CharSequence)", "methodClass": "android.app.Notification.Builder", "methodName": "setContentInfo", "method": "Builder setContentInfo(CharSequence)", "replacementComments": "/**\n* A small piece of additional information pertaining to this notification.\n*\n* The platform template will draw this on the last line of the notification, at the far\n* right (to the right of a smallIcon if it has been placed there).\n*\n* @deprecated use {@link #setSubText(CharSequence)} instead to set a text in the header.\n* For legacy apps targeting a version below {@link android.os.Build.VERSION_CODES#N} this\n* field will still show up, but the subtext will take precedence.\n*/\n"}, "yieldIfContended": {"dirtyReplacement": "yieldIfContendedSafely", "methodClass": "android.database.sqlite.SQLiteDatabase", "methodName": "yieldIfContended", "method": "boolean yieldIfContended()", "replacementComments": "/**\n* Temporarily end the transaction to let other threads run. The transaction is assumed to be\n* successful so far. Do not call setTransactionSuccessful before calling this. When this\n* returns a new transaction will have been created but not marked as successful.\n* @return true if the transaction was yielded\n* @deprecated if the db is locked more than once (becuase of nested transactions) then the lock\n* will not be yielded. Use yieldIfContendedSafely instead.\n*/\n"}, "getProcessDefaultNetwork": {"dirtyReplacement": "getBoundNetworkForProcess", "methodClass": "android.net.ConnectivityManager", "methodName": "getProcessDefaultNetwork", "method": "Network getProcessDefaultNetwork()", "replacementComments": "/**\n* Returns the {@link Network} currently bound to this process via\n* {@link #bindProcessToNetwork}, or {@code null} if no {@link Network} is explicitly bound.\n*\n* @return {@code Network} to which this process is bound, or {@code null}.\n* @deprecated Using this function can lead to other functions throwing\n* {@link IllegalStateException}.  Use {@link #getBoundNetworkForProcess} instead.\n* {@code getBoundNetworkForProcess} is a direct replacement.\n*/\n"}, "setMotionEventSplittingEnabled": {"dirtyReplacement": "ViewGroup#setMotionEventSplittingEnabled(boolean)", "methodClass": "androidx.core.view.ViewGroupCompat", "methodName": "setMotionEventSplittingEnabled", "method": "void setMotionEventSplittingEnabled(ViewGroup,boolean)", "replacementComments": "/**\n* Enable or disable the splitting of MotionEvents to multiple children during touch event\n* dispatch. This behavior is enabled by default for applications that target an\n* SDK version of 11 (Honeycomb) or newer. On earlier platform versions this feature\n* was not supported and this method is a no-op.\n*\n* <p>When this option is enabled MotionEvents may be split and dispatched to different child\n* views depending on where each pointer initially went down. This allows for user interactions\n* such as scrolling two panes of content independently, chording of buttons, and performing\n* independent gestures on different pieces of content.\n*\n* @param group ViewGroup to modify\n* @param split <code>true</code> to allow MotionEvents to be split and dispatched to multiple\n* child views. <code>false</code> to only allow one child view to be the target of\n* any MotionEvent received by this ViewGroup.\n*\n* @deprecated Use {@link ViewGroup#setMotionEventSplittingEnabled(boolean)} directly.\n*/\n"}, "listenerMap.remove": {"dirtyReplacement": "readConfiguration readConfiguration} method. /@Deprecatedpublic void removePropertyChangeListener(PropertyChangeListener l) throws SecurityException {    checkPermission();    if (l != null) {        PropertyChangeListener listener = l;        synchronized (listenerMap) {            Integer value = listenerMap.get(listener);            if (value != null) {                // remove from map if registration count is 1, otherwise                // just decrement its count                int i = value.intValue();                if (i == 1) {                    listenerMap.remove(listener);                } else {                    assert i > 1;                    listenerMap.put(listener, i - 1)", "methodClass": "java.util.logging.LogManager", "methodName": "listenerMap.remove", "method": "void removePropertyChangeListener(PropertyChangeListener)", "replacementComments": "/**\n* Removes an event listener for property change events.\n* If the same listener instance has been added to the listener table\n* through multiple invocations of <CODE>addPropertyChangeListener</CODE>,\n* then an equivalent number of\n* <CODE>removePropertyChangeListener</CODE> invocations are required to remove\n* all instances of that listener from the listener table.\n* <P>\n* Returns silently if the given listener is not found.\n*\n* <p><b>WARNING:</b> This method is omitted from this class in all subset\n* Profiles of Java SE that do not include the {@code java.beans} package.\n* </p>\n*\n* @param l  event listener (can be null)\n* @exception  SecurityException  if a security manager exists and if\n* the caller does not have LoggingPermission(\"control\").\n* @deprecated The dependency on {@code PropertyChangeListener} creates a\n* significant impediment to future modularization of the Java\n* platform. This method will be removed in a future release.\n* The global {@code LogManager} can detect changes to the\n* logging configuration by overridding the {@link\n* #readConfiguration readConfiguration} method.\n*/\n"}, "notifyChange": {"dirtyReplacement": "dispatchChange", "methodClass": "android.database.ContentObservable", "methodName": "notifyChange", "method": "void notifyChange(boolean)", "replacementComments": "/**\n* Invokes {@link ContentObserver#onChange} on each observer.\n*\n* @param selfChange True if this is a self-change notification.\n*\n* @deprecated Use {@link #dispatchChange} instead.\n*/\n"}, "getWallpaperDesiredMinimumWidth": {"dirtyReplacement": "android.app.WallpaperManager#getDesiredMinimumWidth()  WallpaperManager.getDesiredMinimumWidth()", "methodClass": "android.content.Context", "methodName": "getWallpaperDesiredMinimumWidth", "method": "int getWallpaperDesiredMinimumWidth()", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumWidth()\n* WallpaperManager.getDesiredMinimumWidth()} instead.\n*/\n"}, "setRemoteAdapter": {"dirtyReplacement": "android.widget.RemoteViews#setRemoteAdapter(int, Intent)", "methodClass": "android.widget.RemoteViews", "methodName": "setRemoteAdapter", "method": "void setRemoteAdapter(int,int,Intent)", "replacementComments": "/**\n* Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}.\n*\n* @param appWidgetId The id of the app widget which contains the specified view. (This\n* parameter is ignored in this deprecated method)\n* @param viewId The id of the {@link AdapterView}\n* @param intent The intent of the service which will be\n* providing data to the RemoteViewsAdapter\n* @deprecated This method has been deprecated. See\n* {@link android.widget.RemoteViews#setRemoteAdapter(int, Intent)}\n*/\n"}, "setTextSize": {"dirtyReplacement": "setTextZoom", "methodClass": "android.webkit.WebSettings", "methodName": "setTextSize", "method": "void setTextSize(TextSize)", "replacementComments": "/**\n* Sets the text size of the page. The default is {@link TextSize#NORMAL}.\n*\n* @param t the text size as a {@link TextSize} value\n* @deprecated Use {@link #setTextZoom} instead.\n*/\n"}, "writeSInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeSInt32", "method": "void writeSInt32(long,int)", "replacementComments": "/**\n* Write a single proto \"sint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setVibrateSetting": {"dirtyReplacement": "getRingerMode()", "methodClass": "android.media.AudioManager", "methodName": "setVibrateSetting", "method": "void setVibrateSetting(int,int)", "replacementComments": "/**\n* Sets the setting for when the vibrate type should vibrate.\n* <p>\n* This method should only be used by applications that replace the platform-wide\n* management of audio settings or the main telephony application.\n*\n* @param vibrateType The type of vibrate. One of\n* {@link #VIBRATE_TYPE_NOTIFICATION} or\n* {@link #VIBRATE_TYPE_RINGER}.\n* @param vibrateSetting The vibrate setting, one of\n* {@link #VIBRATE_SETTING_ON},\n* {@link #VIBRATE_SETTING_OFF}, or\n* {@link #VIBRATE_SETTING_ONLY_SILENT}.\n* @see #getVibrateSetting(int)\n* @see #shouldVibrate(int)\n* @deprecated Applications should maintain their own vibrate policy based on\n* current ringer mode that can be queried via {@link #getRingerMode()}.\n*/\n"}, "isHeading": {"dirtyReplacement": "AccessibilityNodeInfoCompat#isHeading()", "methodClass": "androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat", "methodName": "isHeading", "method": "boolean isHeading()", "replacementComments": "/**\n* Gets if the collection item is a heading. For example, section\n* heading, table header, etc.\n*\n* @return If the item is a heading.\n* @deprecated Use {@link AccessibilityNodeInfoCompat#isHeading()}\n*/\n"}, "writeRepeatedString": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedString", "method": "void writeRepeatedString(long,String)", "replacementComments": "/**\n* Write a single repeated proto \"string\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "shouldVibrate": {"dirtyReplacement": "getRingerMode()", "methodClass": "android.media.AudioManager", "methodName": "shouldVibrate", "method": "boolean shouldVibrate(int)", "replacementComments": "/**\n* Returns whether a particular type should vibrate according to user\n* settings and the current ringer mode.\n* <p>\n* This shouldn't be needed by most clients that use notifications to\n* vibrate. The notification manager will not vibrate if the policy doesn't\n* allow it, so the client should always set a vibrate pattern and let the\n* notification manager control whether or not to actually vibrate.\n*\n* @param vibrateType The type of vibrate. One of\n* {@link #VIBRATE_TYPE_NOTIFICATION} or\n* {@link #VIBRATE_TYPE_RINGER}.\n* @return Whether the type should vibrate at the instant this method is\n* called.\n* @see #setVibrateSetting(int, int)\n* @see #getVibrateSetting(int)\n* @deprecated Applications should maintain their own vibrate policy based on\n* current ringer mode that can be queried via {@link #getRingerMode()}.\n*/\n"}, "toString": {"dirtyReplacement": "java.io.ByteArrayOutputStream#size()", "methodClass": "java.io.ByteArrayOutputStream", "methodName": "toString", "method": "String toString(int)", "replacementComments": "/**\n* Creates a newly allocated string. Its size is the current size of\n* the output stream and the valid contents of the buffer have been\n* copied into it. Each character <i>c</i> in the resulting string is\n* constructed from the corresponding element <i>b</i> in the byte\n* array such that:\n* <blockquote><pre>\n* c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n* </pre></blockquote>\n*\n* @deprecated This method does not properly convert bytes into characters.\n* As of JDK&nbsp;1.1, the preferred way to do this is via the\n* <code>toString(String enc)</code> method, which takes an encoding-name\n* argument, or the <code>toString()</code> method, which uses the\n* platform's default character encoding.\n*\n* @param      hibyte    the high byte of each resulting Unicode character.\n* @return     the current contents of the output stream, as a string.\n* @see        java.io.ByteArrayOutputStream#size()\n* @see        java.io.ByteArrayOutputStream#toString(String)\n* @see        java.io.ByteArrayOutputStream#toString()\n*/\n"}, "removeSessionCookie": {"dirtyReplacement": "removeSessionCookies(ValueCallback)", "methodClass": "android.webkit.CookieManager", "methodName": "removeSessionCookie", "method": "void removeSessionCookie()", "replacementComments": "/**\n* Removes all session cookies, which are cookies without an expiration\n* date.\n* @deprecated use {@link #removeSessionCookies(ValueCallback)} instead.\n*/\n"}, "addNmeaListener": {"dirtyReplacement": "addNmeaListener(OnNmeaMessageListener)", "methodClass": "android.location.LocationManager", "methodName": "addNmeaListener", "method": "boolean addNmeaListener(NmeaListener)", "replacementComments": "/**\n* Adds an NMEA listener.\n*\n* @param listener a {@link GpsStatus.NmeaListener} object to register\n*\n* @return true if the listener was successfully added\n*\n* @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n* @deprecated use {@link #addNmeaListener(OnNmeaMessageListener)} instead.\n*/\n"}, "unregisterForCarrierPrivilegeRulesLoaded": {"dirtyReplacement": "UiccProfile#unregisterForCarrierPrivilegeRulesLoaded(Handler)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "unregisterForCarrierPrivilegeRulesLoaded", "method": "void unregisterForCarrierPrivilegeRulesLoaded(Handler)", "replacementComments": "/**\n* @deprecated Please use\n* {@link UiccProfile#unregisterForCarrierPrivilegeRulesLoaded(Handler)} instead.\n*/\n"}, "areCarrierPriviligeRulesLoaded": {"dirtyReplacement": "UiccProfile#areCarrierPriviligeRulesLoaded()", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "areCarrierPriviligeRulesLoaded", "method": "boolean areCarrierPriviligeRulesLoaded()", "replacementComments": "/**\n* Returns true iff carrier privileges rules are null (dont need to be loaded) or loaded.\n* @deprecated Please use {@link UiccProfile#areCarrierPriviligeRulesLoaded()} instead.\n*/\n"}, "destroyItem": {"dirtyReplacement": "destroyItem(android.view.ViewGroup, int, Object)", "methodClass": "com.android.internal.widget.PagerAdapter", "methodName": "destroyItem", "method": "void destroyItem(View,int,Object)", "replacementComments": "/**\n* Remove a page for the given position.  The adapter is responsible\n* for removing the view from its container, although it only must ensure\n* this is done by the time it returns from {@link #finishUpdate(android.view.View)}.\n*\n* @param container The containing View from which the page will be removed.\n* @param position The page position to be removed.\n* @param object The same object that was returned by\n* {@link #instantiateItem(android.view.View, int)}.\n*\n* @deprecated Use {@link #destroyItem(android.view.ViewGroup, int, Object)}\n*/\n"}, "removeGlobalOnLayoutListener": {"dirtyReplacement": "removeOnGlobalLayoutListener", "methodClass": "android.view.ViewTreeObserver", "methodName": "removeGlobalOnLayoutListener", "method": "void removeGlobalOnLayoutListener(OnGlobalLayoutListener)", "replacementComments": "/**\n* Remove a previously installed global layout callback\n*\n* @param victim The callback to remove\n*\n* @throws IllegalStateException If {@link #isAlive()} returns false\n*\n* @deprecated Use #removeOnGlobalLayoutListener instead\n*\n* @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)\n*/\n"}, "saveLayer": {"dirtyReplacement": "saveLayer(float, float, float, float, Paint)", "methodClass": "android.graphics.Canvas", "methodName": "saveLayer", "method": "int saveLayer(float,float,float,float,Paint,int)", "replacementComments": "/**\n* Helper version of saveLayer() that takes 4 values rather than a RectF.\n*\n* As of API Level API level {@value Build.VERSION_CODES#P} the only valid\n* {@code saveFlags} is {@link #ALL_SAVE_FLAG}.  All other flags are ignored.\n*\n* @deprecated Use {@link #saveLayer(float, float, float, float, Paint)} instead.\n*/\n"}, "toURL": {"dirtyReplacement": "toURI() toURI", "methodClass": "java.io.File", "methodName": "toURL", "method": "URL toURL()", "replacementComments": "/**\n* Converts this abstract pathname into a <code>file:</code> URL.  The\n* exact form of the URL is system-dependent.  If it can be determined that\n* the file denoted by this abstract pathname is a directory, then the\n* resulting URL will end with a slash.\n*\n* @return  A URL object representing the equivalent file URL\n*\n* @throws  MalformedURLException\n* If the path cannot be parsed as a URL\n*\n* @see     #toURI()\n* @see     java.net.URI\n* @see     java.net.URI#toURL()\n* @see     java.net.URL\n* @since   1.2\n*\n* @deprecated This method does not automatically escape characters that\n* are illegal in URLs.  It is recommended that new code convert an\n* abstract pathname into a URL by first converting it into a URI, via the\n* {@link #toURI() toURI} method, and then converting the URI into a URL\n* via the {@link java.net.URI#toURL() URI.toURL} method.\n*/\n"}, "updateImsServiceConfig": {"dirtyReplacement": "updateImsServiceConfig(boolean)", "methodClass": "com.android.ims.ImsManager", "methodName": "updateImsServiceConfig", "method": "void updateImsServiceConfig(Context,int,boolean)", "replacementComments": "/**\n* Sync carrier config and user settings with ImsConfig.\n*\n* @param context for the manager object\n* @param phoneId phone id\n* @param force update\n*\n* @deprecated Doesn't support MSIM devices. Use {@link #updateImsServiceConfig(boolean)}\n* instead.\n*/\n"}, "setDrawingCacheQuality": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "setDrawingCacheQuality", "method": "void setDrawingCacheQuality(int)", "replacementComments": "/**\n* Set the drawing cache quality of this view. This value is used only when the\n* drawing cache is enabled\n*\n* @param quality One of {@link #DRAWING_CACHE_QUALITY_AUTO},\n* {@link #DRAWING_CACHE_QUALITY_LOW}, or {@link #DRAWING_CACHE_QUALITY_HIGH}\n*\n* @see #getDrawingCacheQuality()\n* @see #setDrawingCacheEnabled(boolean)\n* @see #isDrawingCacheEnabled()\n*\n* @attr ref android.R.styleable#View_drawingCacheQuality\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "getAddedCount": {"dirtyReplacement": "AccessibilityRecord#getAddedCount()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getAddedCount", "method": "int getAddedCount()", "replacementComments": "/**\n* Gets the number of added characters.\n*\n* @return The number of added characters.\n*\n* @deprecated Use {@link AccessibilityRecord#getAddedCount()} directly.\n*/\n"}, "getSubjectMatch": {"dirtyReplacement": "altSubjectMatch", "methodClass": "android.net.wifi.WifiEnterpriseConfig", "methodName": "getSubjectMatch", "method": "String getSubjectMatch()", "replacementComments": "/**\n* Get subject match (deprecated)\n* @return the subject match string\n* @deprecated in favor of altSubjectMatch\n*/\n"}, "getBufferedProgressLong": {"dirtyReplacement": "getBufferedPosition()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getBufferedProgressLong", "method": "long getBufferedProgressLong()", "replacementComments": "/**\n* Returns the buffered progress of long type for the playback controls row.\n* @deprecated Use {@link #getBufferedPosition()}\n*/\n"}, "setOutput": {"dirtyReplacement": "execute(Object...)", "methodClass": "android.renderscript.ScriptGroup", "methodName": "setOutput", "method": "void setOutput(KernelID,Allocation)", "replacementComments": "/**\n* Sets an output of the ScriptGroup. This specifies an\n* Allocation to be used for the kernels that require an output\n* Allocation visible after the ScriptGroup is executed.\n*\n* @deprecated Use return value of {@link #execute(Object...)} instead.\n*\n* @param s The ID of the kernel where the allocation should be\n* connected.\n* @param a The allocation to connect.\n*/\n"}, "isAnalogForced": {"dirtyReplacement": "isConfigFlagSet(int)", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "isAnalogForced", "method": "boolean isAnalogForced()", "replacementComments": "/**\n* Checks, if the analog playback is forced, see setAnalogForced.\n*\n* @throws IllegalStateException if the switch is not supported at current\n* configuration.\n* @return {@code true} if analog is forced, {@code false} otherwise.\n* @deprecated Use {@link isConfigFlagSet(int)} instead.\n*/\n"}, "retainNonConfig": {"dirtyReplacement": "retainNestedNonConfig()", "methodClass": "android.app.FragmentController", "methodName": "retainNonConfig", "method": "List<Fragment> retainNonConfig()", "replacementComments": "/**\n* Returns a list of Fragments that have opted to retain their instance across\n* configuration changes.\n*\n* @deprecated use {@link #retainNestedNonConfig()} to also track retained\n* nested child fragments\n*/\n"}, "setButton2": {"dirtyReplacement": "setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)", "methodClass": "android.app.AlertDialog", "methodName": "setButton2", "method": "void setButton2(CharSequence,OnClickListener)", "replacementComments": "/**\n* Set a listener to be invoked when button 2 of the dialog is pressed.\n* @param text The text to display in button 2.\n* @param listener The {@link DialogInterface.OnClickListener} to use.\n* @deprecated Use\n* {@link #setButton(int, CharSequence, android.content.DialogInterface.OnClickListener)}\n* with {@link DialogInterface#BUTTON_NEGATIVE}\n*/\n"}, "setHours": {"dirtyReplacement": "getHours", "methodClass": "java.sql.Date", "methodName": "setHours", "method": "void setHours(int)", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #getHours\n*/\n"}, "dragViewToBottom": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragViewToBottom", "method": "void dragViewToBottom(ActivityInstrumentationTestCase,View)", "replacementComments": "/**\n* Simulate touching the center of a view and dragging to the bottom of the screen.\n*\n* @param test The test case that is being run\n* @param v The view that should be dragged\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "setBitmap": {"dirtyReplacement": "setAvatar(Bitmap)", "methodClass": "com.android.systemui.statusbar.phone.UserAvatarView", "methodName": "setBitmap", "method": "void setBitmap(Bitmap)", "replacementComments": "/**\n* @deprecated use {@link #setAvatar(Bitmap)} instead.\n*/\n"}, "getPersistentDrawingCache": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.ViewGroup", "methodName": "getPersistentDrawingCache", "method": "int getPersistentDrawingCache()", "replacementComments": "/**\n* Returns an integer indicating what types of drawing caches are kept in memory.\n*\n* @see #setPersistentDrawingCache(int)\n* @see #setAnimationCacheEnabled(boolean)\n*\n* @return one or a combination of {@link #PERSISTENT_NO_CACHE},\n* {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}\n* and {@link #PERSISTENT_ALL_CACHES}\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "getNumApplications": {"dirtyReplacement": "UiccProfile#getNumApplications()", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getNumApplications", "method": "int getNumApplications()", "replacementComments": "/**\n* Returns number of applications on this card\n* @deprecated Please use {@link UiccProfile#getNumApplications()} instead.\n*/\n"}, "addMessage": {"dirtyReplacement": "addMessage(CharSequence, long, Person)", "methodClass": "androidx.core.app.NotificationCompat.MessagingStyle", "methodName": "addMessage", "method": "MessagingStyle addMessage(CharSequence,long,CharSequence)", "replacementComments": "/**\n* Adds a message for display by this notification. Convenience call for a simple\n* {@link Message} in {@link #addMessage(Message)}\n* @param text A {@link CharSequence} to be displayed as the message content\n* @param timestamp Time at which the message arrived in ms since Unix epoch\n* @param sender A {@link CharSequence} to be used for displaying the name of the\n* sender. Should be <code>null</code> for messages by the current user, in which case\n* the platform will insert {@link #getUserDisplayName()}.\n* Should be unique amongst all individuals in the conversation, and should be\n* consistent during re-posts of the notification.\n*\n* @see Message#Message(CharSequence, long, CharSequence)\n*\n* @return this object for method chaining\n*\n* @deprecated Use {@link #addMessage(CharSequence, long, Person)} or\n* {@link #addMessage(Message)}\n*/\n"}, "writeRepeatedSInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedSInt32", "method": "void writeRepeatedSInt32(long,int)", "replacementComments": "/**\n* Write a single repeated proto \"sint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "currentClassLoader": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "currentClassLoader", "method": "ClassLoader currentClassLoader()", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "inClassLoader": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "inClassLoader", "method": "boolean inClassLoader()", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "onAttachFragment": {"dirtyReplacement": "android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)", "methodClass": "android.app.Activity", "methodName": "onAttachFragment", "method": "void onAttachFragment(Fragment)", "replacementComments": "/**\n* Called when a Fragment is being attached to this activity, immediately\n* after the call to its {@link Fragment#onAttach Fragment.onAttach()}\n* method and before {@link Fragment#onCreate Fragment.onCreate()}.\n*\n* @deprecated Use {@link\n* android.support.v4.app.FragmentActivity#onAttachFragment(android.support.v4.app.Fragment)}\n*/\n"}, "getOverScrollMode": {"dirtyReplacement": "View#getOverScrollMode()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getOverScrollMode", "method": "int getOverScrollMode(View)", "replacementComments": "/**\n* Returns the over-scroll mode for this view. The result will be\n* one of {@link #OVER_SCROLL_ALWAYS} (default), {@link #OVER_SCROLL_IF_CONTENT_SCROLLS}\n* (allow over-scrolling only if the view content is larger than the container),\n* or {@link #OVER_SCROLL_NEVER}.\n*\n* @param v The View against which to invoke the method.\n* @return This view's over-scroll mode.\n* @deprecated Call {@link View#getOverScrollMode()} directly. This method will be\n* removed in a future release.\n*/\n"}, "getTotalTimeLong": {"dirtyReplacement": "getDuration()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getTotalTimeLong", "method": "long getTotalTimeLong()", "replacementComments": "/**\n* Returns the total time in milliseconds of long type for the playback controls row.\n* @deprecated use {@link #getDuration()}\n*/\n"}, "onStartNestedScroll": {"dirtyReplacement": "onStartNestedScroll(CoordinatorLayout, View, View, View, int, int)", "methodClass": "androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior", "methodName": "onStartNestedScroll", "method": "boolean onStartNestedScroll(CoordinatorLayout,V,View,View,int)", "replacementComments": "/**\n* @deprecated You should now override\n* {@link #onStartNestedScroll(CoordinatorLayout, View, View, View, int, int)}. This\n* method will still continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.\n*/\n"}, "getUidUdpRxPackets": {"dirtyReplacement": "getUidRxPackets(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidUdpRxPackets", "method": "long getUidUdpRxPackets(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidRxPackets(int)\n*/\n"}, "addAccessibilityStateChangeListener": {"dirtyReplacement": "AccessibilityManager#addAccessibilityStateChangeListener(  AccessibilityManager.AccessibilityStateChangeListener)", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat", "methodName": "addAccessibilityStateChangeListener", "method": "boolean addAccessibilityStateChangeListener(AccessibilityManager,AccessibilityStateChangeListener)", "replacementComments": "/**\n* Registers an {@link AccessibilityManager.AccessibilityStateChangeListener} for changes in\n* the global accessibility state of the system.\n*\n* @param manager The accessibility manager.\n* @param listener The listener.\n* @return True if successfully registered.\n*\n* @deprecated Use {@link AccessibilityManager#addAccessibilityStateChangeListener(\n* AccessibilityManager.AccessibilityStateChangeListener)} directly.\n*/\n"}, "generateAsync": {"dirtyReplacement": "Palette.Builder", "methodClass": "com.android.internal.graphics.palette.Palette", "methodName": "generateAsync", "method": "AsyncTask<Bitmap, Void, Palette> generateAsync(Bitmap,PaletteAsyncListener)", "replacementComments": "/**\n* @deprecated Use {@link Palette.Builder} to generate the Palette.\n*/\n"}, "loadNanoApp": {"dirtyReplacement": "loadNanoApp(ContextHubInfo, NanoAppBinary)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "loadNanoApp", "method": "int loadNanoApp(int,NanoApp)", "replacementComments": "/**\n* Load a nano app on a specified context hub.\n*\n* Note that loading is asynchronous.  When we return from this method,\n* the nano app (probably) hasn't loaded yet.  Assuming a return of 0\n* from this method, then the final success/failure for the load, along\n* with the \"handle\" for the nanoapp, is all delivered in a byte\n* string via a call to Callback.onMessageReceipt.\n*\n* TODO(b/30784270): Provide a better success/failure and \"handle\" delivery.\n*\n* @param hubHandle handle of context hub to load the app on.\n* @param app the nanoApp to load on the hub\n*\n* @return 0 if the command for loading was sent to the context hub;\n* -1 otherwise\n*\n* @see NanoApp\n*\n* @deprecated Use {@link #loadNanoApp(ContextHubInfo, NanoAppBinary)} instead.\n*/\n"}, "canScrollVertically": {"dirtyReplacement": "View#canScrollVertically(int)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "canScrollVertically", "method": "boolean canScrollVertically(View,int)", "replacementComments": "/**\n* Check if this view can be scrolled vertically in a certain direction.\n*\n* @param view The View against which to invoke the method.\n* @param direction Negative to check scrolling up, positive to check scrolling down.\n* @return true if this view can be scrolled in the specified direction, false otherwise.\n*\n* @deprecated Use {@link View#canScrollVertically(int)} directly.\n*/\n"}, "smoothSlideOpen": {"dirtyReplacement": "openPane()", "methodClass": "androidx.slidingpanelayout.widget.SlidingPaneLayout", "methodName": "smoothSlideOpen", "method": "void smoothSlideOpen()", "replacementComments": "/**\n* @deprecated Renamed to {@link #openPane()} - this method is going away soon!\n*/\n"}, "releaseAllSecureStops": {"dirtyReplacement": "removeAllSecureStops", "methodClass": "android.media.MediaDrm", "methodName": "releaseAllSecureStops", "method": "void releaseAllSecureStops()", "replacementComments": "/**\n* Remove all secure stops without requiring a secure stop release message from\n* the license server.\n*\n* @deprecated Remove all secure stops using {@link #removeAllSecureStops} instead.\n*/\n"}, "setupHeaderItemFocusHighlight": {"dirtyReplacement": "setupHeaderItemFocusHighlight(ItemBridgeAdapter)", "methodClass": "androidx.leanback.widget.FocusHighlightHelper", "methodName": "setupHeaderItemFocusHighlight", "method": "void setupHeaderItemFocusHighlight(VerticalGridView)", "replacementComments": "/**\n* Sets up default focus highlight behavior of a focused item in header list. It would scale\n* the focused item and update\n* {@link RowHeaderPresenter#onSelectLevelChanged(RowHeaderPresenter.ViewHolder)}.\n* Equivalent to call setupHeaderItemFocusHighlight(gridView, true).\n*\n* @param gridView  The header list.\n* @deprecated Use {@link #setupHeaderItemFocusHighlight(ItemBridgeAdapter)}\n*/\n"}, "getFinalX": {"dirtyReplacement": "OverScroller#getFinalX()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "getFinalX", "method": "int getFinalX()", "replacementComments": "/**\n* @return The final X position for the scroll in progress, if known.\n*\n* @deprecated Use {@link OverScroller#getFinalX()} directly.\n*/\n"}, "isPurgingAllowed": {"dirtyReplacement": "android.content.ComponentCallbacks2#onTrimMemory(int)", "methodClass": "android.os.MemoryFile", "methodName": "isPurgingAllowed", "method": "boolean isPurgingAllowed()", "replacementComments": "/**\n* Is memory file purging enabled?\n*\n* @return true if the file may be purged.\n*\n* @deprecated Purgable is considered generally fragile and hard to use safely. Applications\n* are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}\n* to react to memory events and release shared memory regions as appropriate.\n*/\n"}, "onCreateDialog": {"dirtyReplacement": "onCreateDialog(int, Bundle)", "methodClass": "android.app.Activity", "methodName": "onCreateDialog", "method": "Dialog onCreateDialog(int)", "replacementComments": "/**\n* @deprecated Old no-arguments version of {@link #onCreateDialog(int, Bundle)}.\n*/\n"}, "isDrawingCacheEnabled": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "isDrawingCacheEnabled", "method": "boolean isDrawingCacheEnabled()", "replacementComments": "/**\n* <p>Indicates whether the drawing cache is enabled for this view.</p>\n*\n* @return true if the drawing cache is enabled\n*\n* @see #setDrawingCacheEnabled(boolean)\n* @see #getDrawingCache()\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "setTranslationX": {"dirtyReplacement": "View#setTranslationX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setTranslationX", "method": "void setTranslationX(View,float)", "replacementComments": "/**\n* Sets the horizontal location of this view relative to its left position.\n* This effectively positions the object post-layout, in addition to wherever the object's\n* layout placed it.\n*\n* @param value The horizontal position of this view relative to its left position,\n* in pixels.\n*\n* @deprecated Use {@link View#setTranslationX(float)} directly.\n*/\n"}, "setTranslationY": {"dirtyReplacement": "View#setTranslationY(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setTranslationY", "method": "void setTranslationY(View,float)", "replacementComments": "/**\n* Sets the vertical location of this view relative to its top position.\n* This effectively positions the object post-layout, in addition to wherever the object's\n* layout placed it.\n*\n* @param value The vertical position of this view relative to its top position,\n* in pixels.\n*\n* @attr name android:translationY\n*\n* @deprecated Use {@link View#setTranslationY(float)} directly.\n*/\n"}, "setSummarySubtitle": {"dirtyReplacement": "setSummary(CharSequence, boolean)", "methodClass": "androidx.slice.builders.ListBuilder.HeaderBuilder", "methodName": "setSummarySubtitle", "method": "HeaderBuilder setSummarySubtitle(CharSequence,boolean)", "replacementComments": "/**\n* Sets the summary subtitle to be shown in this header. If unset, the normal subtitle\n* will be used. The summary is used when the parent template is presented in a\n* small format.\n* @deprecated TO BE REMOVED; use {@link #setSummary(CharSequence, boolean)}\n*/\n"}, "setOnPageChangeListener": {"dirtyReplacement": "addOnPageChangeListener(OnPageChangeListener)", "methodClass": "androidx.viewpager.widget.ViewPager", "methodName": "setOnPageChangeListener", "method": "void setOnPageChangeListener(OnPageChangeListener)", "replacementComments": "/**\n* Set a listener that will be invoked whenever the page changes or is incrementally\n* scrolled. See {@link OnPageChangeListener}.\n*\n* @param listener Listener to set\n*\n* @deprecated Use {@link #addOnPageChangeListener(OnPageChangeListener)}\n* and {@link #removeOnPageChangeListener(OnPageChangeListener)} instead.\n*/\n"}, "setChecked": {"dirtyReplacement": "AccessibilityRecord#setChecked(boolean)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setChecked", "method": "void setChecked(boolean)", "replacementComments": "/**\n* Sets if the source is checked.\n*\n* @param isChecked True if the view is checked, false otherwise.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setChecked(boolean)} directly.\n*/\n"}, "dispatch": {"dirtyReplacement": "dispatch(Callback, DispatcherState, Object)", "methodClass": "android.view.KeyEvent", "methodName": "dispatch", "method": "boolean dispatch(Callback)", "replacementComments": "/**\n* @deprecated Use {@link #dispatch(Callback, DispatcherState, Object)} instead.\n*/\n"}, "onConsoleMessage": {"dirtyReplacement": "onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)", "methodClass": "android.webkit.WebChromeClient", "methodName": "onConsoleMessage", "method": "void onConsoleMessage(String,int,String)", "replacementComments": "/**\n* Report a JavaScript error message to the host application. The ChromeClient\n* should override this to process the log message as they see fit.\n* @param message The error message to report.\n* @param lineNumber The line number of the error.\n* @param sourceID The name of the source file that caused the error.\n* @deprecated Use {@link #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)}\n* instead.\n*/\n"}, "getRotation": {"dirtyReplacement": "View#getRotation()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getRotation", "method": "float getRotation(View)", "replacementComments": "/**\n* @deprecated Use {@link View#getRotation()} directly.\n*/\n"}, "setShadowDrawable": {"dirtyReplacement": "setShadowDrawableLeft(Drawable d)", "methodClass": "androidx.slidingpanelayout.widget.SlidingPaneLayout", "methodName": "setShadowDrawable", "method": "void setShadowDrawable(Drawable)", "replacementComments": "/**\n* @deprecated Renamed to {@link #setShadowDrawableLeft(Drawable d)} to support LTR (left to\n* right language) and {@link #setShadowDrawableRight(Drawable d)} to support RTL (right to left\n* language) during opening/closing.\n*\n* @param d drawable to use as a shadow\n*/\n"}, "setTextAppearance": {"dirtyReplacement": "setTextAppearance(int)", "methodClass": "android.widget.TextView", "methodName": "setTextAppearance", "method": "void setTextAppearance(Context,int)", "replacementComments": "/**\n* Sets the text color, size, style, hint color, and highlight color\n* from the specified TextAppearance resource.\n*\n* @deprecated Use {@link #setTextAppearance(int)} instead.\n*/\n"}, "speak": {"dirtyReplacement": "speak(CharSequence, int, Bundle, String)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "speak", "method": "int speak(String,int,HashMap<String, String>)", "replacementComments": "/**\n* Speaks the string using the specified queuing strategy and speech parameters.\n* This method is asynchronous, i.e. the method just adds the request to the queue of TTS\n* requests and then returns. The synthesis might not have finished (or even started!) at the\n* time when this method returns. In order to reliably detect errors during synthesis,\n* we recommend setting an utterance progress listener (see\n* {@link #setOnUtteranceProgressListener}) and using the\n* {@link Engine#KEY_PARAM_UTTERANCE_ID} parameter.\n*\n* @param text The string of text to be spoken. No longer than\n* {@link #getMaxSpeechInputLength()} characters.\n* @param queueMode The queuing strategy to use, {@link #QUEUE_ADD} or {@link #QUEUE_FLUSH}.\n* @param params Parameters for the request. Can be null.\n* Supported parameter names:\n* {@link Engine#KEY_PARAM_STREAM},\n* {@link Engine#KEY_PARAM_UTTERANCE_ID},\n* {@link Engine#KEY_PARAM_VOLUME},\n* {@link Engine#KEY_PARAM_PAN}.\n* Engine specific parameters may be passed in but the parameter keys\n* must be prefixed by the name of the engine they are intended for. For example\n* the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the\n* engine named \"com.svox.pico\" if it is being used.\n*\n* @return {@link #ERROR} or {@link #SUCCESS} of <b>queuing</b> the speak operation.\n* @deprecated As of API level 21, replaced by\n* {@link #speak(CharSequence, int, Bundle, String)}.\n*/\n"}, "getMnc": {"dirtyReplacement": "getMncString", "methodClass": "android.telephony.CellIdentityGsm", "methodName": "getMnc", "method": "int getMnc()", "replacementComments": "/**\n* @return 2 or 3-digit Mobile Network Code, 0..999, Integer.MAX_VALUE if unknown\n* @deprecated Use {@link #getMncString} instead.\n*/\n"}, "getCarrierPrivilegeStatus": {"dirtyReplacement": "UiccProfile#getCarrierPrivilegeStatus(PackageManager, String)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getCarrierPrivilegeStatus", "method": "int getCarrierPrivilegeStatus(PackageManager,String)", "replacementComments": "/**\n* Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatus}.\n* @deprecated Please use\n* {@link UiccProfile#getCarrierPrivilegeStatus(PackageManager, String)} instead.\n*/\n"}, "getValidNotAfter": {"dirtyReplacement": "getValidNotAfterDate()", "methodClass": "android.net.http.SslCertificate", "methodName": "getValidNotAfter", "method": "String getValidNotAfter()", "replacementComments": "/**\n* @return Not-after date from the certificate validity period in\n* ISO 8601 format or \"\" if none has been set\n*\n* @deprecated Use {@link #getValidNotAfterDate()}\n*/\n"}, "isViewFromObject": {"dirtyReplacement": "androidx.fragment.app.FragmentPagerAdapter", "methodClass": "androidx.legacy.app.FragmentPagerAdapter", "methodName": "isViewFromObject", "method": "boolean isViewFromObject(View,Object)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentPagerAdapter} instead.\n*/\n"}, "hasEnrolledFingerprints": {"dirtyReplacement": "BiometricPrompt", "methodClass": "android.hardware.fingerprint.FingerprintManager", "methodName": "hasEnrolledFingerprints", "method": "boolean hasEnrolledFingerprints()", "replacementComments": "/**\n* Determine if there is at least one fingerprint enrolled.\n*\n* @return true if at least one fingerprint is enrolled, false otherwise\n* @deprecated See {@link BiometricPrompt} and\n* {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}\n*/\n"}, "restoreAllState": {"dirtyReplacement": "restoreAllState(Parcelable, FragmentManagerNonConfig)", "methodClass": "android.app.FragmentController", "methodName": "restoreAllState", "method": "void restoreAllState(Parcelable,List<Fragment>)", "replacementComments": "/**\n* Restores the saved state for all Fragments. The given Fragment list are Fragment\n* instances retained across configuration changes.\n*\n* @see #retainNonConfig()\n*\n* @deprecated use {@link #restoreAllState(Parcelable, FragmentManagerNonConfig)}\n*/\n"}, "setInverseBackgroundForced": {"dirtyReplacement": "d for pre-Material themes.", "methodClass": "androidx.appcompat.app.AlertDialog.Builder", "methodName": "setInverseBackgroundForced", "method": "Builder setInverseBackgroundForced(boolean)", "replacementComments": "/**\n* Sets the Dialog to use the inverse background, regardless of what the\n* contents is.\n*\n* @param useInverseBackground Whether to use the inverse background\n* @return This Builder object to allow for chaining of calls to set methods\n* @deprecated This flag is only used for pre-Material themes. Instead,\n* specify the window background using on the alert dialog\n* theme.\n*/\n"}, "checkMulticast": {"dirtyReplacement": "checkMulticast(java.net.InetAddress)", "methodClass": "java.lang.SecurityManager", "methodName": "checkMulticast", "method": "void checkMulticast(InetAddress,byte)", "replacementComments": "/**\n* @deprecated use {@link #checkMulticast(java.net.InetAddress)} instead.\n*/\n"}, "getTypeName": {"dirtyReplacement": "NetworkCapabilities#hasTransport", "methodClass": "android.net.NetworkInfo", "methodName": "getTypeName", "method": "String getTypeName()", "replacementComments": "/**\n* Return a human-readable name describe the type of the network,\n* for example \"WIFI\" or \"MOBILE\".\n* @return the name of the network type\n* @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}\n* instead with one of the NetworkCapabilities#TRANSPORT_* constants :\n* {@link #getType} and {@link #getTypeName} cannot account for networks using\n* multiple transports. Note that generally apps should not care about transport;\n* {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and\n* {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that\n* apps concerned with meteredness or bandwidth should be looking at, as they\n* offer this information with much better accuracy.\n*/\n"}, "setRotationX": {"dirtyReplacement": "View#setRotationX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setRotationX", "method": "void setRotationX(View,float)", "replacementComments": "/**\n* Sets the degrees that the view is rotated around the horizontal axis through the pivot point.\n* Increasing values result in clockwise rotation from the viewpoint of looking down the\n* x axis.\n*\n* @param value The degrees of X rotation.\n*\n* @deprecated Use {@link View#setRotationX(float)} directly.\n*/\n"}, "setRotationY": {"dirtyReplacement": "View#setRotationY(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setRotationY", "method": "void setRotationY(View,float)", "replacementComments": "/**\n* Sets the degrees that the view is rotated around the vertical axis through the pivot point.\n* Increasing values result in counter-clockwise rotation from the viewpoint of looking\n* down the y axis.\n*\n* @param value The degrees of Y rotation.\n*\n* @deprecated Use {@link View#setRotationY(float)} directly.\n*/\n"}, "getCurrX": {"dirtyReplacement": "OverScroller#getCurrX()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "getCurrX", "method": "int getCurrX()", "replacementComments": "/**\n* Returns the current X offset in the scroll.\n*\n* @return The new X offset as an absolute distance from the origin.\n*\n* @deprecated Use {@link OverScroller#getCurrX()} directly.\n*/\n"}, "getCurrY": {"dirtyReplacement": "OverScroller#getCurrY()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "getCurrY", "method": "int getCurrY()", "replacementComments": "/**\n* Returns the current Y offset in the scroll.\n*\n* @return The new Y offset as an absolute distance from the origin.\n*\n* @deprecated Use {@link OverScroller#getCurrY()} directly.\n*/\n"}, "buildQuery": {"dirtyReplacement": "buildQuery(String[], String, String, String, String, String)", "methodClass": "android.database.sqlite.SQLiteQueryBuilder", "methodName": "buildQuery", "method": "String buildQuery(String[],String,String[],String,String,String,String)", "replacementComments": "/**\n* @deprecated This method's signature is misleading since no SQL parameter\n* substitution is carried out.  The selection arguments parameter does not get\n* used at all.  To avoid confusion, call\n* {@link #buildQuery(String[], String, String, String, String, String)} instead.\n*/\n"}, "onDraw": {"dirtyReplacement": "onDraw(Canvas, RecyclerView, RecyclerView.State)", "methodClass": "androidx.recyclerview.widget.RecyclerView.ItemDecoration", "methodName": "onDraw", "method": "void onDraw(Canvas,RecyclerView)", "replacementComments": "/**\n* @deprecated\n* Override {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)}\n*/\n"}, "onStopNestedScroll": {"dirtyReplacement": "onStopNestedScroll(CoordinatorLayout, View, View, int)", "methodClass": "androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior", "methodName": "onStopNestedScroll", "method": "void onStopNestedScroll(CoordinatorLayout,V,View)", "replacementComments": "/**\n* @deprecated You should now override\n* {@link #onStopNestedScroll(CoordinatorLayout, View, View, int)}. This method will still\n* continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.\n*/\n"}, "appendRecord": {"dirtyReplacement": "AccessibilityEvent#appendRecord(AccessibilityRecord)", "methodClass": "androidx.core.view.accessibility.AccessibilityEventCompat", "methodName": "appendRecord", "method": "void appendRecord(AccessibilityEvent,AccessibilityRecordCompat)", "replacementComments": "/**\n* Appends an {@link android.view.accessibility.AccessibilityRecord} to the end of\n* event records.\n*\n* @param record The record to append.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityEvent#appendRecord(AccessibilityRecord)} directly.\n*/\n"}, "inKeyguardRestrictedInputMode": {"dirtyReplacement": "isKeyguardLocked()", "methodClass": "android.app.KeyguardManager", "methodName": "inKeyguardRestrictedInputMode", "method": "boolean inKeyguardRestrictedInputMode()", "replacementComments": "/**\n* @deprecated Use {@link #isKeyguardLocked()} instead.\n*\n* If keyguard screen is showing or in restricted key input mode (i.e. in\n* keyguard password emergency screen). When in such mode, certain keys,\n* such as the Home key and the right soft keys, don't work.\n*\n* @return true if in keyguard restricted input mode.\n*/\n"}, "writeSFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeSFixed32", "method": "void writeSFixed32(long,int)", "replacementComments": "/**\n* Write a single proto \"sfixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "copyToFile": {"dirtyReplacement": "copy(InputStream, OutputStream)", "methodClass": "android.os.FileUtils", "methodName": "copyToFile", "method": "boolean copyToFile(InputStream,File)", "replacementComments": "/**\n* @deprecated use {@link #copy(InputStream, OutputStream)} instead.\n*/\n"}, "setOnTabChangedListener": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "setOnTabChangedListener", "method": "void setOnTabChangedListener(OnTabChangeListener)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "getDrawable": {"dirtyReplacement": "getDrawable(int, Theme)", "methodClass": "android.content.res.Resources", "methodName": "getDrawable", "method": "Drawable getDrawable(int)", "replacementComments": "/**\n* Return a drawable object associated with a particular resource ID.\n* Various types of objects will be returned depending on the underlying\n* resource -- for example, a solid color, PNG image, scalable image, etc.\n* The Drawable API hides these implementation details.\n*\n* <p class=\"note\"><strong>Note:</strong> Prior to\n* {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, this function\n* would not correctly retrieve the final configuration density when\n* the resource ID passed here is an alias to another Drawable resource.\n* This means that if the density configuration of the alias resource\n* is different than the actual resource, the density of the returned\n* Drawable would be incorrect, resulting in bad scaling. To work\n* around this, you can instead manually resolve the aliased reference\n* by using {@link #getValue(int, TypedValue, boolean)} and passing\n* {@code true} for {@code resolveRefs}. The resulting\n* {@link TypedValue#resourceId} value may be passed to this method.</p>\n*\n* <p class=\"note\"><strong>Note:</strong> To obtain a themed drawable, use\n* {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}\n* or {@link #getDrawable(int, Theme)} passing the desired theme.</p>\n*\n* @param id The desired resource identifier, as generated by the aapt\n* tool. This integer encodes the package, type, and resource\n* entry. The value 0 is an invalid identifier.\n* @return Drawable An object that can be used to draw this resource.\n* @throws NotFoundException Throws NotFoundException if the given ID does\n* not exist.\n* @see #getDrawable(int, Theme)\n* @deprecated Use {@link #getDrawable(int, Theme)} instead.\n*/\n"}, "setColor": {"dirtyReplacement": "setAccentColor(int)", "methodClass": "androidx.slice.builders.ListBuilder", "methodName": "setColor", "method": "ListBuilder setColor(int)", "replacementComments": "/**\n* @deprecated TO BE REMOVED; use {@link #setAccentColor(int)} instead.\n*/\n"}, "setPrimaryItem": {"dirtyReplacement": "setPrimaryItem(ViewGroup, int, Object)", "methodClass": "androidx.viewpager.widget.PagerAdapter", "methodName": "setPrimaryItem", "method": "void setPrimaryItem(View,int,Object)", "replacementComments": "/**\n* Called to inform the adapter of which item is currently considered to\n* be the \"primary\", that is the one show to the user as the current page.\n*\n* @param container The containing View from which the page will be removed.\n* @param position The page position that is now the primary.\n* @param object The same object that was returned by\n* {@link #instantiateItem(View, int)}.\n*\n* @deprecated Use {@link #setPrimaryItem(ViewGroup, int, Object)}\n*/\n"}, "getMonthString": {"dirtyReplacement": "java.text.SimpleDateFormat", "methodClass": "android.text.format.DateUtils", "methodName": "getMonthString", "method": "String getMonthString(int,int)", "replacementComments": "/**\n* Return a localized string for the month of the year.\n* @param month One of {@link Calendar#JANUARY Calendar.JANUARY},\n* {@link Calendar#FEBRUARY Calendar.FEBRUARY}, etc.\n* @param abbrev One of {@link #LENGTH_LONG}, {@link #LENGTH_MEDIUM},\n* or {@link #LENGTH_SHORTEST}.\n* Undefined lengths will return {@link #LENGTH_MEDIUM}\n* but may return something different in the future.\n* @return Localized month of the year.\n* @deprecated Use {@link java.text.SimpleDateFormat} instead.\n*/\n"}, "onCreateActionView": {"dirtyReplacement": "onCreateActionView(MenuItem)", "methodClass": "android.view.ActionProvider", "methodName": "onCreateActionView", "method": "View onCreateActionView()", "replacementComments": "/**\n* Factory method called by the Android framework to create new action views.\n*\n* <p>This method has been deprecated in favor of {@link #onCreateActionView(MenuItem)}.\n* Newer apps that wish to support platform versions prior to API 16 should also\n* implement this method to return a valid action view.</p>\n*\n* @return A new action view.\n*\n* @deprecated use {@link #onCreateActionView(MenuItem)}\n*/\n"}, "asInterface": {"dirtyReplacement": "IActivityManager.Stub.asInterface", "methodClass": "android.app.ActivityManagerNative", "methodName": "asInterface", "method": "IActivityManager asInterface(IBinder)", "replacementComments": "/**\n* Cast a Binder object into an activity manager interface, generating\n* a proxy if needed.\n*\n* @deprecated use IActivityManager.Stub.asInterface instead.\n*/\n"}, "dispatchMultiWindowModeChanged": {"dirtyReplacement": "dispatchMultiWindowModeChanged(boolean, Configuration)", "methodClass": "android.app.FragmentController", "methodName": "dispatchMultiWindowModeChanged", "method": "void dispatchMultiWindowModeChanged(boolean)", "replacementComments": "/**\n* Lets all Fragments managed by the controller's FragmentManager know the multi-window mode of\n* the activity changed.\n* <p>Call when the multi-window mode of the activity changed.\n*\n* @see Fragment#onMultiWindowModeChanged\n* @deprecated use {@link #dispatchMultiWindowModeChanged(boolean, Configuration)}\n*/\n"}, "setAutoMeasureEnabled": {"dirtyReplacement": "isAutoMeasureEnabled()", "methodClass": "androidx.recyclerview.widget.RecyclerView.LayoutManager", "methodName": "setAutoMeasureEnabled", "method": "void setAutoMeasureEnabled(boolean)", "replacementComments": "/**\n* Defines whether the measuring pass of layout should use the AutoMeasure mechanism of\n* {@link RecyclerView} or if it should be done by the LayoutManager's implementation of\n* {@link LayoutManager#onMeasure(Recycler, State, int, int)}.\n*\n* @param enabled <code>True</code> if layout measurement should be done by the\n* RecyclerView, <code>false</code> if it should be done by this\n* LayoutManager.\n*\n* @see #isAutoMeasureEnabled()\n*\n* @deprecated Implementors of LayoutManager should define whether or not it uses\n* AutoMeasure by overriding {@link #isAutoMeasureEnabled()}.\n*/\n"}, "setErrorMessage": {"dirtyReplacement": "setErrorMessage(int, CharSequence)", "methodClass": "android.support.v4.media.session.PlaybackStateCompat.Builder", "methodName": "setErrorMessage", "method": "Builder setErrorMessage(CharSequence)", "replacementComments": "/**\n* Set a user readable error message. This should be set when the state\n* is {@link PlaybackStateCompat#STATE_ERROR}.\n*\n* @return this\n* @deprecated Use {@link #setErrorMessage(int, CharSequence)} instead.\n*/\n"}, "getContextHubInfo": {"dirtyReplacement": "getContextHubs()", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "getContextHubInfo", "method": "ContextHubInfo getContextHubInfo(int)", "replacementComments": "/**\n* Get more information about a specific hub.\n*\n* @param hubHandle Handle (system-wide unique identifier) of a context hub.\n* @return ContextHubInfo Information about the requested context hub.\n*\n* @see ContextHubInfo\n*\n* @deprecated Use {@link #getContextHubs()} instead. The use of handles are deprecated in the\n* new APIs.\n*/\n"}, "updateCursor": {"dirtyReplacement": "updateCursorAnchorInfo(View, CursorAnchorInfo)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "updateCursor", "method": "void updateCursor(View,int,int,int,int)", "replacementComments": "/**\n* Report the current cursor location in its window.\n*\n* @deprecated Use {@link #updateCursorAnchorInfo(View, CursorAnchorInfo)} instead.\n*/\n"}, "onRequestSendAccessibilityEvent": {"dirtyReplacement": "ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)", "methodClass": "androidx.core.view.ViewGroupCompat", "methodName": "onRequestSendAccessibilityEvent", "method": "boolean onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent)", "replacementComments": "/**\n* Called when a child has requested sending an {@link AccessibilityEvent} and\n* gives an opportunity to its parent to augment the event.\n* <p>\n* If an {@link AccessibilityDelegateCompat} has been specified via calling\n* {@link ViewCompat#setAccessibilityDelegate(View, AccessibilityDelegateCompat)} its\n* {@link AccessibilityDelegateCompat#onRequestSendAccessibilityEvent(ViewGroup, View,\n* AccessibilityEvent)} is responsible for handling this call.\n* </p>\n*\n* @param group The group whose method to invoke.\n* @param child The child which requests sending the event.\n* @param event The event to be sent.\n* @return True if the event should be sent.\n*\n* @deprecated Use {@link ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent)}\n* directly.\n*/\n"}, "writeRepeatedFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedFixed64", "method": "void writeRepeatedFixed64(long,long)", "replacementComments": "/**\n* Write a single repeated proto \"fixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "findPointerIndex": {"dirtyReplacement": "MotionEvent#findPointerIndex(int)", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "findPointerIndex", "method": "int findPointerIndex(MotionEvent,int)", "replacementComments": "/**\n* Call {@link MotionEvent#findPointerIndex(int)}.\n*\n* @deprecated Call {@link MotionEvent#findPointerIndex(int)} directly. This method will be\n* removed in a future release.\n*/\n"}, "getMinutes": {"dirtyReplacement": "setMinutes", "methodClass": "java.sql.Date", "methodName": "getMinutes", "method": "int getMinutes()", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #setMinutes\n*/\n"}, "isVtEnabledByUser": {"dirtyReplacement": "isVtEnabledByUser()", "methodClass": "com.android.ims.ImsManager", "methodName": "isVtEnabledByUser", "method": "boolean isVtEnabledByUser(Context)", "replacementComments": "/**\n* Returns the user configuration of VT setting\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isVtEnabledByUser()} instead.\n*/\n"}, "setPresenceIcon": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.Presence", "methodName": "setPresenceIcon", "method": "void setPresenceIcon(ImageView,int)", "replacementComments": "/**\n* Sets a presence icon to the proper graphic\n*\n* @param icon the icon to to set\n* @param serverStatus that status\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "onSendDataSms": {"dirtyReplacement": "onSendDataSms", "methodClass": "android.service.carrier.CarrierMessagingService", "methodName": "onSendDataSms", "method": "void onSendDataSms(byte[],int,String,int,ResultCallback<SendSmsResult>)", "replacementComments": "/**\n* Override this method to intercept binary SMSs sent from the device.\n* @deprecated Override {@link #onSendDataSms} below instead.\n*\n* @param data the binary content\n* @param subId SMS subscription ID of the SIM\n* @param destAddress phone number of the recipient of the message\n* @param destPort the destination port\n* @param callback result callback. Call with a {@link SendSmsResult}.\n*/\n"}, "getX": {"dirtyReplacement": "MotionEvent#getX()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getX", "method": "float getX(MotionEvent,int)", "replacementComments": "/**\n* Call {@link MotionEvent#getX(int)}.\n*\n* @deprecated Call {@link MotionEvent#getX()} directly. This method will be\n* removed in a future release.\n*/\n"}, "getY": {"dirtyReplacement": "MotionEvent#getY()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getY", "method": "float getY(MotionEvent,int)", "replacementComments": "/**\n* Call {@link MotionEvent#getY(int)}.\n*\n* @deprecated Call {@link MotionEvent#getY()} directly. This method will be\n* removed in a future release.\n*/\n"}, "setClassName": {"dirtyReplacement": "AccessibilityRecord#setClassName(CharSequence)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setClassName", "method": "void setClassName(CharSequence)", "replacementComments": "/**\n* Sets the class name of the source.\n*\n* @param className The lass name.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setClassName(CharSequence)} directly.\n*/\n"}, "onScreenTurnedOff": {"dirtyReplacement": "com.android.systemui.keyguard.ScreenLifecycle", "methodClass": "com.android.keyguard.KeyguardUpdateMonitorCallback", "methodName": "onScreenTurnedOff", "method": "void onScreenTurnedOff()", "replacementComments": "/**\n* Called when the screen has been turned off.\n*\n* @deprecated use {@link com.android.systemui.keyguard.ScreenLifecycle}.\n*/\n"}, "setLogStream": {"dirtyReplacement": "{@code setLogWriter}", "methodClass": "java.sql.DriverManager", "methodName": "setLogStream", "method": "void setLogStream(PrintStream)", "replacementComments": "/**\n* Sets the logging/tracing PrintStream that is used\n* by the <code>DriverManager</code>\n* and all drivers.\n* <P>\n* In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks\n* to see that there is an <code>SQLPermission</code> object before setting\n* the logging stream.  If a <code>SecurityManager</code> exists and its\n* <code>checkPermission</code> method denies setting the log writer, this\n* method throws a <code>java.lang.SecurityException</code>.\n*\n* @param out the new logging/tracing PrintStream; to disable, set to <code>null</code>\n* @deprecated Use {@code setLogWriter} instead.\n* @throws SecurityException if a security manager exists and its\n* <code>checkPermission</code> method denies setting the log stream\n*\n* @see SecurityManager#checkPermission\n* @see #getLogStream\n*/\n"}, "setSeconds": {"dirtyReplacement": "getSeconds", "methodClass": "java.sql.Date", "methodName": "setSeconds", "method": "void setSeconds(int)", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #getSeconds\n*/\n"}, "getScaleY": {"dirtyReplacement": "View#getScaleY()", "methodClass": "androidx.core.view.ViewCompat", "methodName": "getScaleY", "method": "float getScaleY(View)", "replacementComments": "/**\n* @deprecated Use {@link View#getScaleY()} directly.\n*/\n"}, "dragQuarterScreenDown": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "dragQuarterScreenDown", "method": "void dragQuarterScreenDown(ActivityInstrumentationTestCase)", "replacementComments": "/**\n* Simulate touching in the center of the screen and dragging one quarter of the way down\n* @param test The test case that is being run\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "addToMyContactsGroup": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "addToMyContactsGroup", "method": "Uri addToMyContactsGroup(ContentResolver,long)", "replacementComments": "/**\n* Adds a person to the My Contacts group.\n*\n* @param resolver the resolver to use\n* @param personId the person to add to the group\n* @return the URI of the group membership row\n* @throws IllegalStateException if the My Contacts group can't be found\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "invalidateChildInParent": {"dirtyReplacement": "onDescendantInvalidated(View, View)", "methodClass": "android.view.ViewParent", "methodName": "invalidateChildInParent", "method": "ViewParent invalidateChildInParent(int[],Rect)", "replacementComments": "/**\n* All or part of a child is dirty and needs to be redrawn.\n*\n* <p>The location array is an array of two int values which respectively\n* define the left and the top position of the dirty child.</p>\n*\n* <p>This method must return the parent of this ViewParent if the specified\n* rectangle must be invalidated in the parent. If the specified rectangle\n* does not require invalidation in the parent or if the parent does not\n* exist, this method must return null.</p>\n*\n* <p>When this method returns a non-null value, the location array must\n* have been updated with the left and top coordinates of this ViewParent.</p>\n*\n* @param location An array of 2 ints containing the left and top\n* coordinates of the child to invalidate\n* @param r The area within the child that is invalid\n*\n* @return the parent of this ViewParent or null\n*\n* @deprecated Use {@link #onDescendantInvalidated(View, View)} instead.\n*/\n"}, "onSignalStrengthChanged": {"dirtyReplacement": "onSignalStrengthsChanged(SignalStrength)", "methodClass": "android.telephony.PhoneStateListener", "methodName": "onSignalStrengthChanged", "method": "void onSignalStrengthChanged(int)", "replacementComments": "/**\n* Callback invoked when network signal strength changes.\n*\n* @see ServiceState#STATE_EMERGENCY_ONLY\n* @see ServiceState#STATE_IN_SERVICE\n* @see ServiceState#STATE_OUT_OF_SERVICE\n* @see ServiceState#STATE_POWER_OFF\n* @deprecated Use {@link #onSignalStrengthsChanged(SignalStrength)}\n*/\n"}, "setWallpaper": {"dirtyReplacement": "android.app.WallpaperManager#setStream(InputStream)  WallpaperManager.set()", "methodClass": "android.content.Context", "methodName": "setWallpaper", "method": "void setWallpaper(InputStream)", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#setStream(InputStream)\n* WallpaperManager.set()} instead.\n* <p>This method requires the caller to hold the permission\n* {@link android.Manifest.permission#SET_WALLPAPER}.\n*/\n"}, "setEngineByPackageName": {"dirtyReplacement": "TextToSpeech(Context, OnInitListener, String)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "setEngineByPackageName", "method": "int setEngineByPackageName(String)", "replacementComments": "/**\n* Sets the TTS engine to use.\n*\n* @deprecated This doesn't inform callers when the TTS engine has been\n* initialized. {@link #TextToSpeech(Context, OnInitListener, String)}\n* can be used with the appropriate engine name. Also, there is no\n* guarantee that the engine specified will be loaded. If it isn't\n* installed or disabled, the user / system wide defaults will apply.\n*\n* @param enginePackageName The package name for the synthesis engine (e.g. \"com.svox.pico\")\n*\n* @return {@link #ERROR} or {@link #SUCCESS}.\n*/\n"}, "onPull": {"dirtyReplacement": "EdgeEffect#onPull(float)", "methodClass": "androidx.core.widget.EdgeEffectCompat", "methodName": "onPull", "method": "boolean onPull(float,float)", "replacementComments": "/**\n* A view should call this when content is pulled away from an edge by the user.\n* This will update the state of the current visual effect and its associated animation.\n* The host view should always {@link android.view.View#invalidate()} if this method\n* returns true and draw the results accordingly.\n*\n* Views using {@link EdgeEffect} should favor {@link EdgeEffect#onPull(float, float)} when\n* the displacement of the pull point is known.\n*\n* @param deltaDistance Change in distance since the last call. Values may be 0 (no change) to\n* 1.f (full length of the view) or negative values to express change\n* back toward the edge reached to initiate the effect.\n* @param displacement The displacement from the starting side of the effect of the point\n* initiating the pull. In the case of touch this is the finger position.\n* Values may be from 0-1.\n* @return true if the host view should call invalidate, false if it should not.\n*\n* @deprecated Use {@link EdgeEffect#onPull(float)} directly.\n*/\n"}, "isChecked": {"dirtyReplacement": "AccessibilityRecord#isChecked()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "isChecked", "method": "boolean isChecked()", "replacementComments": "/**\n* Gets if the source is checked.\n*\n* @return True if the view is checked, false otherwise.\n*\n* @deprecated Use {@link AccessibilityRecord#isChecked()} directly.\n*/\n"}, "setPersistentDrawingCache": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.ViewGroup", "methodName": "setPersistentDrawingCache", "method": "void setPersistentDrawingCache(int)", "replacementComments": "/**\n* Indicates what types of drawing caches should be kept in memory after\n* they have been created.\n*\n* @see #getPersistentDrawingCache()\n* @see #setAnimationCacheEnabled(boolean)\n*\n* @param drawingCacheToKeep one or a combination of {@link #PERSISTENT_NO_CACHE},\n* {@link #PERSISTENT_ANIMATION_CACHE}, {@link #PERSISTENT_SCROLLING_CACHE}\n* and {@link #PERSISTENT_ALL_CACHES}\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "#stop": {"dirtyReplacement": "stop()} for details), and furthermore  could be used to generate exceptions that the target thread was  not prepared to handle.  For more information, see  <a href=\"{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html\">Why  are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>. /@Deprecatedpublic final void stop(Throwable obj) {    throw new UnsupportedOperationException()", "methodClass": "java.lang.Thread", "methodName": "#stop", "method": "void stop(Throwable)", "replacementComments": "/**\n* Throws {@code UnsupportedOperationException}.\n*\n* @param obj ignored\n*\n* @deprecated This method was originally designed to force a thread to stop\n* and throw a given {@code Throwable} as an exception. It was\n* inherently unsafe (see {@link #stop()} for details), and furthermore\n* could be used to generate exceptions that the target thread was\n* not prepared to handle.\n* For more information, see\n* <a href=\"{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/concurrency/threadPrimitiveDeprecation.html\">Why\n* are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n*/\n"}, "setDate": {"dirtyReplacement": "getDate", "methodClass": "java.sql.Time", "methodName": "setDate", "method": "void setDate(int)", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL <code>TIME</code>\n* values do not have a date component.\n*\n* @exception java.lang.IllegalArgumentException if this\n* method is invoked\n* @see #getDate\n*/\n"}, "getVibrateSetting": {"dirtyReplacement": "getRingerMode()", "methodClass": "android.media.AudioManager", "methodName": "getVibrateSetting", "method": "int getVibrateSetting(int)", "replacementComments": "/**\n* Returns whether the user's vibrate setting for a vibrate type.\n* <p>\n* This shouldn't be needed by most clients that want to vibrate, instead\n* see {@link #shouldVibrate(int)}.\n*\n* @param vibrateType The type of vibrate. One of\n* {@link #VIBRATE_TYPE_NOTIFICATION} or\n* {@link #VIBRATE_TYPE_RINGER}.\n* @return The vibrate setting, one of {@link #VIBRATE_SETTING_ON},\n* {@link #VIBRATE_SETTING_OFF}, or\n* {@link #VIBRATE_SETTING_ONLY_SILENT}.\n* @see #setVibrateSetting(int, int)\n* @see #shouldVibrate(int)\n* @deprecated Applications should maintain their own vibrate policy based on\n* current ringer mode that can be queried via {@link #getRingerMode()}.\n*/\n"}, "onPasswordSucceeded": {"dirtyReplacement": "onPasswordSucceeded(Context, Intent, UserHandle)", "methodClass": "android.app.admin.DeviceAdminReceiver", "methodName": "onPasswordSucceeded", "method": "void onPasswordSucceeded(Context,Intent)", "replacementComments": "/**\n* Called after the user has succeeded at entering their device or profile challenge password,\n* as a result of receiving {@link #ACTION_PASSWORD_SUCCEEDED}.  This will\n* only be received the first time they succeed after having previously\n* failed.\n* @param context The running context as per {@link #onReceive}.\n* @param intent The received intent as per {@link #onReceive}.\n*\n* @deprecated From {@link android.os.Build.VERSION_CODES#O}, use\n* {@link #onPasswordSucceeded(Context, Intent, UserHandle)} instead.\n*/\n"}, "numberToCalledPartyBCD": {"dirtyReplacement": "numberToCalledPartyBCD(String, int)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "numberToCalledPartyBCD", "method": "byte[] numberToCalledPartyBCD(String)", "replacementComments": "/**\n* Convert a dialing number to BCD byte array\n*\n* @param number dialing number string. If the dialing number starts with '+', set to\n* international TOA\n*\n* @return BCD byte array\n*\n* @deprecated use {@link #numberToCalledPartyBCD(String, int)} instead. Calling this method\n* is equivalent to calling {@link #numberToCalledPartyBCD(String, int)} with\n* {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.\n*/\n"}, "finish": {"dirtyReplacement": "EdgeEffect#finish()", "methodClass": "androidx.core.widget.EdgeEffectCompat", "methodName": "finish", "method": "void finish()", "replacementComments": "/**\n* Immediately finish the current animation.\n* After this call {@link #isFinished()} will return true.\n*\n* @deprecated Use {@link EdgeEffect#finish()} directly.\n*/\n"}, "getExtraVisibility": {"dirtyReplacement": "getInfoVisibility()", "methodClass": "androidx.leanback.widget.BaseCardView", "methodName": "getExtraVisibility", "method": "int getExtraVisibility()", "replacementComments": "/**\n* Returns the visibility of the extra region of the card.\n* @deprecated Extra view's visibility is controlled by {@link #getInfoVisibility()}\n*/\n"}, "clearWallpaper": {"dirtyReplacement": "android.app.WallpaperManager#clear  WallpaperManager.clear()", "methodClass": "android.content.Context", "methodName": "clearWallpaper", "method": "void clearWallpaper()", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#clear\n* WallpaperManager.clear()} instead.\n* <p>This method requires the caller to hold the permission\n* {@link android.Manifest.permission#SET_WALLPAPER}.\n*/\n"}, "isWatchingCursor": {"dirtyReplacement": "InputConnection#requestCursorUpdates(int)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "isWatchingCursor", "method": "boolean isWatchingCursor(View)", "replacementComments": "/**\n* Return true if the current input method wants to watch the location\n* of the input editor's cursor in its window.\n*\n* @deprecated Use {@link InputConnection#requestCursorUpdates(int)} instead.\n*/\n"}, "drawBitmap": {"dirtyReplacement": "isHardwareAccelerated() hardware accelerated", "methodClass": "android.graphics.Canvas", "methodName": "drawBitmap", "method": "void drawBitmap(int[],int,int,float,float,int,int,boolean,Paint)", "replacementComments": "/**\n* Treat the specified array of colors as a bitmap, and draw it. This gives the same result as\n* first creating a bitmap from the array, and then drawing it, but this method avoids\n* explicitly creating a bitmap object which can be more efficient if the colors are changing\n* often.\n*\n* @param colors Array of colors representing the pixels of the bitmap\n* @param offset Offset into the array of colors for the first pixel\n* @param stride The number of colors in the array between rows (must be >= width or <= -width).\n* @param x The X coordinate for where to draw the bitmap\n* @param y The Y coordinate for where to draw the bitmap\n* @param width The width of the bitmap\n* @param height The height of the bitmap\n* @param hasAlpha True if the alpha channel of the colors contains valid values. If false, the\n* alpha byte is ignored (assumed to be 0xFF for every pixel).\n* @param paint May be null. The paint used to draw the bitmap\n* @deprecated Usage with a {@link #isHardwareAccelerated() hardware accelerated} canvas\n* requires an internal copy of color buffer contents every time this method is\n* called. Using a Bitmap avoids this copy, and allows the application to more\n* explicitly control the lifetime and copies of pixel data.\n*/\n"}, "getWallpaperDesiredMinimumHeight": {"dirtyReplacement": "android.app.WallpaperManager#getDesiredMinimumHeight()  WallpaperManager.getDesiredMinimumHeight()", "methodClass": "android.content.Context", "methodName": "getWallpaperDesiredMinimumHeight", "method": "int getWallpaperDesiredMinimumHeight()", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#getDesiredMinimumHeight()\n* WallpaperManager.getDesiredMinimumHeight()} instead.\n*/\n"}, "addTab": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "addTab", "method": "void addTab(TabSpec,Class<?>,Bundle)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "writeFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeFixed32", "method": "void writeFixed32(long,int)", "replacementComments": "/**\n* Write a single proto \"fixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getChildPosition": {"dirtyReplacement": "getChildAdapterPosition(View)", "methodClass": "com.android.internal.widget.RecyclerView", "methodName": "getChildPosition", "method": "int getChildPosition(View)", "replacementComments": "/**\n* @deprecated use {@link #getChildAdapterPosition(View)} or\n* {@link #getChildLayoutPosition(View)}.\n*/\n"}, "isWfcEnabledByUser": {"dirtyReplacement": "isWfcEnabledByUser()", "methodClass": "com.android.ims.ImsManager", "methodName": "isWfcEnabledByUser", "method": "boolean isWfcEnabledByUser(Context)", "replacementComments": "/**\n* Returns the user configuration of WFC setting\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isWfcEnabledByUser()} instead.\n*/\n"}, "setX": {"dirtyReplacement": "View#setX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setX", "method": "void setX(View,float)", "replacementComments": "/**\n* Sets the visual x position of this view, in pixels. This is equivalent to setting the\n* {@link #setTranslationX(View, float) translationX} property to be the difference between\n* the x value passed in and the current left property of the view as determined\n* by the layout bounds.\n*\n* @param value The visual x position of this view, in pixels.\n*\n* @deprecated Use {@link View#setX(float)} directly.\n*/\n"}, "setY": {"dirtyReplacement": "View#setY(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setY", "method": "void setY(View,float)", "replacementComments": "/**\n* Sets the visual y position of this view, in pixels. This is equivalent to setting the\n* {@link #setTranslationY(View, float) translationY} property to be the difference between\n* the y value passed in and the current top property of the view as determined by the\n* layout bounds.\n*\n* @param value The visual y position of this view, in pixels.\n*\n* @deprecated Use {@link View#setY(float)} directly.\n*/\n"}, "tune": {"dirtyReplacement": "tune(ProgramSelector)", "methodClass": "android.hardware.radio.RadioTuner", "methodName": "tune", "method": "int tune(int,int)", "replacementComments": "/**\n* Tune to a specific frequency.\n* The operation is asynchronous and {@link Callback}\n* onProgramInfoChanged() will be called when tune completes or\n* onError() when cancelled or timeout.\n* @param channel the specific channel or frequency to tune to.\n* @param subChannel the specific sub-channel to tune to. N/A if the selected configuration\n* does not support cub channels.\n* @return\n* <ul>\n* <li>{@link RadioManager#STATUS_OK} in case of success, </li>\n* <li>{@link RadioManager#STATUS_ERROR} in case of unspecified error, </li>\n* <li>{@link RadioManager#STATUS_NO_INIT} if the native service cannot be reached, </li>\n* <li>{@link RadioManager#STATUS_BAD_VALUE} if parameters are invalid, </li>\n* <li>{@link RadioManager#STATUS_INVALID_OPERATION} if the call is out of sequence, </li>\n* <li>{@link RadioManager#STATUS_DEAD_OBJECT} if the binder transaction to the native\n* service fails, </li>\n* </ul>\n* @deprecated Use {@link tune(ProgramSelector)} instead.\n*/\n"}, "isPassword": {"dirtyReplacement": "AccessibilityRecord#isPassword()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "isPassword", "method": "boolean isPassword()", "replacementComments": "/**\n* Gets if the source is a password field.\n*\n* @return True if the view is a password field, false otherwise.\n*\n* @deprecated Use {@link AccessibilityRecord#isPassword()} directly.\n*/\n"}, "setSaveFromParentEnabled": {"dirtyReplacement": "View#setSaveFromParentEnabled(boolean)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setSaveFromParentEnabled", "method": "void setSaveFromParentEnabled(View,boolean)", "replacementComments": "/**\n* Controls whether the entire hierarchy under this view will save its\n* state when a state saving traversal occurs from its parent.\n*\n* @param enabled Set to false to <em>disable</em> state saving, or true\n* (the default) to allow it.\n*\n* @deprecated Use {@link View#setSaveFromParentEnabled(boolean)} directly.\n*/\n"}, "getXVelocity": {"dirtyReplacement": "VelocityTracker#getXVelocity(int)", "methodClass": "androidx.core.view.VelocityTrackerCompat", "methodName": "getXVelocity", "method": "float getXVelocity(VelocityTracker,int)", "replacementComments": "/**\n* Call {@link VelocityTracker#getXVelocity(int)}.\n* If running on a pre-{@link android.os.Build.VERSION_CODES#HONEYCOMB} device,\n* returns {@link VelocityTracker#getXVelocity()}.\n*\n* @deprecated Use {@link VelocityTracker#getXVelocity(int)} directly.\n*/\n"}, "setBufferedProgressLong": {"dirtyReplacement": "setBufferedPosition(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setBufferedProgressLong", "method": "void setBufferedProgressLong(long)", "replacementComments": "/**\n* Sets the buffered progress for the playback controls row.\n* @param ms Buffered progress in milliseconds of long type.\n* @deprecated Use {@link #setBufferedPosition(long)}\n*/\n"}, "writeSInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeSInt64", "method": "void writeSInt64(long,long)", "replacementComments": "/**\n* Write a single proto \"sint64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onSendMultipartTextSms": {"dirtyReplacement": "onSendMultipartTextSms", "methodClass": "android.service.carrier.CarrierMessagingService", "methodName": "onSendMultipartTextSms", "method": "void onSendMultipartTextSms(List<String>,int,String,ResultCallback<SendMultipartSmsResult>)", "replacementComments": "/**\n* Override this method to intercept long SMSs sent from the device.\n* @deprecated Override {@link #onSendMultipartTextSms} below instead.\n*\n* @param parts a {@link List} of the message parts\n* @param subId SMS subscription ID of the SIM\n* @param destAddress phone number of the recipient of the message\n* @param callback result callback. Call with a {@link SendMultipartSmsResult}.\n*/\n"}, "setOrbColor": {"dirtyReplacement": "setOrbColors(Colors)", "methodClass": "androidx.leanback.widget.SearchOrbView", "methodName": "setOrbColor", "method": "void setOrbColor(int,int)", "replacementComments": "/**\n* Sets the search orb colors.\n* Other colors are provided by the framework.\n* @deprecated Use {@link #setOrbColors(Colors)} instead.\n*/\n"}, "setActionView": {"dirtyReplacement": "MenuItem#setActionView(int)", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "setActionView", "method": "MenuItem setActionView(MenuItem,int)", "replacementComments": "/**\n* Set an action view for this menu item. An action view will be displayed in place\n* of an automatically generated menu item element in the UI when this item is shown\n* as an action within a parent.\n* <p>\n* <strong>Note:</strong> Setting an action view overrides the action provider\n* set via {@link #setActionProvider(MenuItem, ActionProvider)}.\n* </p>\n*\n* @param item the item to change\n* @param resId Layout resource to use for presenting this item to the user.\n* @return This Item so additional setters can be called.\n*\n* @see #setShowAsAction(MenuItem, int)\n*\n* @deprecated Use {@link MenuItem#setActionView(int)} directly.\n*/\n"}, "getValidNotBefore": {"dirtyReplacement": "getValidNotBeforeDate()", "methodClass": "android.net.http.SslCertificate", "methodName": "getValidNotBefore", "method": "String getValidNotBefore()", "replacementComments": "/**\n* @return Not-before date from the certificate validity period in\n* ISO 8601 format or \"\" if none has been set\n*\n* @deprecated Use {@link #getValidNotBeforeDate()}\n*/\n"}, "getNeighboringCellInfo": {"dirtyReplacement": "getAllCellInfo", "methodClass": "android.telephony.TelephonyManager", "methodName": "getNeighboringCellInfo", "method": "List<NeighboringCellInfo> getNeighboringCellInfo()", "replacementComments": "/**\n* Returns the neighboring cell information of the device.\n*\n* @return List of NeighboringCellInfo or null if info unavailable.\n*\n* @deprecated Use {@link #getAllCellInfo} which returns a superset of the information\n* from NeighboringCellInfo.\n*/\n"}, "addRegistrationListener": {"dirtyReplacement": "addRegistrationListener(ImsConnectionStateListener)", "methodClass": "com.android.ims.ImsManager", "methodName": "addRegistrationListener", "method": "void addRegistrationListener(int,ImsConnectionStateListener)", "replacementComments": "/**\n* Adds registration listener to the IMS service.\n*\n* @param serviceClass a service class specified in {@link ImsServiceClass}\n* For VoLTE service, it MUST be a {@link ImsServiceClass#MMTEL}.\n* @param listener To listen to IMS registration events; It cannot be null\n* @throws NullPointerException if {@code listener} is null\n* @throws ImsException if calling the IMS service results in an error\n*\n* @deprecated Use {@link #addRegistrationListener(ImsConnectionStateListener)} instead.\n*/\n"}, "setChildrenDrawnWithCacheEnabled": {"dirtyReplacement": "View#setLayerType(int, Paint)", "methodClass": "android.view.ViewGroup", "methodName": "setChildrenDrawnWithCacheEnabled", "method": "void setChildrenDrawnWithCacheEnabled(boolean)", "replacementComments": "/**\n* Tells the ViewGroup to draw its children using their drawing cache. This property\n* is ignored when {@link #isAlwaysDrawnWithCacheEnabled()} is true. A child's drawing cache\n* will be used only if it has been enabled.\n*\n* Subclasses should call this method to start and stop using the drawing cache when\n* they perform performance sensitive operations, like scrolling or animating.\n*\n* @param enabled true if children should be drawn with their cache, false otherwise\n*\n* @see #setAlwaysDrawnWithCacheEnabled(boolean)\n* @see #isChildrenDrawnWithCacheEnabled()\n*\n* @deprecated As of {@link android.os.Build.VERSION_CODES#M}, this property is ignored.\n* Child views may no longer be forced to cache their rendering state by their parents.\n* Use {@link View#setLayerType(int, Paint)} on individual Views instead.\n*/\n"}, "getPointerCount": {"dirtyReplacement": "MotionEvent#getPointerCount()", "methodClass": "androidx.core.view.MotionEventCompat", "methodName": "getPointerCount", "method": "int getPointerCount(MotionEvent)", "replacementComments": "/**\n* The number of pointers of data contained in this event.  Always\n*\n* @deprecated Call {@link MotionEvent#getPointerCount()} directly. This method will be\n* removed in a future release.\n*/\n"}, "getCarrierPrivilegeStatusForCurrentTransaction": {"dirtyReplacement": "UiccProfile#getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getCarrierPrivilegeStatusForCurrentTransaction", "method": "int getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)", "replacementComments": "/**\n* Exposes {@link UiccCarrierPrivilegeRules#getCarrierPrivilegeStatusForCurrentTransaction}.\n* @deprecated Please use\n* {@link UiccProfile#getCarrierPrivilegeStatusForCurrentTransaction(PackageManager)} instead.\n*/\n"}, "getUidUdpTxBytes": {"dirtyReplacement": "getUidTxBytes(int)", "methodClass": "android.net.TrafficStats", "methodName": "getUidUdpTxBytes", "method": "long getUidUdpTxBytes(int)", "replacementComments": "/**\n* @deprecated Starting in {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n* transport layer statistics are no longer available, and will\n* always return {@link #UNSUPPORTED}.\n* @see #getUidTxBytes(int)\n*/\n"}, "onEditingModeChange": {"dirtyReplacement": "onEditingModeChange(ViewHolder, boolean, boolean)", "methodClass": "androidx.leanback.widget.GuidedActionsStylist", "methodName": "onEditingModeChange", "method": "void onEditingModeChange(ViewHolder,GuidedAction,boolean)", "replacementComments": "/**\n* @deprecated Use {@link #onEditingModeChange(ViewHolder, boolean, boolean)}.\n*/\n"}, "onStartedGoingToSleep": {"dirtyReplacement": "com.android.systemui.keyguard.WakefulnessLifecycle", "methodClass": "com.android.keyguard.KeyguardUpdateMonitorCallback", "methodName": "onStartedGoingToSleep", "method": "void onStartedGoingToSleep(int)", "replacementComments": "/**\n* Called when the device has started going to sleep.\n* @param why see {@link #onFinishedGoingToSleep(int)}\n*\n* @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.\n*/\n"}, "obtain": {"dirtyReplacement": "obtain(long, long, int, float, float, float, float, int, float, float, int, int)", "methodClass": "android.view.MotionEvent", "methodName": "obtain", "method": "MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)", "replacementComments": "/**\n* Create a new MotionEvent, filling in all of the basic values that\n* define the motion.\n*\n* @param downTime The time (in ms) when the user originally pressed down to start\n* a stream of position events.  This must be obtained from {@link SystemClock#uptimeMillis()}.\n* @param eventTime  The the time (in ms) when this specific event was generated.  This\n* must be obtained from {@link SystemClock#uptimeMillis()}.\n* @param action The kind of action being performed, such as {@link #ACTION_DOWN}.\n* @param pointerCount The number of pointers that are active in this event.\n* @param x The X coordinate of this event.\n* @param y The Y coordinate of this event.\n* @param pressure The current pressure of this event.  The pressure generally\n* ranges from 0 (no pressure at all) to 1 (normal pressure), however\n* values higher than 1 may be generated depending on the calibration of\n* the input device.\n* @param size A scaled value of the approximate size of the area being pressed when\n* touched with the finger. The actual value in pixels corresponding to the finger\n* touch is normalized with a device specific range of values\n* and scaled to a value between 0 and 1.\n* @param metaState The state of any meta / modifier keys that were in effect when\n* the event was generated.\n* @param xPrecision The precision of the X coordinate being reported.\n* @param yPrecision The precision of the Y coordinate being reported.\n* @param deviceId The id for the device that this event came from.  An id of\n* zero indicates that the event didn't come from a physical device; other\n* numbers are arbitrary and you shouldn't depend on the values.\n* @param edgeFlags A bitfield indicating which edges, if any, were touched by this\n* MotionEvent.\n*\n* @deprecated Use {@link #obtain(long, long, int, float, float, float, float, int, float, float, int, int)}\n* instead.\n*/\n"}, "isVtProvisionedOnDevice": {"dirtyReplacement": "isVtProvisionedOnDevice()", "methodClass": "com.android.ims.ImsManager", "methodName": "isVtProvisionedOnDevice", "method": "boolean isVtProvisionedOnDevice(Context)", "replacementComments": "/**\n* Indicates whether VT is provisioned on device\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isVtProvisionedOnDevice()} instead.\n*/\n"}, "getDrawingCache": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "getDrawingCache", "method": "Bitmap getDrawingCache(boolean)", "replacementComments": "/**\n* <p>Returns the bitmap in which this view drawing is cached. The returned bitmap\n* is null when caching is disabled. If caching is enabled and the cache is not ready,\n* this method will create it. Calling {@link #draw(android.graphics.Canvas)} will not\n* draw from the cache when the cache is enabled. To benefit from the cache, you must\n* request the drawing cache by calling this method and draw it on screen if the\n* returned bitmap is not null.</p>\n*\n* <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled,\n* this method will create a bitmap of the same size as this view. Because this bitmap\n* will be drawn scaled by the parent ViewGroup, the result on screen might show\n* scaling artifacts. To avoid such artifacts, you should call this method by setting\n* the auto scaling to true. Doing so, however, will generate a bitmap of a different\n* size than the view. This implies that your application must be able to handle this\n* size.</p>\n*\n* @param autoScale Indicates whether the generated bitmap should be scaled based on\n* the current density of the screen when the application is in compatibility\n* mode.\n*\n* @return A bitmap representing this view or null if cache is disabled.\n*\n* @see #setDrawingCacheEnabled(boolean)\n* @see #isDrawingCacheEnabled()\n* @see #buildDrawingCache(boolean)\n* @see #destroyDrawingCache()\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "setConnecting": {"dirtyReplacement": "setConnectionState", "methodClass": "androidx.mediarouter.media.MediaRouteDescriptor.Builder", "methodName": "setConnecting", "method": "Builder setConnecting(boolean)", "replacementComments": "/**\n* Sets whether the route is in the process of connecting and is not yet\n* ready for use.\n* @deprecated Use {@link #setConnectionState} instead.\n*/\n"}, "setProcessDefaultNetwork": {"dirtyReplacement": "IllegalStateException", "methodClass": "android.net.ConnectivityManager", "methodName": "setProcessDefaultNetwork", "method": "boolean setProcessDefaultNetwork(Network)", "replacementComments": "/**\n* Binds the current process to {@code network}.  All Sockets created in the future\n* (and not explicitly bound via a bound SocketFactory from\n* {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to\n* {@code network}.  All host name resolutions will be limited to {@code network} as well.\n* Note that if {@code network} ever disconnects, all Sockets created in this way will cease to\n* work and all host name resolutions will fail.  This is by design so an application doesn't\n* accidentally use Sockets it thinks are still bound to a particular {@link Network}.\n* To clear binding pass {@code null} for {@code network}.  Using individually bound\n* Sockets created by Network.getSocketFactory().createSocket() and\n* performing network-specific host name resolutions via\n* {@link Network#getAllByName Network.getAllByName} is preferred to calling\n* {@code setProcessDefaultNetwork}.\n*\n* @param network The {@link Network} to bind the current process to, or {@code null} to clear\n* the current binding.\n* @return {@code true} on success, {@code false} if the {@link Network} is no longer valid.\n* @deprecated This function can throw {@link IllegalStateException}.  Use\n* {@link #bindProcessToNetwork} instead.  {@code bindProcessToNetwork}\n* is a direct replacement.\n*/\n"}, "getMaxScrollX": {"dirtyReplacement": "getMaxScrollX(AccessibilityRecord)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getMaxScrollX", "method": "int getMaxScrollX()", "replacementComments": "/**\n* Gets the max scroll offset of the source left edge in pixels.\n*\n* @return The max scroll.\n*\n* @deprecated Use {@link #getMaxScrollX(AccessibilityRecord)} instead.\n*/\n"}, "getMaxScrollY": {"dirtyReplacement": "getMaxScrollY(AccessibilityRecord)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getMaxScrollY", "method": "int getMaxScrollY()", "replacementComments": "/**\n* Gets the max scroll offset of the source top edge in pixels.\n*\n* @return The max scroll.\n*\n* @deprecated Use {@link #getMaxScrollY(AccessibilityRecord)} instead.\n*/\n"}, "commaEllipsize": {"dirtyReplacement": "listEllipsize", "methodClass": "android.text.TextUtils", "methodName": "commaEllipsize", "method": "CharSequence commaEllipsize(CharSequence,TextPaint,float,String,String)", "replacementComments": "/**\n* Converts a CharSequence of the comma-separated form \"Andy, Bob,\n* Charles, David\" that is too wide to fit into the specified width\n* into one like \"Andy, Bob, 2 more\".\n*\n* @param text the text to truncate\n* @param p the Paint with which to measure the text\n* @param avail the horizontal width available for the text (in pixels)\n* @param oneMore the string for \"1 more\" in the current locale\n* @param more the string for \"%d more\" in the current locale\n*\n* @deprecated Do not use. This is not internationalized, and has known issues\n* with right-to-left text, languages that have more than one plural form, languages\n* that use a different character as a comma-like separator, etc.\n* Use {@link #listEllipsize} instead.\n*/\n"}, "setThreadStatsTag": {"dirtyReplacement": "TrafficStats#setThreadStatsTag(int)", "methodClass": "androidx.core.net.TrafficStatsCompat", "methodName": "setThreadStatsTag", "method": "void setThreadStatsTag(int)", "replacementComments": "/**\n* Set active tag to use when accounting {@link Socket} traffic originating\n* from the current thread. Only one active tag per thread is supported.\n* <p>\n* Changes only take effect during subsequent calls to\n* {@link #tagSocket(Socket)}.\n* <p>\n* Tags between {@code 0xFFFFFF00} and {@code 0xFFFFFFFF} are reserved and\n* used internally by system services like DownloadManager when performing\n* traffic on behalf of an application.\n*\n* @deprecated Use {@link TrafficStats#setThreadStatsTag(int)} directly.\n*/\n"}, "setDrawerListener": {"dirtyReplacement": "DrawerListener", "methodClass": "androidx.drawerlayout.widget.DrawerLayout", "methodName": "setDrawerListener", "method": "void setDrawerListener(DrawerListener)", "replacementComments": "/**\n* Set a listener to be notified of drawer events. Note that this method is deprecated\n* and you should use {@link #addDrawerListener(DrawerListener)} to add a listener and\n* {@link #removeDrawerListener(DrawerListener)} to remove a registered listener.\n*\n* @param listener Listener to notify when drawer events occur\n* @deprecated Use {@link #addDrawerListener(DrawerListener)}\n* @see DrawerListener\n* @see #addDrawerListener(DrawerListener)\n* @see #removeDrawerListener(DrawerListener)\n*/\n"}, "onTabChanged": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "onTabChanged", "method": "void onTabChanged(String)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "onNestedScroll": {"dirtyReplacement": "onNestedScroll(CoordinatorLayout, View, View, int, int, int, int, int)", "methodClass": "androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior", "methodName": "onNestedScroll", "method": "void onNestedScroll(CoordinatorLayout,V,View,int,int,int,int)", "replacementComments": "/**\n* @deprecated You should now override\n* {@link #onNestedScroll(CoordinatorLayout, View, View, int, int, int, int, int)}.\n* This method will still continue to be called if the type is\n* {@link ViewCompat#TYPE_TOUCH}.\n*/\n"}, "setPivotY": {"dirtyReplacement": "View#setPivotX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setPivotY", "method": "void setPivotY(View,float)", "replacementComments": "/**\n* Sets the y location of the point around which the view is\n* {@link #setRotation(View, float) rotated} and {@link #setScaleY(View, float) scaled}.\n* By default, the pivot point is centered on the object.\n* Setting this property disables this behavior and causes the view to use only the\n* explicitly set pivotX and pivotY values.\n*\n* @param value The y location of the pivot point.\n*\n* @deprecated Use {@link View#setPivotX(float)} directly.\n*/\n"}, "getSuggestions": {"dirtyReplacement": "SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)", "methodClass": "android.view.textservice.SpellCheckerSession", "methodName": "getSuggestions", "method": "void getSuggestions(TextInfo,int)", "replacementComments": "/**\n* Get candidate strings for a substring of the specified text.\n* @param textInfo text metadata for a spell checker\n* @param suggestionsLimit the maximum number of suggestions that will be returned\n* @deprecated use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead\n*/\n"}, "setFullScreen": {"dirtyReplacement": "AccessibilityRecord#setFullScreen(boolean)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setFullScreen", "method": "void setFullScreen(boolean)", "replacementComments": "/**\n* Sets if the source is taking the entire screen.\n*\n* @param isFullScreen True if the source is full screen, false otherwise.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setFullScreen(boolean)} directly.\n*/\n"}, "removeAllCookie": {"dirtyReplacement": "removeAllCookies(ValueCallback)", "methodClass": "android.webkit.CookieManager", "methodName": "removeAllCookie", "method": "void removeAllCookie()", "replacementComments": "/**\n* Removes all cookies.\n* @deprecated Use {@link #removeAllCookies(ValueCallback)} instead.\n*/\n"}, "getOnClickListener": {"dirtyReplacement": "getActions()", "methodClass": "android.view.textclassifier.TextClassification", "methodName": "getOnClickListener", "method": "OnClickListener getOnClickListener()", "replacementComments": "/**\n* Returns the OnClickListener that may be triggered to act on the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelable and only represents the first\n* {@link RemoteAction} (if one exists) when this object is read from a parcel.\n*\n* @deprecated Use {@link #getActions()} instead.\n*/\n"}, "writePackedInt64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedInt64", "method": "void writePackedInt64(long,long[])", "replacementComments": "/**\n* Write a list of packed proto \"int64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "registerRemoteControlClient": {"dirtyReplacement": "MediaSession", "methodClass": "android.media.AudioManager", "methodName": "registerRemoteControlClient", "method": "void registerRemoteControlClient(RemoteControlClient)", "replacementComments": "/**\n* Registers the remote control client for providing information to display on the remote\n* controls.\n* @param rcClient The remote control client from which remote controls will receive\n* information to display.\n* @see RemoteControlClient\n* @deprecated Use {@link MediaSession} instead.\n*/\n"}, "getCurrentHour": {"dirtyReplacement": "getHour()", "methodClass": "android.widget.TimePicker", "methodName": "getCurrentHour", "method": "Integer getCurrentHour()", "replacementComments": "/**\n* @return the currently selected hour, in the range (0-23)\n* @deprecated Use {@link #getHour()}\n*/\n"}, "writeBool": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeBool", "method": "void writeBool(long,boolean)", "replacementComments": "/**\n* Write a single proto \"bool\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onInflate": {"dirtyReplacement": "onInflate(Context, AttributeSet, Bundle)", "methodClass": "android.app.Fragment", "methodName": "onInflate", "method": "void onInflate(Activity,AttributeSet,Bundle)", "replacementComments": "/**\n* @deprecated Use {@link #onInflate(Context, AttributeSet, Bundle)} instead.\n*/\n"}, "getCodecCount": {"dirtyReplacement": "getCodecInfos", "methodClass": "android.media.MediaCodecList", "methodName": "getCodecCount", "method": "int getCodecCount()", "replacementComments": "/**\n* Count the number of available (regular) codecs.\n*\n* @deprecated Use {@link #getCodecInfos} instead.\n*\n* @see #REGULAR_CODECS\n*/\n"}, "addPerson": {"dirtyReplacement": "addPerson(Person)", "methodClass": "android.app.Notification.Builder", "methodName": "addPerson", "method": "Builder addPerson(String)", "replacementComments": "/**\n* Add a person that is relevant to this notification.\n*\n* <P>\n* Depending on user preferences, this annotation may allow the notification to pass\n* through interruption filters, if this notification is of category {@link #CATEGORY_CALL}\n* or {@link #CATEGORY_MESSAGE}. The addition of people may also cause this notification to\n* appear more prominently in the user interface.\n* </P>\n*\n* <P>\n* The person should be specified by the {@code String} representation of a\n* {@link android.provider.ContactsContract.Contacts#CONTENT_LOOKUP_URI}.\n* </P>\n*\n* <P>The system will also attempt to resolve {@code mailto:} and {@code tel:} schema\n* URIs.  The path part of these URIs must exist in the contacts database, in the\n* appropriate column, or the reference will be discarded as invalid. Telephone schema\n* URIs will be resolved by {@link android.provider.ContactsContract.PhoneLookup}.\n* It is also possible to provide a URI with the schema {@code name:} in order to uniquely\n* identify a person without an entry in the contacts database.\n* </P>\n*\n* @param uri A URI for the person.\n* @see Notification#EXTRA_PEOPLE\n* @deprecated use {@link #addPerson(Person)}\n*/\n"}, "abortAnimation": {"dirtyReplacement": "OverScroller#abortAnimation()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "abortAnimation", "method": "void abortAnimation()", "replacementComments": "/**\n* Stops the animation. Aborting the animation causes the scroller to move to the final x and y\n* position.\n*\n* @deprecated Use {@link OverScroller#abortAnimation()} directly.\n*/\n"}, "onStartedWakingUp": {"dirtyReplacement": "com.android.systemui.keyguard.WakefulnessLifecycle", "methodClass": "com.android.keyguard.KeyguardUpdateMonitorCallback", "methodName": "onStartedWakingUp", "method": "void onStartedWakingUp()", "replacementComments": "/**\n* Called when the device has started waking up.\n*\n* @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.\n*/\n"}, "setIcon": {"dirtyReplacement": "addAction(RemoteAction)", "methodClass": "android.view.textclassifier.TextClassification.Builder", "methodName": "setIcon", "method": "Builder setIcon(Drawable)", "replacementComments": "/**\n* Sets the icon for the <i>primary</i> action that may be rendered on a widget used to act\n* on the classified text.\n*\n* <p><strong>NOTE: </strong>This field is not parcelled. If read from a parcel, the\n* returned icon represents the icon of the first {@link RemoteAction} (if one exists).\n*\n* @deprecated Use {@link #addAction(RemoteAction)} instead.\n*/\n"}, "getItemSelectedListener": {"dirtyReplacement": "getOnItemSelectedListener()", "methodClass": "android.widget.AutoCompleteTextView", "methodName": "getItemSelectedListener", "method": "OnItemSelectedListener getItemSelectedListener()", "replacementComments": "/**\n* <p>Returns the listener that is notified whenever the user selects an\n* item in the drop down list.</p>\n*\n* @return the item selected listener\n*\n* @deprecated Use {@link #getOnItemSelectedListener()} intead\n*/\n"}, "setShowAsAction": {"dirtyReplacement": "MenuItem#setShowAsAction(int)", "methodClass": "androidx.core.view.MenuCompat", "methodName": "setShowAsAction", "method": "void setShowAsAction(MenuItem,int)", "replacementComments": "/**\n* Call {@link MenuItem#setShowAsAction(int) MenuItem.setShowAsAction()}.\n*\n* @deprecated Use {@link MenuItem#setShowAsAction(int)} directly.\n*/\n"}, "isScrollable": {"dirtyReplacement": "AccessibilityRecord#isScrollable()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "isScrollable", "method": "boolean isScrollable()", "replacementComments": "/**\n* Gets if the source is scrollable.\n*\n* @return True if the source is scrollable, false otherwise.\n*\n* @deprecated Use {@link AccessibilityRecord#isScrollable()} directly.\n*/\n"}, "getApplicationIndex": {"dirtyReplacement": "UiccProfile#getApplicationIndex(int)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getApplicationIndex", "method": "UiccCardApplication getApplicationIndex(int)", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#getApplicationIndex(int)} instead.\n*/\n"}, "fadeOut": {"dirtyReplacement": "hideControlsOverlay(boolean)", "methodClass": "androidx.leanback.media.PlaybackGlueHost", "methodName": "fadeOut", "method": "void fadeOut()", "replacementComments": "/**\n* Fades out the playback overlay immediately.\n* @deprecated Call {@link #hideControlsOverlay(boolean)}\n*/\n"}, "getLoaderManager": {"dirtyReplacement": "LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)", "methodClass": "androidx.fragment.app.Fragment", "methodName": "getLoaderManager", "method": "LoaderManager getLoaderManager()", "replacementComments": "/**\n* Return the LoaderManager for this fragment.\n*\n* @deprecated Use\n* {@link LoaderManager#getInstance(LifecycleOwner) LoaderManager.getInstance(this)}.\n*/\n"}, "addEarcon": {"dirtyReplacement": "addEarcon(String, File)", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "addEarcon", "method": "int addEarcon(String,String)", "replacementComments": "/**\n* Adds a mapping between a string of text and a sound file.\n* Use this to add custom earcons.\n*\n* @see #playEarcon(String, int, HashMap)\n*\n* @param earcon\n* The name of the earcon.\n* Example: <code>\"[tick]\"</code>\n* @param filename\n* The full path to the sound file (for example:\n* \"/sdcard/mysounds/tick.wav\")\n*\n* @return Code indicating success or failure. See {@link #ERROR} and {@link #SUCCESS}.\n*\n* @deprecated As of API level 21, replaced by\n* {@link #addEarcon(String, File)}.\n*/\n"}, "getDividerInset": {"dirtyReplacement": "that", "methodClass": "com.android.setupwizardlib.template.ListMixin", "methodName": "getDividerInset", "method": "int getDividerInset()", "replacementComments": "/**\n* @return The number of pixels inset on the start side of the divider.\n* @deprecated This is the same as {@link #getDividerInsetStart()}. Use that instead.\n*/\n"}, "setItemMargin": {"dirtyReplacement": "setItemSpacing(int)", "methodClass": "androidx.leanback.widget.BaseGridView", "methodName": "setItemMargin", "method": "void setItemMargin(int)", "replacementComments": "/**\n* Sets the spacing in pixels between two child items.\n* @deprecated use {@link #setItemSpacing(int)}\n*/\n"}, "getLoadingState": {"dirtyReplacement": "SliceMetadata#getLoadingState()", "methodClass": "androidx.slice.SliceUtils", "methodName": "getLoadingState", "method": "int getLoadingState(Slice)", "replacementComments": "/**\n* @return the current loading state of the provided {@link Slice}.\n*\n* @deprecated TO BE REMOVED: use {@link SliceMetadata#getLoadingState()}\n*/\n"}, "setMinutes": {"dirtyReplacement": "getMinutes", "methodClass": "java.sql.Date", "methodName": "setMinutes", "method": "void setMinutes(int)", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #getMinutes\n*/\n"}, "invokeOemRilRequestRaw": {"dirtyReplacement": "that", "methodClass": "com.android.internal.telephony.Phone", "methodName": "invokeOemRilRequestRaw", "method": "void invokeOemRilRequestRaw(byte[],Message)", "replacementComments": "/**\n* Invokes RIL_REQUEST_OEM_HOOK_RAW on RIL implementation.\n*\n* @param data The data for the request.\n* @param response <strong>On success</strong>,\n* (byte[])(((AsyncResult)response.obj).result)\n* <strong>On failure</strong>,\n* (((AsyncResult)response.obj).result) == null and\n* (((AsyncResult)response.obj).exception) being an instance of\n* com.android.internal.telephony.gsm.CommandException\n*\n* @see #invokeOemRilRequestRaw(byte[], android.os.Message)\n* @deprecated OEM needs a vendor-extension hal and their apps should use that instead\n*/\n"}, "endObject": {"dirtyReplacement": "end()", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "endObject", "method": "void endObject(long)", "replacementComments": "/**\n* End a child object. Pass in the token from the correspoinding startObject call.\n*\n* @deprecated Use #end() instead.\n*/\n"}, "getDescriprition": {"dirtyReplacement": "getDescription()", "methodClass": "android.drm.DrmSupportInfo", "methodName": "getDescriprition", "method": "String getDescriprition()", "replacementComments": "/**\n* Retrieves the DRM plug-in (agent) description.\n*\n* @return The plug-in description.\n* @deprecated The method name is mis-spelled, and it is replaced by\n* {@link #getDescription()}.\n*/\n"}, "setRssi": {"dirtyReplacement": "NeighboringCellInfo(int, String, int)", "methodClass": "android.telephony.NeighboringCellInfo", "methodName": "setRssi", "method": "void setRssi(int)", "replacementComments": "/**\n* Set the signal strength of the cell.\n*\n* NeighboringCellInfo is a one time shot for the neighboring cells based on\n* the radio network type at that moment. It shouldn't be changed after\n* creation.\n*\n* @deprecated initial rssi value passed as parameter to constructor\n* {@link #NeighboringCellInfo(int, String, int)}\n*/\n"}, "writeFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeFixed64", "method": "void writeFixed64(long,long)", "replacementComments": "/**\n* Write a single proto \"fixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "addGpsStatusListener": {"dirtyReplacement": "registerGnssStatusCallback(GnssStatus.Callback)", "methodClass": "android.location.LocationManager", "methodName": "addGpsStatusListener", "method": "boolean addGpsStatusListener(Listener)", "replacementComments": "/**\n* Adds a GPS status listener.\n*\n* @param listener GPS status listener object to register\n*\n* @return true if the listener was successfully added\n*\n* @throws SecurityException if the ACCESS_FINE_LOCATION permission is not present\n* @deprecated use {@link #registerGnssStatusCallback(GnssStatus.Callback)} instead.\n*/\n"}, "startActivityFromFragment": {"dirtyReplacement": "android.support.v4.app.FragmentActivity#startActivityFromFragment(  android.support.v4.app.Fragment,Intent,int,Bundle)", "methodClass": "android.app.Activity", "methodName": "startActivityFromFragment", "method": "void startActivityFromFragment(Fragment,Intent,int,Bundle)", "replacementComments": "/**\n* This is called when a Fragment in this activity calls its\n* {@link Fragment#startActivity} or {@link Fragment#startActivityForResult}\n* method.\n*\n* <p>This method throws {@link android.content.ActivityNotFoundException}\n* if there was no Activity found to run the given Intent.\n*\n* @param fragment The fragment making the call.\n* @param intent The intent to start.\n* @param requestCode Reply request code.  < 0 if reply is not requested.\n* @param options Additional options for how the Activity should be started.\n* See {@link android.content.Context#startActivity(Intent, Bundle)}\n* Context.startActivity(Intent, Bundle)} for more details.\n*\n* @throws android.content.ActivityNotFoundException\n*\n* @see Fragment#startActivity\n* @see Fragment#startActivityForResult\n*\n* @deprecated Use {@link android.support.v4.app.FragmentActivity#startActivityFromFragment(\n* android.support.v4.app.Fragment,Intent,int,Bundle)}\n*/\n"}, "setTotalTime": {"dirtyReplacement": "setDuration(long)", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "setTotalTime", "method": "void setTotalTime(int)", "replacementComments": "/**\n* Sets the total time in milliseconds for the playback controls row.\n* <p>If set after the row has been bound to a view, the adapter must be notified that\n* this row has changed.</p>\n* @deprecated Use {@link #setDuration(long)}\n*/\n"}, "visible": {"dirtyReplacement": "visible(int)", "methodClass": "com.android.internal.logging.MetricsLogger", "methodName": "visible", "method": "void visible(Context,int)", "replacementComments": "/**\n* @deprecated use {@link #visible(int)}\n*/\n"}, "getApplication": {"dirtyReplacement": "UiccProfile#getApplication(int)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "getApplication", "method": "UiccCardApplication getApplication(int)", "replacementComments": "/**\n* @deprecated Please use {@link UiccProfile#getApplication(int)} instead.\n*/\n"}, "setPivotX": {"dirtyReplacement": "View#setPivotX(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setPivotX", "method": "void setPivotX(View,float)", "replacementComments": "/**\n* Sets the x location of the point around which the view is\n* {@link #setRotation(View, float) rotated} and {@link #setScaleX(View, float) scaled}.\n* By default, the pivot point is centered on the object.\n* Setting this property disables this behavior and causes the view to use only the\n* explicitly set pivotX and pivotY values.\n*\n* @param value The x location of the pivot point.\n*\n* @deprecated Use {@link View#setPivotX(float)} directly.\n*/\n"}, "enableForegroundNdefPush": {"dirtyReplacement": "setNdefPushMessage", "methodClass": "android.nfc.NfcAdapter", "methodName": "enableForegroundNdefPush", "method": "void enableForegroundNdefPush(Activity,NdefMessage)", "replacementComments": "/**\n* Enable NDEF message push over NFC while this Activity is in the foreground.\n*\n* <p>You must explicitly call this method every time the activity is\n* resumed, and you must call {@link #disableForegroundNdefPush} before\n* your activity completes {@link Activity#onPause}.\n*\n* <p>Strongly recommend to use the new {@link #setNdefPushMessage}\n* instead: it automatically hooks into your activity life-cycle,\n* so you do not need to call enable/disable in your onResume/onPause.\n*\n* <p>For NDEF push to function properly the other NFC device must\n* support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or\n* Android's \"com.android.npp\" (Ndef Push Protocol). This was optional\n* on Gingerbread level Android NFC devices, but SNEP is mandatory on\n* Ice-Cream-Sandwich and beyond.\n*\n* <p>This method must be called from the main thread.\n*\n* <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n*\n* @param activity foreground activity\n* @param message a NDEF Message to push over NFC\n* @throws IllegalStateException if the activity is not currently in the foreground\n* @throws UnsupportedOperationException if FEATURE_NFC is unavailable.\n* @deprecated use {@link #setNdefPushMessage} instead\n*/\n"}, "broadcastStickyIntent": {"dirtyReplacement": "ActivityManager.broadcastStickyIntent", "methodClass": "android.app.ActivityManagerNative", "methodName": "broadcastStickyIntent", "method": "void broadcastStickyIntent(Intent,String,int)", "replacementComments": "/**\n* @deprecated use ActivityManager.broadcastStickyIntent instead.\n*/\n"}, "registerRemoteController": {"dirtyReplacement": "MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)", "methodClass": "android.media.AudioManager", "methodName": "registerRemoteController", "method": "boolean registerRemoteController(RemoteController)", "replacementComments": "/**\n* Registers a {@link RemoteController} instance for it to receive media\n* metadata updates and playback state information from applications using\n* {@link RemoteControlClient}, and control their playback.\n* <p>\n* Registration requires the {@link RemoteController.OnClientUpdateListener} listener to be\n* one of the enabled notification listeners (see\n* {@link android.service.notification.NotificationListenerService}).\n*\n* @param rctlr the object to register.\n* @return true if the {@link RemoteController} was successfully registered,\n* false if an error occurred, due to an internal system error, or\n* insufficient permissions.\n* @deprecated Use\n* {@link MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)}\n* and {@link MediaController} instead.\n*/\n"}, "getActionView": {"dirtyReplacement": "MenuItem#getActionView()", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "getActionView", "method": "View getActionView(MenuItem)", "replacementComments": "/**\n* Returns the currently set action view for this menu item.\n*\n* @param item the item to query\n* @return This item's action view\n*\n* @deprecated Use {@link MenuItem#getActionView()} directly.\n*/\n"}, "getLanguage": {"dirtyReplacement": "getVoice()", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "getLanguage", "method": "Locale getLanguage()", "replacementComments": "/**\n* Returns a Locale instance describing the language currently being used for synthesis\n* requests sent to the TextToSpeech engine.\n*\n* In Android 4.2 and before (API <= 17) this function returns the language that is currently\n* being used by the TTS engine. That is the last language set by this or any other\n* client by a {@link TextToSpeech#setLanguage} call to the same engine.\n*\n* In Android versions after 4.2 this function returns the language that is currently being\n* used for the synthesis requests sent from this client. That is the last language set\n* by a {@link TextToSpeech#setLanguage} call on this instance.\n*\n* If a voice is set (by {@link #setVoice(Voice)}), getLanguage will return the language of\n* the currently set voice.\n*\n* Please note that the Locale object returned by this method is NOT a valid Locale object. Its\n* language field contains a three-letter ISO 639-2/T code (where a proper Locale would use\n* a two-letter ISO 639-1 code), and the country field contains a three-letter ISO 3166 country\n* code (where a proper Locale would use a two-letter ISO 3166-1 code).\n*\n* @return language, country (if any) and variant (if any) used by the client stored in a\n* Locale instance, or {@code null} on error.\n*\n* @deprecated As of API level 21, please use <code>getVoice().getLocale()</code>\n* ({@link #getVoice()}).\n*/\n"}, "shouldShowRequestPermissionRationale": {"dirtyReplacement": "androidx.fragment.app.Fragment", "methodClass": "androidx.legacy.app.FragmentCompat", "methodName": "shouldShowRequestPermissionRationale", "method": "boolean shouldShowRequestPermissionRationale(Fragment,String)", "replacementComments": "/**\n* Gets whether you should show UI with rationale for requesting a permission.\n* You should do this only if you do not have the permission and the context in\n* which the permission is requested does not clearly communicate to the user\n* what would be the benefit from granting this permission.\n* <p>\n* For example, if you write a camera app, requesting the camera permission\n* would be expected by the user and no rationale for why it is requested is\n* needed. If however, the app needs location for tagging photos then a non-tech\n* savvy user may wonder how location is related to taking photos. In this case\n* you may choose to show UI with rationale of requesting this permission.\n* </p>\n*\n* @param fragment The target fragment.\n* @param permission A permission your app wants to request.\n* @return Whether you can show permission rationale UI.\n*\n* @see androidx.core.content.ContextCompat#checkSelfPermission(\n* android.content.Context, String)\n* @see #requestPermissions(android.app.Fragment, String[], int)\n*\n* @deprecated Use {@link androidx.fragment.app.Fragment} instead of the framework\n* {@link Fragment}.\n*/\n"}, "onNestedScrollAccepted": {"dirtyReplacement": "onNestedScrollAccepted(CoordinatorLayout, View, View, View, int, int)", "methodClass": "androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior", "methodName": "onNestedScrollAccepted", "method": "void onNestedScrollAccepted(CoordinatorLayout,V,View,View,int)", "replacementComments": "/**\n* @deprecated You should now override\n* {@link #onNestedScrollAccepted(CoordinatorLayout, View, View, View, int, int)}. This\n* method will still continue to be called if the type is {@link ViewCompat#TYPE_TOUCH}.\n*/\n"}, "addToGroup": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.People", "methodName": "addToGroup", "method": "Uri addToGroup(ContentResolver,long,long)", "replacementComments": "/**\n* Adds a person to a group.\n*\n* @param resolver the resolver to use\n* @param personId the person to add to the group\n* @param groupId the group to add the person to\n* @return the URI of the group membership row\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "setLocationModeForUser": {"dirtyReplacement": "LocationManager#setLocationEnabledForUser(boolean, int)", "methodClass": "android.provider.Settings.Secure", "methodName": "setLocationModeForUser", "method": "boolean setLocationModeForUser(ContentResolver,int,int)", "replacementComments": "/**\n* Thread-safe method for setting the location mode to one of\n* {@link #LOCATION_MODE_HIGH_ACCURACY}, {@link #LOCATION_MODE_SENSORS_ONLY},\n* {@link #LOCATION_MODE_BATTERY_SAVING}, or {@link #LOCATION_MODE_OFF}.\n* Necessary because the mode is a composite of the underlying location provider\n* settings.\n*\n* @param cr the content resolver to use\n* @param mode such as {@link #LOCATION_MODE_HIGH_ACCURACY}\n* @param userId the userId for which to change mode\n* @return true if the value was set, false on database errors\n*\n* @throws IllegalArgumentException if mode is not one of the supported values\n*\n* @deprecated To enable/disable location, use\n* {@link LocationManager#setLocationEnabledForUser(boolean, int)}.\n* To enable/disable a specific location provider, use\n* {@link LocationManager#setProviderEnabledForUser(String, boolean, int)}.\n*/\n"}, "startDrag": {"dirtyReplacement": "startDragAndDrop(ClipData, DragShadowBuilder, Object, int)  startDragAndDrop()", "methodClass": "android.view.View", "methodName": "startDrag", "method": "boolean startDrag(ClipData,DragShadowBuilder,Object,int)", "replacementComments": "/**\n* @deprecated Use {@link #startDragAndDrop(ClipData, DragShadowBuilder, Object, int)\n* startDragAndDrop()} for newer platform versions.\n*/\n"}, "disableForegroundNdefPush": {"dirtyReplacement": "setNdefPushMessage", "methodClass": "android.nfc.NfcAdapter", "methodName": "disableForegroundNdefPush", "method": "void disableForegroundNdefPush(Activity)", "replacementComments": "/**\n* Disable NDEF message push over P2P.\n*\n* <p>After calling {@link #enableForegroundNdefPush}, an activity\n* must call this method before its {@link Activity#onPause} callback\n* completes.\n*\n* <p>Strongly recommend to use the new {@link #setNdefPushMessage}\n* instead: it automatically hooks into your activity life-cycle,\n* so you do not need to call enable/disable in your onResume/onPause.\n*\n* <p>This method must be called from the main thread.\n*\n* <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n*\n* @param activity the Foreground activity\n* @throws IllegalStateException if the Activity has already been paused\n* @throws UnsupportedOperationException if FEATURE_NFC is unavailable.\n* @deprecated use {@link #setNdefPushMessage} instead\n*/\n"}, "setContentDescription": {"dirtyReplacement": "AccessibilityRecord#setContentDescription(CharSequence)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setContentDescription", "method": "void setContentDescription(CharSequence)", "replacementComments": "/**\n* Sets the description of the source.\n*\n* @param contentDescription The description.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setContentDescription(CharSequence)} directly.\n*/\n"}, "getHours": {"dirtyReplacement": "setHours", "methodClass": "java.sql.Date", "methodName": "getHours", "method": "int getHours()", "replacementComments": "/**\n* @deprecated This method is deprecated and should not be used because SQL Date\n* values do not have a time component.\n*\n* @exception java.lang.IllegalArgumentException if this method is invoked\n* @see #setHours\n*/\n"}, "getKeyData": {"dirtyReplacement": "KeyCharacterMap#getDisplayLabel(int)", "methodClass": "android.view.KeyCharacterMap", "methodName": "getKeyData", "method": "boolean getKeyData(int,KeyData)", "replacementComments": "/**\n* Get the character conversion data for a given key code.\n*\n* @param keyCode The keyCode to query.\n* @param results A {@link KeyData} instance that will be filled with the results.\n* @return True if the key was mapped.  If the key was not mapped, results is not modified.\n*\n* @deprecated instead use {@link KeyCharacterMap#getDisplayLabel(int)},\n* {@link KeyCharacterMap#getNumber(int)} or {@link KeyCharacterMap#get(int, int)}.\n*/\n"}, "createSnapScroller": {"dirtyReplacement": "createScroller(RecyclerView.LayoutManager)", "methodClass": "androidx.recyclerview.widget.SnapHelper", "methodName": "createSnapScroller", "method": "LinearSmoothScroller createSnapScroller(LayoutManager)", "replacementComments": "/**\n* Creates a scroller to be used in the snapping implementation.\n*\n* @param layoutManager     The {@link RecyclerView.LayoutManager} associated with the attached\n* {@link RecyclerView}.\n*\n* @return a {@link LinearSmoothScroller} which will handle the scrolling.\n* @deprecated use {@link #createScroller(RecyclerView.LayoutManager)} instead.\n*/\n"}, "scrollToBottom": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "scrollToBottom", "method": "void scrollToBottom(ActivityInstrumentationTestCase,ViewGroup)", "replacementComments": "/**\n* Scroll a ViewGroup to the bottom by repeatedly calling\n* {@link #dragQuarterScreenUp(InstrumentationTestCase, Activity)}\n*\n* @param test The test case that is being run\n* @param v The ViewGroup that should be dragged\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "setHorizontalMargin": {"dirtyReplacement": "setHorizontalSpacing(int)", "methodClass": "androidx.leanback.widget.BaseGridView", "methodName": "setHorizontalMargin", "method": "void setHorizontalMargin(int)", "replacementComments": "/**\n* Sets the spacing in pixels between two child items horizontally.\n* @deprecated Use {@link #setHorizontalSpacing(int)}\n*/\n"}, "getBlockSize": {"dirtyReplacement": "getBlockSizeLong()", "methodClass": "android.os.StatFs", "methodName": "getBlockSize", "method": "int getBlockSize()", "replacementComments": "/**\n* @deprecated Use {@link #getBlockSizeLong()} instead.\n*/\n"}, "getStreamType": {"dirtyReplacement": "setAudioAttributes(AudioAttributes)", "methodClass": "android.media.Ringtone", "methodName": "getStreamType", "method": "int getStreamType()", "replacementComments": "/**\n* Gets the stream type where this ringtone will be played.\n*\n* @return The stream type, see {@link AudioManager}.\n* @deprecated use of stream types is deprecated, see\n* {@link #setAudioAttributes(AudioAttributes)}\n*/\n"}, "markAsContacted": {"dirtyReplacement": "d", "methodClass": "android.provider.ContactsContract.Contacts", "methodName": "markAsContacted", "method": "void markAsContacted(ContentResolver,long)", "replacementComments": "/**\n* Mark a contact as having been contacted. Updates two fields:\n* {@link #TIMES_CONTACTED} and {@link #LAST_TIME_CONTACTED}. The\n* TIMES_CONTACTED field is incremented by 1 and the LAST_TIME_CONTACTED\n* field is populated with the current system time.\n*\n* @param resolver the ContentResolver to use\n* @param contactId the person who was contacted\n*\n* @deprecated The class DataUsageStatUpdater of the Android support library should\n* be used instead.\n*/\n"}, "peekWallpaper": {"dirtyReplacement": "android.app.WallpaperManager#peekDrawable  WallpaperManager.peek()", "methodClass": "android.content.Context", "methodName": "peekWallpaper", "method": "Drawable peekWallpaper()", "replacementComments": "/**\n* @deprecated Use {@link android.app.WallpaperManager#peekDrawable\n* WallpaperManager.peek()} instead.\n*/\n"}, "getCellLocation": {"dirtyReplacement": "getAllCellInfo", "methodClass": "android.telephony.TelephonyManager", "methodName": "getCellLocation", "method": "CellLocation getCellLocation()", "replacementComments": "/**\n* Returns the current location of the device.\n* <p>\n* If there is only one radio in the device and that radio has an LTE connection,\n* this method will return null. The implementation must not to try add LTE\n* identifiers into the existing cdma/gsm classes.\n* <p>\n* @return Current location of the device or null if not available.\n*\n* @deprecated use {@link #getAllCellInfo} instead, which returns a superset of this API.\n*/\n"}, "authenticate": {"dirtyReplacement": "BiometricPrompt#authenticate(CancellationSignal, Executor,  BiometricPrompt.AuthenticationCallback)", "methodClass": "android.hardware.fingerprint.FingerprintManager", "methodName": "authenticate", "method": "void authenticate(CryptoObject,CancellationSignal,int,AuthenticationCallback,Handler)", "replacementComments": "/**\n* Request authentication of a crypto object. This call warms up the fingerprint hardware\n* and starts scanning for a fingerprint. It terminates when\n* {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n* {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n* which point the object is no longer valid. The operation can be canceled by using the\n* provided cancel object.\n*\n* @param crypto object associated with the call or null if none required.\n* @param cancel an object that can be used to cancel authentication\n* @param flags optional flags; should be 0\n* @param callback an object to receive authentication events\n* @param handler an optional handler to handle callback events\n*\n* @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n* by <a href=\"{@docRoot}training/articles/keystore.html\">Android Keystore\n* facility</a>.\n* @throws IllegalStateException if the crypto primitive is not initialized.\n* @deprecated See {@link BiometricPrompt#authenticate(CancellationSignal, Executor,\n* BiometricPrompt.AuthenticationCallback)} and {@link BiometricPrompt#authenticate(\n* BiometricPrompt.CryptoObject, CancellationSignal, Executor,\n* BiometricPrompt.AuthenticationCallback)}\n*/\n"}, "getFactory": {"dirtyReplacement": "setFactory2(LayoutInflater, LayoutInflater.Factory2)", "methodClass": "androidx.core.view.LayoutInflaterCompat", "methodName": "getFactory", "method": "LayoutInflaterFactory getFactory(LayoutInflater)", "replacementComments": "/**\n* Return the current {@link LayoutInflaterFactory} (or null). This is\n* called on each element name. If the factory returns a View, add that\n* to the hierarchy. If it returns null, proceed to call onCreateView(name).\n*\n* @return The {@link LayoutInflaterFactory} associated with the\n* {@link LayoutInflater}. Will be {@code null} if the inflater does not\n* have a {@link LayoutInflaterFactory} but a raw {@link LayoutInflater.Factory}.\n* @see LayoutInflater#getFactory()\n*\n* @deprecated Use {@link #setFactory2(LayoutInflater, LayoutInflater.Factory2)} to set and\n* {@link LayoutInflater#getFactory2()} to get the factory.\n*/\n"}, "isNull": {"dirtyReplacement": "getType(int, int)", "methodClass": "android.database.CursorWindow", "methodName": "isNull", "method": "boolean isNull(int,int)", "replacementComments": "/**\n* Returns true if the field at the specified row and column index\n* has type {@link Cursor#FIELD_TYPE_NULL}.\n*\n* @param row The zero-based row index.\n* @param column The zero-based column index.\n* @return True if the field has type {@link Cursor#FIELD_TYPE_NULL}.\n* @deprecated Use {@link #getType(int, int)} instead.\n*/\n"}, "stopManagingCursor": {"dirtyReplacement": "android.content.CursorLoader", "methodClass": "android.app.Activity", "methodName": "stopManagingCursor", "method": "void stopManagingCursor(Cursor)", "replacementComments": "/**\n* Given a Cursor that was previously given to\n* {@link #startManagingCursor}, stop the activity's management of that\n* cursor.\n*\n* <p><strong>Warning:</strong> After calling this method on a cursor from a managed query,\n* the system <em>will not</em> automatically close the cursor and you must call\n* {@link Cursor#close()}.</p>\n*\n* @param c The Cursor that was being managed.\n*\n* @see #startManagingCursor\n*\n* @deprecated Use the new {@link android.content.CursorLoader} class with\n* {@link LoaderManager} instead; this is also\n* available on older platforms through the Android compatibility package.\n*/\n"}, "getConsiderGoneChildrenWhenMeasuring": {"dirtyReplacement": "getMeasureAllChildren() getMeasureAllChildren()", "methodClass": "android.widget.FrameLayout", "methodName": "getConsiderGoneChildrenWhenMeasuring", "method": "boolean getConsiderGoneChildrenWhenMeasuring()", "replacementComments": "/**\n* Determines whether all children, or just those in the VISIBLE or\n* INVISIBLE state, are considered when measuring.\n*\n* @return Whether all children are considered when measuring.\n*\n* @deprecated This method is deprecated in favor of\n* {@link #getMeasureAllChildren() getMeasureAllChildren()}, which was\n* renamed for consistency with\n* {@link #setMeasureAllChildren(boolean) setMeasureAllChildren()}.\n*/\n"}, "getLocale": {"dirtyReplacement": "getLocaleObject()", "methodClass": "android.text.style.SuggestionSpan", "methodName": "getLocale", "method": "String getLocale()", "replacementComments": "/**\n* @deprecated use {@link #getLocaleObject()} instead.\n* @return the locale of the suggestions. An empty string is returned if no locale is specified.\n*/\n"}, "addPostalLocation": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.ContactMethods", "methodName": "addPostalLocation", "method": "void addPostalLocation(Context,long,double,double)", "replacementComments": "/**\n* Add a longitude and latitude location to a postal address.\n*\n* @param context the context to use when updating the database\n* @param postalId the address to update\n* @param latitude the latitude for the address\n* @param longitude the longitude for the address\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "onDetachedFromWindow": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "onDetachedFromWindow", "method": "void onDetachedFromWindow()", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "toURI": {"dirtyReplacement": "toUri", "methodClass": "android.content.Intent", "methodName": "toURI", "method": "String toURI()", "replacementComments": "/**\n* Call {@link #toUri} with 0 flags.\n* @deprecated Use {@link #toUri} instead.\n*/\n"}, "resetAppWithAid": {"dirtyReplacement": "UiccProfile#resetAppWithAid(String)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "resetAppWithAid", "method": "boolean resetAppWithAid(String)", "replacementComments": "/**\n* Resets the application with the input AID. Returns true if any changes were made.\n*\n* A null aid implies a card level reset - all applications must be reset.\n*\n* @deprecated Please use {@link UiccProfile#resetAppWithAid(String)} instead.\n*/\n"}, "isWfcRoamingEnabledByUser": {"dirtyReplacement": "isWfcRoamingEnabledByUser()", "methodClass": "com.android.ims.ImsManager", "methodName": "isWfcRoamingEnabledByUser", "method": "boolean isWfcRoamingEnabledByUser(Context)", "replacementComments": "/**\n* Returns the user configuration of WFC roaming setting\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isWfcRoamingEnabledByUser()} instead.\n*/\n"}, "setLaunchDocument": {"dirtyReplacement": "android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT", "methodClass": "androidx.navigation.NavOptions.Builder", "methodName": "setLaunchDocument", "method": "Builder setLaunchDocument(boolean)", "replacementComments": "/**\n* Launch a navigation target as a document if you want it to appear as its own\n* entry in the system Overview screen. If the same document is launched multiple times\n* it will not create a new task, it will bring the existing document task to the front.\n*\n* <p>If the user presses the system Back key from a new document task they will land\n* on their previous task. If the user reached the document task from the system Overview\n* screen they will be taken to their home screen.</p>\n*\n* @param launchDocument true to launch a new document task\n* @deprecated As per the {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT}\n* documentation, it is recommended to use {@link android.R.attr#documentLaunchMode} on an\n* Activity you wish to launch as a new document.\n*/\n"}, "calledPartyBCDFragmentToString": {"dirtyReplacement": "calledPartyBCDFragmentToString(byte[], int, int, int)", "methodClass": "android.telephony.PhoneNumberUtils", "methodName": "calledPartyBCDFragmentToString", "method": "String calledPartyBCDFragmentToString(byte[],int,int)", "replacementComments": "/**\n* Like calledPartyBCDToString, but field does not start with a\n* TOA byte. For example: SIM ADN extension fields\n*\n* @deprecated use {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} instead.\n* Calling this method is equivalent to calling\n* {@link #calledPartyBCDFragmentToString(byte[], int, int, int)} with\n* {@link #BCD_EXTENDED_TYPE_EF_ADN} as the extended type.\n*/\n"}, "createFromPdu": {"dirtyReplacement": "createFromPdu(byte[], String)", "methodClass": "android.telephony.SmsMessage", "methodName": "createFromPdu", "method": "SmsMessage createFromPdu(byte[])", "replacementComments": "/**\n* Create an SmsMessage from a raw PDU. Guess format based on Voice\n* technology first, if it fails use other format.\n* All applications which handle\n* incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast\n* intent <b>must</b> now pass the new {@code format} String extra from the intent\n* into the new method {@code createFromPdu(byte[], String)} which takes an\n* extra format parameter. This is required in order to correctly decode the PDU on\n* devices that require support for both 3GPP and 3GPP2 formats at the same time,\n* such as dual-mode GSM/CDMA and CDMA/LTE phones.\n* @deprecated Use {@link #createFromPdu(byte[], String)} instead.\n*/\n"}, "getType": {"dirtyReplacement": "NetworkCapabilities#hasTransport", "methodClass": "android.net.NetworkInfo", "methodName": "getType", "method": "int getType()", "replacementComments": "/**\n* Reports the type of network to which the\n* info in this {@code NetworkInfo} pertains.\n* @return one of {@link ConnectivityManager#TYPE_MOBILE}, {@link\n* ConnectivityManager#TYPE_WIFI}, {@link ConnectivityManager#TYPE_WIMAX}, {@link\n* ConnectivityManager#TYPE_ETHERNET},  {@link ConnectivityManager#TYPE_BLUETOOTH}, or other\n* types defined by {@link ConnectivityManager}.\n* @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}\n* instead with one of the NetworkCapabilities#TRANSPORT_* constants :\n* {@link #getType} and {@link #getTypeName} cannot account for networks using\n* multiple transports. Note that generally apps should not care about transport;\n* {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and\n* {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that\n* apps concerned with meteredness or bandwidth should be looking at, as they\n* offer this information with much better accuracy.\n*/\n"}, "unregisterListener": {"dirtyReplacement": "SensorManager#unregisterListener(SensorEventListener, Sensor)", "methodClass": "android.hardware.SensorManager", "methodName": "unregisterListener", "method": "void unregisterListener(SensorListener,int)", "replacementComments": "/**\n* Unregisters a listener for the sensors with which it is registered.\n*\n* @deprecated This method is deprecated, use\n* {@link SensorManager#unregisterListener(SensorEventListener, Sensor)}\n* instead.\n*\n* @param listener\n* a SensorListener object\n*\n* @param sensors\n* a bit masks of the sensors to unregister from\n*/\n"}, "getBytes": {"dirtyReplacement": "getBytes()", "methodClass": "java.lang.String", "methodName": "getBytes", "method": "void getBytes(int,int,byte[],int)", "replacementComments": "/**\n* Copies characters from this string into the destination byte array. Each\n* byte receives the 8 low-order bits of the corresponding character. The\n* eight high-order bits of each character are not copied and do not\n* participate in the transfer in any way.\n*\n* <p> The first character to be copied is at index {@code srcBegin}; the\n* last character to be copied is at index {@code srcEnd-1}.  The total\n* number of characters to be copied is {@code srcEnd-srcBegin}. The\n* characters, converted to bytes, are copied into the subarray of {@code\n* dst} starting at index {@code dstBegin} and ending at index:\n*\n* <blockquote><pre>\n* dstBegin + (srcEnd-srcBegin) - 1\n* </pre></blockquote>\n*\n* @deprecated  This method does not properly convert characters into\n* bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n* {@link #getBytes()} method, which uses the platform's default charset.\n*\n* @param  srcBegin\n* Index of the first character in the string to copy\n*\n* @param  srcEnd\n* Index after the last character in the string to copy\n*\n* @param  dst\n* The destination array\n*\n* @param  dstBegin\n* The start offset in the destination array\n*\n* @throws  IndexOutOfBoundsException\n* If any of the following is true:\n* <ul>\n* <li> {@code srcBegin} is negative\n* <li> {@code srcBegin} is greater than {@code srcEnd}\n* <li> {@code srcEnd} is greater than the length of this String\n* <li> {@code dstBegin} is negative\n* <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n* dst.length}\n* </ul>\n*/\n"}, "getWindowTouchSlop": {"dirtyReplacement": "getScaledWindowTouchSlop()", "methodClass": "android.view.ViewConfiguration", "methodName": "getWindowTouchSlop", "method": "int getWindowTouchSlop()", "replacementComments": "/**\n* @return Distance in dips a touch must be outside the bounds of a window for it\n* to be counted as outside the window for purposes of dismissing that\n* window.\n*\n* @deprecated Use {@link #getScaledWindowTouchSlop()} instead.\n*/\n"}, "getEnabledAccessibilityServiceList": {"dirtyReplacement": "AccessibilityManager#getEnabledAccessibilityServiceList(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityManagerCompat", "methodName": "getEnabledAccessibilityServiceList", "method": "List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(AccessibilityManager,int)", "replacementComments": "/**\n* Returns the {@link AccessibilityServiceInfo}s of the enabled accessibility services\n* for a given feedback type.\n*\n* @param manager The accessibility manager.\n* @param feedbackTypeFlags The feedback type flags.\n* @return An unmodifiable list with {@link AccessibilityServiceInfo}s.\n*\n* @see AccessibilityServiceInfo#FEEDBACK_AUDIBLE\n* @see AccessibilityServiceInfo#FEEDBACK_GENERIC\n* @see AccessibilityServiceInfo#FEEDBACK_HAPTIC\n* @see AccessibilityServiceInfo#FEEDBACK_SPOKEN\n* @see AccessibilityServiceInfo#FEEDBACK_VISUAL\n*\n* @deprecated Use {@link AccessibilityManager#getEnabledAccessibilityServiceList(int)}\n* directly.\n*/\n"}, "writePackedInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedInt32", "method": "void writePackedInt32(long,int[])", "replacementComments": "/**\n* Write a list of packed proto \"int32\" type field value.\n*\n* Note that these are stored in memory as signed values and written as unsigned\n* varints, which if negative, are 10 bytes long. If you know the data is likely\n* to be negative, use \"sint32\".\n*\n* @deprecated Use #write instead.\n*/\n"}, "setColorScheme": {"dirtyReplacement": "setColorSchemeResources(int...)", "methodClass": "androidx.swiperefreshlayout.widget.SwipeRefreshLayout", "methodName": "setColorScheme", "method": "void setColorScheme(int)", "replacementComments": "/**\n* @deprecated Use {@link #setColorSchemeResources(int...)}\n*/\n"}, "getRecordCount": {"dirtyReplacement": "AccessibilityEvent#getRecordCount()", "methodClass": "androidx.core.view.accessibility.AccessibilityEventCompat", "methodName": "getRecordCount", "method": "int getRecordCount(AccessibilityEvent)", "replacementComments": "/**\n* Gets the number of records contained in the event.\n*\n* @return The number of records.\n*\n* @deprecated Use {@link AccessibilityEvent#getRecordCount()} directly.\n*/\n"}, "onFinishedGoingToSleep": {"dirtyReplacement": "com.android.systemui.keyguard.WakefulnessLifecycle", "methodClass": "com.android.keyguard.KeyguardUpdateMonitorCallback", "methodName": "onFinishedGoingToSleep", "method": "void onFinishedGoingToSleep(int)", "replacementComments": "/**\n* Called when the device has finished going to sleep.\n* @param why either {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_ADMIN},\n* {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_USER}, or\n* {@link WindowManagerPolicyConstants#OFF_BECAUSE_OF_TIMEOUT}.\n*\n* @deprecated use {@link com.android.systemui.keyguard.WakefulnessLifecycle}.\n*/\n"}, "buildUnionSubQuery": {"dirtyReplacement": "buildUnionSubQuery", "methodClass": "android.database.sqlite.SQLiteQueryBuilder", "methodName": "buildUnionSubQuery", "method": "String buildUnionSubQuery(String,String[],Set<String>,int,String,String,String[],String,String)", "replacementComments": "/**\n* @deprecated This method's signature is misleading since no SQL parameter\n* substitution is carried out.  The selection arguments parameter does not get\n* used at all.  To avoid confusion, call\n* {@link #buildUnionSubQuery}\n* instead.\n*/\n"}, "getOutputBuffers": {"dirtyReplacement": "getOutputBuffer", "methodClass": "android.media.MediaCodec", "methodName": "getOutputBuffers", "method": "ByteBuffer[] getOutputBuffers()", "replacementComments": "/**\n* Retrieve the set of output buffers.  Call this after start()\n* returns and whenever dequeueOutputBuffer signals an output\n* buffer change by returning {@link\n* #INFO_OUTPUT_BUFFERS_CHANGED}. After calling this method, any\n* ByteBuffers previously returned by an earlier call to this\n* method MUST no longer be used.\n*\n* @deprecated Use the new {@link #getOutputBuffer} method instead\n* each time an output buffer is dequeued.  This method is not\n* supported if codec is configured in asynchronous mode.\n*\n* <b>Note:</b> As of API 21, the position and limit of output\n* buffers that are dequeued will be set to the valid data\n* range.\n*\n* <em>Do not use this method if using an output surface.</em>\n*\n* @throws IllegalStateException if not in the Executing state,\n* or codec is configured in asynchronous mode.\n* @throws MediaCodec.CodecException upon codec error.\n*/\n"}, "onRelease": {"dirtyReplacement": "EdgeEffect#onRelease()", "methodClass": "androidx.core.widget.EdgeEffectCompat", "methodName": "onRelease", "method": "boolean onRelease()", "replacementComments": "/**\n* Call when the object is released after being pulled.\n* This will begin the \"decay\" phase of the effect. After calling this method\n* the host view should {@link android.view.View#invalidate()} if this method\n* returns true and thereby draw the results accordingly.\n*\n* @return true if the host view should invalidate, false if it should not.\n*\n* @deprecated Use {@link EdgeEffect#onRelease()} directly.\n*/\n"}, "writePackedBool": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedBool", "method": "void writePackedBool(long,boolean[])", "replacementComments": "/**\n* Write a list of packed proto \"bool\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "isRoaming": {"dirtyReplacement": "NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING", "methodClass": "android.net.NetworkInfo", "methodName": "isRoaming", "method": "boolean isRoaming()", "replacementComments": "/**\n* Indicates whether the device is currently roaming on this network. When\n* {@code true}, it suggests that use of data on this network may incur\n* extra costs.\n*\n* @return {@code true} if roaming is in effect, {@code false} otherwise.\n* @deprecated Callers should switch to checking\n* {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING}\n* instead, since that handles more complex situations, such as\n* VPNs.\n*/\n"}, "iccTransmitApduLogicalChannel": {"dirtyReplacement": "UiccProfile#iccTransmitApduLogicalChannel(int, int, int, int, int, int, String, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "iccTransmitApduLogicalChannel", "method": "void iccTransmitApduLogicalChannel(int,int,int,int,int,int,String,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#iccTransmitApduLogicalChannel}\n* @deprecated Please use {@link\n* UiccProfile#iccTransmitApduLogicalChannel(int, int, int, int, int, int, String, Message)}\n* instead.\n*/\n"}, "isLocationProviderEnabled": {"dirtyReplacement": "LocationManager#isProviderEnabled(String)", "methodClass": "android.provider.Settings.Secure", "methodName": "isLocationProviderEnabled", "method": "boolean isLocationProviderEnabled(ContentResolver,String)", "replacementComments": "/**\n* Helper method for determining if a location provider is enabled.\n*\n* @param cr the content resolver to use\n* @param provider the location provider to query\n* @return true if the provider is enabled\n*\n* @deprecated use {@link LocationManager#isProviderEnabled(String)}\n*/\n"}, "hidden": {"dirtyReplacement": "hidden(int)", "methodClass": "com.android.internal.logging.MetricsLogger", "methodName": "hidden", "method": "void hidden(Context,int)", "replacementComments": "/**\n* @deprecated use {@link #hidden(int)}\n*/\n"}, "removeDialog": {"dirtyReplacement": "DialogFragment", "methodClass": "android.app.Activity", "methodName": "removeDialog", "method": "void removeDialog(int)", "replacementComments": "/**\n* Removes any internal references to a dialog managed by this Activity.\n* If the dialog is showing, it will dismiss it as part of the clean up.\n*\n* <p>This can be useful if you know that you will never show a dialog again and\n* want to avoid the overhead of saving and restoring it in the future.\n*\n* <p>As of {@link android.os.Build.VERSION_CODES#GINGERBREAD}, this function\n* will not throw an exception if you try to remove an ID that does not\n* currently have an associated dialog.</p>\n*\n* @param id The id of the managed dialog.\n*\n* @see #onCreateDialog(int, Bundle)\n* @see #onPrepareDialog(int, Dialog, Bundle)\n* @see #showDialog(int)\n* @see #dismissDialog(int)\n*\n* @deprecated Use the new {@link DialogFragment} class with\n* {@link FragmentManager} instead; this is also\n* available on older platforms through the Android compatibility package.\n*/\n"}, "of": {"dirtyReplacement": "FragmentActivity#getViewModelStore()", "methodClass": "androidx.lifecycle.ViewModelStores", "methodName": "of", "method": "ViewModelStore of(FragmentActivity)", "replacementComments": "/**\n* Returns the {@link ViewModelStore} of the given activity.\n*\n* @param activity an activity whose {@code ViewModelStore} is requested\n* @return a {@code ViewModelStore}\n* @deprecated Use {@link FragmentActivity#getViewModelStore()}\n*/\n"}, "iconResourceId": {"dirtyReplacement": "icon(int)", "methodClass": "androidx.leanback.widget.GuidedAction.BuilderBase", "methodName": "iconResourceId", "method": "B iconResourceId(int,Context)", "replacementComments": "/**\n* Sets the action's icon drawable by retrieving it by resource ID from the specified\n* context. This is a convenience function that simply looks up the drawable and calls\n* {@link #icon(Drawable)}.\n* @param iconResourceId The resource ID for the icon associated with this action.\n* @param context The context whose resource ID should be retrieved.\n* @deprecated Use {@link #icon(int)}.\n*/\n"}, "getFragmentManager": {"dirtyReplacement": "android.support.v4.app.FragmentActivity#getSupportFragmentManager()", "methodClass": "android.app.Activity", "methodName": "getFragmentManager", "method": "FragmentManager getFragmentManager()", "replacementComments": "/**\n* Return the FragmentManager for interacting with fragments associated\n* with this activity.\n*\n* @deprecated Use {@link android.support.v4.app.FragmentActivity#getSupportFragmentManager()}\n*/\n"}, "getBitmap": {"dirtyReplacement": "getBitmapId(String)", "methodClass": "android.hardware.radio.RadioMetadata", "methodName": "getBitmap", "method": "Bitmap getBitmap(String)", "replacementComments": "/**\n* Returns a {@link Bitmap} for the given key or null if the key is not found in the meta data.\n*\n* @param key The key the value is stored under\n* @return a {@link Bitmap} or null\n* @deprecated Use getBitmapId(String) instead\n*/\n"}, "concatenateWhere": {"dirtyReplacement": "android.database.DatabaseUtils#concatenateWhere(String, String)", "methodClass": "androidx.core.database.DatabaseUtilsCompat", "methodName": "concatenateWhere", "method": "String concatenateWhere(String,String)", "replacementComments": "/**\n* Concatenates two SQL WHERE clauses, handling empty or null values.\n*\n* @deprecated Use {@link android.database.DatabaseUtils#concatenateWhere(String, String)}\n* directly.\n*/\n"}, "create": {"dirtyReplacement": "OverScroller", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "create", "method": "ScrollerCompat create(Context,Interpolator)", "replacementComments": "/**\n* @deprecated Use {@link OverScroller} constructor directly.\n*/\n"}, "getBlockCount": {"dirtyReplacement": "getBlockCountLong()", "methodClass": "android.os.StatFs", "methodName": "getBlockCount", "method": "int getBlockCount()", "replacementComments": "/**\n* @deprecated Use {@link #getBlockCountLong()} instead.\n*/\n"}, "setStereoVolume": {"dirtyReplacement": "setVolume", "methodClass": "android.media.AudioTrack", "methodName": "setStereoVolume", "method": "int setStereoVolume(float,float)", "replacementComments": "/**\n* Sets the specified left and right output gain values on the AudioTrack.\n* <p>Gain values are clamped to the closed interval [0.0, max] where\n* max is the value of {@link #getMaxVolume}.\n* A value of 0.0 results in zero gain (silence), and\n* a value of 1.0 means unity gain (signal unchanged).\n* The default value is 1.0 meaning unity gain.\n* <p>The word \"volume\" in the API name is historical; this is actually a linear gain.\n* @param leftGain output gain for the left channel.\n* @param rightGain output gain for the right channel\n* @return error code or success, see {@link #SUCCESS},\n* {@link #ERROR_INVALID_OPERATION}\n* @deprecated Applications should use {@link #setVolume} instead, as it\n* more gracefully scales down to mono, and up to multi-channel content beyond stereo.\n*/\n"}, "getParcelableData": {"dirtyReplacement": "AccessibilityRecord#getParcelableData()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getParcelableData", "method": "Parcelable getParcelableData()", "replacementComments": "/**\n* Gets the {@link Parcelable} data.\n*\n* @return The parcelable data.\n*\n* @deprecated Use {@link AccessibilityRecord#getParcelableData()} directly.\n*/\n"}, "setFromIndex": {"dirtyReplacement": "AccessibilityRecord#setFromIndex(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setFromIndex", "method": "void setFromIndex(int)", "replacementComments": "/**\n* Sets the index of the first character of the changed sequence\n* or the beginning of a text selection or the index of the first\n* visible item when scrolling.\n*\n* @param fromIndex The index of the first character or selection\n* start or the first visible item.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setFromIndex(int)} directly.\n*/\n"}, "showChild": {"dirtyReplacement": "showChild(android.view.ViewGroup, android.view.View, int)", "methodClass": "android.animation.LayoutTransition", "methodName": "showChild", "method": "void showChild(ViewGroup,View)", "replacementComments": "/**\n* @deprecated Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.\n*/\n"}, "setDrawingCacheBackgroundColor": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "setDrawingCacheBackgroundColor", "method": "void setDrawingCacheBackgroundColor(int)", "replacementComments": "/**\n* Setting a solid background color for the drawing cache's bitmaps will improve\n* performance and memory usage. Note, though that this should only be used if this\n* view will always be drawn on top of a solid color.\n*\n* @param color The background color to use for the drawing cache's bitmap\n*\n* @see #setDrawingCacheEnabled(boolean)\n* @see #buildDrawingCache()\n* @see #getDrawingCache()\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "queryCallBarring": {"dirtyReplacement": "queryCallBarring(int, Message, int)", "methodClass": "com.android.ims.ImsUt", "methodName": "queryCallBarring", "method": "void queryCallBarring(int,Message)", "replacementComments": "/**\n* Operations for the supplementary service configuration\n*/\n"}, "setToIndex": {"dirtyReplacement": "AccessibilityRecord#setToIndex(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setToIndex", "method": "void setToIndex(int)", "replacementComments": "/**\n* Sets the index of text selection end or the index of the last\n* visible item when scrolling.\n*\n* @param toIndex The index of selection end or last item index.\n*\n* @deprecated Use {@link AccessibilityRecord#setToIndex(int)} directly.\n*/\n"}, "dupFileDescriptor": {"dirtyReplacement": "android.system.Os#dup(FileDescriptor)", "methodClass": "android.os.Parcel", "methodName": "dupFileDescriptor", "method": "FileDescriptor dupFileDescriptor(FileDescriptor)", "replacementComments": "/**\n* @deprecated use {@link android.system.Os#dup(FileDescriptor)}\n*/\n"}, "setInputMethodAndSubtype": {"dirtyReplacement": "InputMethodService#switchInputMethod(String, InputMethodSubtype)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "setInputMethodAndSubtype", "method": "void setInputMethodAndSubtype(IBinder,String,InputMethodSubtype)", "replacementComments": "/**\n* Force switch to a new input method and subtype. This can only be called\n* from an application or a service which has a token of the currently active input method.\n* @param token Supplies the identifying token given to an input method\n* when it was started, which allows it to perform this operation on\n* itself.\n* @param id The unique identifier for the new input method to be switched to.\n* @param subtype The new subtype of the new input method to be switched to.\n* @deprecated Use\n* {@link InputMethodService#switchInputMethod(String, InputMethodSubtype)}\n* instead. This method was intended for IME developers who should be accessing APIs through\n* the service. APIs in this class are intended for app developers interacting with the IME.\n*/\n"}, "engineSetParameter": {"dirtyReplacement": "engineSetParameter(java.security.spec.AlgorithmParameterSpec)  engineSetParameter", "methodClass": "java.security.SignatureSpi", "methodName": "engineSetParameter", "method": "void engineSetParameter(String,Object)", "replacementComments": "/**\n* Sets the specified algorithm parameter to the specified\n* value. This method supplies a general-purpose mechanism through\n* which it is possible to set the various parameters of this object.\n* A parameter may be any settable parameter for the algorithm, such as\n* a parameter size, or a source of random bits for signature generation\n* (if appropriate), or an indication of whether or not to perform\n* a specific but optional computation. A uniform algorithm-specific\n* naming scheme for each parameter is desirable but left unspecified\n* at this time.\n*\n* @param param the string identifier of the parameter.\n*\n* @param value the parameter value.\n*\n* @exception InvalidParameterException if {@code param} is an\n* invalid parameter for this signature algorithm engine,\n* the parameter is already set\n* and cannot be set again, a security exception occurs, and so on.\n*\n* @deprecated Replaced by {@link\n* #engineSetParameter(java.security.spec.AlgorithmParameterSpec)\n* engineSetParameter}.\n*/\n"}, "expandActionView": {"dirtyReplacement": "MenuItem#expandActionView()", "methodClass": "androidx.core.view.MenuItemCompat", "methodName": "expandActionView", "method": "boolean expandActionView(MenuItem)", "replacementComments": "/**\n* Expand the action view associated with this menu item.\n* The menu item must have an action view set, as well as\n* the showAsAction flag {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.\n* If a listener has been set using\n* {@link #setOnActionExpandListener(MenuItem, OnActionExpandListener)}\n* it will have its {@link OnActionExpandListener#onMenuItemActionExpand(MenuItem)}\n* method invoked. The listener may return false from this method to prevent expanding\n* the action view.\n*\n* @return true if the action view was expanded, false otherwise.\n*\n* @deprecated Use {@link MenuItem#expandActionView()} directly.\n*/\n"}, "getItemCount": {"dirtyReplacement": "AccessibilityRecord#getItemCount()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getItemCount", "method": "int getItemCount()", "replacementComments": "/**\n* Gets the number of items that can be visited.\n*\n* @return The number of items.\n*\n* @deprecated Use {@link AccessibilityRecord#getItemCount()} directly.\n*/\n"}, "getNanoAppInstanceInfo": {"dirtyReplacement": "queryNanoApps(ContextHubInfo)", "methodClass": "android.hardware.location.ContextHubManager", "methodName": "getNanoAppInstanceInfo", "method": "NanoAppInstanceInfo getNanoAppInstanceInfo(int)", "replacementComments": "/**\n* get information about the nano app instance\n*\n* NOTE: The returned NanoAppInstanceInfo does _not_ contain correct\n* information for several fields, specifically:\n* - getName()\n* - getPublisher()\n* - getNeededExecMemBytes()\n* - getNeededReadMemBytes()\n* - getNeededWriteMemBytes()\n*\n* For example, say you call loadNanoApp() with a NanoApp that has\n* getName() returning \"My Name\".  Later, if you call getNanoAppInstanceInfo\n* for that nanoapp, the returned NanoAppInstanceInfo's getName()\n* method will claim \"Preloaded app, unknown\", even though you would\n* have expected \"My Name\".  For now, as the user, you'll need to\n* separately track the above fields if they are of interest to you.\n*\n* TODO(b/30943489): Have the returned NanoAppInstanceInfo contain the\n* correct information.\n*\n* @param nanoAppHandle handle of the nanoapp instance\n* @return NanoAppInstanceInfo the NanoAppInstanceInfo of the nanoapp, or null if the nanoapp\n* does not exist\n*\n* @see NanoAppInstanceInfo\n*\n* @deprecated Use {@link #queryNanoApps(ContextHubInfo)} instead to explicitly query the hub\n* for loaded nanoapps.\n*/\n"}, "getBigDecimal": {"dirtyReplacement": "setBigDecimal", "methodClass": "java.sql.CallableStatement", "methodName": "getBigDecimal", "method": "BigDecimal getBigDecimal(int,int)", "replacementComments": "/**\n* Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a\n* <code>java.math.BigDecimal</code> object with <i>scale</i> digits to\n* the right of the decimal point.\n* @param parameterIndex the first parameter is 1, the second is 2,\n* and so on\n* @param scale the number of digits to the right of the decimal point\n* @return the parameter value.  If the value is SQL <code>NULL</code>, the result\n* is <code>null</code>.\n* @exception SQLException if the parameterIndex is not valid;\n* if a database access error occurs or\n* this method is called on a closed <code>CallableStatement</code>\n* @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n* this method\n* @deprecated use <code>getBigDecimal(int parameterIndex)</code>\n* or <code>getBigDecimal(String parameterName)</code>\n* @see #setBigDecimal\n*/\n"}, "setBeforeText": {"dirtyReplacement": "AccessibilityRecord#setBeforeText(CharSequence)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setBeforeText", "method": "void setBeforeText(CharSequence)", "replacementComments": "/**\n* Sets the text before a change.\n*\n* @param beforeText The text before the change.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setBeforeText(CharSequence)} directly.\n*/\n"}, "restartPackage": {"dirtyReplacement": "killBackgroundProcesses(String)", "methodClass": "android.app.ActivityManager", "methodName": "restartPackage", "method": "void restartPackage(String)", "replacementComments": "/**\n* @deprecated This is now just a wrapper for\n* {@link #killBackgroundProcesses(String)}; the previous behavior here\n* is no longer available to applications because it allows them to\n* break other applications by removing their alarms, stopping their\n* services, etc.\n*/\n"}, "getTotalTime": {"dirtyReplacement": "getDuration()", "methodClass": "androidx.leanback.widget.PlaybackControlsRow", "methodName": "getTotalTime", "method": "int getTotalTime()", "replacementComments": "/**\n* Returns the total time in milliseconds for the playback controls row.\n* @throws ArithmeticException If total time in milliseconds overflows int.\n* @deprecated use {@link #getDuration()}\n*/\n"}, "getDeviceId": {"dirtyReplacement": "getImei", "methodClass": "android.telephony.TelephonyManager", "methodName": "getDeviceId", "method": "String getDeviceId(int)", "replacementComments": "/**\n* Returns the unique device ID of a subscription, for example, the IMEI for\n* GSM and the MEID for CDMA phones. Return null if device ID is not available.\n*\n* <p>Requires Permission: {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}\n* or that the calling app has carrier privileges (see {@link #hasCarrierPrivileges}).\n*\n* @param slotIndex of which deviceID is returned\n*\n* @deprecated Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns\n* MEID for CDMA.\n*/\n"}, "isTurnOffImsAllowedByPlatform": {"dirtyReplacement": "isTurnOffImsAllowedByPlatform()", "methodClass": "com.android.ims.ImsManager", "methodName": "isTurnOffImsAllowedByPlatform", "method": "boolean isTurnOffImsAllowedByPlatform(Context)", "replacementComments": "/**\n* Returns whether turning off ims is allowed by platform.\n* The platform property may override the carrier config.\n*\n* @deprecated Does not support MSIM devices. Please use\n* {@link #isTurnOffImsAllowedByPlatform()} instead.\n*/\n"}, "setProvisionedStringValue": {"dirtyReplacement": "setConfig(int, String)", "methodClass": "com.android.ims.ImsConfig", "methodName": "setProvisionedStringValue", "method": "int setProvisionedStringValue(int,String)", "replacementComments": "/**\n* @deprecated see {@link #setConfig(int, String)} instead.\n*/\n"}, "onPrepareDialog": {"dirtyReplacement": "onPrepareDialog(int, Dialog, Bundle)", "methodClass": "android.app.Activity", "methodName": "onPrepareDialog", "method": "void onPrepareDialog(int,Dialog)", "replacementComments": "/**\n* @deprecated Old no-arguments version of\n* {@link #onPrepareDialog(int, Dialog, Bundle)}.\n*/\n"}, "setDrawingCacheEnabled": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "setDrawingCacheEnabled", "method": "void setDrawingCacheEnabled(boolean)", "replacementComments": "/**\n* <p>Enables or disables the drawing cache. When the drawing cache is enabled, the next call\n* to {@link #getDrawingCache()} or {@link #buildDrawingCache()} will draw the view in a\n* bitmap. Calling {@link #draw(android.graphics.Canvas)} will not draw from the cache when\n* the cache is enabled. To benefit from the cache, you must request the drawing cache by\n* calling {@link #getDrawingCache()} and draw it on screen if the returned bitmap is not\n* null.</p>\n*\n* <p>Enabling the drawing cache is similar to\n* {@link #setLayerType(int, android.graphics.Paint) setting a layer} when hardware\n* acceleration is turned off. When hardware acceleration is turned on, enabling the\n* drawing cache has no effect on rendering because the system uses a different mechanism\n* for acceleration which ignores the flag. If you want to use a Bitmap for the view, even\n* when hardware acceleration is enabled, see {@link #setLayerType(int, android.graphics.Paint)}\n* for information on how to enable software and hardware layers.</p>\n*\n* <p>This API can be used to manually generate\n* a bitmap copy of this view, by setting the flag to <code>true</code> and calling\n* {@link #getDrawingCache()}.</p>\n*\n* @param enabled true to enable the drawing cache, false otherwise\n*\n* @see #isDrawingCacheEnabled()\n* @see #getDrawingCache()\n* @see #buildDrawingCache()\n* @see #setLayerType(int, android.graphics.Paint)\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "currentLoadedClass": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "currentLoadedClass", "method": "Class<?> currentLoadedClass()", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "getSupportedPreviewFrameRates": {"dirtyReplacement": "getSupportedPreviewFpsRange()", "methodClass": "android.hardware.Camera.Parameters", "methodName": "getSupportedPreviewFrameRates", "method": "List<Integer> getSupportedPreviewFrameRates()", "replacementComments": "/**\n* Gets the supported preview frame rates.\n*\n* @return a list of supported preview frame rates. null if preview\n* frame rate setting is not supported.\n* @deprecated replaced by {@link #getSupportedPreviewFpsRange()}\n*/\n"}, "showDialog": {"dirtyReplacement": "DialogFragment", "methodClass": "android.app.Activity", "methodName": "showDialog", "method": "void showDialog(int)", "replacementComments": "/**\n* Simple version of {@link #showDialog(int, Bundle)} that does not\n* take any arguments.  Simply calls {@link #showDialog(int, Bundle)}\n* with null arguments.\n*\n* @deprecated Use the new {@link DialogFragment} class with\n* {@link FragmentManager} instead; this is also\n* available on older platforms through the Android compatibility package.\n*/\n"}, "getState": {"dirtyReplacement": "android.net.ConnectivityManager.NetworkCallback", "methodClass": "android.net.NetworkInfo", "methodName": "getState", "method": "State getState()", "replacementComments": "/**\n* Reports the current coarse-grained state of the network.\n* @return the coarse-grained state\n* @deprecated Apps should instead use the\n* {@link android.net.ConnectivityManager.NetworkCallback} API to\n* learn about connectivity changes.\n* {@link ConnectivityManager#registerDefaultNetworkCallback} and\n* {@link ConnectivityManager#registerNetworkCallback}. These will\n* give a more accurate picture of the connectivity state of\n* the device and let apps react more easily and quickly to changes.\n*/\n"}, "setRemovedCount": {"dirtyReplacement": "AccessibilityRecord#setRemovedCount(int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setRemovedCount", "method": "void setRemovedCount(int)", "replacementComments": "/**\n* Sets the number of removed characters.\n*\n* @param removedCount The number of removed characters.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setRemovedCount(int)} directly.\n*/\n"}, "appendSelectionArgs": {"dirtyReplacement": "android.database.DatabaseUtils#appendSelectionArgs(String[], String[])", "methodClass": "androidx.core.database.DatabaseUtilsCompat", "methodName": "appendSelectionArgs", "method": "String[] appendSelectionArgs(String[],String[])", "replacementComments": "/**\n* Appends one set of selection args to another. This is useful when adding a selection\n* argument to a user provided set.\n*\n* @deprecated Use\n* {@link android.database.DatabaseUtils#appendSelectionArgs(String[], String[])} directly.\n*/\n"}, "dispatchReallyStop": {"dirtyReplacement": "dispatchStop()", "methodClass": "androidx.fragment.app.FragmentController", "methodName": "dispatchReallyStop", "method": "void dispatchReallyStop()", "replacementComments": "/**\n* @deprecated This functionality has been rolled into {@link #dispatchStop()}.\n*/\n"}, "getDefaultRequestProperty": {"dirtyReplacement": "setDefaultRequestProperty(java.lang.String,", "methodClass": "java.net.URLConnection", "methodName": "getDefaultRequestProperty", "method": "String getDefaultRequestProperty(String)", "replacementComments": "/**\n* Returns the value of the default request property. Default request\n* properties are set for every connection.\n*\n* @param key the keyword by which the request is known (e.g., \"Accept\").\n* @return  the value of the default request property\n* for the specified key.\n*\n* @see java.net.URLConnection#getRequestProperty(java.lang.String)\n*\n* @deprecated The instance specific getRequestProperty method\n* should be used after an appropriate instance of URLConnection\n* is obtained.\n*\n* @see #setDefaultRequestProperty(java.lang.String, java.lang.String)\n*/\n"}, "iccTransmitApduBasicChannel": {"dirtyReplacement": "UiccProfile#iccTransmitApduBasicChannel(int, int, int, int, int, String, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "iccTransmitApduBasicChannel", "method": "void iccTransmitApduBasicChannel(int,int,int,int,int,String,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#iccTransmitApduBasicChannel}\n* @deprecated Please use\n* {@link UiccProfile#iccTransmitApduBasicChannel(int, int, int, int, int, String, Message)}\n* instead.\n*/\n"}, "requestVisibleBehind": {"dirtyReplacement": "onVisibleBehindCanceled()", "methodClass": "android.app.Activity", "methodName": "requestVisibleBehind", "method": "boolean requestVisibleBehind(boolean)", "replacementComments": "/**\n* Activities that want to remain visible behind a translucent activity above them must call\n* this method anytime between the start of {@link #onResume()} and the return from\n* {@link #onPause()}. If this call is successful then the activity will remain visible after\n* {@link #onPause()} is called, and is allowed to continue playing media in the background.\n*\n* <p>The actions of this call are reset each time that this activity is brought to the\n* front. That is, every time {@link #onResume()} is called the activity will be assumed\n* to not have requested visible behind. Therefore, if you want this activity to continue to\n* be visible in the background you must call this method again.\n*\n* <p>Only fullscreen opaque activities may make this call. I.e. this call is a nop\n* for dialog and translucent activities.\n*\n* <p>Under all circumstances, the activity must stop playing and release resources prior to or\n* within a call to {@link #onVisibleBehindCanceled()} or if this call returns false.\n*\n* <p>False will be returned any time this method is called between the return of onPause and\n* the next call to onResume.\n*\n* @deprecated This method's functionality is no longer supported as of\n* {@link android.os.Build.VERSION_CODES#O} and will be removed in a future release.\n*\n* @param visible true to notify the system that the activity wishes to be visible behind other\n* translucent activities, false to indicate otherwise. Resources must be\n* released when passing false to this method.\n*\n* @return the resulting visibiity state. If true the activity will remain visible beyond\n* {@link #onPause()} if the next activity is translucent or not fullscreen. If false\n* then the activity may not count on being visible behind other translucent activities,\n* and must stop any media playback and release resources.\n* Returning false may occur in lieu of a call to {@link #onVisibleBehindCanceled()} so\n* the return value must be checked.\n*\n* @see #onVisibleBehindCanceled()\n*/\n"}, "writeRepeatedFixed32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedFixed32", "method": "void writeRepeatedFixed32(long,int)", "replacementComments": "/**\n* Write a single repeated proto \"fixed32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "getDefault": {"dirtyReplacement": "ActivityManager.getService", "methodClass": "android.app.ActivityManagerNative", "methodName": "getDefault", "method": "IActivityManager getDefault()", "replacementComments": "/**\n* Retrieve the system's default/global activity manager.\n*\n* @deprecated use ActivityManager.getService instead.\n*/\n"}, "instantScrollToPosition": {"dirtyReplacement": "Action#jumpTo(int)", "methodClass": "com.android.internal.widget.RecyclerView.SmoothScroller", "methodName": "instantScrollToPosition", "method": "void instantScrollToPosition(int)", "replacementComments": "/**\n* @see RecyclerView#scrollToPosition(int)\n* @deprecated Use {@link Action#jumpTo(int)}.\n*/\n"}, "setProvisionedValue": {"dirtyReplacement": "setConfig(int, int)", "methodClass": "com.android.ims.ImsConfig", "methodName": "setProvisionedValue", "method": "int setProvisionedValue(int,int)", "replacementComments": "/**\n* @deprecated see {@link #setConfig(int, int)} instead.\n*/\n"}, "getIntent": {"dirtyReplacement": "parseUri", "methodClass": "android.content.Intent", "methodName": "getIntent", "method": "Intent getIntent(String)", "replacementComments": "/**\n* Call {@link #parseUri} with 0 flags.\n* @deprecated Use {@link #parseUri} instead.\n*/\n"}, "isHardwareDetected": {"dirtyReplacement": "BiometricPrompt", "methodClass": "android.hardware.fingerprint.FingerprintManager", "methodName": "isHardwareDetected", "method": "boolean isHardwareDetected()", "replacementComments": "/**\n* Determine if fingerprint hardware is present and functional.\n*\n* @return true if hardware is present and functional, false otherwise.\n* @deprecated See {@link BiometricPrompt} and\n* {@link FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE}\n*/\n"}, "startLeScan": {"dirtyReplacement": "BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)", "methodClass": "android.bluetooth.BluetoothAdapter", "methodName": "startLeScan", "method": "boolean startLeScan(UUID[],LeScanCallback)", "replacementComments": "/**\n* Starts a scan for Bluetooth LE devices, looking for devices that\n* advertise given services.\n*\n* <p>Devices which advertise all specified services are reported using the\n* {@link LeScanCallback#onLeScan} callback.\n*\n* @param serviceUuids Array of services to look for\n* @param callback the callback LE scan results are delivered\n* @return true, if the scan was started successfully\n* @deprecated use {@link BluetoothLeScanner#startScan(List, ScanSettings, ScanCallback)}\n* instead.\n*/\n"}, "getIndexOnSim": {"dirtyReplacement": "getIndexOnIcc", "methodClass": "android.telephony.SmsMessage", "methodName": "getIndexOnSim", "method": "int getIndexOnSim()", "replacementComments": "/**\n* Returns the record index of the message on the SIM (1-based index).\n* @return the record index of the message on the SIM, or -1 if this\n* SmsMessage was not created from a SIM SMS EF record.\n* @deprecated Use getIndexOnIcc instead.\n*/\n"}, "onSendTextSms": {"dirtyReplacement": "onSendTextSms", "methodClass": "android.service.carrier.CarrierMessagingService", "methodName": "onSendTextSms", "method": "void onSendTextSms(String,int,String,ResultCallback<SendSmsResult>)", "replacementComments": "/**\n* Override this method to intercept text SMSs sent from the device.\n* @deprecated Override {@link #onSendTextSms} below instead.\n*\n* @param text the text to send\n* @param subId SMS subscription ID of the SIM\n* @param destAddress phone number of the recipient of the message\n* @param callback result callback. Call with a {@link SendSmsResult}.\n*/\n"}, "removeOnRoutingChangedListener": {"dirtyReplacement": "AudioRouting.OnRoutingChangedListener", "methodClass": "android.media.AudioRecord", "methodName": "removeOnRoutingChangedListener", "method": "void removeOnRoutingChangedListener(OnRoutingChangedListener)", "replacementComments": "/**\n* Removes an {@link OnRoutingChangedListener} which has been previously added\n* to receive rerouting notifications.\n* @param listener The previously added {@link OnRoutingChangedListener} interface to remove.\n* @deprecated users should switch to the general purpose\n* {@link AudioRouting.OnRoutingChangedListener} class instead.\n*/\n"}, "isOverScrolled": {"dirtyReplacement": "OverScroller#isOverScrolled()", "methodClass": "androidx.core.widget.ScrollerCompat", "methodName": "isOverScrolled", "method": "boolean isOverScrolled()", "replacementComments": "/**\n* Returns whether the current Scroller is currently returning to a valid position.\n* Valid bounds were provided by the\n* {@link #fling(int, int, int, int, int, int, int, int, int, int)} method.\n*\n* One should check this value before calling\n* {@link #startScroll(int, int, int, int)} as the interpolation currently in progress\n* to restore a valid position will then be stopped. The caller has to take into account\n* the fact that the started scroll will start from an overscrolled position.\n*\n* @return true when the current position is overscrolled and in the process of\n* interpolating back to a valid value.\n*\n* @deprecated Use {@link OverScroller#isOverScrolled()} directly.\n*/\n"}, "isFloat": {"dirtyReplacement": "getType(int, int)", "methodClass": "android.database.CursorWindow", "methodName": "isFloat", "method": "boolean isFloat(int,int)", "replacementComments": "/**\n* Returns true if the field at the specified row and column index\n* has type {@link Cursor#FIELD_TYPE_FLOAT}.\n*\n* @param row The zero-based row index.\n* @param column The zero-based column index.\n* @return True if the field has type {@link Cursor#FIELD_TYPE_FLOAT}.\n* @deprecated Use {@link #getType(int, int)} instead.\n*/\n"}, "isInLockTaskMode": {"dirtyReplacement": "getLockTaskModeState", "methodClass": "android.app.ActivityManager", "methodName": "isInLockTaskMode", "method": "boolean isInLockTaskMode()", "replacementComments": "/**\n* Return whether currently in lock task mode.  When in this mode\n* no new tasks can be created or switched to.\n*\n* @see Activity#startLockTask()\n*\n* @deprecated Use {@link #getLockTaskModeState} instead.\n*/\n"}, "writePackedEnum": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedEnum", "method": "void writePackedEnum(long,int[])", "replacementComments": "/**\n* Write a list of packed proto enum type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "logrb": {"dirtyReplacement": "logrb(java.util.logging.Level, java.lang.String,  java.lang.String, java.util.ResourceBundle, java.lang.String,  java.lang.Object...)", "methodClass": "java.util.logging.Logger", "methodName": "logrb", "method": "void logrb(Level,String,String,String,String,Object[])", "replacementComments": "/**\n* Log a message, specifying source class, method, and resource bundle name,\n* with an array of object arguments.\n* <p>\n* If the logger is currently enabled for the given message\n* level then a corresponding LogRecord is created and forwarded\n* to all the registered output Handler objects.\n* <p>\n* The msg string is localized using the named resource bundle.  If the\n* resource bundle name is null, or an empty String or invalid\n* then the msg string is not localized.\n* <p>\n* @param   level   One of the message level identifiers, e.g., SEVERE\n* @param   sourceClass    name of class that issued the logging request\n* @param   sourceMethod   name of method that issued the logging request\n* @param   bundleName     name of resource bundle to localize msg,\n* can be null.\n* @param   msg     The string message (or a key in the message catalog)\n* @param   params  Array of parameters to the message\n* @deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,\n* java.lang.String, java.util.ResourceBundle, java.lang.String,\n* java.lang.Object...)} instead.\n*/\n"}, "<init>": {"dirtyReplacement": "android.app.LoaderManager", "methodClass": "androidx.cursoradapter.widget.SimpleCursorAdapter", "methodName": "<init>", "method": "void <init>(Context,int,Cursor,String[],int[])", "replacementComments": "/**\n* Constructor the enables auto-requery.\n*\n* @deprecated This option is discouraged, as it results in Cursor queries\n* being performed on the application's UI thread and thus can cause poor\n* responsiveness or even Application Not Responding errors.  As an alternative,\n* use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.\n*/\n"}, "cancelSync": {"dirtyReplacement": "cancelSync(android.accounts.Account, String)", "methodClass": "android.content.ContentResolver", "methodName": "cancelSync", "method": "void cancelSync(Uri)", "replacementComments": "/**\n* Cancel any active or pending syncs that match the Uri. If the uri is null then\n* all syncs will be canceled.\n*\n* @param uri the uri of the provider to sync or null to sync all providers.\n* @deprecated instead use {@link #cancelSync(android.accounts.Account, String)}\n*/\n"}, "getRemovedCount": {"dirtyReplacement": "AccessibilityRecord#getRemovedCount()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getRemovedCount", "method": "int getRemovedCount()", "replacementComments": "/**\n* Gets the number of removed characters.\n*\n* @return The number of removed characters.\n*\n* @deprecated Use {@link AccessibilityRecord#getRemovedCount()} directly.\n*/\n"}, "removeNmeaListener": {"dirtyReplacement": "removeNmeaListener(OnNmeaMessageListener)", "methodClass": "android.location.LocationManager", "methodName": "removeNmeaListener", "method": "void removeNmeaListener(NmeaListener)", "replacementComments": "/**\n* Removes an NMEA listener.\n*\n* @param listener a {@link GpsStatus.NmeaListener} object to remove\n* @deprecated use {@link #removeNmeaListener(OnNmeaMessageListener)} instead.\n*/\n"}, "getScrollY": {"dirtyReplacement": "AccessibilityRecord#getScrollY()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getScrollY", "method": "int getScrollY()", "replacementComments": "/**\n* Gets the scroll offset of the source top edge in pixels.\n*\n* @return The scroll.\n*\n* @deprecated Use {@link AccessibilityRecord#getScrollY()} directly.\n*/\n"}, "getScrollX": {"dirtyReplacement": "AccessibilityRecord#getScrollX()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getScrollX", "method": "int getScrollX()", "replacementComments": "/**\n* Gets the scroll offset of the source left edge in pixels.\n*\n* @return The scroll.\n*\n* @deprecated Use {@link AccessibilityRecord#getScrollX()} directly.\n*/\n"}, "getDefaultLanguage": {"dirtyReplacement": "getDefaultVoice()", "methodClass": "android.speech.tts.TextToSpeech", "methodName": "getDefaultLanguage", "method": "Locale getDefaultLanguage()", "replacementComments": "/**\n* Returns a Locale instance describing the language currently being used as the default\n* Text-to-speech language.\n*\n* The locale object returned by this method is NOT a valid one. It has identical form to the\n* one in {@link #getLanguage()}. Please refer to {@link #getLanguage()} for more information.\n*\n* @return language, country (if any) and variant (if any) used by the client stored in a\n* Locale instance, or {@code null} on error.\n* @deprecated As of API level 21, use <code>getDefaultVoice().getLocale()</code> ({@link\n* #getDefaultVoice()})\n*/\n"}, "willNotCacheDrawing": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "willNotCacheDrawing", "method": "boolean willNotCacheDrawing()", "replacementComments": "/**\n* Returns whether or not this View can cache its drawing or not.\n*\n* @return true if this view does not cache its drawing, false otherwise\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "setQuickScaleEnabled": {"dirtyReplacement": "setQuickScaleEnabled(ScaleGestureDetector, boolean)", "methodClass": "androidx.core.view.ScaleGestureDetectorCompat", "methodName": "setQuickScaleEnabled", "method": "void setQuickScaleEnabled(Object,boolean)", "replacementComments": "/**\n* Sets whether the associated {@link ScaleGestureDetector.OnScaleGestureListener} should\n* receive onScale callbacks when the user performs a doubleTap followed by a swipe. Note that\n* this is enabled by default if the app targets API 19 and newer.\n*\n* @param enabled true to enable quick scaling, false to disable\n*\n* @deprecated Use {@link #setQuickScaleEnabled(ScaleGestureDetector, boolean)} that takes\n* {@link ScaleGestureDetector} instead of {@link Object}.\n*/\n"}, "getScrollBarSize": {"dirtyReplacement": "getScaledScrollBarSize()", "methodClass": "android.view.ViewConfiguration", "methodName": "getScrollBarSize", "method": "int getScrollBarSize()", "replacementComments": "/**\n* @return The width of the horizontal scrollbar and the height of the vertical\n* scrollbar in dips\n*\n* @deprecated Use {@link #getScaledScrollBarSize()} instead.\n*/\n"}, "getMcc": {"dirtyReplacement": "getMccString", "methodClass": "android.telephony.CellIdentityLte", "methodName": "getMcc", "method": "int getMcc()", "replacementComments": "/**\n* @return 3-digit Mobile Country Code, 0..999, Integer.MAX_VALUE if unknown\n* @deprecated Use {@link #getMccString} instead.\n*/\n"}, "requestRestore": {"dirtyReplacement": "android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()", "methodClass": "android.app.backup.BackupManager", "methodName": "requestRestore", "method": "int requestRestore(RestoreObserver)", "replacementComments": "/**\n* @deprecated Applications shouldn't request a restore operation using this method. In Android\n* P and later, this method is a no-op.\n*\n* <p>Restore the calling application from backup. The data will be restored from the\n* current backup dataset if the application has stored data there, or from\n* the dataset used during the last full device setup operation if the current\n* backup dataset has no matching data.  If no backup data exists for this application\n* in either source, a non-zero value is returned.\n*\n* <p>If this method returns zero (meaning success), the OS attempts to retrieve a backed-up\n* dataset from the remote transport, instantiate the application's backup agent, and pass the\n* dataset to the agent's\n* {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}\n* method.\n*\n* <p class=\"caution\">Unlike other restore operations, this method doesn't terminate the\n* application after the restore. The application continues running to receive the\n* {@link RestoreObserver} callbacks on the {@code observer} argument. Full backups use an\n* {@link android.app.Application Application} base class while key-value backups use the\n* application subclass declared in the AndroidManifest.xml {@code <application>} tag.\n*\n* @param observer The {@link RestoreObserver} to receive callbacks during the restore\n* operation. This must not be null.\n*\n* @return Zero on success; nonzero on error.\n*/\n"}, "writePackedSFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writePackedSFixed64", "method": "void writePackedSFixed64(long,long[])", "replacementComments": "/**\n* Write a list of packed proto \"sfixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setSupplementalIcon": {"dirtyReplacement": "setSupplementalIcon(Drawable, boolean)", "methodClass": "androidx.car.widget.SeekbarListItem", "methodName": "setSupplementalIcon", "method": "void setSupplementalIcon(Drawable,boolean,OnClickListener)", "replacementComments": "/**\n* Sets {@code Supplemental Action} to be represented by an {@code Supplemental Icon}.\n*\n* @deprecated use either {@link #setSupplementalIcon(Drawable, boolean)} or\n* {@link #setSupplementalIcon(int, boolean)} and\n* {@link #setSupplementalIconListener(android.view.View.OnClickListener)}.\n*/\n"}, "writeRepeatedFloat": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedFloat", "method": "void writeRepeatedFloat(long,float)", "replacementComments": "/**\n* Write a single repeated proto \"float\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onGetInstantAppIntentFilter": {"dirtyReplacement": "onGetInstantAppIntentFilter(Intent, int[], String,  InstantAppResolutionCallback)", "methodClass": "android.app.InstantAppResolverService", "methodName": "onGetInstantAppIntentFilter", "method": "void onGetInstantAppIntentFilter(int[],String,InstantAppResolutionCallback)", "replacementComments": "/**\n* Called to retrieve intent filters for instant applications from potentially expensive\n* sources.\n*\n* @param digestPrefix The hash prefix of the instant app's domain.\n* @deprecated should implement {@link #onGetInstantAppIntentFilter(Intent, int[], String,\n* InstantAppResolutionCallback)}\n*/\n"}, "encodeCustomImProtocol": {"dirtyReplacement": "android.provider.ContactsContract", "methodClass": "android.provider.Contacts.ContactMethods", "methodName": "encodeCustomImProtocol", "method": "String encodeCustomImProtocol(String)", "replacementComments": "/**\n* @deprecated see {@link android.provider.ContactsContract}\n*/\n"}, "setSource": {"dirtyReplacement": "setSource(AccessibilityRecord, View, int)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setSource", "method": "void setSource(View,int)", "replacementComments": "/**\n* Sets the source to be a virtual descendant of the given <code>root</code>.\n* If <code>virtualDescendantId</code> equals to {@link View#NO_ID} the root\n* is set as the source.\n* <p>\n* A virtual descendant is an imaginary View that is reported as a part of the view\n* hierarchy for accessibility purposes. This enables custom views that draw complex\n* content to report them selves as a tree of virtual views, thus conveying their\n* logical structure.\n* </p>\n*\n* @param root The root of the virtual subtree.\n* @param virtualDescendantId The id of the virtual descendant.\n*\n* @deprecated Use {@link #setSource(AccessibilityRecord, View, int)} instead.\n*/\n"}, "getCarrierCycles": {"dirtyReplacement": "getAccumulatedDeltaRangeMeters()", "methodClass": "android.location.GnssMeasurement", "methodName": "getCarrierCycles", "method": "long getCarrierCycles()", "replacementComments": "/**\n* The number of full carrier cycles between the satellite and the receiver.\n*\n* <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.\n*\n* <p>The value is only available if {@link #hasCarrierCycles()} is {@code true}.\n*\n* @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.\n*/\n"}, "countStackFrames": {"dirtyReplacement": "suspend", "methodClass": "java.lang.Thread", "methodName": "countStackFrames", "method": "int countStackFrames()", "replacementComments": "/**\n* Counts the number of stack frames in this thread. The thread must\n* be suspended.\n*\n* @return     the number of stack frames in this thread.\n* @exception  IllegalThreadStateException  if this thread is not\n* suspended.\n* @deprecated The definition of this call depends on {@link #suspend},\n* which is deprecated.  Further, the results of this call\n* were never well-defined.\n*/\n"}, "getPrompt": {"dirtyReplacement": "getVoicePrompt()", "methodClass": "android.service.voice.VoiceInteractionSession.ConfirmationRequest", "methodName": "getPrompt", "method": "CharSequence getPrompt()", "replacementComments": "/**\n* Return the prompt informing the user of what will happen, as per\n* {@link android.app.VoiceInteractor.ConfirmationRequest\n* VoiceInteractor.ConfirmationRequest}.\n* @deprecated Prefer {@link #getVoicePrompt()} which allows multiple voice prompts.\n*/\n"}, "setControlsRowPresenter": {"dirtyReplacement": "setPlaybackRowPresenter(PlaybackRowPresenter)", "methodClass": "androidx.leanback.media.PlaybackControlGlue", "methodName": "setControlsRowPresenter", "method": "void setControlsRowPresenter(PlaybackControlsRowPresenter)", "replacementComments": "/**\n* Sets the controls row Presenter to be managed by the glue layer.\n* @deprecated PlaybackControlGlue supports any PlaybackRowPresenter, use\n* {@link #setPlaybackRowPresenter(PlaybackRowPresenter)}.\n*/\n"}, "getHeight": {"dirtyReplacement": "getSize(Point)", "methodClass": "android.view.Display", "methodName": "getHeight", "method": "int getHeight()", "replacementComments": "/**\n* @deprecated Use {@link #getSize(Point)} instead.\n*/\n"}, "onPasswordChanged": {"dirtyReplacement": "onPasswordChanged(Context, Intent, UserHandle)", "methodClass": "android.app.admin.DeviceAdminReceiver", "methodName": "onPasswordChanged", "method": "void onPasswordChanged(Context,Intent)", "replacementComments": "/**\n* Called after the user has changed their device or profile challenge password, as a result of\n* receiving {@link #ACTION_PASSWORD_CHANGED}.  At this point you\n* can use {@link DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}\n* to retrieve the active password characteristics.\n* @param context The running context as per {@link #onReceive}.\n* @param intent The received intent as per {@link #onReceive}.\n*\n* @deprecated From {@link android.os.Build.VERSION_CODES#O}, use\n* {@link #onPasswordChanged(Context, Intent, UserHandle)} instead.\n*/\n"}, "hideSoftInputFromInputMethod": {"dirtyReplacement": "InputMethodService#requestHideSelf(int)", "methodClass": "android.view.inputmethod.InputMethodManager", "methodName": "hideSoftInputFromInputMethod", "method": "void hideSoftInputFromInputMethod(IBinder,int)", "replacementComments": "/**\n* Close/hide the input method's soft input area, so the user no longer\n* sees it or can interact with it.  This can only be called\n* from the currently active input method, as validated by the given token.\n*\n* @param token Supplies the identifying token given to an input method\n* when it was started, which allows it to perform this operation on\n* itself.\n* @param flags Provides additional operating flags.  Currently may be\n* 0 or have the {@link #HIDE_IMPLICIT_ONLY},\n* {@link #HIDE_NOT_ALWAYS} bit set.\n* @deprecated Use {@link InputMethodService#requestHideSelf(int)} instead. This method was\n* intended for IME developers who should be accessing APIs through the service. APIs in this\n* class are intended for app developers interacting with the IME.\n*/\n"}, "writeFloat": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeFloat", "method": "void writeFloat(long,float)", "replacementComments": "/**\n* Write a single proto \"float\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "setAlpha": {"dirtyReplacement": "View#setAlpha(float)", "methodClass": "androidx.core.view.ViewCompat", "methodName": "setAlpha", "method": "void setAlpha(View,float)", "replacementComments": "/**\n* <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is\n* completely transparent and 1 means the view is completely opaque.</p>\n*\n* <p> Note that setting alpha to a translucent value (0 < alpha < 1) can have significant\n* performance implications, especially for large views. It is best to use the alpha property\n* sparingly and transiently, as in the case of fading animations.</p>\n*\n* @param value The opacity of the view.\n*\n* @deprecated Use {@link View#setAlpha(float)} directly.\n*/\n"}, "getCodecInfoAt": {"dirtyReplacement": "getCodecInfos", "methodClass": "android.media.MediaCodecList", "methodName": "getCodecInfoAt", "method": "MediaCodecInfo getCodecInfoAt(int)", "replacementComments": "/**\n* Return the {@link MediaCodecInfo} object for the codec at\n* the given {@code index} in the regular list.\n*\n* @deprecated Use {@link #getCodecInfos} instead.\n*\n* @see #REGULAR_CODECS\n*/\n"}, "getHorizontalMargin": {"dirtyReplacement": "getHorizontalSpacing()", "methodClass": "androidx.leanback.widget.BaseGridView", "methodName": "getHorizontalMargin", "method": "int getHorizontalMargin()", "replacementComments": "/**\n* Returns the spacing in pixels between two child items horizontally.\n* @deprecated Use {@link #getHorizontalSpacing()}\n*/\n"}, "getRootAdapter": {"dirtyReplacement": "getDrawerController", "methodClass": "androidx.car.drawer.CarDrawerActivity", "methodName": "getRootAdapter", "method": "CarDrawerAdapter getRootAdapter()", "replacementComments": "/**\n* @return Adapter for root content of the Drawer.\n* @deprecated Do not implement this, instead call {@link #getDrawerController}.\n* {@link CarDrawerController#setRootAdapter(CarDrawerAdapter)} directly.\n*/\n"}, "iccOpenLogicalChannel": {"dirtyReplacement": "UiccProfile#iccOpenLogicalChannel(String, int, Message)", "methodClass": "com.android.internal.telephony.uicc.UiccCard", "methodName": "iccOpenLogicalChannel", "method": "void iccOpenLogicalChannel(String,int,Message)", "replacementComments": "/**\n* Exposes {@link CommandsInterface#iccOpenLogicalChannel}\n* @deprecated Please use\n* {@link UiccProfile#iccOpenLogicalChannel(String, int, Message)} instead.\n*/\n"}, "findViewHolderForPosition": {"dirtyReplacement": "findViewHolderForLayoutPosition(int)", "methodClass": "com.android.internal.widget.RecyclerView", "methodName": "findViewHolderForPosition", "method": "ViewHolder findViewHolderForPosition(int)", "replacementComments": "/**\n* @deprecated use {@link #findViewHolderForLayoutPosition(int)} or\n* {@link #findViewHolderForAdapterPosition(int)}\n*/\n"}, "draw": {"dirtyReplacement": "android.widget.Space", "methodClass": "androidx.legacy.widget.Space", "methodName": "draw", "method": "void draw(Canvas)", "replacementComments": "/**\n* Draw nothing.\n*\n* @param canvas an unused parameter.\n*\n* @deprecated Use framework {@link android.widget.Space} class instead.\n*/\n"}, "getPixelFormat": {"dirtyReplacement": "PixelFormat#RGBA_8888", "methodClass": "android.view.Display", "methodName": "getPixelFormat", "method": "int getPixelFormat()", "replacementComments": "/**\n* Gets the pixel format of the display.\n* @return One of the constants defined in {@link android.graphics.PixelFormat}.\n*\n* @deprecated This method is no longer supported.\n* The result is always {@link PixelFormat#RGBA_8888}.\n*/\n"}, "classLoaderDepth": {"dirtyReplacement": "checkPermission", "methodClass": "java.lang.SecurityManager", "methodName": "classLoaderDepth", "method": "int classLoaderDepth()", "replacementComments": "/**\n* @deprecated Use {@link #checkPermission} instead.\n*/\n"}, "getLogStream": {"dirtyReplacement": "{@code getLogWriter}", "methodClass": "java.sql.DriverManager", "methodName": "getLogStream", "method": "PrintStream getLogStream()", "replacementComments": "/**\n* Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code>\n* and all drivers.\n*\n* @return the logging/tracing PrintStream; if disabled, is <code>null</code>\n* @deprecated Use {@code getLogWriter} instead.\n* @see #setLogStream\n*/\n"}, "getDrawingCacheBackgroundColor": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.View", "methodName": "getDrawingCacheBackgroundColor", "method": "int getDrawingCacheBackgroundColor()", "replacementComments": "/**\n* @see #setDrawingCacheBackgroundColor(int)\n*\n* @return The background color to used for the drawing cache's bitmap\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "parseMonolithicPackage": {"dirtyReplacement": "parsePackage(File, int)", "methodClass": "android.content.pm.PackageParser", "methodName": "parseMonolithicPackage", "method": "Package parseMonolithicPackage(File,int)", "replacementComments": "/**\n* Parse the given APK file, treating it as as a single monolithic package.\n* <p>\n* Note that this <em>does not</em> perform signature verification; that\n* must be done separately in {@link #collectCertificates(Package, int)}.\n*\n* @deprecated external callers should move to\n* {@link #parsePackage(File, int)}. Eventually this method will\n* be marked private.\n*/\n"}, "isConnectedOrConnecting": {"dirtyReplacement": "android.net.ConnectivityManager.NetworkCallback", "methodClass": "android.net.NetworkInfo", "methodName": "isConnectedOrConnecting", "method": "boolean isConnectedOrConnecting()", "replacementComments": "/**\n* Indicates whether network connectivity exists or is in the process\n* of being established. This is good for applications that need to\n* do anything related to the network other than read or write data.\n* For the latter, call {@link #isConnected()} instead, which guarantees\n* that the network is fully usable.\n* @return {@code true} if network connectivity exists or is in the process\n* of being established, {@code false} otherwise.\n* @deprecated Apps should instead use the\n* {@link android.net.ConnectivityManager.NetworkCallback} API to\n* learn about connectivity changes.\n* {@link ConnectivityManager#registerDefaultNetworkCallback} and\n* {@link ConnectivityManager#registerNetworkCallback}. These will\n* give a more accurate picture of the connectivity state of\n* the device and let apps react more easily and quickly to changes.\n*/\n"}, "setParcelableData": {"dirtyReplacement": "AccessibilityRecord#setParcelableData(Parcelable)", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "setParcelableData", "method": "void setParcelableData(Parcelable)", "replacementComments": "/**\n* Sets the {@link Parcelable} data of the event.\n*\n* @param parcelableData The parcelable data.\n*\n* @throws IllegalStateException If called from an AccessibilityService.\n*\n* @deprecated Use {@link AccessibilityRecord#setParcelableData(Parcelable)} directly.\n*/\n"}, "onMeasure": {"dirtyReplacement": "android.widget.Space", "methodClass": "androidx.legacy.widget.Space", "methodName": "onMeasure", "method": "void onMeasure(int,int)", "replacementComments": "/**\n* @deprecated Use framework {@link android.widget.Space} class instead.\n*/\n"}, "drag": {"dirtyReplacement": "android.test.ActivityInstrumentationTestCase2", "methodClass": "android.test.TouchUtils", "methodName": "drag", "method": "void drag(ActivityInstrumentationTestCase,float,float,float,float,int)", "replacementComments": "/**\n* Simulate touching a specific location and dragging to a new location.\n*\n* @param test The test case that is being run\n* @param fromX X coordinate of the initial touch, in screen coordinates\n* @param toX Xcoordinate of the drag destination, in screen coordinates\n* @param fromY X coordinate of the initial touch, in screen coordinates\n* @param toY Y coordinate of the drag destination, in screen coordinates\n* @param stepCount How many move steps to include in the drag\n*\n* @deprecated {@link android.test.ActivityInstrumentationTestCase} is deprecated in favor of\n* {@link android.test.ActivityInstrumentationTestCase2}, which provides more options for\n* configuring the Activity under test\n*/\n"}, "onRestoreInstanceState": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "onRestoreInstanceState", "method": "void onRestoreInstanceState(Parcelable)", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "isFullScreen": {"dirtyReplacement": "AccessibilityRecord#isFullScreen()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "isFullScreen", "method": "boolean isFullScreen()", "replacementComments": "/**\n* Gets if the source is taking the entire screen.\n*\n* @return True if the source is full screen, false otherwise.\n*\n* @deprecated Use {@link AccessibilityRecord#isFullScreen()} directly.\n*/\n"}, "onSaveInstanceState": {"dirtyReplacement": "androidx.fragment.app.FragmentTabHost", "methodClass": "androidx.legacy.app.FragmentTabHost", "methodName": "onSaveInstanceState", "method": "Parcelable onSaveInstanceState()", "replacementComments": "/**\n* @deprecated Use {@link androidx.fragment.app.FragmentTabHost} instead.\n*/\n"}, "dispatchPictureInPictureModeChanged": {"dirtyReplacement": "dispatchPictureInPictureModeChanged(boolean, Configuration)", "methodClass": "android.app.FragmentController", "methodName": "dispatchPictureInPictureModeChanged", "method": "void dispatchPictureInPictureModeChanged(boolean)", "replacementComments": "/**\n* Lets all Fragments managed by the controller's FragmentManager know the picture-in-picture\n* mode of the activity changed.\n* <p>Call when the picture-in-picture mode of the activity changed.\n*\n* @see Fragment#onPictureInPictureModeChanged\n* @deprecated use {@link #dispatchPictureInPictureModeChanged(boolean, Configuration)}\n*/\n"}, "writeUInt32": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeUInt32", "method": "void writeUInt32(long,int)", "replacementComments": "/**\n* Write a single proto \"uint32\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "onError": {"dirtyReplacement": "onTuneFailed", "methodClass": "android.hardware.radio.RadioTuner.Callback", "methodName": "onError", "method": "void onError(int)", "replacementComments": "/**\n* onError() is called when an error occured while performing an asynchronous\n* operation of when the hardware or system service experiences a problem.\n* status is one of {@link #ERROR_HARDWARE_FAILURE}, {@link #ERROR_SERVER_DIED},\n* {@link #ERROR_CANCELLED}, {@link #ERROR_SCAN_TIMEOUT},\n* {@link #ERROR_CONFIG}\n*\n* @deprecated Use {@link onTuneFailed} for tune, scan and step;\n* other use cases (configuration, background scan) are already deprecated.\n*/\n"}, "noteAlarmFinish": {"dirtyReplacement": "ActivityManager.noteAlarmFinish", "methodClass": "android.app.ActivityManagerNative", "methodName": "noteAlarmFinish", "method": "void noteAlarmFinish(PendingIntent,int,String)", "replacementComments": "/**\n* @deprecated use ActivityManager.noteAlarmFinish instead.\n*/\n"}, "getSource": {"dirtyReplacement": "AccessibilityRecord#getSource()", "methodClass": "androidx.core.view.accessibility.AccessibilityRecordCompat", "methodName": "getSource", "method": "AccessibilityNodeInfoCompat getSource()", "replacementComments": "/**\n* Gets the {@link android.view.accessibility.AccessibilityNodeInfo} of\n* the event source.\n* <p>\n* <strong>Note:</strong> It is a client responsibility to recycle the\n* received info by calling\n* {@link android.view.accessibility.AccessibilityNodeInfo#recycle()\n* AccessibilityNodeInfo#recycle()} to avoid creating of multiple instances.\n* </p>\n*\n* @return The info of the source.\n*\n* @deprecated Use {@link AccessibilityRecord#getSource()} directly.\n*/\n"}, "writeRepeatedSFixed64": {"dirtyReplacement": "write", "methodClass": "android.util.proto.ProtoOutputStream", "methodName": "writeRepeatedSFixed64", "method": "void writeRepeatedSFixed64(long,long)", "replacementComments": "/**\n* Write a single repeated proto \"sfixed64\" type field value.\n*\n* @deprecated Use #write instead.\n*/\n"}, "sendStickyBroadcastAsUser": {"dirtyReplacement": "sendBroadcast(Intent)", "methodClass": "android.content.Context", "methodName": "sendStickyBroadcastAsUser", "method": "void sendStickyBroadcastAsUser(Intent,UserHandle)", "replacementComments": "/**\n* <p>Version of {@link #sendStickyBroadcast(Intent)} that allows you to specify the\n* user the broadcast will be sent to.  This is not available to applications\n* that are not pre-installed on the system image.\n*\n* @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n* can access them), no protection (anyone can modify them), and many other problems.\n* The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n* has changed, with another mechanism for apps to retrieve the current value whenever\n* desired.\n*\n* @param intent The Intent to broadcast; all receivers matching this\n* Intent will receive the broadcast, and the Intent will be held to\n* be re-broadcast to future receivers.\n* @param user UserHandle to send the intent to.\n*\n* @see #sendBroadcast(Intent)\n*/\n"}, "setChildrenDrawingCacheEnabled": {"dirtyReplacement": "setLayerType(int, Paint)", "methodClass": "android.view.ViewGroup", "methodName": "setChildrenDrawingCacheEnabled", "method": "void setChildrenDrawingCacheEnabled(boolean)", "replacementComments": "/**\n* Enables or disables the drawing cache for each child of this view group.\n*\n* @param enabled true to enable the cache, false to dispose of it\n*\n* @deprecated The view drawing cache was largely made obsolete with the introduction of\n* hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache\n* layers are largely unnecessary and can easily result in a net loss in performance due to the\n* cost of creating and updating the layer. In the rare cases where caching layers are useful,\n* such as for alpha animations, {@link #setLayerType(int, Paint)} handles this with hardware\n* rendering. For software-rendered snapshots of a small part of the View hierarchy or\n* individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or\n* {@link android.graphics.Picture} and call {@link #draw(Canvas)} on the View. However these\n* software-rendered usages are discouraged and have compatibility issues with hardware-only\n* rendering features such as {@link android.graphics.Bitmap.Config#HARDWARE Config.HARDWARE}\n* bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback\n* reports or unit testing the {@link PixelCopy} API is recommended.\n*/\n"}, "getHandle": {"dirtyReplacement": "getNativeHandle()", "methodClass": "android.opengl.EGLObjectHandle", "methodName": "getHandle", "method": "int getHandle()", "replacementComments": "/**\n* @deprecated Use {@link #getNativeHandle()} instead. Handles on\n* 64 bit platforms will be wider than java ints.\n*/\n"}}